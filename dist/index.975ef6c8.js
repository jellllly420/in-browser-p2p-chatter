// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"ShInH":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "890e741a975ef6c8";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id1][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"8lqZg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _vue = require("vue");
var _appVue = require("./App.vue");
var _appVueDefault = parcelHelpers.interopDefault(_appVue);
const app = (0, _vue.createApp)((0, _appVueDefault.default));
app.mount("#app");

},{"vue":"gzxs9","./App.vue":"fYNyc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gzxs9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compile", ()=>compile);
var _runtimeDom = require("@vue/runtime-dom");
parcelHelpers.exportAll(_runtimeDom, exports);
function initDev() {
    (0, _runtimeDom.initCustomFormatter)();
}
initDev();
const compile = ()=>{
    (0, _runtimeDom.warn)(`Runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
};

},{"@vue/runtime-dom":"9wNvI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9wNvI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transition", ()=>Transition);
parcelHelpers.export(exports, "TransitionGroup", ()=>TransitionGroup);
parcelHelpers.export(exports, "VueElement", ()=>VueElement);
parcelHelpers.export(exports, "createApp", ()=>createApp);
parcelHelpers.export(exports, "createSSRApp", ()=>createSSRApp);
parcelHelpers.export(exports, "defineCustomElement", ()=>defineCustomElement);
parcelHelpers.export(exports, "defineSSRCustomElement", ()=>defineSSRCustomElement);
parcelHelpers.export(exports, "hydrate", ()=>hydrate);
parcelHelpers.export(exports, "initDirectivesForSSR", ()=>initDirectivesForSSR);
parcelHelpers.export(exports, "render", ()=>render);
parcelHelpers.export(exports, "useCssModule", ()=>useCssModule);
parcelHelpers.export(exports, "useCssVars", ()=>useCssVars);
parcelHelpers.export(exports, "vModelCheckbox", ()=>vModelCheckbox);
parcelHelpers.export(exports, "vModelDynamic", ()=>vModelDynamic);
parcelHelpers.export(exports, "vModelRadio", ()=>vModelRadio);
parcelHelpers.export(exports, "vModelSelect", ()=>vModelSelect);
parcelHelpers.export(exports, "vModelText", ()=>vModelText);
parcelHelpers.export(exports, "vShow", ()=>vShow);
parcelHelpers.export(exports, "withKeys", ()=>withKeys);
parcelHelpers.export(exports, "withModifiers", ()=>withModifiers);
var _runtimeCore = require("@vue/runtime-core");
var _shared = require("@vue/shared");
parcelHelpers.exportAll(_runtimeCore, exports);
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /*#__PURE__*/ doc.createElement("template");
const nodeOps = {
    insert: (child, parent, anchor)=>{
        parent.insertBefore(child, anchor || null);
    },
    remove: (child)=>{
        const parent = child.parentNode;
        if (parent) parent.removeChild(child);
    },
    createElement: (tag, isSVG, is, props)=>{
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {
            is
        } : undefined);
        if (tag === "select" && props && props.multiple != null) el.setAttribute("multiple", props.multiple);
        return el;
    },
    createText: (text)=>doc.createTextNode(text),
    createComment: (text)=>doc.createComment(text),
    setText: (node, text)=>{
        node.nodeValue = text;
    },
    setElementText: (el, text)=>{
        el.textContent = text;
    },
    parentNode: (node)=>node.parentNode,
    nextSibling: (node)=>node.nextSibling,
    querySelector: (selector)=>doc.querySelector(selector),
    setScopeId (el, id) {
        el.setAttribute(id, "");
    },
    cloneNode (el) {
        const cloned = el.cloneNode(true);
        // #3072
        // - in `patchDOMProp`, we store the actual value in the `el._value` property.
        // - normally, elements using `:value` bindings will not be hoisted, but if
        //   the bound value is a constant, e.g. `:value="true"` - they do get
        //   hoisted.
        // - in production, hoisted nodes are cloned when subsequent inserts, but
        //   cloneNode() does not copy the custom property we attached.
        // - This may need to account for other custom DOM properties we attach to
        //   elements in addition to `_value` in the future.
        if (`_value` in el) cloned._value = el._value;
        return cloned;
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent (content, parent, anchor, isSVG, start, end) {
        // <parent> before | first ... last | anchor </parent>
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        // #5308 can only take cached path if:
        // - has a single root node
        // - nextSibling info is still available
        if (start && (start === end || start.nextSibling)) // cached
        while(true){
            parent.insertBefore(start.cloneNode(true), anchor);
            if (start === end || !(start = start.nextSibling)) break;
        }
        else {
            // fresh insert
            templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
            const template = templateContainer.content;
            if (isSVG) {
                // remove outer svg wrapper
                const wrapper = template.firstChild;
                while(wrapper.firstChild)template.appendChild(wrapper.firstChild);
                template.removeChild(wrapper);
            }
            parent.insertBefore(template, anchor);
        }
        return [
            // first
            before ? before.nextSibling : parent.firstChild,
            // last
            anchor ? anchor.previousSibling : parent.lastChild
        ];
    }
};
// compiler should normalize class + :class bindings on the same element
// into a single binding ['staticClass', dynamic]
function patchClass(el, value, isSVG) {
    // directly setting className should be faster than setAttribute in theory
    // if this is an element during a transition, take the temporary transition
    // classes into account.
    const transitionClasses = el._vtc;
    if (transitionClasses) value = (value ? [
        value,
        ...transitionClasses
    ] : [
        ...transitionClasses
    ]).join(" ");
    if (value == null) el.removeAttribute("class");
    else if (isSVG) el.setAttribute("class", value);
    else el.className = value;
}
function patchStyle(el, prev, next) {
    const style = el.style;
    const isCssString = (0, _shared.isString)(next);
    if (next && !isCssString) {
        for(const key in next)setStyle(style, key, next[key]);
        if (prev && !(0, _shared.isString)(prev)) {
            for(const key in prev)if (next[key] == null) setStyle(style, key, "");
        }
    } else {
        const currentDisplay = style.display;
        if (isCssString) {
            if (prev !== next) style.cssText = next;
        } else if (prev) el.removeAttribute("style");
        // indicates that the `display` of the element is controlled by `v-show`,
        // so we always keep the current `display` value regardless of the `style`
        // value, thus handing over control to `v-show`.
        if ("_vod" in el) style.display = currentDisplay;
    }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
    if ((0, _shared.isArray)(val)) val.forEach((v)=>setStyle(style, name, v));
    else {
        if (val == null) val = "";
        if (name.startsWith("--")) // custom property definition
        style.setProperty(name, val);
        else {
            const prefixed = autoPrefix(style, name);
            if (importantRE.test(val)) // !important
            style.setProperty((0, _shared.hyphenate)(prefixed), val.replace(importantRE, ""), "important");
            else style[prefixed] = val;
        }
    }
}
const prefixes = [
    "Webkit",
    "Moz",
    "ms"
];
const prefixCache = {};
function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) return cached;
    let name = (0, _runtimeCore.camelize)(rawName);
    if (name !== "filter" && name in style) return prefixCache[rawName] = name;
    name = (0, _shared.capitalize)(name);
    for(let i = 0; i < prefixes.length; i++){
        const prefixed = prefixes[i] + name;
        if (prefixed in style) return prefixCache[rawName] = prefixed;
    }
    return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance) {
    if (isSVG && key.startsWith("xlink:")) {
        if (value == null) el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        else el.setAttributeNS(xlinkNS, key, value);
    } else {
        // note we are only checking boolean attributes that don't have a
        // corresponding dom prop of the same name here.
        const isBoolean = (0, _shared.isSpecialBooleanAttr)(key);
        if (value == null || isBoolean && !(0, _shared.includeBooleanAttr)(value)) el.removeAttribute(key);
        else el.setAttribute(key, isBoolean ? "" : value);
    }
}
// __UNSAFE__
// functions. The user is responsible for using them with only trusted content.
function patchDOMProp(el, key, value, // the following args are passed only due to potential innerHTML/textContent
// overriding existing VNodes, in which case the old tree must be properly
// unmounted.
prevChildren, parentComponent, parentSuspense, unmountChildren) {
    if (key === "innerHTML" || key === "textContent") {
        if (prevChildren) unmountChildren(prevChildren, parentComponent, parentSuspense);
        el[key] = value == null ? "" : value;
        return;
    }
    if (key === "value" && el.tagName !== "PROGRESS" && // custom elements may use _value internally
    !el.tagName.includes("-")) {
        // store value as _value as well since
        // non-string values will be stringified.
        el._value = value;
        const newValue = value == null ? "" : value;
        if (el.value !== newValue || // #4956: always set for OPTION elements because its value falls back to
        // textContent if no value attribute is present. And setting .value for
        // OPTION has no side effect
        el.tagName === "OPTION") el.value = newValue;
        if (value == null) el.removeAttribute(key);
        return;
    }
    let needRemove = false;
    if (value === "" || value == null) {
        const type = typeof el[key];
        if (type === "boolean") // e.g. <select multiple> compiles to { multiple: '' }
        value = (0, _shared.includeBooleanAttr)(value);
        else if (value == null && type === "string") {
            // e.g. <div :id="null">
            value = "";
            needRemove = true;
        } else if (type === "number") {
            // e.g. <img :width="null">
            // the value of some IDL attr must be greater than 0, e.g. input.size = 0 -> error
            value = 0;
            needRemove = true;
        }
    }
    // some properties perform value validation and throw,
    // some properties has getter, no setter, will error in 'use strict'
    // eg. <select :type="null"></select> <select :willValidate="null"></select>
    try {
        el[key] = value;
    } catch (e) {
        (0, _runtimeCore.warn)(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: ` + `value ${value} is invalid.`, e);
    }
    needRemove && el.removeAttribute(key);
}
// Async edge case fix requires storing an event listener's attach timestamp.
const [_getNow, skipTimestampCheck] = /*#__PURE__*/ (()=>{
    let _getNow1 = Date.now;
    let skipTimestampCheck1 = false;
    if (typeof window !== "undefined") {
        // Determine what event timestamp the browser is using. Annoyingly, the
        // timestamp can either be hi-res (relative to page load) or low-res
        // (relative to UNIX epoch), so in order to compare time we have to use the
        // same timestamp type when saving the flush timestamp.
        if (Date.now() > document.createEvent("Event").timeStamp) // if the low-res timestamp which is bigger than the event timestamp
        // (which is evaluated AFTER) it means the event is using a hi-res timestamp,
        // and we need to use the hi-res version for event listeners as well.
        _getNow1 = performance.now.bind(performance);
        // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation
        // and does not fire microtasks in between event propagation, so safe to exclude.
        const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
        skipTimestampCheck1 = !!(ffMatch && Number(ffMatch[1]) <= 53);
    }
    return [
        _getNow1,
        skipTimestampCheck1
    ];
})();
// To avoid the overhead of repeatedly calling performance.now(), we cache
// and use the same timestamp for all event listeners attached in the same tick.
let cachedNow = 0;
const p = /*#__PURE__*/ Promise.resolve();
const reset = ()=>{
    cachedNow = 0;
};
const getNow = ()=>cachedNow || (p.then(reset), cachedNow = _getNow());
function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    // vei = vue event invokers
    const invokers = el._vei || (el._vei = {});
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) // patch
    existingInvoker.value = nextValue;
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            // add
            const invoker = invokers[rawName] = createInvoker(nextValue, instance);
            addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
            // remove
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = undefined;
        }
    }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {};
        let m;
        while(m = name.match(optionsModifierRE)){
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
        }
    }
    return [
        (0, _shared.hyphenate)(name.slice(2)),
        options
    ];
}
function createInvoker(initialValue, instance) {
    const invoker = (e)=>{
        // async edge case #6566: inner click event triggers patch, event handler
        // attached to outer element during patch, and triggered again. This
        // happens because browsers fire microtask ticks between event propagation.
        // the solution is simple: we save the timestamp when a handler is attached,
        // and the handler would only fire if the event passed to it was fired
        // AFTER it was attached.
        const timeStamp = e.timeStamp || _getNow();
        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) (0, _runtimeCore.callWithAsyncErrorHandling)(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */ , [
            e
        ]);
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
}
function patchStopImmediatePropagation(e1, value) {
    if ((0, _shared.isArray)(value)) {
        const originalStop = e1.stopImmediatePropagation;
        e1.stopImmediatePropagation = ()=>{
            originalStop.call(e1);
            e1._stopped = true;
        };
        return value.map((fn)=>(e)=>!e._stopped && fn && fn(e));
    } else return value;
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren)=>{
    if (key === "class") patchClass(el, nextValue, isSVG);
    else if (key === "style") patchStyle(el, prevValue, nextValue);
    else if ((0, _shared.isOn)(key)) // ignore v-model listeners
    {
        if (!(0, _shared.isModelListener)(key)) patchEvent(el, key, prevValue, nextValue, parentComponent);
    } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
    else {
        // special case for <input v-model type="checkbox"> with
        // :true-value & :false-value
        // store value as dom properties since non-string values will be
        // stringified.
        if (key === "true-value") el._trueValue = nextValue;
        else if (key === "false-value") el._falseValue = nextValue;
        patchAttr(el, key, nextValue, isSVG);
    }
};
function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
        // most keys must be set as attribute on svg elements to work
        // ...except innerHTML & textContent
        if (key === "innerHTML" || key === "textContent") return true;
        // or native onclick with function values
        if (key in el && nativeOnRE.test(key) && (0, _shared.isFunction)(value)) return true;
        return false;
    }
    // these are enumerated attrs, however their corresponding DOM properties
    // are actually booleans - this leads to setting it with a string "false"
    // value leading it to be coerced to `true`, so we need to always treat
    // them as attributes.
    // Note that `contentEditable` doesn't have this problem: its DOM
    // property is also enumerated string values.
    if (key === "spellcheck" || key === "draggable" || key === "translate") return false;
    // #1787, #2840 form property on form elements is readonly and must be set as
    // attribute.
    if (key === "form") return false;
    // #1526 <input list> must be set as attribute
    if (key === "list" && el.tagName === "INPUT") return false;
    // #2766 <textarea type> must be set as attribute
    if (key === "type" && el.tagName === "TEXTAREA") return false;
    // native onclick with string value, must be set as attribute
    if (nativeOnRE.test(key) && (0, _shared.isString)(value)) return false;
    return key in el;
}
function defineCustomElement(options, hydrate1) {
    const Comp = (0, _runtimeCore.defineComponent)(options);
    class VueCustomElement extends VueElement {
        constructor(initialProps){
            super(Comp, initialProps, hydrate1);
        }
    }
    VueCustomElement.def = Comp;
    return VueCustomElement;
}
const defineSSRCustomElement = (options)=>{
    // @ts-ignore
    return defineCustomElement(options, hydrate);
};
const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
class VueElement extends BaseClass {
    constructor(_def, _props = {}, hydrate2){
        super();
        this._def = _def;
        this._props = _props;
        /**
         * @internal
         */ this._instance = null;
        this._connected = false;
        this._resolved = false;
        this._numberProps = null;
        if (this.shadowRoot && hydrate2) hydrate2(this._createVNode(), this.shadowRoot);
        else {
            if (this.shadowRoot) (0, _runtimeCore.warn)(`Custom element has pre-rendered declarative shadow root but is not ` + `defined as hydratable. Use \`defineSSRCustomElement\`.`);
            this.attachShadow({
                mode: "open"
            });
        }
    }
    connectedCallback() {
        this._connected = true;
        if (!this._instance) this._resolveDef();
    }
    disconnectedCallback() {
        this._connected = false;
        (0, _runtimeCore.nextTick)(()=>{
            if (!this._connected) {
                render(null, this.shadowRoot);
                this._instance = null;
            }
        });
    }
    /**
     * resolve inner component definition (handle possible async component)
     */ _resolveDef() {
        if (this._resolved) return;
        this._resolved = true;
        // set initial attrs
        for(let i = 0; i < this.attributes.length; i++)this._setAttr(this.attributes[i].name);
        // watch future attr changes
        new MutationObserver((mutations)=>{
            for (const m of mutations)this._setAttr(m.attributeName);
        }).observe(this, {
            attributes: true
        });
        const resolve = (def)=>{
            const { props , styles  } = def;
            const hasOptions = !(0, _shared.isArray)(props);
            const rawKeys = props ? hasOptions ? Object.keys(props) : props : [];
            // cast Number-type props set before resolve
            let numberProps;
            if (hasOptions) for(const key in this._props){
                const opt = props[key];
                if (opt === Number || opt && opt.type === Number) {
                    this._props[key] = (0, _shared.toNumber)(this._props[key]);
                    (numberProps || (numberProps = Object.create(null)))[key] = true;
                }
            }
            this._numberProps = numberProps;
            // check if there are props set pre-upgrade or connect
            for (const key1 of Object.keys(this))if (key1[0] !== "_") this._setProp(key1, this[key1], true, false);
            // defining getter/setters on prototype
            for (const key2 of rawKeys.map((0, _shared.camelize)))Object.defineProperty(this, key2, {
                get () {
                    return this._getProp(key2);
                },
                set (val) {
                    this._setProp(key2, val);
                }
            });
            // apply CSS
            this._applyStyles(styles);
            // initial render
            this._update();
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) asyncDef().then(resolve);
        else resolve(this._def);
    }
    _setAttr(key) {
        let value = this.getAttribute(key);
        if (this._numberProps && this._numberProps[key]) value = (0, _shared.toNumber)(value);
        this._setProp((0, _shared.camelize)(key), value, false);
    }
    /**
     * @internal
     */ _getProp(key) {
        return this._props[key];
    }
    /**
     * @internal
     */ _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
        if (val !== this._props[key]) {
            this._props[key] = val;
            if (shouldUpdate && this._instance) this._update();
            // reflect
            if (shouldReflect) {
                if (val === true) this.setAttribute((0, _shared.hyphenate)(key), "");
                else if (typeof val === "string" || typeof val === "number") this.setAttribute((0, _shared.hyphenate)(key), val + "");
                else if (!val) this.removeAttribute((0, _shared.hyphenate)(key));
            }
        }
    }
    _update() {
        render(this._createVNode(), this.shadowRoot);
    }
    _createVNode() {
        const vnode = (0, _runtimeCore.createVNode)(this._def, (0, _shared.extend)({}, this._props));
        if (!this._instance) vnode.ce = (instance)=>{
            this._instance = instance;
            instance.isCE = true;
            instance.ceReload = (newStyles)=>{
                // always reset styles
                if (this._styles) {
                    this._styles.forEach((s)=>this.shadowRoot.removeChild(s));
                    this._styles.length = 0;
                }
                this._applyStyles(newStyles);
                // if this is an async component, ceReload is called from the inner
                // component so no need to reload the async wrapper
                if (!this._def.__asyncLoader) {
                    // reload
                    this._instance = null;
                    this._update();
                }
            };
            // intercept emit
            instance.emit = (event, ...args)=>{
                this.dispatchEvent(new CustomEvent(event, {
                    detail: args
                }));
            };
            // locate nearest Vue custom element parent for provide/inject
            let parent = this;
            while(parent = parent && (parent.parentNode || parent.host))if (parent instanceof VueElement) {
                instance.parent = parent._instance;
                break;
            }
        };
        return vnode;
    }
    _applyStyles(styles) {
        if (styles) styles.forEach((css)=>{
            const s = document.createElement("style");
            s.textContent = css;
            this.shadowRoot.appendChild(s);
            (this._styles || (this._styles = [])).push(s);
        });
    }
}
function useCssModule(name = "$style") {
    /* istanbul ignore else */ {
        const instance = (0, _runtimeCore.getCurrentInstance)();
        if (!instance) {
            (0, _runtimeCore.warn)(`useCssModule must be called inside setup()`);
            return 0, _shared.EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
            (0, _runtimeCore.warn)(`Current instance does not have CSS modules injected.`);
            return 0, _shared.EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
            (0, _runtimeCore.warn)(`Current instance does not have CSS module named "${name}".`);
            return 0, _shared.EMPTY_OBJ;
        }
        return mod;
    }
}
/**
 * Runtime helper for SFC's CSS variable injection feature.
 * @private
 */ function useCssVars(getter) {
    const instance = (0, _runtimeCore.getCurrentInstance)();
    /* istanbul ignore next */ if (!instance) {
        (0, _runtimeCore.warn)(`useCssVars is called without current active component instance.`);
        return;
    }
    const setVars = ()=>setVarsOnVNode(instance.subTree, getter(instance.proxy));
    (0, _runtimeCore.watchPostEffect)(setVars);
    (0, _runtimeCore.onMounted)(()=>{
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, {
            childList: true
        });
        (0, _runtimeCore.onUnmounted)(()=>ob.disconnect());
    });
}
function setVarsOnVNode(vnode, vars) {
    if (vnode.shapeFlag & 128 /* SUSPENSE */ ) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) suspense.effects.push(()=>{
            setVarsOnVNode(suspense.activeBranch, vars);
        });
    }
    // drill down HOCs until it's a non-component vnode
    while(vnode.component)vnode = vnode.component.subTree;
    if (vnode.shapeFlag & 1 /* ELEMENT */  && vnode.el) setVarsOnNode(vnode.el, vars);
    else if (vnode.type === (0, _runtimeCore.Fragment)) vnode.children.forEach((c)=>setVarsOnVNode(c, vars));
    else if (vnode.type === (0, _runtimeCore.Static)) {
        let { el , anchor  } = vnode;
        while(el){
            setVarsOnNode(el, vars);
            if (el === anchor) break;
            el = el.nextSibling;
        }
    }
}
function setVarsOnNode(el, vars) {
    if (el.nodeType === 1) {
        const style = el.style;
        for(const key in vars)style.setProperty(`--${key}`, vars[key]);
    }
}
const TRANSITION = "transition";
const ANIMATION = "animation";
// DOM Transition is a higher-order-component based on the platform-agnostic
// base Transition component, with DOM-specific logic.
const Transition = (props, { slots  })=>(0, _runtimeCore.h)((0, _runtimeCore.BaseTransition), resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
        type: Boolean,
        default: true
    },
    duration: [
        String,
        Number,
        Object
    ],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /*#__PURE__*/ (0, _shared.extend)({}, (0, _runtimeCore.BaseTransition).props, DOMTransitionPropsValidators);
/**
 * #3227 Incoming hooks may be merged into arrays when wrapping Transition
 * with custom HOCs.
 */ const callHook = (hook, args = [])=>{
    if ((0, _shared.isArray)(hook)) hook.forEach((h)=>h(...args));
    else if (hook) hook(...args);
};
/**
 * Check if a hook expects a callback (2nd arg), which means the user
 * intends to explicitly control the end of the transition.
 */ const hasExplicitCallback = (hook)=>{
    return hook ? (0, _shared.isArray)(hook) ? hook.some((h)=>h.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
    const baseProps = {};
    for(const key in rawProps)if (!(key in DOMTransitionPropsValidators)) baseProps[key] = rawProps[key];
    if (rawProps.css === false) return baseProps;
    const { name ="v" , type , duration , enterFromClass =`${name}-enter-from` , enterActiveClass =`${name}-enter-active` , enterToClass =`${name}-enter-to` , appearFromClass =enterFromClass , appearActiveClass =enterActiveClass , appearToClass =enterToClass , leaveFromClass =`${name}-leave-from` , leaveActiveClass =`${name}-leave-active` , leaveToClass =`${name}-leave-to`  } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const { onBeforeEnter , onEnter , onEnterCancelled , onLeave , onLeaveCancelled , onBeforeAppear =onBeforeEnter , onAppear =onEnter , onAppearCancelled =onEnterCancelled  } = baseProps;
    const finishEnter = (el, isAppear, done)=>{
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
    };
    const finishLeave = (el, done)=>{
        el._isLeaving = false;
        removeTransitionClass(el, leaveFromClass);
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
    };
    const makeEnterHook = (isAppear)=>{
        return (el, done)=>{
            const hook = isAppear ? onAppear : onEnter;
            const resolve = ()=>finishEnter(el, isAppear, done);
            callHook(hook, [
                el,
                resolve
            ]);
            nextFrame(()=>{
                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) whenTransitionEnds(el, type, enterDuration, resolve);
            });
        };
    };
    return (0, _shared.extend)(baseProps, {
        onBeforeEnter (el) {
            callHook(onBeforeEnter, [
                el
            ]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear (el) {
            callHook(onBeforeAppear, [
                el
            ]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave (el, done) {
            el._isLeaving = true;
            const resolve = ()=>finishLeave(el, done);
            addTransitionClass(el, leaveFromClass);
            // force reflow so *-leave-from classes immediately take effect (#2593)
            forceReflow();
            addTransitionClass(el, leaveActiveClass);
            nextFrame(()=>{
                if (!el._isLeaving) // cancelled
                return;
                removeTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveToClass);
                if (!hasExplicitCallback(onLeave)) whenTransitionEnds(el, type, leaveDuration, resolve);
            });
            callHook(onLeave, [
                el,
                resolve
            ]);
        },
        onEnterCancelled (el) {
            finishEnter(el, false);
            callHook(onEnterCancelled, [
                el
            ]);
        },
        onAppearCancelled (el) {
            finishEnter(el, true);
            callHook(onAppearCancelled, [
                el
            ]);
        },
        onLeaveCancelled (el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [
                el
            ]);
        }
    });
}
function normalizeDuration(duration) {
    if (duration == null) return null;
    else if ((0, _shared.isObject)(duration)) return [
        NumberOf(duration.enter),
        NumberOf(duration.leave)
    ];
    else {
        const n = NumberOf(duration);
        return [
            n,
            n
        ];
    }
}
function NumberOf(val) {
    const res = (0, _shared.toNumber)(val);
    validateDuration(res);
    return res;
}
function validateDuration(val) {
    if (typeof val !== "number") (0, _runtimeCore.warn)(`<transition> explicit duration is not a valid number - ` + `got ${JSON.stringify(val)}.`);
    else if (isNaN(val)) (0, _runtimeCore.warn)(`<transition> explicit duration is NaN - ` + "the duration expression might be incorrect.");
}
function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.add(c));
    (el._vtc || (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.remove(c));
    const { _vtc  } = el;
    if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) el._vtc = undefined;
    }
}
function nextFrame(cb) {
    requestAnimationFrame(()=>{
        requestAnimationFrame(cb);
    });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
    const id = el._endId = ++endId;
    const resolveIfNotStale = ()=>{
        if (id === el._endId) resolve();
    };
    if (explicitTimeout) return setTimeout(resolveIfNotStale, explicitTimeout);
    const { type , timeout , propCount  } = getTransitionInfo(el, expectedType);
    if (!type) return resolve();
    const endEvent = type + "end";
    let ended = 0;
    const end = ()=>{
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
    };
    const onEnd = (e)=>{
        if (e.target === el && ++ended >= propCount) end();
    };
    setTimeout(()=>{
        if (ended < propCount) end();
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    const getStyleProperties = (key)=>(styles[key] || "").split(", ");
    const transitionDelays = getStyleProperties(TRANSITION + "Delay");
    const transitionDurations = getStyleProperties(TRANSITION + "Duration");
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(ANIMATION + "Delay");
    const animationDurations = getStyleProperties(ANIMATION + "Duration");
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    /* istanbul ignore if */ if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
    return {
        type,
        timeout,
        propCount,
        hasTransform
    };
}
function getTimeout(delays, durations) {
    while(delays.length < durations.length)delays = delays.concat(delays);
    return Math.max(...durations.map((d, i)=>toMs(d) + toMs(delays[i])));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer
// numbers in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down
// (i.e. acting as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(",", ".")) * 1000;
}
// synchronously force layout to put elements into a certain state
function forceReflow() {
    return document.body.offsetHeight;
}
const positionMap = new WeakMap();
const newPositionMap = new WeakMap();
const TransitionGroupImpl = {
    name: "TransitionGroup",
    props: /*#__PURE__*/ (0, _shared.extend)({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
    }),
    setup (props, { slots  }) {
        const instance = (0, _runtimeCore.getCurrentInstance)();
        const state = (0, _runtimeCore.useTransitionState)();
        let prevChildren;
        let children;
        (0, _runtimeCore.onUpdated)(()=>{
            // children is guaranteed to exist after initial render
            if (!prevChildren.length) return;
            const moveClass = props.moveClass || `${props.name || "v"}-move`;
            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) return;
            // we divide the work into three loops to avoid mixing DOM reads and writes
            // in each iteration - which helps prevent layout thrashing.
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            // force reflow to put everything in position
            forceReflow();
            movedChildren.forEach((c)=>{
                const el = c.el;
                const style = el.style;
                addTransitionClass(el, moveClass);
                style.transform = style.webkitTransform = style.transitionDuration = "";
                const cb = el._moveCb = (e)=>{
                    if (e && e.target !== el) return;
                    if (!e || /transform$/.test(e.propertyName)) {
                        el.removeEventListener("transitionend", cb);
                        el._moveCb = null;
                        removeTransitionClass(el, moveClass);
                    }
                };
                el.addEventListener("transitionend", cb);
            });
        });
        return ()=>{
            const rawProps = (0, _runtimeCore.toRaw)(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || (0, _runtimeCore.Fragment);
            prevChildren = children;
            children = slots.default ? (0, _runtimeCore.getTransitionRawChildren)(slots.default()) : [];
            for(let i = 0; i < children.length; i++){
                const child = children[i];
                if (child.key != null) (0, _runtimeCore.setTransitionHooks)(child, (0, _runtimeCore.resolveTransitionHooks)(child, cssTransitionProps, state, instance));
                else (0, _runtimeCore.warn)(`<TransitionGroup> children must be keyed.`);
            }
            if (prevChildren) for(let i1 = 0; i1 < prevChildren.length; i1++){
                const child = prevChildren[i1];
                (0, _runtimeCore.setTransitionHooks)(child, (0, _runtimeCore.resolveTransitionHooks)(child, cssTransitionProps, state, instance));
                positionMap.set(child, child.el.getBoundingClientRect());
            }
            return (0, _runtimeCore.createVNode)(tag, null, children);
        };
    }
};
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
    const el = c.el;
    if (el._moveCb) el._moveCb();
    if (el._enterCb) el._enterCb();
}
function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = "0s";
        return c;
    }
}
function hasCSSTransform(el, root, moveClass) {
    // Detect whether an element with the move class applied has
    // CSS transitions. Since the element may be inside an entering
    // transition at this very moment, we make a clone of it and remove
    // all other transition classes applied to ensure only the move class
    // is applied.
    const clone = el.cloneNode();
    if (el._vtc) el._vtc.forEach((cls)=>{
        cls.split(/\s+/).forEach((c)=>c && clone.classList.remove(c));
    });
    moveClass.split(/\s+/).forEach((c)=>c && clone.classList.add(c));
    clone.style.display = "none";
    const container = root.nodeType === 1 ? root : root.parentNode;
    container.appendChild(clone);
    const { hasTransform  } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
}
const getModelAssigner = (vnode)=>{
    const fn = vnode.props["onUpdate:modelValue"] || false;
    return (0, _shared.isArray)(fn) ? (value)=>(0, _shared.invokeArrayFns)(fn, value) : fn;
};
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
        target.composing = false;
        target.dispatchEvent(new Event("input"));
    }
}
// We are exporting the v-model runtime directly as vnode hooks so that it can
// be tree-shaken in case v-model is never used.
const vModelText = {
    created (el, { modifiers: { lazy , trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || vnode.props && vnode.props.type === "number";
        addEventListener(el, lazy ? "change" : "input", (e)=>{
            if (e.target.composing) return;
            let domValue = el.value;
            if (trim) domValue = domValue.trim();
            if (castToNumber) domValue = (0, _shared.toNumber)(domValue);
            el._assign(domValue);
        });
        if (trim) addEventListener(el, "change", ()=>{
            el.value = el.value.trim();
        });
        if (!lazy) {
            addEventListener(el, "compositionstart", onCompositionStart);
            addEventListener(el, "compositionend", onCompositionEnd);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            addEventListener(el, "change", onCompositionEnd);
        }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted (el, { value  }) {
        el.value = value == null ? "" : value;
    },
    beforeUpdate (el, { value , modifiers: { lazy , trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        // avoid clearing unresolved text. #2302
        if (el.composing) return;
        if (document.activeElement === el && el.type !== "range") {
            if (lazy) return;
            if (trim && el.value.trim() === value) return;
            if ((number || el.type === "number") && (0, _shared.toNumber)(el.value) === value) return;
        }
        const newValue = value == null ? "" : value;
        if (el.value !== newValue) el.value = newValue;
    }
};
const vModelCheckbox = {
    // #4096 array checkboxes need to be deep traversed
    deep: true,
    created (el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", ()=>{
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el._assign;
            if ((0, _shared.isArray)(modelValue)) {
                const index = (0, _shared.looseIndexOf)(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) assign(modelValue.concat(elementValue));
                else if (!checked && found) {
                    const filtered = [
                        ...modelValue
                    ];
                    filtered.splice(index, 1);
                    assign(filtered);
                }
            } else if ((0, _shared.isSet)(modelValue)) {
                const cloned = new Set(modelValue);
                if (checked) cloned.add(elementValue);
                else cloned.delete(elementValue);
                assign(cloned);
            } else assign(getCheckboxValue(el, checked));
        });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate (el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
    }
};
function setChecked(el, { value , oldValue  }, vnode) {
    el._modelValue = value;
    if ((0, _shared.isArray)(value)) el.checked = (0, _shared.looseIndexOf)(value, vnode.props.value) > -1;
    else if ((0, _shared.isSet)(value)) el.checked = value.has(vnode.props.value);
    else if (value !== oldValue) el.checked = (0, _shared.looseEqual)(value, getCheckboxValue(el, true));
}
const vModelRadio = {
    created (el, { value  }, vnode) {
        el.checked = (0, _shared.looseEqual)(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", ()=>{
            el._assign(getValue(el));
        });
    },
    beforeUpdate (el, { value , oldValue  }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) el.checked = (0, _shared.looseEqual)(value, vnode.props.value);
    }
};
const vModelSelect = {
    // <select multiple> value need to be deep traversed
    deep: true,
    created (el, { value , modifiers: { number  }  }, vnode) {
        const isSetModel = (0, _shared.isSet)(value);
        addEventListener(el, "change", ()=>{
            const selectedVal = Array.prototype.filter.call(el.options, (o)=>o.selected).map((o)=>number ? (0, _shared.toNumber)(getValue(o)) : getValue(o));
            el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
    },
    // set value in mounted & updated because <select> relies on its children
    // <option>s.
    mounted (el, { value  }) {
        setSelected(el, value);
    },
    beforeUpdate (el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
    },
    updated (el, { value  }) {
        setSelected(el, value);
    }
};
function setSelected(el, value) {
    const isMultiple = el.multiple;
    if (isMultiple && !(0, _shared.isArray)(value) && !(0, _shared.isSet)(value)) {
        (0, _runtimeCore.warn)(`<select multiple v-model> expects an Array or Set value for its binding, ` + `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
        return;
    }
    for(let i = 0, l = el.options.length; i < l; i++){
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
            if ((0, _shared.isArray)(value)) option.selected = (0, _shared.looseIndexOf)(value, optionValue) > -1;
            else option.selected = value.has(optionValue);
        } else if ((0, _shared.looseEqual)(getValue(option), value)) {
            if (el.selectedIndex !== i) el.selectedIndex = i;
            return;
        }
    }
    if (!isMultiple && el.selectedIndex !== -1) el.selectedIndex = -1;
}
// retrieve raw value set via :value bindings
function getValue(el) {
    return "_value" in el ? el._value : el.value;
}
// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings
function getCheckboxValue(el, checked) {
    const key = checked ? "_trueValue" : "_falseValue";
    return key in el ? el[key] : checked;
}
const vModelDynamic = {
    created (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "created");
    },
    mounted (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "mounted");
    },
    beforeUpdate (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
    },
    updated (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "updated");
    }
};
function resolveDynamicModel(tagName, type) {
    switch(tagName){
        case "SELECT":
            return vModelSelect;
        case "TEXTAREA":
            return vModelText;
        default:
            switch(type){
                case "checkbox":
                    return vModelCheckbox;
                case "radio":
                    return vModelRadio;
                default:
                    return vModelText;
            }
    }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
    const modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);
    const fn = modelToUse[hook];
    fn && fn(el, binding, vnode, prevVNode);
}
// SSR vnode transforms, only used when user includes client-oriented render
// function in SSR
function initVModelForSSR() {
    vModelText.getSSRProps = ({ value  })=>({
            value
        });
    vModelRadio.getSSRProps = ({ value  }, vnode)=>{
        if (vnode.props && (0, _shared.looseEqual)(vnode.props.value, value)) return {
            checked: true
        };
    };
    vModelCheckbox.getSSRProps = ({ value  }, vnode)=>{
        if ((0, _shared.isArray)(value)) {
            if (vnode.props && (0, _shared.looseIndexOf)(value, vnode.props.value) > -1) return {
                checked: true
            };
        } else if ((0, _shared.isSet)(value)) {
            if (vnode.props && value.has(vnode.props.value)) return {
                checked: true
            };
        } else if (value) return {
            checked: true
        };
    };
    vModelDynamic.getSSRProps = (binding, vnode)=>{
        if (typeof vnode.type !== "string") return;
        const modelToUse = resolveDynamicModel(// resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
        vnode.type.toUpperCase(), vnode.props && vnode.props.type);
        if (modelToUse.getSSRProps) return modelToUse.getSSRProps(binding, vnode);
    };
}
const systemModifiers = [
    "ctrl",
    "shift",
    "alt",
    "meta"
];
const modifierGuards = {
    stop: (e)=>e.stopPropagation(),
    prevent: (e)=>e.preventDefault(),
    self: (e)=>e.target !== e.currentTarget,
    ctrl: (e)=>!e.ctrlKey,
    shift: (e)=>!e.shiftKey,
    alt: (e)=>!e.altKey,
    meta: (e)=>!e.metaKey,
    left: (e)=>"button" in e && e.button !== 0,
    middle: (e)=>"button" in e && e.button !== 1,
    right: (e)=>"button" in e && e.button !== 2,
    exact: (e, modifiers)=>systemModifiers.some((m)=>e[`${m}Key`] && !modifiers.includes(m))
};
/**
 * @private
 */ const withModifiers = (fn, modifiers)=>{
    return (event, ...args)=>{
        for(let i = 0; i < modifiers.length; i++){
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers)) return;
        }
        return fn(event, ...args);
    };
};
// Kept for 2.x compat.
// Note: IE11 compat for `spacebar` and `del` is removed for now.
const keyNames = {
    esc: "escape",
    space: " ",
    up: "arrow-up",
    left: "arrow-left",
    right: "arrow-right",
    down: "arrow-down",
    delete: "backspace"
};
/**
 * @private
 */ const withKeys = (fn, modifiers)=>{
    return (event)=>{
        if (!("key" in event)) return;
        const eventKey = (0, _shared.hyphenate)(event.key);
        if (modifiers.some((k)=>k === eventKey || keyNames[k] === eventKey)) return fn(event);
    };
};
const vShow = {
    beforeMount (el, { value  }, { transition  }) {
        el._vod = el.style.display === "none" ? "" : el.style.display;
        if (transition && value) transition.beforeEnter(el);
        else setDisplay(el, value);
    },
    mounted (el, { value  }, { transition  }) {
        if (transition && value) transition.enter(el);
    },
    updated (el, { value , oldValue  }, { transition  }) {
        if (!value === !oldValue) return;
        if (transition) {
            if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
            } else transition.leave(el, ()=>{
                setDisplay(el, false);
            });
        } else setDisplay(el, value);
    },
    beforeUnmount (el, { value  }) {
        setDisplay(el, value);
    }
};
function setDisplay(el, value) {
    el.style.display = value ? el._vod : "none";
}
// SSR vnode transforms, only used when user includes client-oriented render
// function in SSR
function initVShowForSSR() {
    vShow.getSSRProps = ({ value  })=>{
        if (!value) return {
            style: {
                display: "none"
            }
        };
    };
}
const rendererOptions = /*#__PURE__*/ (0, _shared.extend)({
    patchProp
}, nodeOps);
// lazy create the renderer - this makes core renderer logic tree-shakable
// in case the user only imports reactivity utilities from Vue.
let renderer;
let enabledHydration = false;
function ensureRenderer() {
    return renderer || (renderer = (0, _runtimeCore.createRenderer)(rendererOptions));
}
function ensureHydrationRenderer() {
    renderer = enabledHydration ? renderer : (0, _runtimeCore.createHydrationRenderer)(rendererOptions);
    enabledHydration = true;
    return renderer;
}
// use explicit type casts here to avoid import() calls in rolled-up d.ts
const render = (...args)=>{
    ensureRenderer().render(...args);
};
const hydrate = (...args)=>{
    ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args)=>{
    const app = ensureRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (!container) return;
        const component = app._component;
        if (!(0, _shared.isFunction)(component) && !component.render && !component.template) // __UNSAFE__
        // Reason: potential execution of JS expressions in in-DOM template.
        // The user must make sure the in-DOM template is trusted. If it's
        // rendered by the server, the template should not contain any user data.
        component.template = container.innerHTML;
        // clear content before mounting
        container.innerHTML = "";
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
            container.removeAttribute("v-cloak");
            container.setAttribute("data-v-app", "");
        }
        return proxy;
    };
    return app;
};
const createSSRApp = (...args)=>{
    const app = ensureHydrationRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (container) return mount(container, true, container instanceof SVGElement);
    };
    return app;
};
function injectNativeTagCheck(app) {
    // Inject `isNativeTag`
    // this is used for component name validation (dev only)
    Object.defineProperty(app.config, "isNativeTag", {
        value: (tag)=>(0, _shared.isHTMLTag)(tag) || (0, _shared.isSVGTag)(tag),
        writable: false
    });
}
// dev only
function injectCompilerOptionsCheck(app) {
    if ((0, _runtimeCore.isRuntimeOnly)()) {
        const isCustomElement = app.config.isCustomElement;
        Object.defineProperty(app.config, "isCustomElement", {
            get () {
                return isCustomElement;
            },
            set () {
                (0, _runtimeCore.warn)(`The \`isCustomElement\` config option is deprecated. Use ` + `\`compilerOptions.isCustomElement\` instead.`);
            }
        });
        const compilerOptions = app.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using ` + `a build of Vue.js that includes the runtime compiler (aka "full build"). ` + `Since you are using the runtime-only build, \`compilerOptions\` ` + `must be passed to \`@vue/compiler-dom\` in the build setup instead.\n` + `- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.\n` + `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n` + `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
        Object.defineProperty(app.config, "compilerOptions", {
            get () {
                (0, _runtimeCore.warn)(msg);
                return compilerOptions;
            },
            set () {
                (0, _runtimeCore.warn)(msg);
            }
        });
    }
}
function normalizeContainer(container) {
    if ((0, _shared.isString)(container)) {
        const res = document.querySelector(container);
        if (!res) (0, _runtimeCore.warn)(`Failed to mount app: mount target selector "${container}" returned null.`);
        return res;
    }
    if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") (0, _runtimeCore.warn)(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
    return container;
}
let ssrDirectiveInitialized = false;
/**
 * @internal
 */ const initDirectivesForSSR = ()=>{
    if (!ssrDirectiveInitialized) {
        ssrDirectiveInitialized = true;
        initVModelForSSR();
        initVShowForSSR();
    }
};

},{"@vue/runtime-core":"lmqBl","@vue/shared":"3SM3y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmqBl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EffectScope", ()=>(0, _reactivity.EffectScope));
parcelHelpers.export(exports, "ReactiveEffect", ()=>(0, _reactivity.ReactiveEffect));
parcelHelpers.export(exports, "customRef", ()=>(0, _reactivity.customRef));
parcelHelpers.export(exports, "effect", ()=>(0, _reactivity.effect));
parcelHelpers.export(exports, "effectScope", ()=>(0, _reactivity.effectScope));
parcelHelpers.export(exports, "getCurrentScope", ()=>(0, _reactivity.getCurrentScope));
parcelHelpers.export(exports, "isProxy", ()=>(0, _reactivity.isProxy));
parcelHelpers.export(exports, "isReactive", ()=>(0, _reactivity.isReactive));
parcelHelpers.export(exports, "isReadonly", ()=>(0, _reactivity.isReadonly));
parcelHelpers.export(exports, "isRef", ()=>(0, _reactivity.isRef));
parcelHelpers.export(exports, "isShallow", ()=>(0, _reactivity.isShallow));
parcelHelpers.export(exports, "markRaw", ()=>(0, _reactivity.markRaw));
parcelHelpers.export(exports, "onScopeDispose", ()=>(0, _reactivity.onScopeDispose));
parcelHelpers.export(exports, "proxyRefs", ()=>(0, _reactivity.proxyRefs));
parcelHelpers.export(exports, "reactive", ()=>(0, _reactivity.reactive));
parcelHelpers.export(exports, "readonly", ()=>(0, _reactivity.readonly));
parcelHelpers.export(exports, "ref", ()=>(0, _reactivity.ref));
parcelHelpers.export(exports, "shallowReactive", ()=>(0, _reactivity.shallowReactive));
parcelHelpers.export(exports, "shallowReadonly", ()=>(0, _reactivity.shallowReadonly));
parcelHelpers.export(exports, "shallowRef", ()=>(0, _reactivity.shallowRef));
parcelHelpers.export(exports, "stop", ()=>(0, _reactivity.stop));
parcelHelpers.export(exports, "toRaw", ()=>(0, _reactivity.toRaw));
parcelHelpers.export(exports, "toRef", ()=>(0, _reactivity.toRef));
parcelHelpers.export(exports, "toRefs", ()=>(0, _reactivity.toRefs));
parcelHelpers.export(exports, "triggerRef", ()=>(0, _reactivity.triggerRef));
parcelHelpers.export(exports, "unref", ()=>(0, _reactivity.unref));
parcelHelpers.export(exports, "camelize", ()=>(0, _shared.camelize));
parcelHelpers.export(exports, "capitalize", ()=>(0, _shared.capitalize));
parcelHelpers.export(exports, "normalizeClass", ()=>(0, _shared.normalizeClass));
parcelHelpers.export(exports, "normalizeProps", ()=>(0, _shared.normalizeProps));
parcelHelpers.export(exports, "normalizeStyle", ()=>(0, _shared.normalizeStyle));
parcelHelpers.export(exports, "toDisplayString", ()=>(0, _shared.toDisplayString));
parcelHelpers.export(exports, "toHandlerKey", ()=>(0, _shared.toHandlerKey));
parcelHelpers.export(exports, "BaseTransition", ()=>BaseTransition);
parcelHelpers.export(exports, "Comment", ()=>Comment);
parcelHelpers.export(exports, "Fragment", ()=>Fragment);
parcelHelpers.export(exports, "KeepAlive", ()=>KeepAlive);
parcelHelpers.export(exports, "Static", ()=>Static);
parcelHelpers.export(exports, "Suspense", ()=>Suspense);
parcelHelpers.export(exports, "Teleport", ()=>Teleport);
parcelHelpers.export(exports, "Text", ()=>Text);
parcelHelpers.export(exports, "callWithAsyncErrorHandling", ()=>callWithAsyncErrorHandling);
parcelHelpers.export(exports, "callWithErrorHandling", ()=>callWithErrorHandling);
parcelHelpers.export(exports, "cloneVNode", ()=>cloneVNode);
parcelHelpers.export(exports, "compatUtils", ()=>compatUtils);
parcelHelpers.export(exports, "computed", ()=>computed);
parcelHelpers.export(exports, "createBlock", ()=>createBlock);
parcelHelpers.export(exports, "createCommentVNode", ()=>createCommentVNode);
parcelHelpers.export(exports, "createElementBlock", ()=>createElementBlock);
parcelHelpers.export(exports, "createElementVNode", ()=>createBaseVNode);
parcelHelpers.export(exports, "createHydrationRenderer", ()=>createHydrationRenderer);
parcelHelpers.export(exports, "createPropsRestProxy", ()=>createPropsRestProxy);
parcelHelpers.export(exports, "createRenderer", ()=>createRenderer);
parcelHelpers.export(exports, "createSlots", ()=>createSlots);
parcelHelpers.export(exports, "createStaticVNode", ()=>createStaticVNode);
parcelHelpers.export(exports, "createTextVNode", ()=>createTextVNode);
parcelHelpers.export(exports, "createVNode", ()=>createVNode);
parcelHelpers.export(exports, "defineAsyncComponent", ()=>defineAsyncComponent);
parcelHelpers.export(exports, "defineComponent", ()=>defineComponent);
parcelHelpers.export(exports, "defineEmits", ()=>defineEmits);
parcelHelpers.export(exports, "defineExpose", ()=>defineExpose);
parcelHelpers.export(exports, "defineProps", ()=>defineProps);
parcelHelpers.export(exports, "devtools", ()=>devtools);
parcelHelpers.export(exports, "getCurrentInstance", ()=>getCurrentInstance);
parcelHelpers.export(exports, "getTransitionRawChildren", ()=>getTransitionRawChildren);
parcelHelpers.export(exports, "guardReactiveProps", ()=>guardReactiveProps);
parcelHelpers.export(exports, "h", ()=>h);
parcelHelpers.export(exports, "handleError", ()=>handleError);
parcelHelpers.export(exports, "initCustomFormatter", ()=>initCustomFormatter);
parcelHelpers.export(exports, "inject", ()=>inject);
parcelHelpers.export(exports, "isMemoSame", ()=>isMemoSame);
parcelHelpers.export(exports, "isRuntimeOnly", ()=>isRuntimeOnly);
parcelHelpers.export(exports, "isVNode", ()=>isVNode);
parcelHelpers.export(exports, "mergeDefaults", ()=>mergeDefaults);
parcelHelpers.export(exports, "mergeProps", ()=>mergeProps);
parcelHelpers.export(exports, "nextTick", ()=>nextTick);
parcelHelpers.export(exports, "onActivated", ()=>onActivated);
parcelHelpers.export(exports, "onBeforeMount", ()=>onBeforeMount);
parcelHelpers.export(exports, "onBeforeUnmount", ()=>onBeforeUnmount);
parcelHelpers.export(exports, "onBeforeUpdate", ()=>onBeforeUpdate);
parcelHelpers.export(exports, "onDeactivated", ()=>onDeactivated);
parcelHelpers.export(exports, "onErrorCaptured", ()=>onErrorCaptured);
parcelHelpers.export(exports, "onMounted", ()=>onMounted);
parcelHelpers.export(exports, "onRenderTracked", ()=>onRenderTracked);
parcelHelpers.export(exports, "onRenderTriggered", ()=>onRenderTriggered);
parcelHelpers.export(exports, "onServerPrefetch", ()=>onServerPrefetch);
parcelHelpers.export(exports, "onUnmounted", ()=>onUnmounted);
parcelHelpers.export(exports, "onUpdated", ()=>onUpdated);
parcelHelpers.export(exports, "openBlock", ()=>openBlock);
parcelHelpers.export(exports, "popScopeId", ()=>popScopeId);
parcelHelpers.export(exports, "provide", ()=>provide);
parcelHelpers.export(exports, "pushScopeId", ()=>pushScopeId);
parcelHelpers.export(exports, "queuePostFlushCb", ()=>queuePostFlushCb);
parcelHelpers.export(exports, "registerRuntimeCompiler", ()=>registerRuntimeCompiler);
parcelHelpers.export(exports, "renderList", ()=>renderList);
parcelHelpers.export(exports, "renderSlot", ()=>renderSlot);
parcelHelpers.export(exports, "resolveComponent", ()=>resolveComponent);
parcelHelpers.export(exports, "resolveDirective", ()=>resolveDirective);
parcelHelpers.export(exports, "resolveDynamicComponent", ()=>resolveDynamicComponent);
parcelHelpers.export(exports, "resolveFilter", ()=>resolveFilter);
parcelHelpers.export(exports, "resolveTransitionHooks", ()=>resolveTransitionHooks);
parcelHelpers.export(exports, "setBlockTracking", ()=>setBlockTracking);
parcelHelpers.export(exports, "setDevtoolsHook", ()=>setDevtoolsHook);
parcelHelpers.export(exports, "setTransitionHooks", ()=>setTransitionHooks);
parcelHelpers.export(exports, "ssrContextKey", ()=>ssrContextKey);
parcelHelpers.export(exports, "ssrUtils", ()=>ssrUtils);
parcelHelpers.export(exports, "toHandlers", ()=>toHandlers);
parcelHelpers.export(exports, "transformVNodeArgs", ()=>transformVNodeArgs);
parcelHelpers.export(exports, "useAttrs", ()=>useAttrs);
parcelHelpers.export(exports, "useSSRContext", ()=>useSSRContext);
parcelHelpers.export(exports, "useSlots", ()=>useSlots);
parcelHelpers.export(exports, "useTransitionState", ()=>useTransitionState);
parcelHelpers.export(exports, "version", ()=>version);
parcelHelpers.export(exports, "warn", ()=>warn);
parcelHelpers.export(exports, "watch", ()=>watch);
parcelHelpers.export(exports, "watchEffect", ()=>watchEffect);
parcelHelpers.export(exports, "watchPostEffect", ()=>watchPostEffect);
parcelHelpers.export(exports, "watchSyncEffect", ()=>watchSyncEffect);
parcelHelpers.export(exports, "withAsyncContext", ()=>withAsyncContext);
parcelHelpers.export(exports, "withCtx", ()=>withCtx);
parcelHelpers.export(exports, "withDefaults", ()=>withDefaults);
parcelHelpers.export(exports, "withDirectives", ()=>withDirectives);
parcelHelpers.export(exports, "withMemo", ()=>withMemo);
parcelHelpers.export(exports, "withScopeId", ()=>withScopeId);
var _reactivity = require("@vue/reactivity");
var _shared = require("@vue/shared");
const stack = [];
function pushWarningContext(vnode) {
    stack.push(vnode);
}
function popWarningContext() {
    stack.pop();
}
function warn(msg, ...args) {
    // avoid props formatting or warn handler tracking deps that might be mutated
    // during patch, leading to infinite recursion.
    (0, _reactivity.pauseTracking)();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */ , [
        msg + args.join(""),
        instance && instance.proxy,
        trace.map(({ vnode  })=>`at <${formatComponentName(instance, vnode.type)}>`).join("\n"),
        trace
    ]);
    else {
        const warnArgs = [
            `[Vue warn]: ${msg}`,
            ...args
        ];
        /* istanbul ignore if */ if (trace.length && // avoid spamming console during tests
        true) warnArgs.push(`\n`, ...formatTrace(trace));
        console.warn(...warnArgs);
    }
    (0, _reactivity.resetTracking)();
}
function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) return [];
    // we can't just use the stack because it will be incomplete during updates
    // that did not start from the root. Re-construct the parent chain using
    // instance parent pointers.
    const normalizedStack = [];
    while(currentVNode){
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) last.recurseCount++;
        else normalizedStack.push({
            vnode: currentVNode,
            recurseCount: 0
        });
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
}
/* istanbul ignore next */ function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i)=>{
        logs.push(...i === 0 ? [] : [
            `\n`
        ], ...formatTraceEntry(entry));
    });
    return logs;
}
function formatTraceEntry({ vnode , recurseCount  }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
    const close = `>` + postfix;
    return vnode.props ? [
        open,
        ...formatProps(vnode.props),
        close
    ] : [
        open + close
    ];
}
/* istanbul ignore next */ function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach((key)=>{
        res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) res.push(` ...`);
    return res;
}
/* istanbul ignore next */ function formatProp(key, value, raw) {
    if ((0, _shared.isString)(value)) {
        value = JSON.stringify(value);
        return raw ? value : [
            `${key}=${value}`
        ];
    } else if (typeof value === "number" || typeof value === "boolean" || value == null) return raw ? value : [
        `${key}=${value}`
    ];
    else if ((0, _reactivity.isRef)(value)) {
        value = formatProp(key, (0, _reactivity.toRaw)(value.value), true);
        return raw ? value : [
            `${key}=Ref<`,
            value,
            `>`
        ];
    } else if ((0, _shared.isFunction)(value)) return [
        `${key}=fn${value.name ? `<${value.name}>` : ``}`
    ];
    else {
        value = (0, _reactivity.toRaw)(value);
        return raw ? value : [
            `${key}=`,
            value
        ];
    }
}
const ErrorTypeStrings = {
    ["sp" /* SERVER_PREFETCH */ ]: "serverPrefetch hook",
    ["bc" /* BEFORE_CREATE */ ]: "beforeCreate hook",
    ["c" /* CREATED */ ]: "created hook",
    ["bm" /* BEFORE_MOUNT */ ]: "beforeMount hook",
    ["m" /* MOUNTED */ ]: "mounted hook",
    ["bu" /* BEFORE_UPDATE */ ]: "beforeUpdate hook",
    ["u" /* UPDATED */ ]: "updated",
    ["bum" /* BEFORE_UNMOUNT */ ]: "beforeUnmount hook",
    ["um" /* UNMOUNTED */ ]: "unmounted hook",
    ["a" /* ACTIVATED */ ]: "activated hook",
    ["da" /* DEACTIVATED */ ]: "deactivated hook",
    ["ec" /* ERROR_CAPTURED */ ]: "errorCaptured hook",
    ["rtc" /* RENDER_TRACKED */ ]: "renderTracked hook",
    ["rtg" /* RENDER_TRIGGERED */ ]: "renderTriggered hook",
    [0 /* SETUP_FUNCTION */ ]: "setup function",
    [1 /* RENDER_FUNCTION */ ]: "render function",
    [2 /* WATCH_GETTER */ ]: "watcher getter",
    [3 /* WATCH_CALLBACK */ ]: "watcher callback",
    [4 /* WATCH_CLEANUP */ ]: "watcher cleanup function",
    [5 /* NATIVE_EVENT_HANDLER */ ]: "native event handler",
    [6 /* COMPONENT_EVENT_HANDLER */ ]: "component event handler",
    [7 /* VNODE_HOOK */ ]: "vnode hook",
    [8 /* DIRECTIVE_HOOK */ ]: "directive hook",
    [9 /* TRANSITION_HOOK */ ]: "transition hook",
    [10 /* APP_ERROR_HANDLER */ ]: "app errorHandler",
    [11 /* APP_WARN_HANDLER */ ]: "app warnHandler",
    [12 /* FUNCTION_REF */ ]: "ref function",
    [13 /* ASYNC_COMPONENT_LOADER */ ]: "async component loader",
    [14 /* SCHEDULER */ ]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"
};
function callWithErrorHandling(fn, instance, type, args) {
    let res;
    try {
        res = args ? fn(...args) : fn();
    } catch (err) {
        handleError(err, instance, type);
    }
    return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
    if ((0, _shared.isFunction)(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && (0, _shared.isPromise)(res)) res.catch((err)=>{
            handleError(err, instance, type);
        });
        return res;
    }
    const values = [];
    for(let i = 0; i < fn.length; i++)values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    return values;
}
function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    if (instance) {
        let cur = instance.parent;
        // the exposed instance is the render proxy to keep it consistent with 2.x
        const exposedInstance = instance.proxy;
        // in production the hook receives only the error code
        const errorInfo = ErrorTypeStrings[type];
        while(cur){
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) for(let i = 0; i < errorCapturedHooks.length; i++){
                if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) return;
            }
            cur = cur.parent;
        }
        // app-level handling
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */ , [
                err,
                exposedInstance,
                errorInfo
            ]);
            return;
        }
    }
    logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
    {
        const info = ErrorTypeStrings[type];
        if (contextVNode) pushWarningContext(contextVNode);
        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
        if (contextVNode) popWarningContext();
        // crash in dev by default so it's more noticeable
        if (throwInDev) throw err;
        else console.error(err);
    }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /*#__PURE__*/ Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
    const p = currentFlushPromise || resolvedPromise;
    return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
// #2768
// Use binary-search to find a suitable position in the queue,
// so that the queue maintains the increasing order of job's id,
// which can prevent the job from being skipped and also can avoid repeated patching.
function findInsertionIndex(id) {
    // the start index should be `flushIndex + 1`
    let start = flushIndex + 1;
    let end = queue.length;
    while(start < end){
        const middle = start + end >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < id ? start = middle + 1 : end = middle;
    }
    return start;
}
function queueJob(job) {
    // the dedupe search uses the startIndex argument of Array.includes()
    // by default the search index includes the current job that is being run
    // so it cannot recursively trigger itself again.
    // if the job is a watch() callback, the search will start with a +1 index to
    // allow it recursively trigger itself - it is the user's responsibility to
    // ensure it doesn't end up in an infinite loop.
    if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
        if (job.id == null) queue.push(job);
        else queue.splice(findInsertionIndex(job.id), 0, job);
        queueFlush();
    }
}
function queueFlush() {
    if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
    }
}
function invalidateJob(job) {
    const i = queue.indexOf(job);
    if (i > flushIndex) queue.splice(i, 1);
}
function queueCb(cb, activeQueue, pendingQueue, index) {
    if (!(0, _shared.isArray)(cb)) {
        if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) pendingQueue.push(cb);
    } else // if cb is an array, it is a component lifecycle hook which can only be
    // triggered by a job, which is already deduped in the main queue, so
    // we can skip duplicate check here to improve perf
    pendingQueue.push(...cb);
    queueFlush();
}
function queuePreFlushCb(cb) {
    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
    if (pendingPreFlushCbs.length) {
        currentPreFlushParentJob = parentJob;
        activePreFlushCbs = [
            ...new Set(pendingPreFlushCbs)
        ];
        pendingPreFlushCbs.length = 0;
        seen = seen || new Map();
        for(preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++){
            if (checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) continue;
            activePreFlushCbs[preFlushIndex]();
        }
        activePreFlushCbs = null;
        preFlushIndex = 0;
        currentPreFlushParentJob = null;
        // recursively flush until it drains
        flushPreFlushCbs(seen, parentJob);
    }
}
function flushPostFlushCbs(seen) {
    // flush any pre cbs queued during the flush (e.g. pre watchers)
    flushPreFlushCbs();
    if (pendingPostFlushCbs.length) {
        const deduped = [
            ...new Set(pendingPostFlushCbs)
        ];
        pendingPostFlushCbs.length = 0;
        // #1947 already has active queue, nested flushPostFlushCbs call
        if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
        }
        activePostFlushCbs = deduped;
        seen = seen || new Map();
        activePostFlushCbs.sort((a, b)=>getId(a) - getId(b));
        for(postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++){
            if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) continue;
            activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
    }
}
const getId = (job)=>job.id == null ? Infinity : job.id;
function flushJobs(seen) {
    isFlushPending = false;
    isFlushing = true;
    seen = seen || new Map();
    flushPreFlushCbs(seen);
    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child so its render effect will have smaller
    //    priority number)
    // 2. If a component is unmounted during a parent component's update,
    //    its update can be skipped.
    queue.sort((a, b)=>getId(a) - getId(b));
    // conditional usage of checkRecursiveUpdate must be determined out of
    // try ... catch block since Rollup by default de-optimizes treeshaking
    // inside try-catch. This can leave all warning code unshaked. Although
    // they would get eventually shaken by a minifier like terser, some minifiers
    // would fail to do that (e.g. https://github.com/evanw/esbuild/issues/1610)
    const check = (job)=>checkRecursiveUpdates(seen, job);
    try {
        for(flushIndex = 0; flushIndex < queue.length; flushIndex++){
            const job = queue[flushIndex];
            if (job && job.active !== false) {
                if (check(job)) continue;
                // console.log(`running:`, job.id)
                callWithErrorHandling(job, null, 14 /* SCHEDULER */ );
            }
        }
    } finally{
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs(seen);
        isFlushing = false;
        currentFlushPromise = null;
        // some postFlushCb queued jobs!
        // keep flushing until it drains.
        if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) flushJobs(seen);
    }
}
function checkRecursiveUpdates(seen, fn) {
    if (!seen.has(fn)) seen.set(fn, 1);
    else {
        const count = seen.get(fn);
        if (count > RECURSION_LIMIT) {
            const instance = fn.ownerInstance;
            const componentName = instance && getComponentName(instance.type);
            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` + `This means you have a reactive effect that is mutating its own ` + `dependencies and thus recursively triggering itself. Possible sources ` + `include component template, render function, updated hook or ` + `watcher source function.`);
            return true;
        } else seen.set(fn, count + 1);
    }
}
/* eslint-disable no-restricted-globals */ let isHmrUpdating = false;
const hmrDirtyComponents = new Set();
(0, _shared.getGlobalThis)().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
};
const map = new Map();
function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
        createRecord(id, instance.type);
        record = map.get(id);
    }
    record.instances.add(instance);
}
function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, initialDef) {
    if (map.has(id)) return false;
    map.set(id, {
        initialDef: normalizeClassComponent(initialDef),
        instances: new Set()
    });
    return true;
}
function normalizeClassComponent(component) {
    return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) return;
    // update initial record (for not-yet-rendered component)
    record.initialDef.render = newRender;
    [
        ...record.instances
    ].forEach((instance)=>{
        if (newRender) {
            instance.render = newRender;
            normalizeClassComponent(instance.type).render = newRender;
        }
        instance.renderCache = [];
        // this flag forces child components with slot content to update
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
    });
}
function reload(id, newComp) {
    const record = map.get(id);
    if (!record) return;
    newComp = normalizeClassComponent(newComp);
    // update initial def (for not-yet-rendered components)
    updateComponentDef(record.initialDef, newComp);
    // create a snapshot which avoids the set being mutated during updates
    const instances = [
        ...record.instances
    ];
    for (const instance1 of instances){
        const oldComp = normalizeClassComponent(instance1.type);
        if (!hmrDirtyComponents.has(oldComp)) {
            // 1. Update existing comp definition to match new one
            if (oldComp !== record.initialDef) updateComponentDef(oldComp, newComp);
            // 2. mark definition dirty. This forces the renderer to replace the
            // component on patch.
            hmrDirtyComponents.add(oldComp);
        }
        // 3. invalidate options resolution cache
        instance1.appContext.optionsCache.delete(instance1.type);
        // 4. actually update
        if (instance1.ceReload) {
            // custom element
            hmrDirtyComponents.add(oldComp);
            instance1.ceReload(newComp.styles);
            hmrDirtyComponents.delete(oldComp);
        } else if (instance1.parent) {
            // 4. Force the parent instance to re-render. This will cause all updated
            // components to be unmounted and re-mounted. Queue the update so that we
            // don't end up forcing the same parent to re-render multiple times.
            queueJob(instance1.parent.update);
            // instance is the inner component of an async custom element
            // invoke to reset styles
            if (instance1.parent.type.__asyncLoader && instance1.parent.ceReload) instance1.parent.ceReload(newComp.styles);
        } else if (instance1.appContext.reload) // root instance mounted via createApp() has a reload method
        instance1.appContext.reload();
        else if (typeof window !== "undefined") // root instance inside tree created via raw render(). Force reload.
        window.location.reload();
        else console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
    }
    // 5. make sure to cleanup dirty hmr components after update
    queuePostFlushCb(()=>{
        for (const instance of instances)hmrDirtyComponents.delete(normalizeClassComponent(instance.type));
    });
}
function updateComponentDef(oldComp, newComp) {
    (0, _shared.extend)(oldComp, newComp);
    for(const key in oldComp)if (key !== "__file" && !(key in newComp)) delete oldComp[key];
}
function tryWrap(fn) {
    return (id, arg)=>{
        try {
            return fn(id, arg);
        } catch (e) {
            console.error(e);
            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` + `Full reload required.`);
        }
    };
}
let devtools;
let buffer = [];
let devtoolsNotInstalled = false;
function emit(event, ...args) {
    if (devtools) devtools.emit(event, ...args);
    else if (!devtoolsNotInstalled) buffer.push({
        event,
        args
    });
}
function setDevtoolsHook(hook, target) {
    var _a, _b;
    devtools = hook;
    if (devtools) {
        devtools.enabled = true;
        buffer.forEach(({ event , args  })=>devtools.emit(event, ...args));
        buffer = [];
    } else if (// handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    !((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.includes("jsdom"))) {
        const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
        replay.push((newHook)=>{
            setDevtoolsHook(newHook, target);
        });
        // clear buffer after 3s - the user probably doesn't have devtools installed
        // at all, and keeping the buffer will cause memory leaks (#4738)
        setTimeout(()=>{
            if (!devtools) {
                target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
                devtoolsNotInstalled = true;
                buffer = [];
            }
        }, 3000);
    } else {
        // non-browser env, assume not installed
        devtoolsNotInstalled = true;
        buffer = [];
    }
}
function devtoolsInitApp(app, version1) {
    emit("app:init" /* APP_INIT */ , app, version1, {
        Fragment,
        Text,
        Comment,
        Static
    });
}
function devtoolsUnmountApp(app) {
    emit("app:unmount" /* APP_UNMOUNT */ , app);
}
const devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook("component:added" /* COMPONENT_ADDED */ );
const devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook("component:updated" /* COMPONENT_UPDATED */ );
const devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook("component:removed" /* COMPONENT_REMOVED */ );
function createDevtoolsComponentHook(hook) {
    return (component)=>{
        emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);
    };
}
const devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:start" /* PERFORMANCE_START */ );
const devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:end" /* PERFORMANCE_END */ );
function createDevtoolsPerformanceHook(hook) {
    return (component, type, time)=>{
        emit(hook, component.appContext.app, component.uid, component, type, time);
    };
}
function devtoolsComponentEmit(component, event, params) {
    emit("component:emit" /* COMPONENT_EMIT */ , component.appContext.app, component, event, params);
}
function emit$1(instance, event, ...rawArgs) {
    if (instance.isUnmounted) return;
    const props = instance.vnode.props || (0, _shared.EMPTY_OBJ);
    {
        const { emitsOptions , propsOptions: [propsOptions]  } = instance;
        if (emitsOptions) {
            if (!(event in emitsOptions) && true) {
                if (!propsOptions || !((0, _shared.toHandlerKey)(event) in propsOptions)) warn(`Component emitted event "${event}" but it is neither declared in ` + `the emits option nor as an "${(0, _shared.toHandlerKey)(event)}" prop.`);
            } else {
                const validator = emitsOptions[event];
                if ((0, _shared.isFunction)(validator)) {
                    const isValid = validator(...rawArgs);
                    if (!isValid) warn(`Invalid event arguments: event validation failed for event "${event}".`);
                }
            }
        }
    }
    let args = rawArgs;
    const isModelListener = event.startsWith("update:");
    // for v-model update:xxx events, apply modifiers on args
    const modelArg = isModelListener && event.slice(7);
    if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
        const { number , trim  } = props[modifiersKey] || (0, _shared.EMPTY_OBJ);
        if (trim) args = rawArgs.map((a)=>a.trim());
        if (number) args = rawArgs.map((0, _shared.toNumber));
    }
    devtoolsComponentEmit(instance, event, args);
    {
        const lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && props[(0, _shared.toHandlerKey)(lowerCaseEvent)]) warn(`Event "${lowerCaseEvent}" is emitted in component ` + `${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". ` + `Note that HTML attributes are case-insensitive and you cannot use ` + `v-on to listen to camelCase events when using in-DOM templates. ` + `You should probably use "${(0, _shared.hyphenate)(event)}" instead of "${event}".`);
    }
    let handlerName;
    let handler = props[handlerName = (0, _shared.toHandlerKey)(event)] || // also try camelCase event handler (#2249)
    props[handlerName = (0, _shared.toHandlerKey)((0, _shared.camelize)(event))];
    // for v-model update:xxx events, also trigger kebab-case equivalent
    // for props passed via kebab-case
    if (!handler && isModelListener) handler = props[handlerName = (0, _shared.toHandlerKey)((0, _shared.hyphenate)(event))];
    if (handler) callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */ , args);
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
        if (!instance.emitted) instance.emitted = {};
        else if (instance.emitted[handlerName]) return;
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */ , args);
    }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== undefined) return cached;
    const raw1 = comp.emits;
    let normalized = {};
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0, _shared.isFunction)(comp)) {
        const extendEmits = (raw)=>{
            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);
            if (normalizedFromExtend) {
                hasExtends = true;
                (0, _shared.extend)(normalized, normalizedFromExtend);
            }
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendEmits);
        if (comp.extends) extendEmits(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendEmits);
    }
    if (!raw1 && !hasExtends) {
        cache.set(comp, null);
        return null;
    }
    if ((0, _shared.isArray)(raw1)) raw1.forEach((key)=>normalized[key] = null);
    else (0, _shared.extend)(normalized, raw1);
    cache.set(comp, normalized);
    return normalized;
}
// Check if an incoming prop key is a declared emit event listener.
// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are
// both considered matched listeners.
function isEmitListener(options, key) {
    if (!options || !(0, _shared.isOn)(key)) return false;
    key = key.slice(2).replace(/Once$/, "");
    return (0, _shared.hasOwn)(options, key[0].toLowerCase() + key.slice(1)) || (0, _shared.hasOwn)(options, (0, _shared.hyphenate)(key)) || (0, _shared.hasOwn)(options, key);
}
/**
 * mark the current rendering instance for asset resolution (e.g.
 * resolveComponent, resolveDirective) during render
 */ let currentRenderingInstance = null;
let currentScopeId = null;
/**
 * Note: rendering calls maybe nested. The function returns the parent rendering
 * instance if present, which should be restored after the render is done:
 *
 * ```js
 * const prev = setCurrentRenderingInstance(i)
 * // ...render
 * setCurrentRenderingInstance(prev)
 * ```
 */ function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = instance && instance.type.__scopeId || null;
    return prev;
}
/**
 * Set scope id when creating hoisted vnodes.
 * @private compiler helper
 */ function pushScopeId(id) {
    currentScopeId = id;
}
/**
 * Technically we no longer need this after 3.0.8 but we need to keep the same
 * API for backwards compat w/ code generated by compilers.
 * @private
 */ function popScopeId() {
    currentScopeId = null;
}
/**
 * Only for backwards compat
 * @private
 */ const withScopeId = (_id)=>withCtx;
/**
 * Wrap a slot function to memoize current rendering instance
 * @private compiler helper
 */ function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only
) {
    if (!ctx) return fn;
    // already normalized
    if (fn._n) return fn;
    const renderFnWithContext = (...args)=>{
        // If a user calls a compiled slot inside a template expression (#1745), it
        // can mess up block tracking, so by default we disable block tracking and
        // force bail out when invoking a compiled slot (indicated by the ._d flag).
        // This isn't necessary if rendering a compiled `<slot>`, so we flip the
        // ._d flag off when invoking the wrapped fn inside `renderSlot`.
        if (renderFnWithContext._d) setBlockTracking(-1);
        const prevInstance = setCurrentRenderingInstance(ctx);
        const res = fn(...args);
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) setBlockTracking(1);
        devtoolsComponentUpdated(ctx);
        return res;
    };
    // mark normalized to avoid duplicated wrapping
    renderFnWithContext._n = true;
    // mark this as compiled by default
    // this is used in vnode.ts -> normalizeChildren() to set the slot
    // rendering flag.
    renderFnWithContext._c = true;
    // disable block tracking by default
    renderFnWithContext._d = true;
    return renderFnWithContext;
}
/**
 * dev only flag to track whether $attrs was used during render.
 * If $attrs was used during render then the warning for failed attrs
 * fallthrough can be suppressed.
 */ let accessedAttrs = false;
function markAttrsAccessed() {
    accessedAttrs = true;
}
function renderComponentRoot(instance) {
    const { type: Component , vnode , proxy , withProxy , props , propsOptions: [propsOptions] , slots , attrs , emit: emit1 , render , renderCache , data , setupState , ctx , inheritAttrs  } = instance;
    let result;
    let fallthroughAttrs;
    const prev = setCurrentRenderingInstance(instance);
    accessedAttrs = false;
    try {
        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ) {
            // withProxy is a proxy with a different `has` trap only for
            // runtime-compiled render functions using `with` block.
            const proxyToUse = withProxy || proxy;
            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
            fallthroughAttrs = attrs;
        } else {
            // functional
            const render = Component;
            // in dev, mark attrs accessed if optional props (attrs === props)
            if (attrs === props) markAttrsAccessed();
            result = normalizeVNode(render.length > 1 ? render(props, {
                get attrs () {
                    markAttrsAccessed();
                    return attrs;
                },
                slots,
                emit: emit1
            }) : render(props, null));
            fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
    } catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1 /* RENDER_FUNCTION */ );
        result = createVNode(Comment);
    }
    // attr merging
    // in dev mode, comments are preserved, and it's possible for a template
    // to have comments along side the root element which makes it a fragment
    let root = result;
    let setRoot = undefined;
    if (result.patchFlag > 0 && result.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) [root, setRoot] = getChildRoot(result);
    if (fallthroughAttrs && inheritAttrs !== false) {
        const keys = Object.keys(fallthroughAttrs);
        const { shapeFlag  } = root;
        if (keys.length) {
            if (shapeFlag & 7 /* COMPONENT */ ) {
                if (propsOptions && keys.some((0, _shared.isModelListener))) // If a v-model listener (onUpdate:xxx) has a corresponding declared
                // prop, it indicates this component expects to handle v-model and
                // it should not fallthrough.
                // related: #1543, #1643, #1989
                fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
                root = cloneVNode(root, fallthroughAttrs);
            } else if (!accessedAttrs && root.type !== Comment) {
                const allAttrs = Object.keys(attrs);
                const eventAttrs = [];
                const extraAttrs = [];
                for(let i = 0, l = allAttrs.length; i < l; i++){
                    const key = allAttrs[i];
                    if ((0, _shared.isOn)(key)) // ignore v-model handlers when they fail to fallthrough
                    {
                        if (!(0, _shared.isModelListener)(key)) // remove `on`, lowercase first letter to reflect event casing
                        // accurately
                        eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                    } else extraAttrs.push(key);
                }
                if (extraAttrs.length) warn(`Extraneous non-props attributes (` + `${extraAttrs.join(", ")}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes.`);
                if (eventAttrs.length) warn(`Extraneous non-emits event listeners (` + `${eventAttrs.join(", ")}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes. ` + `If the listener is intended to be a component custom event listener only, ` + `declare it using the "emits" option.`);
            }
        }
    }
    // inherit directives
    if (vnode.dirs) {
        if (!isElementRoot(root)) warn(`Runtime directive used on component with non-element root node. ` + `The directives will not function as intended.`);
        // clone before mutating since the root may be a hoisted vnode
        root = cloneVNode(root);
        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    // inherit transition data
    if (vnode.transition) {
        if (!isElementRoot(root)) warn(`Component inside <Transition> renders non-element root node ` + `that cannot be animated.`);
        root.transition = vnode.transition;
    }
    if (setRoot) setRoot(root);
    else result = root;
    setCurrentRenderingInstance(prev);
    return result;
}
/**
 * dev only
 * In dev mode, template root level comments are rendered, which turns the
 * template into a fragment root, but we need to locate the single element
 * root for attrs and scope id processing.
 */ const getChildRoot = (vnode)=>{
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren);
    if (!childRoot) return [
        vnode,
        undefined
    ];
    const index = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot)=>{
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
            if (dynamicIndex > -1) dynamicChildren[dynamicIndex] = updatedRoot;
            else if (updatedRoot.patchFlag > 0) vnode.dynamicChildren = [
                ...dynamicChildren,
                updatedRoot
            ];
        }
    };
    return [
        normalizeVNode(childRoot),
        setRoot
    ];
};
function filterSingleRoot(children) {
    let singleRoot;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        if (isVNode(child)) // ignore user comment
        {
            if (child.type !== Comment || child.children === "v-if") {
                if (singleRoot) // has more than 1 non-comment child, return now
                return;
                else singleRoot = child;
            }
        } else return;
    }
    return singleRoot;
}
const getFunctionalFallthrough = (attrs)=>{
    let res;
    for(const key in attrs)if (key === "class" || key === "style" || (0, _shared.isOn)(key)) (res || (res = {}))[key] = attrs[key];
    return res;
};
const filterModelListeners = (attrs, props)=>{
    const res = {};
    for(const key in attrs)if (!(0, _shared.isModelListener)(key) || !(key.slice(9) in props)) res[key] = attrs[key];
    return res;
};
const isElementRoot = (vnode)=>{
    return vnode.shapeFlag & 7 /* ELEMENT */  || vnode.type === Comment // potential v-if branch switch
    ;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps , children: prevChildren , component  } = prevVNode;
    const { props: nextProps , children: nextChildren , patchFlag  } = nextVNode;
    const emits = component.emitsOptions;
    // Parent component's render function was hot-updated. Since this may have
    // caused the child component's slots content to have changed, we need to
    // force the child to update as well.
    if ((prevChildren || nextChildren) && isHmrUpdating) return true;
    // force child update for runtime directive or transition on component vnode.
    if (nextVNode.dirs || nextVNode.transition) return true;
    if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024 /* DYNAMIC_SLOTS */ ) // slot content that references values that might have changed,
        // e.g. in a v-for
        return true;
        if (patchFlag & 16 /* FULL_PROPS */ ) {
            if (!prevProps) return !!nextProps;
            // presence of this flag indicates props are always non-null
            return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8 /* PROPS */ ) {
            const dynamicProps = nextVNode.dynamicProps;
            for(let i = 0; i < dynamicProps.length; i++){
                const key = dynamicProps[i];
                if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) return true;
            }
        }
    } else {
        // this path is only taken by manually written render functions
        // so presence of any children leads to a forced update
        if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) return true;
        }
        if (prevProps === nextProps) return false;
        if (!prevProps) return !!nextProps;
        if (!nextProps) return true;
        return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) return true;
    for(let i = 0; i < nextKeys.length; i++){
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) return true;
    }
    return false;
}
function updateHOCHostEl({ vnode , parent  }, el // HostNode
) {
    while(parent && parent.subTree === vnode){
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
    }
}
const isSuspense = (type)=>type.__isSuspense;
// Suspense exposes a component-like API, and is treated like a component
// in the compiler, but internally it's a special built-in type that hooks
// directly into the renderer.
const SuspenseImpl = {
    name: "Suspense",
    // In order to make Suspense tree-shakable, we need to avoid importing it
    // directly in the renderer. The renderer checks for the __isSuspense flag
    // on a vnode's type and calls the `process` method, passing in renderer
    // internals.
    __isSuspense: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, // platform-specific impl passed from renderer
    rendererInternals) {
        if (n1 == null) mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        else patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
    },
    hydrate: hydrateSuspense,
    create: createSuspenseBoundary,
    normalize: normalizeSuspenseChildren
};
// Force-casted public typing for h and TSX props inference
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
    const eventListener = vnode.props && vnode.props[name];
    if ((0, _shared.isFunction)(eventListener)) eventListener();
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    const { p: patch , o: { createElement  }  } = rendererInternals;
    const hiddenContainer = createElement("div");
    const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
    // start mounting the content subtree in an off-dom container
    patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
    // now check if we have encountered any async deps
    if (suspense.deps > 0) {
        // has async
        // invoke @fallback event
        triggerEvent(vnode, "onPending");
        triggerEvent(vnode, "onFallback");
        // mount the fallback tree
        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds);
        setActiveBranch(suspense, vnode.ssFallback);
    } else // Suspense has no async deps. Just resolve.
    suspense.resolve();
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch , um: unmount , o: { createElement  }  }) {
    const suspense = n2.suspense = n1.suspense;
    suspense.vnode = n2;
    n2.el = n1.el;
    const newBranch = n2.ssContent;
    const newFallback = n2.ssFallback;
    const { activeBranch , pendingBranch , isInFallback , isHydrating  } = suspense;
    if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
            // same root type but content may have changed.
            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) suspense.resolve();
            else if (isInFallback) {
                patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, newFallback);
            }
        } else {
            // toggled before pending tree is resolved
            suspense.pendingId++;
            if (isHydrating) {
                // if toggled before hydration is finished, the current DOM tree is
                // no longer valid. set it as the active branch so it will be unmounted
                // when resolved
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
            } else unmount(pendingBranch, parentComponent, suspense);
            // increment pending ID. this is used to invalidate async callbacks
            // reset suspense state
            suspense.deps = 0;
            // discard effects from pending branch
            suspense.effects.length = 0;
            // discard previous container
            suspense.hiddenContainer = createElement("div");
            if (isInFallback) {
                // already in fallback state
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
                else {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
                // toggled "back" to current active branch
                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                // force resolve
                suspense.resolve(true);
            } else {
                // switched to a 3rd branch
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
            }
        }
    } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        // root did not change, just normal patch
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        setActiveBranch(suspense, newBranch);
    } else {
        // root node toggled
        // invoke @pending event
        triggerEvent(n2, "onPending");
        // mount pending branch in off-dom container
        suspense.pendingBranch = newBranch;
        suspense.pendingId++;
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) // incoming branch has no async deps, resolve now.
        suspense.resolve();
        else {
            const { timeout , pendingId  } = suspense;
            if (timeout > 0) setTimeout(()=>{
                if (suspense.pendingId === pendingId) suspense.fallback(newFallback);
            }, timeout);
            else if (timeout === 0) suspense.fallback(newFallback);
        }
    }
}
let hasWarned = false;
function createSuspenseBoundary(vnode1, parent1, parentComponent1, container1, hiddenContainer, anchor1, isSVG1, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
    /* istanbul ignore if */ if (!hasWarned) {
        hasWarned = true;
        // @ts-ignore `console.info` cannot be null error
        console[console.info ? "info" : "log"](`<Suspense> is an experimental feature and its API will likely change.`);
    }
    const { p: patch , m: move , um: unmount , n: next , o: { parentNode , remove  }  } = rendererInternals;
    const timeout = (0, _shared.toNumber)(vnode1.props && vnode1.props.timeout);
    const suspense = {
        vnode: vnode1,
        parent: parent1,
        parentComponent: parentComponent1,
        isSVG: isSVG1,
        container: container1,
        hiddenContainer,
        anchor: anchor1,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === "number" ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve (resume = false) {
            if (!resume && !suspense.pendingBranch) throw new Error(`suspense.resolve() is called without a pending branch.`);
            if (suspense.isUnmounted) throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
            const { vnode , activeBranch , pendingBranch , pendingId , effects , parentComponent , container  } = suspense;
            if (suspense.isHydrating) suspense.isHydrating = false;
            else if (!resume) {
                const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
                if (delayEnter) activeBranch.transition.afterLeave = ()=>{
                    if (pendingId === suspense.pendingId) move(pendingBranch, container, anchor, 0 /* ENTER */ );
                };
                // this is initial anchor on mount
                let { anchor  } = suspense;
                // unmount current active tree
                if (activeBranch) {
                    // if the fallback tree was mounted, it may have been moved
                    // as part of a parent suspense. get the latest anchor for insertion
                    anchor = next(activeBranch);
                    unmount(activeBranch, parentComponent, suspense, true);
                }
                if (!delayEnter) // move content from off-dom container to actual container
                move(pendingBranch, container, anchor, 0 /* ENTER */ );
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            // flush buffered effects
            // check if there is a pending parent suspense
            let parent = suspense.parent;
            let hasUnresolvedAncestor = false;
            while(parent){
                if (parent.pendingBranch) {
                    // found a pending parent suspense, merge buffered post jobs
                    // into that parent
                    parent.effects.push(...effects);
                    hasUnresolvedAncestor = true;
                    break;
                }
                parent = parent.parent;
            }
            // no pending parent suspense, flush all jobs
            if (!hasUnresolvedAncestor) queuePostFlushCb(effects);
            suspense.effects = [];
            // invoke @resolve event
            triggerEvent(vnode, "onResolve");
        },
        fallback (fallbackVNode) {
            if (!suspense.pendingBranch) return;
            const { vnode , activeBranch , parentComponent , container , isSVG  } = suspense;
            // invoke @fallback event
            triggerEvent(vnode, "onFallback");
            const anchor = next(activeBranch);
            const mountFallback = ()=>{
                if (!suspense.isInFallback) return;
                // mount the fallback tree
                patch(null, fallbackVNode, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
            if (delayEnter) activeBranch.transition.afterLeave = mountFallback;
            suspense.isInFallback = true;
            // unmount current active branch
            unmount(activeBranch, parentComponent, null, true // shouldRemove
            );
            if (!delayEnter) mountFallback();
        },
        move (container, anchor, type) {
            suspense.activeBranch && move(suspense.activeBranch, container, anchor, type);
            suspense.container = container;
        },
        next () {
            return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep (instance, setupRenderEffect) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) suspense.deps++;
            const hydratedEl = instance.vnode.el;
            instance.asyncDep.catch((err)=>{
                handleError(err, instance, 0 /* SETUP_FUNCTION */ );
            }).then((asyncSetupResult)=>{
                // retry when the setup() promise resolves.
                // component may have been unmounted before resolve.
                if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) return;
                // retry from this component
                instance.asyncResolved = true;
                const { vnode  } = instance;
                pushWarningContext(vnode);
                handleSetupResult(instance, asyncSetupResult, false);
                if (hydratedEl) // vnode may have been replaced if an update happened before the
                // async dep is resolved.
                vnode.el = hydratedEl;
                const placeholder = !hydratedEl && instance.subTree.el;
                setupRenderEffect(instance, vnode, // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el), // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree), suspense, isSVG1, optimized);
                if (placeholder) remove(placeholder);
                updateHOCHostEl(instance, vnode.el);
                popWarningContext();
                // only decrease deps count if suspense is not already resolved
                if (isInPendingSuspense && --suspense.deps === 0) suspense.resolve();
            });
        },
        unmount (parentSuspense, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) unmount(suspense.activeBranch, parentComponent1, parentSuspense, doRemove);
            if (suspense.pendingBranch) unmount(suspense.pendingBranch, parentComponent1, parentSuspense, doRemove);
        }
    };
    return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
    /* eslint-disable no-restricted-globals */ const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement("div"), null, isSVG, slotScopeIds, optimized, rendererInternals, true);
    // there are two possible scenarios for server-rendered suspense:
    // - success: ssr content should be fully resolved
    // - failure: ssr content should be the fallback branch.
    // however, on the client we don't really know if it has failed or not
    // attempt to hydrate the DOM assuming it has succeeded, but we still
    // need to construct a suspense boundary first
    const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
    if (suspense.deps === 0) suspense.resolve();
    return result;
/* eslint-enable no-restricted-globals */ }
function normalizeSuspenseChildren(vnode) {
    const { shapeFlag , children  } = vnode;
    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */ ;
    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
    vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
    let block;
    if ((0, _shared.isFunction)(s)) {
        const trackBlock = isBlockTreeEnabled && s._c;
        if (trackBlock) {
            // disableTracking: false
            // allow block tracking for compiled slots
            // (see ./componentRenderContext.ts)
            s._d = false;
            openBlock();
        }
        s = s();
        if (trackBlock) {
            s._d = true;
            block = currentBlock;
            closeBlock();
        }
    }
    if ((0, _shared.isArray)(s)) {
        const singleChild = filterSingleRoot(s);
        if (!singleChild) warn(`<Suspense> slots expect a single root node.`);
        s = singleChild;
    }
    s = normalizeVNode(s);
    if (block && !s.dynamicChildren) s.dynamicChildren = block.filter((c)=>c !== s);
    return s;
}
function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
        if ((0, _shared.isArray)(fn)) suspense.effects.push(...fn);
        else suspense.effects.push(fn);
    } else queuePostFlushCb(fn);
}
function setActiveBranch(suspense, branch) {
    suspense.activeBranch = branch;
    const { vnode , parentComponent  } = suspense;
    const el = vnode.el = branch.el;
    // in case suspense is the root node of a component,
    // recursively update the HOC el
    if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
    }
}
function provide(key, value) {
    if (!currentInstance) warn(`provide() can only be used inside setup().`);
    else {
        let provides = currentInstance.provides;
        // by default an instance inherits its parent's provides object
        // but when it needs to provide values of its own, it creates its
        // own provides object using parent provides object as prototype.
        // this way in `inject` we can simply look up injections from direct
        // parent and let the prototype chain do the work.
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) provides = currentInstance.provides = Object.create(parentProvides);
        // TS doesn't allow symbol as index type
        provides[key] = value;
    }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
    // fallback to `currentRenderingInstance` so that this can be called in
    // a functional component
    const instance = currentInstance || currentRenderingInstance;
    if (instance) {
        // #2400
        // to support `app.use` plugins,
        // fallback to appContext's `provides` if the instance is at root
        const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
        if (provides && key in provides) // TS doesn't allow symbol as index type
        return provides[key];
        else if (arguments.length > 1) return treatDefaultAsFactory && (0, _shared.isFunction)(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
        else warn(`injection "${String(key)}" not found.`);
    } else warn(`inject() can only be used inside setup() or functional components.`);
}
// Simple effect.
function watchEffect(effect, options) {
    return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
    return doWatch(effect, null, Object.assign(Object.assign({}, options), {
        flush: "post"
    }));
}
function watchSyncEffect(effect, options) {
    return doWatch(effect, null, Object.assign(Object.assign({}, options), {
        flush: "sync"
    }));
}
// initial value for watchers to trigger on undefined initial values
const INITIAL_WATCHER_VALUE = {};
// implementation
function watch(source, cb, options) {
    if (!(0, _shared.isFunction)(cb)) warn(`\`watch(fn, options?)\` signature has been moved to a separate API. ` + `Use \`watchEffect(fn, options?)\` instead. \`watch\` now only ` + `supports \`watch(source, cb, options?) signature.`);
    return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate , deep , flush , onTrack , onTrigger  } = (0, _shared.EMPTY_OBJ)) {
    if (!cb) {
        if (immediate !== undefined) warn(`watch() "immediate" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
        if (deep !== undefined) warn(`watch() "deep" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
    }
    const warnInvalidSource = (s)=>{
        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` + `a reactive object, or an array of these types.`);
    };
    const instance = currentInstance;
    let getter;
    let forceTrigger = false;
    let isMultiSource = false;
    if ((0, _reactivity.isRef)(source)) {
        getter = ()=>source.value;
        forceTrigger = (0, _reactivity.isShallow)(source);
    } else if ((0, _reactivity.isReactive)(source)) {
        getter = ()=>source;
        deep = true;
    } else if ((0, _shared.isArray)(source)) {
        isMultiSource = true;
        forceTrigger = source.some((s)=>(0, _reactivity.isReactive)(s) || (0, _reactivity.isShallow)(s));
        getter = ()=>source.map((s)=>{
                if ((0, _reactivity.isRef)(s)) return s.value;
                else if ((0, _reactivity.isReactive)(s)) return traverse(s);
                else if ((0, _shared.isFunction)(s)) return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */ );
                else warnInvalidSource(s);
            });
    } else if ((0, _shared.isFunction)(source)) {
        if (cb) // getter with cb
        getter = ()=>callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */ );
        else // no cb -> simple effect
        getter = ()=>{
            if (instance && instance.isUnmounted) return;
            if (cleanup) cleanup();
            return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */ , [
                onCleanup
            ]);
        };
    } else {
        getter = (0, _shared.NOOP);
        warnInvalidSource(source);
    }
    if (cb && deep) {
        const baseGetter = getter;
        getter = ()=>traverse(baseGetter());
    }
    let cleanup;
    let onCleanup = (fn)=>{
        cleanup = effect.onStop = ()=>{
            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */ );
        };
    };
    // in SSR there is no need to setup an actual effect, and it should be noop
    // unless it's eager
    if (isInSSRComponentSetup) {
        // we will also not call the invalidate callback (+ runner is not set up)
        onCleanup = (0, _shared.NOOP);
        if (!cb) getter();
        else if (immediate) callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */ , [
            getter(),
            isMultiSource ? [] : undefined,
            onCleanup
        ]);
        return 0, _shared.NOOP;
    }
    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
    const job = ()=>{
        if (!effect.active) return;
        if (cb) {
            // watch(source, cb)
            const newValue = effect.run();
            if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i)=>(0, _shared.hasChanged)(v, oldValue[i])) : (0, _shared.hasChanged)(newValue, oldValue)) || false) {
                // cleanup before running cb again
                if (cleanup) cleanup();
                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */ , [
                    newValue,
                    // pass undefined as the old value when it's changed for the first time
                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,
                    onCleanup
                ]);
                oldValue = newValue;
            }
        } else // watchEffect
        effect.run();
    };
    // important: mark the job as a watcher callback so that scheduler knows
    // it is allowed to self-trigger (#1727)
    job.allowRecurse = !!cb;
    let scheduler;
    if (flush === "sync") scheduler = job; // the scheduler function gets called directly
    else if (flush === "post") scheduler = ()=>queuePostRenderEffect(job, instance && instance.suspense);
    else // default: 'pre'
    scheduler = ()=>queuePreFlushCb(job);
    const effect = new (0, _reactivity.ReactiveEffect)(getter, scheduler);
    effect.onTrack = onTrack;
    effect.onTrigger = onTrigger;
    // initial run
    if (cb) {
        if (immediate) job();
        else oldValue = effect.run();
    } else if (flush === "post") queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);
    else effect.run();
    return ()=>{
        effect.stop();
        if (instance && instance.scope) (0, _shared.remove)(instance.scope.effects, effect);
    };
}
// this.$watch
function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = (0, _shared.isString)(source) ? source.includes(".") ? createPathGetter(publicThis, source) : ()=>publicThis[source] : source.bind(publicThis, publicThis);
    let cb;
    if ((0, _shared.isFunction)(value)) cb = value;
    else {
        cb = value.handler;
        options = value;
    }
    const cur = currentInstance;
    setCurrentInstance(this);
    const res = doWatch(getter, cb.bind(publicThis), options);
    if (cur) setCurrentInstance(cur);
    else unsetCurrentInstance();
    return res;
}
function createPathGetter(ctx, path) {
    const segments = path.split(".");
    return ()=>{
        let cur = ctx;
        for(let i = 0; i < segments.length && cur; i++)cur = cur[segments[i]];
        return cur;
    };
}
function traverse(value, seen) {
    if (!(0, _shared.isObject)(value) || value["__v_skip" /* SKIP */ ]) return value;
    seen = seen || new Set();
    if (seen.has(value)) return value;
    seen.add(value);
    if ((0, _reactivity.isRef)(value)) traverse(value.value, seen);
    else if ((0, _shared.isArray)(value)) for(let i = 0; i < value.length; i++)traverse(value[i], seen);
    else if ((0, _shared.isSet)(value) || (0, _shared.isMap)(value)) value.forEach((v)=>{
        traverse(v, seen);
    });
    else if ((0, _shared.isPlainObject)(value)) for(const key in value)traverse(value[key], seen);
    return value;
}
function useTransitionState() {
    const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: new Map()
    };
    onMounted(()=>{
        state.isMounted = true;
    });
    onBeforeUnmount(()=>{
        state.isUnmounting = true;
    });
    return state;
}
const TransitionHookValidator = [
    Function,
    Array
];
const BaseTransitionImpl = {
    name: `BaseTransition`,
    props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
    },
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return ()=>{
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) return;
            let child = children[0];
            if (children.length > 1) {
                let hasFound = false;
                // locate first non-comment child
                for (const c of children)if (c.type !== Comment) {
                    if (hasFound) {
                        // warn more than one non-comment child
                        warn("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
                        break;
                    }
                    child = c;
                    hasFound = true;
                }
            }
            // there's no need to track reactivity for these props so use the raw
            // props for a bit better perf
            const rawProps = (0, _reactivity.toRaw)(props);
            const { mode  } = rawProps;
            // check mode
            if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") warn(`invalid <transition> mode: ${mode}`);
            if (state.isLeaving) return emptyPlaceholder(child);
            // in the case of <transition><keep-alive/></transition>, we need to
            // compare the type of the kept-alive children.
            const innerChild = getKeepAliveChild(child);
            if (!innerChild) return emptyPlaceholder(child);
            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
            setTransitionHooks(innerChild, enterHooks);
            const oldChild = instance.subTree;
            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
            let transitionKeyChanged = false;
            const { getTransitionKey  } = innerChild.type;
            if (getTransitionKey) {
                const key = getTransitionKey();
                if (prevTransitionKey === undefined) prevTransitionKey = key;
                else if (key !== prevTransitionKey) {
                    prevTransitionKey = key;
                    transitionKeyChanged = true;
                }
            }
            // handle mode
            if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
                // update old tree's hooks in case of dynamic transition
                setTransitionHooks(oldInnerChild, leavingHooks);
                // switching between different views
                if (mode === "out-in") {
                    state.isLeaving = true;
                    // return placeholder node and queue update when leave finishes
                    leavingHooks.afterLeave = ()=>{
                        state.isLeaving = false;
                        instance.update();
                    };
                    return emptyPlaceholder(child);
                } else if (mode === "in-out" && innerChild.type !== Comment) leavingHooks.delayLeave = (el, earlyRemove, delayedLeave)=>{
                    const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                    leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                    // early removal callback
                    el._leaveCb = ()=>{
                        earlyRemove();
                        el._leaveCb = undefined;
                        delete enterHooks.delayedLeave;
                    };
                    enterHooks.delayedLeave = delayedLeave;
                };
            }
            return child;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes  } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
        leavingVNodesCache = Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
}
// The transition hooks are attached to the vnode as vnode.transition
// and will be called at appropriate timing in the renderer.
function resolveTransitionHooks(vnode2, props, state, instance) {
    const { appear , mode , persisted =false , onBeforeEnter , onEnter , onAfterEnter , onEnterCancelled , onBeforeLeave , onLeave , onAfterLeave , onLeaveCancelled , onBeforeAppear , onAppear , onAfterAppear , onAppearCancelled  } = props;
    const key1 = String(vnode2.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode2);
    const callHook1 = (hook, args)=>{
        hook && callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */ , args);
    };
    const callAsyncHook = (hook1, args)=>{
        const done = args[1];
        callHook1(hook1, args);
        if ((0, _shared.isArray)(hook1)) {
            if (hook1.every((hook)=>hook.length <= 1)) done();
        } else if (hook1.length <= 1) done();
    };
    const hooks = {
        mode,
        persisted,
        beforeEnter (el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
                if (appear) hook = onBeforeAppear || onBeforeEnter;
                else return;
            }
            // for same element (v-show)
            if (el._leaveCb) el._leaveCb(true);
            // for toggled element with same key (v-if)
            const leavingVNode = leavingVNodesCache[key1];
            if (leavingVNode && isSameVNodeType(vnode2, leavingVNode) && leavingVNode.el._leaveCb) // force early removal (not cancelled)
            leavingVNode.el._leaveCb();
            callHook1(hook, [
                el
            ]);
        },
        enter (el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
                if (appear) {
                    hook = onAppear || onEnter;
                    afterHook = onAfterAppear || onAfterEnter;
                    cancelHook = onAppearCancelled || onEnterCancelled;
                } else return;
            }
            let called = false;
            const done = el._enterCb = (cancelled)=>{
                if (called) return;
                called = true;
                if (cancelled) callHook1(cancelHook, [
                    el
                ]);
                else callHook1(afterHook, [
                    el
                ]);
                if (hooks.delayedLeave) hooks.delayedLeave();
                el._enterCb = undefined;
            };
            if (hook) callAsyncHook(hook, [
                el,
                done
            ]);
            else done();
        },
        leave (el, remove) {
            const key = String(vnode2.key);
            if (el._enterCb) el._enterCb(true);
            if (state.isUnmounting) return remove();
            callHook1(onBeforeLeave, [
                el
            ]);
            let called = false;
            const done = el._leaveCb = (cancelled)=>{
                if (called) return;
                called = true;
                remove();
                if (cancelled) callHook1(onLeaveCancelled, [
                    el
                ]);
                else callHook1(onAfterLeave, [
                    el
                ]);
                el._leaveCb = undefined;
                if (leavingVNodesCache[key] === vnode2) delete leavingVNodesCache[key];
            };
            leavingVNodesCache[key] = vnode2;
            if (onLeave) callAsyncHook(onLeave, [
                el,
                done
            ]);
            else done();
        },
        clone (vnode) {
            return resolveTransitionHooks(vnode, props, state, instance);
        }
    };
    return hooks;
}
// the placeholder really only handles one special case: KeepAlive
// in the case of a KeepAlive in a leave phase we need to return a KeepAlive
// placeholder with empty content to avoid the KeepAlive instance from being
// unmounted.
function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
    }
}
function getKeepAliveChild(vnode) {
    return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : undefined : vnode;
}
function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 /* COMPONENT */  && vnode.component) setTransitionHooks(vnode.component.subTree, hooks);
    else if (vnode.shapeFlag & 128 /* SUSPENSE */ ) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    } else vnode.transition = hooks;
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
    let ret = [];
    let keyedFragmentCount = 0;
    for(let i = 0; i < children.length; i++){
        let child = children[i];
        // #5360 inherit parent key in case of <template v-for>
        const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
        // handle fragment children case, e.g. v-for
        if (child.type === Fragment) {
            if (child.patchFlag & 128 /* KEYED_FRAGMENT */ ) keyedFragmentCount++;
            ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
        } else if (keepComment || child.type !== Comment) ret.push(key != null ? cloneVNode(child, {
            key
        }) : child);
    }
    // #1126 if a transition children list contains multiple sub fragments, these
    // fragments will be merged into a flat children array. Since each v-for
    // fragment may contain different static bindings inside, we need to de-op
    // these children to force full diffs to ensure correct behavior.
    if (keyedFragmentCount > 1) for(let i1 = 0; i1 < ret.length; i1++)ret[i1].patchFlag = -2 /* BAIL */ ;
    return ret;
}
// implementation, close to no-op
function defineComponent(options) {
    return (0, _shared.isFunction)(options) ? {
        setup: options,
        name: options.name
    } : options;
}
const isAsyncWrapper = (i)=>!!i.type.__asyncLoader;
function defineAsyncComponent(source) {
    if ((0, _shared.isFunction)(source)) source = {
        loader: source
    };
    const { loader , loadingComponent , errorComponent , delay =200 , timeout , suspensible =true , onError: userOnError  } = source;
    let pendingRequest = null;
    let resolvedComp;
    let retries = 0;
    const retry = ()=>{
        retries++;
        pendingRequest = null;
        return load();
    };
    const load = ()=>{
        let thisRequest;
        return pendingRequest || (thisRequest = pendingRequest = loader().catch((err)=>{
            err = err instanceof Error ? err : new Error(String(err));
            if (userOnError) return new Promise((resolve1, reject)=>{
                const userRetry = ()=>resolve1(retry());
                const userFail = ()=>reject(err);
                userOnError(err, userRetry, userFail, retries + 1);
            });
            else throw err;
        }).then((comp)=>{
            if (thisRequest !== pendingRequest && pendingRequest) return pendingRequest;
            if (!comp) warn(`Async component loader resolved to undefined. ` + `If you are using retry(), make sure to return its return value.`);
            // interop module default
            if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) comp = comp.default;
            if (comp && !(0, _shared.isObject)(comp) && !(0, _shared.isFunction)(comp)) throw new Error(`Invalid async component load result: ${comp}`);
            resolvedComp = comp;
            return comp;
        }));
    };
    return defineComponent({
        name: "AsyncComponentWrapper",
        __asyncLoader: load,
        get __asyncResolved () {
            return resolvedComp;
        },
        setup () {
            const instance = currentInstance;
            // already resolved
            if (resolvedComp) return ()=>createInnerComp(resolvedComp, instance);
            const onError = (err)=>{
                pendingRequest = null;
                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */ , !errorComponent /* do not throw in dev if user provided error component */ );
            };
            // suspense-controlled or SSR.
            if (suspensible && instance.suspense || isInSSRComponentSetup) return load().then((comp)=>{
                return ()=>createInnerComp(comp, instance);
            }).catch((err)=>{
                onError(err);
                return ()=>errorComponent ? createVNode(errorComponent, {
                        error: err
                    }) : null;
            });
            const loaded = (0, _reactivity.ref)(false);
            const error = (0, _reactivity.ref)();
            const delayed = (0, _reactivity.ref)(!!delay);
            if (delay) setTimeout(()=>{
                delayed.value = false;
            }, delay);
            if (timeout != null) setTimeout(()=>{
                if (!loaded.value && !error.value) {
                    const err = new Error(`Async component timed out after ${timeout}ms.`);
                    onError(err);
                    error.value = err;
                }
            }, timeout);
            load().then(()=>{
                loaded.value = true;
                if (instance.parent && isKeepAlive(instance.parent.vnode)) // parent is keep-alive, force update so the loaded component's
                // name is taken into account
                queueJob(instance.parent.update);
            }).catch((err)=>{
                onError(err);
                error.value = err;
            });
            return ()=>{
                if (loaded.value && resolvedComp) return createInnerComp(resolvedComp, instance);
                else if (error.value && errorComponent) return createVNode(errorComponent, {
                    error: error.value
                });
                else if (loadingComponent && !delayed.value) return createVNode(loadingComponent);
            };
        }
    });
}
function createInnerComp(comp, { vnode: { ref , props , children , shapeFlag  } , parent  }) {
    const vnode = createVNode(comp, props, children);
    // ensure inner component inherits the async wrapper's ref owner
    vnode.ref = ref;
    return vnode;
}
const isKeepAlive = (vnode)=>vnode.type.__isKeepAlive;
const KeepAliveImpl = {
    name: `KeepAlive`,
    // Marker for special handling inside the renderer. We are not using a ===
    // check directly on KeepAlive in the renderer, because importing it directly
    // would prevent it from being tree-shaken.
    __isKeepAlive: true,
    props: {
        include: [
            String,
            RegExp,
            Array
        ],
        exclude: [
            String,
            RegExp,
            Array
        ],
        max: [
            String,
            Number
        ]
    },
    setup (props, { slots  }) {
        const instance2 = getCurrentInstance();
        // KeepAlive communicates with the instantiated renderer via the
        // ctx where the renderer passes in its internals,
        // and the KeepAlive instance exposes activate/deactivate implementations.
        // The whole point of this is to avoid importing KeepAlive directly in the
        // renderer to facilitate tree-shaking.
        const sharedContext = instance2.ctx;
        // if the internal renderer is not registered, it indicates that this is server-side rendering,
        // for KeepAlive, we just need to render its children
        if (!sharedContext.renderer) return ()=>{
            const children = slots.default && slots.default();
            return children && children.length === 1 ? children[0] : children;
        };
        const cache = new Map();
        const keys = new Set();
        let current = null;
        instance2.__v_cache = cache;
        const parentSuspense = instance2.suspense;
        const { renderer: { p: patch , m: move , um: _unmount , o: { createElement  }  }  } = sharedContext;
        const storageContainer = createElement("div");
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized)=>{
            const instance = vnode.component;
            move(vnode, container, anchor, 0 /* ENTER */ , parentSuspense);
            // in case props have changed
            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
            queuePostRenderEffect(()=>{
                instance.isDeactivated = false;
                if (instance.a) (0, _shared.invokeArrayFns)(instance.a);
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance.parent, vnode);
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance);
        };
        sharedContext.deactivate = (vnode)=>{
            const instance = vnode.component;
            move(vnode, storageContainer, null, 1 /* LEAVE */ , parentSuspense);
            queuePostRenderEffect(()=>{
                if (instance.da) (0, _shared.invokeArrayFns)(instance.da);
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance.parent, vnode);
                instance.isDeactivated = true;
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance);
        };
        function unmount(vnode) {
            // reset the shapeFlag so it can be properly unmounted
            resetShapeFlag(vnode);
            _unmount(vnode, instance2, parentSuspense, true);
        }
        function pruneCache(filter) {
            cache.forEach((vnode, key)=>{
                const name = getComponentName(vnode.type);
                if (name && (!filter || !filter(name))) pruneCacheEntry(key);
            });
        }
        function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (!current || cached.type !== current.type) unmount(cached);
            else if (current) // current active instance should no longer be kept-alive.
            // we can't unmount it now but it might be later, so reset its flag now.
            resetShapeFlag(current);
            cache.delete(key);
            keys.delete(key);
        }
        // prune cache on include/exclude prop change
        watch(()=>[
                props.include,
                props.exclude
            ], ([include, exclude])=>{
            include && pruneCache((name)=>matches(include, name));
            exclude && pruneCache((name)=>!matches(exclude, name));
        }, // prune post-render after `current` has been updated
        {
            flush: "post",
            deep: true
        });
        // cache sub tree after render
        let pendingCacheKey = null;
        const cacheSubtree = ()=>{
            // fix #1621, the pendingCacheKey could be 0
            if (pendingCacheKey != null) cache.set(pendingCacheKey, getInnerChild(instance2.subTree));
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(()=>{
            cache.forEach((cached)=>{
                const { subTree , suspense  } = instance2;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type) {
                    // current instance will be unmounted as part of keep-alive's unmount
                    resetShapeFlag(vnode);
                    // but invoke its deactivated hook here
                    const da = vnode.component.da;
                    da && queuePostRenderEffect(da, suspense);
                    return;
                }
                unmount(cached);
            });
        });
        return ()=>{
            pendingCacheKey = null;
            if (!slots.default) return null;
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
                warn(`KeepAlive should contain exactly one component child.`);
                current = null;
                return children;
            } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ) && !(rawVNode.shapeFlag & 128 /* SUSPENSE */ )) {
                current = null;
                return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            const comp = vnode.type;
            // for async components, name check should be based in its loaded
            // inner component if available
            const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp);
            const { include , exclude , max  } = props;
            if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
                current = vnode;
                return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            // clone vnode if it's reused because we are going to mutate it
            if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128 /* SUSPENSE */ ) rawVNode.ssContent = vnode;
            }
            // #1513 it's possible for the returned vnode to be cloned due to attr
            // fallthrough or scopeId, so the vnode here may not be the final vnode
            // that is mounted. Instead of caching it directly, we store the pending
            // key and cache `instance.subTree` (the normalized vnode) in
            // beforeMount/beforeUpdate hooks.
            pendingCacheKey = key;
            if (cachedVNode) {
                // copy over mounted state
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) // recursively update transition hooks on subTree
                setTransitionHooks(vnode, vnode.transition);
                // avoid vnode being mounted as fresh
                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */ ;
                // make this key the freshest
                keys.delete(key);
                keys.add(key);
            } else {
                keys.add(key);
                // prune oldest entry
                if (max && keys.size > parseInt(max, 10)) pruneCacheEntry(keys.values().next().value);
            }
            // avoid vnode being unmounted
            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ;
            current = vnode;
            return isSuspense(rawVNode.type) ? rawVNode : vnode;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
    if ((0, _shared.isArray)(pattern)) return pattern.some((p)=>matches(p, name));
    else if ((0, _shared.isString)(pattern)) return pattern.split(",").includes(name);
    else if (pattern.test) return pattern.test(name);
    /* istanbul ignore next */ return false;
}
function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a" /* ACTIVATED */ , target);
}
function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da" /* DEACTIVATED */ , target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
    // cache the deactivate branch check wrapper for injected hooks so the same
    // hook can be properly deduped by the scheduler. "__wdc" stands for "with
    // deactivation check".
    const wrappedHook = hook.__wdc || (hook.__wdc = ()=>{
        // only fire the hook if the target instance is NOT in a deactivated branch.
        let current = target;
        while(current){
            if (current.isDeactivated) return;
            current = current.parent;
        }
        return hook();
    });
    injectHook(type, wrappedHook, target);
    // In addition to registering it on the target instance, we walk up the parent
    // chain and register it on all ancestor instances that are keep-alive roots.
    // This avoids the need to walk the entire component tree when invoking these
    // hooks, and more importantly, avoids the need to track child components in
    // arrays.
    if (target) {
        let current = target.parent;
        while(current && current.parent){
            if (isKeepAlive(current.parent.vnode)) injectToKeepAliveRoot(wrappedHook, type, target, current);
            current = current.parent;
        }
    }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    // injectHook wraps the original for error handling, so make sure to remove
    // the wrapped version.
    const injected = injectHook(type, hook, keepAliveRoot, true);
    onUnmounted(()=>{
        (0, _shared.remove)(keepAliveRoot[type], injected);
    }, target);
}
function resetShapeFlag(vnode) {
    let shapeFlag = vnode.shapeFlag;
    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ;
    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */ ) shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */ ;
    vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
    return vnode.shapeFlag & 128 /* SUSPENSE */  ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
        const hooks = target[type] || (target[type] = []);
        // cache the error handling wrapper for injected hooks so the same hook
        // can be properly deduped by the scheduler. "__weh" stands for "with error
        // handling".
        const wrappedHook = hook.__weh || (hook.__weh = (...args)=>{
            if (target.isUnmounted) return;
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            (0, _reactivity.pauseTracking)();
            // Set currentInstance during hook invocation.
            // This assumes the hook does not synchronously trigger other hooks, which
            // can only be false when the user does something really funky.
            setCurrentInstance(target);
            const res = callWithAsyncErrorHandling(hook, target, type, args);
            unsetCurrentInstance();
            (0, _reactivity.resetTracking)();
            return res;
        });
        if (prepend) hooks.unshift(wrappedHook);
        else hooks.push(wrappedHook);
        return wrappedHook;
    } else {
        const apiName = (0, _shared.toHandlerKey)(ErrorTypeStrings[type].replace(/ hook$/, ""));
        warn(`${apiName} is called when there is no active component instance to be ` + `associated with. ` + `Lifecycle injection APIs can only be used during execution of setup().` + (` If you are using async setup(), make sure to register lifecycle ` + `hooks before the first await statement.`));
    }
}
const createHook = (lifecycle)=>(hook, target = currentInstance)=>// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
        (!isInSSRComponentSetup || lifecycle === "sp" /* SERVER_PREFETCH */ ) && injectHook(lifecycle, hook, target);
const onBeforeMount = createHook("bm" /* BEFORE_MOUNT */ );
const onMounted = createHook("m" /* MOUNTED */ );
const onBeforeUpdate = createHook("bu" /* BEFORE_UPDATE */ );
const onUpdated = createHook("u" /* UPDATED */ );
const onBeforeUnmount = createHook("bum" /* BEFORE_UNMOUNT */ );
const onUnmounted = createHook("um" /* UNMOUNTED */ );
const onServerPrefetch = createHook("sp" /* SERVER_PREFETCH */ );
const onRenderTriggered = createHook("rtg" /* RENDER_TRIGGERED */ );
const onRenderTracked = createHook("rtc" /* RENDER_TRACKED */ );
function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec" /* ERROR_CAPTURED */ , hook, target);
}
/**
Runtime helper for applying directives to a vnode. Example usage:

const comp = resolveComponent('comp')
const foo = resolveDirective('foo')
const bar = resolveDirective('bar')

return withDirectives(h(comp), [
  [foo, this.x],
  [bar, this.y]
])
*/ function validateDirectiveName(name) {
    if ((0, _shared.isBuiltInDirective)(name)) warn("Do not use built-in directive ids as custom directive id: " + name);
}
/**
 * Adds directives to a VNode.
 */ function withDirectives(vnode, directives) {
    const internalInstance = currentRenderingInstance;
    if (internalInstance === null) {
        warn(`withDirectives can only be used inside render functions.`);
        return vnode;
    }
    const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
    const bindings = vnode.dirs || (vnode.dirs = []);
    for(let i = 0; i < directives.length; i++){
        let [dir, value, arg, modifiers = (0, _shared.EMPTY_OBJ)] = directives[i];
        if ((0, _shared.isFunction)(dir)) dir = {
            mounted: dir,
            updated: dir
        };
        if (dir.deep) traverse(value);
        bindings.push({
            dir,
            instance,
            value,
            oldValue: void 0,
            arg,
            modifiers
        });
    }
    return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for(let i = 0; i < bindings.length; i++){
        const binding = bindings[i];
        if (oldBindings) binding.oldValue = oldBindings[i].value;
        let hook = binding.dir[name];
        if (hook) {
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            (0, _reactivity.pauseTracking)();
            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */ , [
                vnode.el,
                binding,
                vnode,
                prevVNode
            ]);
            (0, _reactivity.resetTracking)();
        }
    }
}
const COMPONENTS = "components";
const DIRECTIVES = "directives";
/**
 * @private
 */ function resolveComponent(name, maybeSelfReference) {
    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
/**
 * @private
 */ function resolveDynamicComponent(component) {
    if ((0, _shared.isString)(component)) return resolveAsset(COMPONENTS, component, false) || component;
    else // invalid types will fallthrough to createVNode and raise warning
    return component || NULL_DYNAMIC_COMPONENT;
}
/**
 * @private
 */ function resolveDirective(name) {
    return resolveAsset(DIRECTIVES, name);
}
// implementation
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
        const Component = instance.type;
        // explicit self name has highest priority
        if (type === COMPONENTS) {
            const selfName = getComponentName(Component, false);
            if (selfName && (selfName === name || selfName === (0, _shared.camelize)(name) || selfName === (0, _shared.capitalize)((0, _shared.camelize)(name)))) return Component;
        }
        const res = // local registration
        // check instance[type] first which is resolved for options API
        resolve(instance[type] || Component[type], name) || // global registration
        resolve(instance.appContext[type], name);
        if (!res && maybeSelfReference) // fallback to implicit self-reference
        return Component;
        if (warnMissing && !res) {
            const extra = type === COMPONENTS ? `\nIf this is a native custom element, make sure to exclude it from ` + `component resolution via compilerOptions.isCustomElement.` : ``;
            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
        }
        return res;
    } else warn(`resolve${(0, _shared.capitalize)(type.slice(0, -1))} ` + `can only be used in render() or setup().`);
}
function resolve(registry, name) {
    return registry && (registry[name] || registry[(0, _shared.camelize)(name)] || registry[(0, _shared.capitalize)((0, _shared.camelize)(name))]);
}
/**
 * Actual implementation
 */ function renderList(source, renderItem, cache, index) {
    let ret;
    const cached = cache && cache[index];
    if ((0, _shared.isArray)(source) || (0, _shared.isString)(source)) {
        ret = new Array(source.length);
        for(let i = 0, l = source.length; i < l; i++)ret[i] = renderItem(source[i], i, undefined, cached && cached[i]);
    } else if (typeof source === "number") {
        if (!Number.isInteger(source)) warn(`The v-for range expect an integer value but got ${source}.`);
        ret = new Array(source);
        for(let i = 0; i < source; i++)ret[i] = renderItem(i + 1, i, undefined, cached && cached[i]);
    } else if ((0, _shared.isObject)(source)) {
        if (source[Symbol.iterator]) ret = Array.from(source, (item, i)=>renderItem(item, i, undefined, cached && cached[i]));
        else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for(let i = 0, l = keys.length; i < l; i++){
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i, cached && cached[i]);
            }
        }
    } else ret = [];
    if (cache) cache[index] = ret;
    return ret;
}
/**
 * Compiler runtime helper for creating dynamic slots object
 * @private
 */ function createSlots(slots, dynamicSlots) {
    for(let i = 0; i < dynamicSlots.length; i++){
        const slot = dynamicSlots[i];
        // array of dynamic slot generated by <template v-for="..." #[...]>
        if ((0, _shared.isArray)(slot)) for(let j = 0; j < slot.length; j++)slots[slot[j].name] = slot[j].fn;
        else if (slot) // conditional single slot generated by <template v-if="..." #foo>
        slots[slot.name] = slot.fn;
    }
    return slots;
}
/**
 * Compiler runtime helper for rendering `<slot/>`
 * @private
 */ function renderSlot(slots, name, props = {}, // this is not a user-facing function, so the fallback is always generated by
// the compiler and guaranteed to be a function returning an array
fallback, noSlotted) {
    if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) return createVNode("slot", name === "default" ? null : {
        name
    }, fallback && fallback());
    let slot = slots[name];
    if (slot && slot.length > 1) {
        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` + `function. You need to mark this component with $dynamic-slots in the ` + `parent template.`);
        slot = ()=>[];
    }
    // a compiled slot disables block tracking by default to avoid manual
    // invocation interfering with template-based block tracking, but in
    // `renderSlot` we can be sure that it's template-based so we can force
    // enable it.
    if (slot && slot._c) slot._d = false;
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const rendered = createBlock(Fragment, {
        key: props.key || `_${name}`
    }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */  ? 64 /* STABLE_FRAGMENT */  : -2 /* BAIL */ );
    if (!noSlotted && rendered.scopeId) rendered.slotScopeIds = [
        rendered.scopeId + "-s"
    ];
    if (slot && slot._c) slot._d = true;
    return rendered;
}
function ensureValidVNode(vnodes) {
    return vnodes.some((child)=>{
        if (!isVNode(child)) return true;
        if (child.type === Comment) return false;
        if (child.type === Fragment && !ensureValidVNode(child.children)) return false;
        return true;
    }) ? vnodes : null;
}
/**
 * For prefixing keys in v-on="obj" with "on"
 * @private
 */ function toHandlers(obj) {
    const ret = {};
    if (!(0, _shared.isObject)(obj)) {
        warn(`v-on with no argument expects an object value.`);
        return ret;
    }
    for(const key in obj)ret[(0, _shared.toHandlerKey)(key)] = obj[key];
    return ret;
}
/**
 * #2437 In Vue 3, functional components do not have a public instance proxy but
 * they exist in the internal parent chain. For code that relies on traversing
 * public $parent chains, skip functional ones and go to the parent instead.
 */ const getPublicInstance = (i)=>{
    if (!i) return null;
    if (isStatefulComponent(i)) return getExposeProxy(i) || i.proxy;
    return getPublicInstance(i.parent);
};
const publicPropertiesMap = // Move PURE marker to new line to workaround compiler discarding it
// due to type annotation
/*#__PURE__*/ (0, _shared.extend)(Object.create(null), {
    $: (i)=>i,
    $el: (i)=>i.vnode.el,
    $data: (i)=>i.data,
    $props: (i)=>(0, _reactivity.shallowReadonly)(i.props),
    $attrs: (i)=>(0, _reactivity.shallowReadonly)(i.attrs),
    $slots: (i)=>(0, _reactivity.shallowReadonly)(i.slots),
    $refs: (i)=>(0, _reactivity.shallowReadonly)(i.refs),
    $parent: (i)=>getPublicInstance(i.parent),
    $root: (i)=>getPublicInstance(i.root),
    $emit: (i)=>i.emit,
    $options: (i)=>__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type,
    $forceUpdate: (i)=>i.f || (i.f = ()=>queueJob(i.update)),
    $nextTick: (i)=>i.n || (i.n = nextTick.bind(i.proxy)),
    $watch: (i)=>__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : (0, _shared.NOOP)
});
const isReservedPrefix = (key)=>key === "_" || key === "$";
const PublicInstanceProxyHandlers = {
    get ({ _: instance  }, key) {
        const { ctx , setupState , data , props , accessCache , type , appContext  } = instance;
        // for internal formatters to know that this is a Vue instance
        if (key === "__isVue") return true;
        // prioritize <script setup> bindings during dev.
        // this allows even properties that start with _ or $ to be used - so that
        // it aligns with the production behavior where the render fn is inlined and
        // indeed has access to all declared variables.
        if (setupState !== (0, _shared.EMPTY_OBJ) && setupState.__isScriptSetup && (0, _shared.hasOwn)(setupState, key)) return setupState[key];
        // data / props / ctx
        // This getter gets called for every property access on the render context
        // during render and is a major hotspot. The most expensive part of this
        // is the multiple hasOwn() calls. It's much faster to do a simple property
        // access on a plain object, so we use an accessCache object (with null
        // prototype) to memoize what access type a key corresponds to.
        let normalizedProps;
        if (key[0] !== "$") {
            const n = accessCache[key];
            if (n !== undefined) switch(n){
                case 1 /* SETUP */ :
                    return setupState[key];
                case 2 /* DATA */ :
                    return data[key];
                case 4 /* CONTEXT */ :
                    return ctx[key];
                case 3 /* PROPS */ :
                    return props[key];
            }
            else if (setupState !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(setupState, key)) {
                accessCache[key] = 1 /* SETUP */ ;
                return setupState[key];
            } else if (data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key)) {
                accessCache[key] = 2 /* DATA */ ;
                return data[key];
            } else if (// only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) && (0, _shared.hasOwn)(normalizedProps, key)) {
                accessCache[key] = 3 /* PROPS */ ;
                return props[key];
            } else if (ctx !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(ctx, key)) {
                accessCache[key] = 4 /* CONTEXT */ ;
                return ctx[key];
            } else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) accessCache[key] = 0 /* OTHER */ ;
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        // public $xxx properties
        if (publicGetter) {
            if (key === "$attrs") {
                (0, _reactivity.track)(instance, "get" /* GET */ , key);
                markAttrsAccessed();
            }
            return publicGetter(instance);
        } else if (// css module (injected by vue-loader)
        (cssModule = type.__cssModules) && (cssModule = cssModule[key])) return cssModule;
        else if (ctx !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(ctx, key)) {
            // user may set custom properties to `this` that start with `$`
            accessCache[key] = 4 /* CONTEXT */ ;
            return ctx[key];
        } else if (globalProperties = appContext.config.globalProperties, (0, _shared.hasOwn)(globalProperties, key)) return globalProperties[key];
        else if (currentRenderingInstance && (!(0, _shared.isString)(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
        // to infinite warning loop
        key.indexOf("__v") !== 0)) {
            if (data !== (0, _shared.EMPTY_OBJ) && isReservedPrefix(key[0]) && (0, _shared.hasOwn)(data, key)) warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` + `character ("$" or "_") and is not proxied on the render context.`);
            else if (instance === currentRenderingInstance) warn(`Property ${JSON.stringify(key)} was accessed during render ` + `but is not defined on instance.`);
        }
    },
    set ({ _: instance  }, key, value) {
        const { data , setupState , ctx  } = instance;
        if (setupState !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(setupState, key)) {
            setupState[key] = value;
            return true;
        } else if (data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key)) {
            data[key] = value;
            return true;
        } else if ((0, _shared.hasOwn)(instance.props, key)) {
            warn(`Attempting to mutate prop "${key}". Props are readonly.`, instance);
            return false;
        }
        if (key[0] === "$" && key.slice(1) in instance) {
            warn(`Attempting to mutate public property "${key}". ` + `Properties starting with $ are reserved and readonly.`, instance);
            return false;
        } else if (key in instance.appContext.config.globalProperties) Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            value
        });
        else ctx[key] = value;
        return true;
    },
    has ({ _: { data , setupState , accessCache , ctx , appContext , propsOptions  }  }, key) {
        let normalizedProps;
        return !!accessCache[key] || data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key) || setupState !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(setupState, key) || (normalizedProps = propsOptions[0]) && (0, _shared.hasOwn)(normalizedProps, key) || (0, _shared.hasOwn)(ctx, key) || (0, _shared.hasOwn)(publicPropertiesMap, key) || (0, _shared.hasOwn)(appContext.config.globalProperties, key);
    },
    defineProperty (target, key, descriptor) {
        if (descriptor.get != null) // invalidate key cache of a getter based property #5417
        target._.accessCache[key] = 0;
        else if ((0, _shared.hasOwn)(descriptor, "value")) this.set(target, key, descriptor.value, null);
        return Reflect.defineProperty(target, key, descriptor);
    }
};
PublicInstanceProxyHandlers.ownKeys = (target)=>{
    warn(`Avoid app logic that relies on enumerating keys on a component instance. ` + `The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
};
const RuntimeCompiledPublicInstanceProxyHandlers = /*#__PURE__*/ (0, _shared.extend)({}, PublicInstanceProxyHandlers, {
    get (target, key) {
        // fast path for unscopables when using `with` block
        if (key === Symbol.unscopables) return;
        return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has (_, key) {
        const has = key[0] !== "_" && !(0, _shared.isGloballyWhitelisted)(key);
        if (!has && PublicInstanceProxyHandlers.has(_, key)) warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        return has;
    }
});
// dev only
// In dev mode, the proxy target exposes the same properties as seen on `this`
// for easier console inspection. In prod mode it will be an empty object so
// these properties definitions can be skipped.
function createDevRenderContext(instance) {
    const target = {};
    // expose internal instance for proxy handlers
    Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: ()=>instance
    });
    // expose public properties
    Object.keys(publicPropertiesMap).forEach((key)=>{
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: ()=>publicPropertiesMap[key](instance),
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: (0, _shared.NOOP)
        });
    });
    return target;
}
// dev only
function exposePropsOnRenderContext(instance) {
    const { ctx , propsOptions: [propsOptions]  } = instance;
    if (propsOptions) Object.keys(propsOptions).forEach((key)=>{
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>instance.props[key],
            set: (0, _shared.NOOP)
        });
    });
}
// dev only
function exposeSetupStateOnRenderContext(instance) {
    const { ctx , setupState  } = instance;
    Object.keys((0, _reactivity.toRaw)(setupState)).forEach((key)=>{
        if (!setupState.__isScriptSetup) {
            if (isReservedPrefix(key[0])) {
                warn(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" ` + `which are reserved prefixes for Vue internals.`);
                return;
            }
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: ()=>setupState[key],
                set: (0, _shared.NOOP)
            });
        }
    });
}
function createDuplicateChecker() {
    const cache = Object.create(null);
    return (type, key)=>{
        if (cache[key]) warn(`${type} property "${key}" is already defined in ${cache[key]}.`);
        else cache[key] = type;
    };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    // do not cache property access on public proxy during state initialization
    shouldCacheAccess = false;
    // call beforeCreate first before accessing other options since
    // the hook may mutate resolved options (#2791)
    if (options.beforeCreate) callHook(options.beforeCreate, instance, "bc" /* BEFORE_CREATE */ );
    const { // state
    data: dataOptions , computed: computedOptions , methods , watch: watchOptions , provide: provideOptions , inject: injectOptions , // lifecycle
    created , beforeMount , mounted , beforeUpdate , updated , activated , deactivated , beforeDestroy , beforeUnmount , destroyed , unmounted , render , renderTracked , renderTriggered , errorCaptured , serverPrefetch , // public API
    expose , inheritAttrs , // assets
    components , directives , filters  } = options;
    const checkDuplicateProperties = createDuplicateChecker();
    {
        const [propsOptions] = instance.propsOptions;
        if (propsOptions) for(const key in propsOptions)checkDuplicateProperties("Props" /* PROPS */ , key);
    }
    // options initialization order (to be consistent with Vue 2):
    // - props (already done outside of this function)
    // - inject
    // - methods
    // - data (deferred since it relies on `this` access)
    // - computed
    // - watch (deferred since it relies on `this` access)
    if (injectOptions) resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
    if (methods) for(const key4 in methods){
        const methodHandler = methods[key4];
        if ((0, _shared.isFunction)(methodHandler)) {
            Object.defineProperty(ctx, key4, {
                value: methodHandler.bind(publicThis),
                configurable: true,
                enumerable: true,
                writable: true
            });
            checkDuplicateProperties("Methods" /* METHODS */ , key4);
        } else warn(`Method "${key4}" has type "${typeof methodHandler}" in the component definition. ` + `Did you reference the function correctly?`);
    }
    if (dataOptions) {
        if (!(0, _shared.isFunction)(dataOptions)) warn(`The data option must be a function. ` + `Plain object usage is no longer supported.`);
        const data = dataOptions.call(publicThis, publicThis);
        if ((0, _shared.isPromise)(data)) warn(`data() returned a Promise - note data() cannot be async; If you ` + `intend to perform data fetching before component renders, use ` + `async setup() + <Suspense>.`);
        if (!(0, _shared.isObject)(data)) warn(`data() should return an object.`);
        else {
            instance.data = (0, _reactivity.reactive)(data);
            for(const key in data){
                checkDuplicateProperties("Data" /* DATA */ , key);
                // expose data on ctx during dev
                if (!isReservedPrefix(key[0])) Object.defineProperty(ctx, key, {
                    configurable: true,
                    enumerable: true,
                    get: ()=>data[key],
                    set: (0, _shared.NOOP)
                });
            }
        }
    }
    // state initialization complete at this point - start caching access
    shouldCacheAccess = true;
    if (computedOptions) for(const key2 in computedOptions){
        const opt = computedOptions[key2];
        const get = (0, _shared.isFunction)(opt) ? opt.bind(publicThis, publicThis) : (0, _shared.isFunction)(opt.get) ? opt.get.bind(publicThis, publicThis) : (0, _shared.NOOP);
        if (get === (0, _shared.NOOP)) warn(`Computed property "${key2}" has no getter.`);
        const set = !(0, _shared.isFunction)(opt) && (0, _shared.isFunction)(opt.set) ? opt.set.bind(publicThis) : ()=>{
            warn(`Write operation failed: computed property "${key2}" is readonly.`);
        };
        const c = computed({
            get,
            set
        });
        Object.defineProperty(ctx, key2, {
            enumerable: true,
            configurable: true,
            get: ()=>c.value,
            set: (v)=>c.value = v
        });
        checkDuplicateProperties("Computed" /* COMPUTED */ , key2);
    }
    if (watchOptions) for(const key3 in watchOptions)createWatcher(watchOptions[key3], ctx, publicThis, key3);
    if (provideOptions) {
        const provides = (0, _shared.isFunction)(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key)=>{
            provide(key, provides[key]);
        });
    }
    if (created) callHook(created, instance, "c" /* CREATED */ );
    function registerLifecycleHook(register, hook) {
        if ((0, _shared.isArray)(hook)) hook.forEach((_hook)=>register(_hook.bind(publicThis)));
        else if (hook) register(hook.bind(publicThis));
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if ((0, _shared.isArray)(expose)) {
        if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = {});
            expose.forEach((key)=>{
                Object.defineProperty(exposed, key, {
                    get: ()=>publicThis[key],
                    set: (val)=>publicThis[key] = val
                });
            });
        } else if (!instance.exposed) instance.exposed = {};
    }
    // options that are handled when creating the instance but also need to be
    // applied from mixins
    if (render && instance.render === (0, _shared.NOOP)) instance.render = render;
    if (inheritAttrs != null) instance.inheritAttrs = inheritAttrs;
    // asset options.
    if (components) instance.components = components;
    if (directives) instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = (0, _shared.NOOP), unwrapRef = false) {
    if ((0, _shared.isArray)(injectOptions)) injectOptions = normalizeInject(injectOptions);
    for(const key in injectOptions){
        const opt = injectOptions[key];
        let injected;
        if ((0, _shared.isObject)(opt)) {
            if ("default" in opt) injected = inject(opt.from || key, opt.default, true);
            else injected = inject(opt.from || key);
        } else injected = inject(opt);
        if ((0, _reactivity.isRef)(injected)) {
            // TODO remove the check in 3.3
            if (unwrapRef) Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: ()=>injected.value,
                set: (v)=>injected.value = v
            });
            else {
                warn(`injected property "${key}" is a ref and will be auto-unwrapped ` + `and no longer needs \`.value\` in the next minor release. ` + `To opt-in to the new behavior now, ` + `set \`app.config.unwrapInjectedRef = true\` (this config is ` + `temporary and will not be needed in the future.)`);
                ctx[key] = injected;
            }
        } else ctx[key] = injected;
        checkDuplicateProperties("Inject" /* INJECT */ , key);
    }
}
function callHook(hook, instance, type) {
    callWithAsyncErrorHandling((0, _shared.isArray)(hook) ? hook.map((h1)=>h1.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
    const getter = key.includes(".") ? createPathGetter(publicThis, key) : ()=>publicThis[key];
    if ((0, _shared.isString)(raw)) {
        const handler = ctx[raw];
        if ((0, _shared.isFunction)(handler)) watch(getter, handler);
        else warn(`Invalid watch handler specified by key "${raw}"`, handler);
    } else if ((0, _shared.isFunction)(raw)) watch(getter, raw.bind(publicThis));
    else if ((0, _shared.isObject)(raw)) {
        if ((0, _shared.isArray)(raw)) raw.forEach((r)=>createWatcher(r, ctx, publicThis, key));
        else {
            const handler = (0, _shared.isFunction)(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
            if ((0, _shared.isFunction)(handler)) watch(getter, handler, raw);
            else warn(`Invalid watch handler specified by key "${raw.handler}"`, handler);
        }
    } else warn(`Invalid watch option: "${key}"`, raw);
}
/**
 * Resolve merged options and cache it on the component.
 * This is done only once per-component since the merging does not involve
 * instances.
 */ function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins , extends: extendsOptions  } = base;
    const { mixins: globalMixins , optionsCache: cache , config: { optionMergeStrategies  }  } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) resolved = cached;
    else if (!globalMixins.length && !mixins && !extendsOptions) resolved = base;
    else {
        resolved = {};
        if (globalMixins.length) globalMixins.forEach((m)=>mergeOptions(resolved, m, optionMergeStrategies, true));
        mergeOptions(resolved, base, optionMergeStrategies);
    }
    cache.set(base, resolved);
    return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins , extends: extendsOptions  } = from;
    if (extendsOptions) mergeOptions(to, extendsOptions, strats, true);
    if (mixins) mixins.forEach((m)=>mergeOptions(to, m, strats, true));
    for(const key in from)if (asMixin && key === "expose") warn(`"expose" option is ignored when declared in mixins or extends. ` + `It should only be declared in the base component itself.`);
    else {
        const strat = internalOptionMergeStrats[key] || strats && strats[key];
        to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
    return to;
}
const internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeObjectOptions,
    emits: mergeObjectOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeAsArray,
    created: mergeAsArray,
    beforeMount: mergeAsArray,
    mounted: mergeAsArray,
    beforeUpdate: mergeAsArray,
    updated: mergeAsArray,
    beforeDestroy: mergeAsArray,
    beforeUnmount: mergeAsArray,
    destroyed: mergeAsArray,
    unmounted: mergeAsArray,
    activated: mergeAsArray,
    deactivated: mergeAsArray,
    errorCaptured: mergeAsArray,
    serverPrefetch: mergeAsArray,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch
    watch: mergeWatchOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
};
function mergeDataFn(to, from) {
    if (!from) return to;
    if (!to) return from;
    return function mergedDataFn() {
        return (0, _shared.extend)((0, _shared.isFunction)(to) ? to.call(this, this) : to, (0, _shared.isFunction)(from) ? from.call(this, this) : from);
    };
}
function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
    if ((0, _shared.isArray)(raw)) {
        const res = {};
        for(let i = 0; i < raw.length; i++)res[raw[i]] = raw[i];
        return res;
    }
    return raw;
}
function mergeAsArray(to, from) {
    return to ? [
        ...new Set([].concat(to, from))
    ] : from;
}
function mergeObjectOptions(to, from) {
    return to ? (0, _shared.extend)((0, _shared.extend)(Object.create(null), to), from) : from;
}
function mergeWatchOptions(to, from) {
    if (!to) return from;
    if (!from) return to;
    const merged = (0, _shared.extend)(Object.create(null), to);
    for(const key in from)merged[key] = mergeAsArray(to[key], from[key]);
    return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
    const props = {};
    const attrs = {};
    (0, _shared.def)(attrs, InternalObjectKey, 1);
    instance.propsDefaults = Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    // ensure all declared prop keys are present
    for(const key in instance.propsOptions[0])if (!(key in props)) props[key] = undefined;
    validateProps(rawProps || {}, props, instance);
    if (isStateful) // stateful
    instance.props = isSSR ? props : (0, _reactivity.shallowReactive)(props);
    else if (!instance.type.props) // functional w/ optional props, props === attrs
    instance.props = attrs;
    else // functional w/ declared props
    instance.props = props;
    instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const { props , attrs , vnode: { patchFlag  }  } = instance;
    const rawCurrentProps = (0, _reactivity.toRaw)(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (// always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !(instance.type.__hmrId || instance.parent && instance.parent.type.__hmrId) && (optimized || patchFlag > 0) && !(patchFlag & 16 /* FULL_PROPS */ )) {
        if (patchFlag & 8 /* PROPS */ ) {
            // Compiler-generated props & no keys change, just set the updated
            // the props.
            const propsToUpdate = instance.vnode.dynamicProps;
            for(let i = 0; i < propsToUpdate.length; i++){
                let key = propsToUpdate[i];
                // skip if the prop key is a declared emit event listener
                if (isEmitListener(instance.emitsOptions, key)) continue;
                // PROPS flag guarantees rawProps to be non-null
                const value = rawProps[key];
                if (options) {
                    // attr / props separation was done on init and will be consistent
                    // in this code path, so just check if attrs have it.
                    if ((0, _shared.hasOwn)(attrs, key)) {
                        if (value !== attrs[key]) {
                            attrs[key] = value;
                            hasAttrsChanged = true;
                        }
                    } else {
                        const camelizedKey = (0, _shared.camelize)(key);
                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
                    }
                } else if (value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                }
            }
        }
    } else {
        // full props update.
        if (setFullProps(instance, rawProps, props, attrs)) hasAttrsChanged = true;
        // in case of dynamic props, check if we need to delete keys from
        // the props object
        let kebabKey;
        for(const key in rawCurrentProps)if (!rawProps || !(0, _shared.hasOwn)(rawProps, key) && ((kebabKey = (0, _shared.hyphenate)(key)) === key || !(0, _shared.hasOwn)(rawProps, kebabKey))) {
            if (options) {
                if (rawPrevProps && (rawPrevProps[key] !== undefined || // for kebab-case
                rawPrevProps[kebabKey] !== undefined)) props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true);
            } else delete props[key];
        }
        // in the case of functional component w/o props declaration, props and
        // attrs point to the same object so it should already have been updated.
        if (attrs !== rawCurrentProps) {
            for(const key in attrs)if (!rawProps || !(0, _shared.hasOwn)(rawProps, key) && true) {
                delete attrs[key];
                hasAttrsChanged = true;
            }
        }
    }
    // trigger updates for $attrs in case it's used in component slots
    if (hasAttrsChanged) (0, _reactivity.trigger)(instance, "set" /* SET */ , "$attrs");
    validateProps(rawProps || {}, props, instance);
}
function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) for(let key in rawProps){
        // key, ref are reserved and never passed down
        if ((0, _shared.isReservedProp)(key)) continue;
        const value = rawProps[key];
        // prop option names are camelized during normalization, so to support
        // kebab -> camel conversion here we need to camelize the key.
        let camelKey;
        if (options && (0, _shared.hasOwn)(options, camelKey = (0, _shared.camelize)(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) props[camelKey] = value;
            else (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (!(key in attrs) || value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
            }
        }
    }
    if (needCastKeys) {
        const rawCurrentProps = (0, _reactivity.toRaw)(props);
        const castValues = rawCastValues || (0, _shared.EMPTY_OBJ);
        for(let i = 0; i < needCastKeys.length; i++){
            const key = needCastKeys[i];
            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !(0, _shared.hasOwn)(castValues, key));
        }
    }
    return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
        const hasDefault = (0, _shared.hasOwn)(opt, "default");
        // default values
        if (hasDefault && value === undefined) {
            const defaultValue = opt.default;
            if (opt.type !== Function && (0, _shared.isFunction)(defaultValue)) {
                const { propsDefaults  } = instance;
                if (key in propsDefaults) value = propsDefaults[key];
                else {
                    setCurrentInstance(instance);
                    value = propsDefaults[key] = defaultValue.call(null, props);
                    unsetCurrentInstance();
                }
            } else value = defaultValue;
        }
        // boolean casting
        if (opt[0 /* shouldCast */ ]) {
            if (isAbsent && !hasDefault) value = false;
            else if (opt[1 /* shouldCastTrue */ ] && (value === "" || value === (0, _shared.hyphenate)(key))) value = true;
        }
    }
    return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) return cached;
    const raw2 = comp.props;
    const normalized = {};
    const needCastKeys = [];
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0, _shared.isFunction)(comp)) {
        const extendProps = (raw)=>{
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw, appContext, true);
            (0, _shared.extend)(normalized, props);
            if (keys) needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendProps);
        if (comp.extends) extendProps(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendProps);
    }
    if (!raw2 && !hasExtends) {
        cache.set(comp, (0, _shared.EMPTY_ARR));
        return 0, _shared.EMPTY_ARR;
    }
    if ((0, _shared.isArray)(raw2)) for(let i = 0; i < raw2.length; i++){
        if (!(0, _shared.isString)(raw2[i])) warn(`props must be strings when using array syntax.`, raw2[i]);
        const normalizedKey = (0, _shared.camelize)(raw2[i]);
        if (validatePropName(normalizedKey)) normalized[normalizedKey] = (0, _shared.EMPTY_OBJ);
    }
    else if (raw2) {
        if (!(0, _shared.isObject)(raw2)) warn(`invalid props options`, raw2);
        for(const key in raw2){
            const normalizedKey = (0, _shared.camelize)(key);
            if (validatePropName(normalizedKey)) {
                const opt = raw2[key];
                const prop = normalized[normalizedKey] = (0, _shared.isArray)(opt) || (0, _shared.isFunction)(opt) ? {
                    type: opt
                } : opt;
                if (prop) {
                    const booleanIndex = getTypeIndex(Boolean, prop.type);
                    const stringIndex = getTypeIndex(String, prop.type);
                    prop[0 /* shouldCast */ ] = booleanIndex > -1;
                    prop[1 /* shouldCastTrue */ ] = stringIndex < 0 || booleanIndex < stringIndex;
                    // if the prop needs boolean casting or default value
                    if (booleanIndex > -1 || (0, _shared.hasOwn)(prop, "default")) needCastKeys.push(normalizedKey);
                }
            }
        }
    }
    const res = [
        normalized,
        needCastKeys
    ];
    cache.set(comp, res);
    return res;
}
function validatePropName(key) {
    if (key[0] !== "$") return true;
    else warn(`Invalid prop name: "${key}" is a reserved property.`);
    return false;
}
// use function string name to check type constructors
// so that it works across vms / iframes.
function getType(ctor) {
    const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : ctor === null ? "null" : "";
}
function isSameType(a, b) {
    return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
    if ((0, _shared.isArray)(expectedTypes)) return expectedTypes.findIndex((t)=>isSameType(t, type));
    else if ((0, _shared.isFunction)(expectedTypes)) return isSameType(expectedTypes, type) ? 0 : -1;
    return -1;
}
/**
 * dev only
 */ function validateProps(rawProps, props, instance) {
    const resolvedValues = (0, _reactivity.toRaw)(props);
    const options = instance.propsOptions[0];
    for(const key in options){
        let opt = options[key];
        if (opt == null) continue;
        validateProp(key, resolvedValues[key], opt, !(0, _shared.hasOwn)(rawProps, key) && !(0, _shared.hasOwn)(rawProps, (0, _shared.hyphenate)(key)));
    }
}
/**
 * dev only
 */ function validateProp(name, value, prop, isAbsent) {
    const { type , required , validator  } = prop;
    // required!
    if (required && isAbsent) {
        warn('Missing required prop: "' + name + '"');
        return;
    }
    // missing but optional
    if (value == null && !prop.required) return;
    // type check
    if (type != null && type !== true) {
        let isValid = false;
        const types = (0, _shared.isArray)(type) ? type : [
            type
        ];
        const expectedTypes = [];
        // value is valid as long as one of the specified types match
        for(let i = 0; i < types.length && !isValid; i++){
            const { valid , expectedType  } = assertType(value, types[i]);
            expectedTypes.push(expectedType || "");
            isValid = valid;
        }
        if (!isValid) {
            warn(getInvalidTypeMessage(name, value, expectedTypes));
            return;
        }
    }
    // custom validator
    if (validator && !validator(value)) warn('Invalid prop: custom validator check failed for prop "' + name + '".');
}
const isSimpleType = /*#__PURE__*/ (0, _shared.makeMap)("String,Number,Boolean,Function,Symbol,BigInt");
/**
 * dev only
 */ function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        // for primitive wrapper objects
        if (!valid && t === "object") valid = value instanceof type;
    } else if (expectedType === "Object") valid = (0, _shared.isObject)(value);
    else if (expectedType === "Array") valid = (0, _shared.isArray)(value);
    else if (expectedType === "null") valid = value === null;
    else valid = value instanceof type;
    return {
        valid,
        expectedType
    };
}
/**
 * dev only
 */ function getInvalidTypeMessage(name, value, expectedTypes) {
    let message = `Invalid prop: type check failed for prop "${name}".` + ` Expected ${expectedTypes.map((0, _shared.capitalize)).join(" | ")}`;
    const expectedType = expectedTypes[0];
    const receivedType = (0, _shared.toRawType)(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) message += ` with value ${expectedValue}`;
    message += `, got ${receivedType} `;
    // check if we need to specify received value
    if (isExplicable(receivedType)) message += `with value ${receivedValue}.`;
    return message;
}
/**
 * dev only
 */ function styleValue(value, type) {
    if (type === "String") return `"${value}"`;
    else if (type === "Number") return `${Number(value)}`;
    else return `${value}`;
}
/**
 * dev only
 */ function isExplicable(type) {
    const explicitTypes = [
        "string",
        "number",
        "boolean"
    ];
    return explicitTypes.some((elem)=>type.toLowerCase() === elem);
}
/**
 * dev only
 */ function isBoolean(...args) {
    return args.some((elem)=>elem.toLowerCase() === "boolean");
}
const isInternalKey = (key)=>key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value)=>(0, _shared.isArray)(value) ? value.map(normalizeVNode) : [
        normalizeVNode(value)
    ];
const normalizeSlot = (key, rawSlot, ctx)=>{
    if (rawSlot._n) // already normalized - #5353
    return rawSlot;
    const normalized = withCtx((...args)=>{
        if (currentInstance) warn(`Slot "${key}" invoked outside of the render function: ` + `this will not track dependencies used in the slot. ` + `Invoke the slot function inside the render function instead.`);
        return normalizeSlotValue(rawSlot(...args));
    }, ctx);
    normalized._c = false;
    return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance)=>{
    const ctx = rawSlots._ctx;
    for(const key in rawSlots){
        if (isInternalKey(key)) continue;
        const value = rawSlots[key];
        if ((0, _shared.isFunction)(value)) slots[key] = normalizeSlot(key, value, ctx);
        else if (value != null) {
            warn(`Non-function value encountered for slot "${key}". ` + `Prefer function slots for better performance.`);
            const normalized = normalizeSlotValue(value);
            slots[key] = ()=>normalized;
        }
    }
};
const normalizeVNodeSlots = (instance, children)=>{
    if (!isKeepAlive(instance.vnode) && true) warn(`Non-function value encountered for default slot. ` + `Prefer function slots for better performance.`);
    const normalized = normalizeSlotValue(children);
    instance.slots.default = ()=>normalized;
};
const initSlots = (instance, children)=>{
    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */ ) {
        const type = children._;
        if (type) {
            // users can get the shallow readonly version of the slots object through `this.$slots`,
            // we should avoid the proxy object polluting the slots of the internal instance
            instance.slots = (0, _reactivity.toRaw)(children);
            // make compiler marker non-enumerable
            (0, _shared.def)(children, "_", type);
        } else normalizeObjectSlots(children, instance.slots = {});
    } else {
        instance.slots = {};
        if (children) normalizeVNodeSlots(instance, children);
    }
    (0, _shared.def)(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized)=>{
    const { vnode , slots  } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = (0, _shared.EMPTY_OBJ);
    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */ ) {
        const type = children._;
        if (type) {
            // compiled slots.
            if (isHmrUpdating) // Parent was HMR updated so slot content may have changed.
            // force update slots and mark instance for hmr as well
            (0, _shared.extend)(slots, children);
            else if (optimized && type === 1 /* STABLE */ ) // compiled AND stable.
            // no need to update, and skip stale slots removal.
            needDeletionCheck = false;
            else {
                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip
                // normalization.
                (0, _shared.extend)(slots, children);
                // #2893
                // when rendering the optimized slots by manually written render function,
                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,
                // i.e. let the `renderSlot` create the bailed Fragment
                if (!optimized && type === 1 /* STABLE */ ) delete slots._;
            }
        } else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
    } else if (children) {
        // non slot object children (direct value) passed to a component
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = {
            default: 1
        };
    }
    // delete stale slots
    if (needDeletionCheck) {
        for(const key in slots)if (!isInternalKey(key) && !(key in deletionComparisonTarget)) delete slots[key];
    }
};
function createAppContext() {
    return {
        app: null,
        config: {
            isNativeTag: (0, _shared.NO),
            performance: false,
            globalProperties: {},
            optionMergeStrategies: {},
            errorHandler: undefined,
            warnHandler: undefined,
            compilerOptions: {}
        },
        mixins: [],
        components: {},
        directives: {},
        provides: Object.create(null),
        optionsCache: new WeakMap(),
        propsCache: new WeakMap(),
        emitsCache: new WeakMap()
    };
}
let uid = 0;
function createAppAPI(render, hydrate) {
    return function createApp(rootComponent, rootProps = null) {
        if (!(0, _shared.isFunction)(rootComponent)) rootComponent = Object.assign({}, rootComponent);
        if (rootProps != null && !(0, _shared.isObject)(rootProps)) {
            warn(`root props passed to app.mount() must be an object.`);
            rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = new Set();
        let isMounted = false;
        const app = context.app = {
            _uid: uid++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            _instance: null,
            version,
            get config () {
                return context.config;
            },
            set config (v){
                warn(`app.config cannot be replaced. Modify individual options instead.`);
            },
            use (plugin, ...options) {
                if (installedPlugins.has(plugin)) warn(`Plugin has already been applied to target app.`);
                else if (plugin && (0, _shared.isFunction)(plugin.install)) {
                    installedPlugins.add(plugin);
                    plugin.install(app, ...options);
                } else if ((0, _shared.isFunction)(plugin)) {
                    installedPlugins.add(plugin);
                    plugin(app, ...options);
                } else warn(`A plugin must either be a function or an object with an "install" ` + `function.`);
                return app;
            },
            mixin (mixin) {
                if (__VUE_OPTIONS_API__) {
                    if (!context.mixins.includes(mixin)) context.mixins.push(mixin);
                    else warn("Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : ""));
                } else warn("Mixins are only available in builds supporting Options API");
                return app;
            },
            component (name, component) {
                validateComponentName(name, context.config);
                if (!component) return context.components[name];
                if (context.components[name]) warn(`Component "${name}" has already been registered in target app.`);
                context.components[name] = component;
                return app;
            },
            directive (name, directive) {
                validateDirectiveName(name);
                if (!directive) return context.directives[name];
                if (context.directives[name]) warn(`Directive "${name}" has already been registered in target app.`);
                context.directives[name] = directive;
                return app;
            },
            mount (rootContainer, isHydrate, isSVG) {
                if (!isMounted) {
                    // #5571
                    if (rootContainer.__vue_app__) warn(`There is already an app instance mounted on the host container.\n` + ` If you want to mount another app on the same host container,` + ` you need to unmount the previous app by calling \`app.unmount()\` first.`);
                    const vnode = createVNode(rootComponent, rootProps);
                    // store app context on the root VNode.
                    // this will be set on the root instance on initial mount.
                    vnode.appContext = context;
                    context.reload = ()=>{
                        render(cloneVNode(vnode), rootContainer, isSVG);
                    };
                    if (isHydrate && hydrate) hydrate(vnode, rootContainer);
                    else render(vnode, rootContainer, isSVG);
                    isMounted = true;
                    app._container = rootContainer;
                    rootContainer.__vue_app__ = app;
                    app._instance = vnode.component;
                    devtoolsInitApp(app, version);
                    return getExposeProxy(vnode.component) || vnode.component.proxy;
                } else warn(`App has already been mounted.\n` + `If you want to remount the same app, move your app creation logic ` + `into a factory function and create fresh app instances for each ` + `mount - e.g. \`const createMyApp = () => createApp(App)\``);
            },
            unmount () {
                if (isMounted) {
                    render(null, app._container);
                    app._instance = null;
                    devtoolsUnmountApp(app);
                    delete app._container.__vue_app__;
                } else warn(`Cannot unmount an app that is not mounted.`);
            },
            provide (key, value) {
                if (key in context.provides) warn(`App already provides property with key "${String(key)}". ` + `It will be overwritten with the new value.`);
                context.provides[key] = value;
                return app;
            }
        };
        return app;
    };
}
/**
 * Function for handling a template ref
 */ function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
    if ((0, _shared.isArray)(rawRef)) {
        rawRef.forEach((r, i)=>setRef(r, oldRawRef && ((0, _shared.isArray)(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
        return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) // when mounting async components, nothing needs to be done,
    // because the template ref is forwarded to inner component
    return;
    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */  ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner , r: ref  } = rawRef;
    if (!owner) {
        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` + `A vnode with ref must be created inside the render function.`);
        return;
    }
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === (0, _shared.EMPTY_OBJ) ? owner.refs = {} : owner.refs;
    const setupState = owner.setupState;
    // dynamic ref changed. unset old ref
    if (oldRef != null && oldRef !== ref) {
        if ((0, _shared.isString)(oldRef)) {
            refs[oldRef] = null;
            if ((0, _shared.hasOwn)(setupState, oldRef)) setupState[oldRef] = null;
        } else if ((0, _reactivity.isRef)(oldRef)) oldRef.value = null;
    }
    if ((0, _shared.isFunction)(ref)) callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */ , [
        value,
        refs
    ]);
    else {
        const _isString = (0, _shared.isString)(ref);
        const _isRef = (0, _reactivity.isRef)(ref);
        if (_isString || _isRef) {
            const doSet = ()=>{
                if (rawRef.f) {
                    const existing = _isString ? refs[ref] : ref.value;
                    if (isUnmount) (0, _shared.isArray)(existing) && (0, _shared.remove)(existing, refValue);
                    else {
                        if (!(0, _shared.isArray)(existing)) {
                            if (_isString) {
                                refs[ref] = [
                                    refValue
                                ];
                                if ((0, _shared.hasOwn)(setupState, ref)) setupState[ref] = refs[ref];
                            } else {
                                ref.value = [
                                    refValue
                                ];
                                if (rawRef.k) refs[rawRef.k] = ref.value;
                            }
                        } else if (!existing.includes(refValue)) existing.push(refValue);
                    }
                } else if (_isString) {
                    refs[ref] = value;
                    if ((0, _shared.hasOwn)(setupState, ref)) setupState[ref] = value;
                } else if (_isRef) {
                    ref.value = value;
                    if (rawRef.k) refs[rawRef.k] = value;
                } else warn("Invalid template ref type:", ref, `(${typeof ref})`);
            };
            if (value) {
                doSet.id = -1;
                queuePostRenderEffect(doSet, parentSuspense);
            } else doSet();
        } else warn("Invalid template ref type:", ref, `(${typeof ref})`);
    }
}
let hasMismatch = false;
const isSVGContainer = (container)=>/svg/.test(container.namespaceURI) && container.tagName !== "foreignObject";
const isComment = (node)=>node.nodeType === 8 /* COMMENT */ ;
// Note: hydration is DOM-specific
// But we have to place it in core due to tight coupling with core - splitting
// it out creates a ton of unnecessary complexity.
// Hydration also depends on some renderer internal logic which needs to be
// passed in via arguments.
function createHydrationFunctions(rendererInternals) {
    const { mt: mountComponent , p: patch , o: { patchProp , createText , nextSibling , parentNode , remove , insert , createComment  }  } = rendererInternals;
    const hydrate = (vnode, container)=>{
        if (!container.hasChildNodes()) {
            warn(`Attempting to hydrate existing markup but container is empty. ` + `Performing full mount instead.`);
            patch(null, vnode, container);
            flushPostFlushCbs();
            container._vnode = vnode;
            return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        container._vnode = vnode;
        if (hasMismatch && true) // this error should show up in production
        console.error(`Hydration completed but contains mismatches.`);
    };
    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false)=>{
        const isFragmentStart = isComment(node) && node.data === "[";
        const onMismatch = ()=>handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
        const { type , ref , shapeFlag , patchFlag  } = vnode;
        const domType = node.nodeType;
        vnode.el = node;
        if (patchFlag === -2 /* BAIL */ ) {
            optimized = false;
            vnode.dynamicChildren = null;
        }
        let nextNode = null;
        switch(type){
            case Text:
                if (domType !== 3 /* TEXT */ ) {
                    // #5728 empty text node inside a slot can cause hydration failure
                    // because the server rendered HTML won't contain a text node
                    if (vnode.children === "") {
                        insert(vnode.el = createText(""), parentNode(node), node);
                        nextNode = node;
                    } else nextNode = onMismatch();
                } else {
                    if (node.data !== vnode.children) {
                        hasMismatch = true;
                        warn(`Hydration text mismatch:` + `\n- Client: ${JSON.stringify(node.data)}` + `\n- Server: ${JSON.stringify(vnode.children)}`);
                        node.data = vnode.children;
                    }
                    nextNode = nextSibling(node);
                }
                break;
            case Comment:
                if (domType !== 8 /* COMMENT */  || isFragmentStart) nextNode = onMismatch();
                else nextNode = nextSibling(node);
                break;
            case Static:
                if (domType !== 1 /* ELEMENT */  && domType !== 3 /* TEXT */ ) nextNode = onMismatch();
                else {
                    // determine anchor, adopt content
                    nextNode = node;
                    // if the static vnode has its content stripped during build,
                    // adopt it from the server-rendered HTML.
                    const needToAdoptContent = !vnode.children.length;
                    for(let i = 0; i < vnode.staticCount; i++){
                        if (needToAdoptContent) vnode.children += nextNode.nodeType === 1 /* ELEMENT */  ? nextNode.outerHTML : nextNode.data;
                        if (i === vnode.staticCount - 1) vnode.anchor = nextNode;
                        nextNode = nextSibling(nextNode);
                    }
                    return nextNode;
                }
                break;
            case Fragment:
                if (!isFragmentStart) nextNode = onMismatch();
                else nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */ ) {
                    if (domType !== 1 /* ELEMENT */  || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) nextNode = onMismatch();
                    else nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                } else if (shapeFlag & 6 /* COMPONENT */ ) {
                    // when setting up the render effect, if the initial vnode already
                    // has .el set, the component will perform hydration instead of mount
                    // on its sub-tree.
                    vnode.slotScopeIds = slotScopeIds;
                    const container = parentNode(node);
                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
                    // component may be async, so in the case of fragments we cannot rely
                    // on component's rendered output to determine the end of the fragment
                    // instead, we do a lookahead to find the end anchor node.
                    nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
                    // #4293 teleport as component root
                    if (nextNode && isComment(nextNode) && nextNode.data === "teleport end") nextNode = nextSibling(nextNode);
                    // #3787
                    // if component is async, it may get moved / unmounted before its
                    // inner component is loaded, so we need to give it a placeholder
                    // vnode that matches its adopted DOM.
                    if (isAsyncWrapper(vnode)) {
                        let subTree;
                        if (isFragmentStart) {
                            subTree = createVNode(Fragment);
                            subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                        } else subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
                        subTree.el = node;
                        vnode.component.subTree = subTree;
                    }
                } else if (shapeFlag & 64 /* TELEPORT */ ) {
                    if (domType !== 8 /* COMMENT */ ) nextNode = onMismatch();
                    else nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
                } else if (shapeFlag & 128 /* SUSPENSE */ ) nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
                else warn("Invalid HostVNode type:", type, `(${typeof type})`);
        }
        if (ref != null) setRef(ref, null, parentSuspense, vnode);
        return nextNode;
    };
    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!vnode.dynamicChildren;
        const { type , props , patchFlag , shapeFlag , dirs  } = vnode;
        // #4006 for form elements with non-string v-model value bindings
        // e.g. <option :value="obj">, <input type="checkbox" :true-value="1">
        const forcePatchValue = type === "input" && dirs || type === "option";
        {
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "created");
            // props
            if (props) {
                if (forcePatchValue || !optimized || patchFlag & 48 /* HYDRATE_EVENTS */ ) {
                    for(const key in props)if (forcePatchValue && key.endsWith("value") || (0, _shared.isOn)(key) && !(0, _shared.isReservedProp)(key)) patchProp(el, key, null, props[key], false, undefined, parentComponent);
                } else if (props.onClick) // Fast path for click listeners (which is most often) to avoid
                // iterating through props.
                patchProp(el, "onClick", null, props.onClick, false, undefined, parentComponent);
            }
            // vnode / directive hooks
            let vnodeHooks;
            if (vnodeHooks = props && props.onVnodeBeforeMount) invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) queueEffectWithSuspense(()=>{
                vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
            }, parentSuspense);
            // children
            if (shapeFlag & 16 /* ARRAY_CHILDREN */  && // skip if element has innerHTML / textContent
            !(props && (props.innerHTML || props.textContent))) {
                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
                let hasWarned1 = false;
                while(next){
                    hasMismatch = true;
                    if (!hasWarned1) {
                        warn(`Hydration children mismatch in <${vnode.type}>: ` + `server rendered element contains more child nodes than client vdom.`);
                        hasWarned1 = true;
                    }
                    // The SSRed DOM contains more nodes than it should. Remove them.
                    const cur = next;
                    next = next.nextSibling;
                    remove(cur);
                }
            } else if (shapeFlag & 8 /* TEXT_CHILDREN */ ) {
                if (el.textContent !== vnode.children) {
                    hasMismatch = true;
                    warn(`Hydration text content mismatch in <${vnode.type}>:\n` + `- Client: ${el.textContent}\n` + `- Server: ${vnode.children}`);
                    el.textContent = vnode.children;
                }
            }
        }
        return el.nextSibling;
    };
    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned2 = false;
        for(let i = 0; i < l; i++){
            const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
            if (node) node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            else if (vnode.type === Text && !vnode.children) continue;
            else {
                hasMismatch = true;
                if (!hasWarned2) {
                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` + `server rendered element contains fewer child nodes than client vdom.`);
                    hasWarned2 = true;
                }
                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.
                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
            }
        }
        return node;
    };
    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        const { slotScopeIds: fragmentSlotScopeIds  } = vnode;
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === "]") return nextSibling(vnode.anchor = next);
        else {
            // fragment didn't hydrate successfully, since we didn't get a end anchor
            // back. This should have led to node/children mismatch warnings.
            hasMismatch = true;
            // since the anchor is missing, we need to create one and insert it
            insert(vnode.anchor = createComment(`]`), container, next);
            return next;
        }
    };
    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment)=>{
        hasMismatch = true;
        warn(`Hydration node mismatch:\n- Client vnode:`, vnode.type, `\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */  ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``);
        vnode.el = null;
        if (isFragment) {
            // remove excessive fragment nodes
            const end = locateClosingAsyncAnchor(node);
            while(true){
                const next = nextSibling(node);
                if (next && next !== end) remove(next);
                else break;
            }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
    };
    const locateClosingAsyncAnchor = (node)=>{
        let match = 0;
        while(node){
            node = nextSibling(node);
            if (node && isComment(node)) {
                if (node.data === "[") match++;
                if (node.data === "]") {
                    if (match === 0) return nextSibling(node);
                    else match--;
                }
            }
        }
        return node;
    };
    return [
        hydrate,
        hydrateNode
    ];
}
/* eslint-disable no-restricted-globals */ let supported;
let perf;
function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) perf.mark(`vue-${type}-${instance.uid}`);
    devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
}
function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
    }
    devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
}
function isSupported() {
    if (supported !== undefined) return supported;
    if (typeof window !== "undefined" && window.performance) {
        supported = true;
        perf = window.performance;
    } else supported = false;
    return supported;
}
/**
 * This is only called in esm-bundler builds.
 * It is called when a renderer is created, in `baseCreateRenderer` so that
 * importing runtime-core is side-effects free.
 *
 * istanbul-ignore-next
 */ function initFeatureFlags() {
    const needWarn = [];
    if (typeof __VUE_OPTIONS_API__ !== "boolean") {
        needWarn.push(`__VUE_OPTIONS_API__`);
        (0, _shared.getGlobalThis)().__VUE_OPTIONS_API__ = true;
    }
    if (typeof __VUE_PROD_DEVTOOLS__ !== "boolean") {
        needWarn.push(`__VUE_PROD_DEVTOOLS__`);
        (0, _shared.getGlobalThis)().__VUE_PROD_DEVTOOLS__ = false;
    }
    if (needWarn.length) {
        const multi = needWarn.length > 1;
        console.warn(`Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, ` + `which expects these compile-time feature flags to be globally injected ` + `via the bundler config in order to get better tree-shaking in the ` + `production bundle.\n\n` + `For more details, see https://link.vuejs.org/feature-flags.`);
    }
}
const queuePostRenderEffect = queueEffectWithSuspense;
/**
 * The createRenderer function accepts two generic arguments:
 * HostNode and HostElement, corresponding to Node and Element types in the
 * host environment. For example, for runtime-dom, HostNode would be the DOM
 * `Node` interface and HostElement would be the DOM `Element` interface.
 *
 * Custom renderers can pass in the platform specific types like this:
 *
 * ``` js
 * const { render, createApp } = createRenderer<Node, Element>({
 *   patchProp,
 *   ...nodeOps
 * })
 * ```
 */ function createRenderer(options) {
    return baseCreateRenderer(options);
}
// Separate API for creating hydration-enabled renderer.
// Hydration logic is only used when calling this function, making it
// tree-shakable.
function createHydrationRenderer(options) {
    return baseCreateRenderer(options, createHydrationFunctions);
}
// implementation
function baseCreateRenderer(options, createHydrationFns) {
    initFeatureFlags();
    const target = (0, _shared.getGlobalThis)();
    target.__VUE__ = true;
    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
    const { insert: hostInsert , remove: hostRemove , patchProp: hostPatchProp , createElement: hostCreateElement , createText: hostCreateText , createComment: hostCreateComment , setText: hostSetText , setElementText: hostSetElementText , parentNode: hostParentNode , nextSibling: hostNextSibling , setScopeId: hostSetScopeId = (0, _shared.NOOP) , cloneNode: hostCloneNode , insertStaticContent: hostInsertStaticContent  } = options;
    // Note: functions inside this closure should use `const xxx = () => {}`
    // style in order to prevent being inlined by minifiers.
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren)=>{
        if (n1 === n2) return;
        // patching & not same type, unmount old tree
        if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
        }
        if (n2.patchFlag === -2 /* BAIL */ ) {
            optimized = false;
            n2.dynamicChildren = null;
        }
        const { type , ref , shapeFlag  } = n2;
        switch(type){
            case Text:
                processText(n1, n2, container, anchor);
                break;
            case Comment:
                processCommentNode(n1, n2, container, anchor);
                break;
            case Static:
                if (n1 == null) mountStaticNode(n2, container, anchor, isSVG);
                else patchStaticNode(n1, n2, container, isSVG);
                break;
            case Fragment:
                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */ ) processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 6 /* COMPONENT */ ) processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 64 /* TELEPORT */ ) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else if (shapeFlag & 128 /* SUSPENSE */ ) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else warn("Invalid VNode type:", type, `(${typeof type})`);
        }
        // set ref
        if (ref != null && parentComponent) setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    };
    const processText = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        else {
            const el = n2.el = n1.el;
            if (n2.children !== n1.children) hostSetText(el, n2.children);
        }
    };
    const processCommentNode = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
        else // there's no support for dynamic comments
        n2.el = n1.el;
    };
    const mountStaticNode = (n2, container, anchor, isSVG)=>{
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
    };
    /**
     * Dev / HMR only
     */ const patchStaticNode = (n1, n2, container, isSVG)=>{
        // static nodes are only patched during dev for HMR
        if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            // remove existing
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
        } else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
        }
    };
    const moveStaticNode = ({ el , anchor  }, container, nextSibling)=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
        }
        hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el , anchor  })=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
        }
        hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        isSVG = isSVG || n2.type === "svg";
        if (n1 == null) mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        else patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let el;
        let vnodeHook;
        const { type , props , shapeFlag , transition , patchFlag , dirs  } = vnode;
        el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
        // mount children first, since some props may rely on child content
        // being already rendered, e.g. `<select value>`
        if (shapeFlag & 8 /* TEXT_CHILDREN */ ) hostSetElementText(el, vnode.children);
        else if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "created");
        // props
        if (props) {
            for(const key in props)if (key !== "value" && !(0, _shared.isReservedProp)(key)) hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            /**
                 * Special case for setting value on DOM elements:
                 * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)
                 * - it needs to be forced (#1471)
                 * #2353 proposes adding another renderer option to configure this, but
                 * the properties affects are so finite it is worth special casing it
                 * here to reduce the complexity. (Special casing it also should not
                 * affect non-DOM renderers)
                 */ if ("value" in props) hostPatchProp(el, "value", null, props.value);
            if (vnodeHook = props.onVnodeBeforeMount) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        // scopeId
        setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        Object.defineProperty(el, "__vnode", {
            value: vnode,
            enumerable: false
        });
        Object.defineProperty(el, "__vueParentComponent", {
            value: parentComponent,
            enumerable: false
        });
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved
        // #1689 For inside suspense + suspense resolved case, just call it
        const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
        if (needCallTransitionHooks) transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent)=>{
        if (scopeId) hostSetScopeId(el, scopeId);
        if (slotScopeIds) for(let i = 0; i < slotScopeIds.length; i++)hostSetScopeId(el, slotScopeIds[i]);
        if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (subTree.patchFlag > 0 && subTree.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) subTree = filterSingleRoot(subTree.children) || subTree;
            if (vnode === subTree) {
                const parentVNode = parentComponent.vnode;
                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
            }
        }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0)=>{
        for(let i = start; i < children.length; i++){
            const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const el = n2.el = n1.el;
        let { patchFlag , dynamicChildren , dirs  } = n2;
        // #1426 take the old vnode's patch flag into account since user may clone a
        // compiler-generated vnode, which de-opts to FULL_PROPS
        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */ ;
        const oldProps = n1.props || (0, _shared.EMPTY_OBJ);
        const newProps = n2.props || (0, _shared.EMPTY_OBJ);
        let vnodeHook;
        // disable recurse in beforeUpdate hooks
        parentComponent && toggleRecurse(parentComponent, false);
        if (vnodeHook = newProps.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        if (dirs) invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
        parentComponent && toggleRecurse(parentComponent, true);
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        const areChildrenSVG = isSVG && n2.type !== "foreignObject";
        if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
        } else if (!optimized) // full diff
        patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        if (patchFlag > 0) {
            // the presence of a patchFlag means this element's render code was
            // generated by the compiler and can take the fast path.
            // in this path old node and new node are guaranteed to have the same shape
            // (i.e. at the exact same position in the source template)
            if (patchFlag & 16 /* FULL_PROPS */ ) // element props contain dynamic keys, full diff needed
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
            else {
                // class
                // this flag is matched when the element has dynamic class bindings.
                if (patchFlag & 2 /* CLASS */ ) {
                    if (oldProps.class !== newProps.class) hostPatchProp(el, "class", null, newProps.class, isSVG);
                }
                // style
                // this flag is matched when the element has dynamic style bindings
                if (patchFlag & 4 /* STYLE */ ) hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
                // props
                // This flag is matched when the element has dynamic prop/attr bindings
                // other than class and style. The keys of dynamic prop/attrs are saved for
                // faster iteration.
                // Note dynamic keys like :[foo]="bar" will cause this optimization to
                // bail out and go through a full diff because we need to unset the old key
                if (patchFlag & 8 /* PROPS */ ) {
                    // if the flag is present then dynamicProps must be non-null
                    const propsToUpdate = n2.dynamicProps;
                    for(let i = 0; i < propsToUpdate.length; i++){
                        const key = propsToUpdate[i];
                        const prev = oldProps[key];
                        const next = newProps[key];
                        // #1471 force patch value
                        if (next !== prev || key === "value") hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                    }
                }
            }
            // text
            // This flag is matched when the element has only dynamic text children.
            if (patchFlag & 1 /* TEXT */ ) {
                if (n1.children !== n2.children) hostSetElementText(el, n2.children);
            }
        } else if (!optimized && dynamicChildren == null) // unoptimized, full diff
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
        }, parentSuspense);
    };
    // The fast path for blocks.
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds)=>{
        for(let i = 0; i < newChildren.length; i++){
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            // Determine the container (parent element) for the patch.
            const container = // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el && (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
            // which also requires the correct parent container
            !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
            oldVNode.shapeFlag & 70 /* TELEPORT */ ) ? hostParentNode(oldVNode.el) : // just pass the block element here to avoid a DOM parentNode call.
            fallbackContainer;
            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
    };
    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG)=>{
        if (oldProps !== newProps) {
            for(const key in newProps){
                // empty string is not valid prop
                if ((0, _shared.isReservedProp)(key)) continue;
                const next = newProps[key];
                const prev = oldProps[key];
                // defer patching value
                if (next !== prev && key !== "value") hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
            if (oldProps !== (0, _shared.EMPTY_OBJ)) {
                for(const key in oldProps)if (!(0, _shared.isReservedProp)(key) && !(key in newProps)) hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
            if ("value" in newProps) hostPatchProp(el, "value", oldProps.value, newProps.value);
        }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
        let { patchFlag , dynamicChildren , slotScopeIds: fragmentSlotScopeIds  } = n2;
        if (isHmrUpdating || patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) {
            // HMR updated / Dev root fragment (w/ comments), force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        // check if this is a slot fragment with :slotted scope ids
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            // a fragment can only have array children
            // since they are either generated by the compiler, or implicitly created
            // from arrays.
            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */  && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
        // of renderSlot() with no valid children
        n1.dynamicChildren) {
            // a stable fragment (template root or <template v-for>) doesn't need to
            // patch children order, but it may contain dynamicChildren.
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
            else if (// #2080 if the stable fragment has a key, it's a <template v-for> that may
            //  get moved around. Make sure all root level vnodes inherit el.
            // #2134 or if it's a component root, it may also get moved around
            // as the component is being moved.
            n2.key != null || parentComponent && n2 === parentComponent.subTree) traverseStaticChildren(n1, n2, true);
        } else // keyed / unkeyed, or manual fragments.
        // for keyed & unkeyed, since they are compiler generated from v-for,
        // each child is guaranteed to be a block so the fragment will never
        // have dynamicChildren.
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */ ) parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
            else mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else updateComponent(n1, n2, optimized);
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized)=>{
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (instance.type.__hmrId) registerHMR(instance);
        pushWarningContext(initialVNode);
        startMeasure(instance, `mount`);
        // inject renderer internals for keepAlive
        if (isKeepAlive(initialVNode)) instance.ctx.renderer = internals;
        startMeasure(instance, `init`);
        setupComponent(instance);
        endMeasure(instance, `init`);
        // setup() is async. This component relies on async logic to be resolved
        // before proceeding
        if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
            // Give it a placeholder if this is not hydration
            // TODO handle self-defined fallback
            if (!initialVNode.el) {
                const placeholder = instance.subTree = createVNode(Comment);
                processCommentNode(null, placeholder, container, anchor);
            }
            return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
        popWarningContext();
        endMeasure(instance, `mount`);
    };
    const updateComponent = (n1, n2, optimized)=>{
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep && !instance.asyncResolved) {
                pushWarningContext(n2);
                updateComponentPreRender(instance, n2, optimized);
                popWarningContext();
                return;
            } else {
                // normal update
                instance.next = n2;
                // in case the child component is also queued, remove it to avoid
                // double updating the same child component in the same flush.
                invalidateJob(instance.update);
                // instance.update is the reactive effect.
                instance.update();
            }
        } else {
            // no update needed. just copy over properties
            n2.el = n1.el;
            instance.vnode = n2;
        }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized)=>{
        const componentUpdateFn = ()=>{
            if (!instance.isMounted) {
                let vnodeHook;
                const { el , props  } = initialVNode;
                const { bm , m , parent  } = instance;
                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
                toggleRecurse(instance, false);
                // beforeMount hook
                if (bm) (0, _shared.invokeArrayFns)(bm);
                // onVnodeBeforeMount
                if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) invokeVNodeHook(vnodeHook, parent, initialVNode);
                toggleRecurse(instance, true);
                if (el && hydrateNode) {
                    // vnode has adopted host node - perform hydration instead of mount.
                    const hydrateSubTree = ()=>{
                        startMeasure(instance, `render`);
                        instance.subTree = renderComponentRoot(instance);
                        endMeasure(instance, `render`);
                        startMeasure(instance, `hydrate`);
                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                        endMeasure(instance, `hydrate`);
                    };
                    if (isAsyncWrapperVNode) initialVNode.type.__asyncLoader().then(// note: we are moving the render call into an async callback,
                    // which means it won't track dependencies - but it's ok because
                    // a server-rendered async wrapper is already in resolved state
                    // and it will never need to change.
                    ()=>!instance.isUnmounted && hydrateSubTree());
                    else hydrateSubTree();
                } else {
                    startMeasure(instance, `render`);
                    const subTree = instance.subTree = renderComponentRoot(instance);
                    endMeasure(instance, `render`);
                    startMeasure(instance, `patch`);
                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
                    endMeasure(instance, `patch`);
                    initialVNode.el = subTree.el;
                }
                // mounted hook
                if (m) queuePostRenderEffect(m, parentSuspense);
                // onVnodeMounted
                if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
                    const scopedInitialVNode = initialVNode;
                    queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
                }
                // activated hook for keep-alive roots.
                // #1742 activated hook must be accessed after first render
                // since the hook may be injected by a child keep-alive
                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */  || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) instance.a && queuePostRenderEffect(instance.a, parentSuspense);
                instance.isMounted = true;
                devtoolsComponentAdded(instance);
                // #2458: deference mount-only object parameters to prevent memleaks
                initialVNode = container = anchor = null;
            } else {
                // updateComponent
                // This is triggered by mutation of component's own state (next: null)
                // OR parent calling processComponent (next: VNode)
                let { next , bu , u , parent , vnode  } = instance;
                let originNext = next;
                let vnodeHook;
                pushWarningContext(next || instance.vnode);
                // Disallow component effect recursion during pre-lifecycle hooks.
                toggleRecurse(instance, false);
                if (next) {
                    next.el = vnode.el;
                    updateComponentPreRender(instance, next, optimized);
                } else next = vnode;
                // beforeUpdate hook
                if (bu) (0, _shared.invokeArrayFns)(bu);
                // onVnodeBeforeUpdate
                if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parent, next, vnode);
                toggleRecurse(instance, true);
                startMeasure(instance, `render`);
                const nextTree = renderComponentRoot(instance);
                endMeasure(instance, `render`);
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                startMeasure(instance, `patch`);
                patch(prevTree, nextTree, // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el), // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree), instance, parentSuspense, isSVG);
                endMeasure(instance, `patch`);
                next.el = nextTree.el;
                if (originNext === null) // self-triggered update. In case of HOC, update parent component
                // vnode el. HOC is indicated by parent instance's subTree pointing
                // to child component's vnode
                updateHOCHostEl(instance, nextTree.el);
                // updated hook
                if (u) queuePostRenderEffect(u, parentSuspense);
                // onVnodeUpdated
                if (vnodeHook = next.props && next.props.onVnodeUpdated) queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
                devtoolsComponentUpdated(instance);
                popWarningContext();
            }
        };
        // create reactive effect for rendering
        const effect = instance.effect = new (0, _reactivity.ReactiveEffect)(componentUpdateFn, ()=>queueJob(update), instance.scope // track it in component's effect scope
        );
        const update = instance.update = ()=>effect.run();
        update.id = instance.uid;
        // allowRecurse
        // #1801, #2043 component render effects should allow recursive updates
        toggleRecurse(instance, true);
        effect.onTrack = instance.rtc ? (e)=>(0, _shared.invokeArrayFns)(instance.rtc, e) : void 0;
        effect.onTrigger = instance.rtg ? (e)=>(0, _shared.invokeArrayFns)(instance.rtg, e) : void 0;
        update.ownerInstance = instance;
        update();
    };
    const updateComponentPreRender = (instance, nextVNode, optimized)=>{
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        (0, _reactivity.pauseTracking)();
        // props update may have triggered pre-flush watchers.
        // flush them before the render update.
        flushPreFlushCbs(undefined, instance.update);
        (0, _reactivity.resetTracking)();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false)=>{
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag , shapeFlag  } = n2;
        // fast path
        if (patchFlag > 0) {
            if (patchFlag & 128 /* KEYED_FRAGMENT */ ) {
                // this could be either fully-keyed or mixed (some keyed some not)
                // presence of patchFlag means children are guaranteed to be arrays
                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            } else if (patchFlag & 256 /* UNKEYED_FRAGMENT */ ) {
                // unkeyed
                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
        }
        // children has 3 possibilities: text, array or no children.
        if (shapeFlag & 8 /* TEXT_CHILDREN */ ) {
            // text children fast path
            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */ ) unmountChildren(c1, parentComponent, parentSuspense);
            if (c2 !== c1) hostSetElementText(container, c2);
        } else if (prevShapeFlag & 16 /* ARRAY_CHILDREN */ ) {
            // prev children was array
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) // two arrays, cannot assume anything, do full diff
            patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else // no new children, just unmount old
            unmountChildren(c1, parentComponent, parentSuspense, true);
        } else {
            // prev children was text OR null
            // new children is array OR null
            if (prevShapeFlag & 8 /* TEXT_CHILDREN */ ) hostSetElementText(container, "");
            // mount new if array
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        c1 = c1 || (0, _shared.EMPTY_ARR);
        c2 = c2 || (0, _shared.EMPTY_ARR);
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for(i = 0; i < commonLength; i++){
            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) // remove old
        unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        else // mount new
        mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    };
    // can be all-keyed or mixed
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1; // prev ending index
        let e2 = l2 - 1; // next ending index
        // 1. sync from start
        // (a b) c
        // (a b) d e
        while(i <= e1 && i <= e2){
            const n1 = c1[i];
            const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            i++;
        }
        // 2. sync from end
        // a (b c)
        // d e (b c)
        while(i <= e1 && i <= e2){
            const n1 = c1[e1];
            const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            e1--;
            e2--;
        }
        // 3. common sequence + mount
        // (a b)
        // (a b) c
        // i = 2, e1 = 1, e2 = 2
        // (a b)
        // c (a b)
        // i = 0, e1 = -1, e2 = 0
        if (i > e1) {
            if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while(i <= e2){
                    patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    i++;
                }
            }
        } else if (i > e2) while(i <= e1){
            unmount(c1[i], parentComponent, parentSuspense, true);
            i++;
        }
        else {
            const s1 = i; // prev starting index
            const s2 = i; // next starting index
            // 5.1 build key:index map for newChildren
            const keyToNewIndexMap = new Map();
            for(i = s2; i <= e2; i++){
                const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
                if (nextChild.key != null) {
                    if (keyToNewIndexMap.has(nextChild.key)) warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
                    keyToNewIndexMap.set(nextChild.key, i);
                }
            }
            // 5.2 loop through old children left to be patched and try to patch
            // matching nodes & remove nodes that are no longer present
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            // used to track whether any node has moved
            let maxNewIndexSoFar = 0;
            // works as Map<newIndex, oldIndex>
            // Note that oldIndex is offset by +1
            // and oldIndex = 0 is a special value indicating the new node has
            // no corresponding old node.
            // used for determining longest stable subsequence
            const newIndexToOldIndexMap = new Array(toBePatched);
            for(i = 0; i < toBePatched; i++)newIndexToOldIndexMap[i] = 0;
            for(i = s1; i <= e1; i++){
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                    // all new children have been patched so this can only be a removal
                    unmount(prevChild, parentComponent, parentSuspense, true);
                    continue;
                }
                let newIndex;
                if (prevChild.key != null) newIndex = keyToNewIndexMap.get(prevChild.key);
                else {
                    // key-less node, try to locate a key-less node of the same type
                    for(j = s2; j <= e2; j++)if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                        newIndex = j;
                        break;
                    }
                }
                if (newIndex === undefined) unmount(prevChild, parentComponent, parentSuspense, true);
                else {
                    newIndexToOldIndexMap[newIndex - s2] = i + 1;
                    if (newIndex >= maxNewIndexSoFar) maxNewIndexSoFar = newIndex;
                    else moved = true;
                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    patched++;
                }
            }
            // 5.3 move and mount
            // generate longest stable subsequence only when nodes have moved
            const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : (0, _shared.EMPTY_ARR);
            j = increasingNewIndexSequence.length - 1;
            // looping backwards so that we can use last patched node as anchor
            for(i = toBePatched - 1; i >= 0; i--){
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) // mount new
                patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (moved) {
                    // move if:
                    // There is no stable subsequence (e.g. a reverse)
                    // OR current node is not among the stable sequence
                    if (j < 0 || i !== increasingNewIndexSequence[j]) move(nextChild, container, anchor, 2 /* REORDER */ );
                    else j--;
                }
            }
        }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null)=>{
        const { el , type , transition , children , shapeFlag  } = vnode;
        if (shapeFlag & 6 /* COMPONENT */ ) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
        }
        if (shapeFlag & 128 /* SUSPENSE */ ) {
            vnode.suspense.move(container, anchor, moveType);
            return;
        }
        if (shapeFlag & 64 /* TELEPORT */ ) {
            type.move(vnode, container, anchor, internals);
            return;
        }
        if (type === Fragment) {
            hostInsert(el, container, anchor);
            for(let i = 0; i < children.length; i++)move(children[i], container, anchor, moveType);
            hostInsert(vnode.anchor, container, anchor);
            return;
        }
        if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
        }
        // single nodes
        const needTransition = moveType !== 2 /* REORDER */  && shapeFlag & 1 /* ELEMENT */  && transition;
        if (needTransition) {
            if (moveType === 0 /* ENTER */ ) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(()=>transition.enter(el), parentSuspense);
            } else {
                const { leave , delayLeave , afterLeave  } = transition;
                const remove = ()=>hostInsert(el, container, anchor);
                const performLeave = ()=>{
                    leave(el, ()=>{
                        remove();
                        afterLeave && afterLeave();
                    });
                };
                if (delayLeave) delayLeave(el, remove, performLeave);
                else performLeave();
            }
        } else hostInsert(el, container, anchor);
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false)=>{
        const { type , props , ref , children , dynamicChildren , shapeFlag , patchFlag , dirs  } = vnode;
        // unset ref
        if (ref != null) setRef(ref, null, parentSuspense, vnode, true);
        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) {
            parentComponent.ctx.deactivate(vnode);
            return;
        }
        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */  && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        if (shapeFlag & 6 /* COMPONENT */ ) unmountComponent(vnode.component, parentSuspense, doRemove);
        else {
            if (shapeFlag & 128 /* SUSPENSE */ ) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
            }
            if (shouldInvokeDirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
            if (shapeFlag & 64 /* TELEPORT */ ) vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
            else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */ )) // fast path for block nodes: only need to unmount dynamic children.
            unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
            else if (type === Fragment && patchFlag & 384 /* UNKEYED_FRAGMENT */  || !optimized && shapeFlag & 16 /* ARRAY_CHILDREN */ ) unmountChildren(children, parentComponent, parentSuspense);
            if (doRemove) remove1(vnode);
        }
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
        }, parentSuspense);
    };
    const remove1 = (vnode)=>{
        const { type , el , anchor , transition  } = vnode;
        if (type === Fragment) {
            if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */  && transition && !transition.persisted) vnode.children.forEach((child)=>{
                if (child.type === Comment) hostRemove(child.el);
                else remove1(child);
            });
            else removeFragment(el, anchor);
            return;
        }
        if (type === Static) {
            removeStaticNode(vnode);
            return;
        }
        const performRemove = ()=>{
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) transition.afterLeave();
        };
        if (vnode.shapeFlag & 1 /* ELEMENT */  && transition && !transition.persisted) {
            const { leave , delayLeave  } = transition;
            const performLeave = ()=>leave(el, performRemove);
            if (delayLeave) delayLeave(vnode.el, performRemove, performLeave);
            else performLeave();
        } else performRemove();
    };
    const removeFragment = (cur, end)=>{
        // For fragments, directly remove all contained DOM nodes.
        // (fragment child nodes cannot have transition)
        let next;
        while(cur !== end){
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
        }
        hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove)=>{
        if (instance.type.__hmrId) unregisterHMR(instance);
        const { bum , scope , update , subTree , um  } = instance;
        // beforeUnmount hook
        if (bum) (0, _shared.invokeArrayFns)(bum);
        // stop effects in component scope
        scope.stop();
        // update may be null if a component is unmounted before its async
        // setup has resolved.
        if (update) {
            // so that scheduler will no longer invoke it
            update.active = false;
            unmount(subTree, instance, parentSuspense, doRemove);
        }
        // unmounted hook
        if (um) queuePostRenderEffect(um, parentSuspense);
        queuePostRenderEffect(()=>{
            instance.isUnmounted = true;
        }, parentSuspense);
        // A component with async dep inside a pending suspense is unmounted before
        // its async dep resolves. This should remove the dep from the suspense, and
        // cause the suspense to resolve immediately if that was the last dep.
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) parentSuspense.resolve();
        }
        devtoolsComponentRemoved(instance);
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0)=>{
        for(let i = start; i < children.length; i++)unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    };
    const getNextHostNode = (vnode)=>{
        if (vnode.shapeFlag & 6 /* COMPONENT */ ) return getNextHostNode(vnode.component.subTree);
        if (vnode.shapeFlag & 128 /* SUSPENSE */ ) return vnode.suspense.next();
        return hostNextSibling(vnode.anchor || vnode.el);
    };
    const render = (vnode, container, isSVG)=>{
        if (vnode == null) {
            if (container._vnode) unmount(container._vnode, null, null, true);
        } else patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        flushPostFlushCbs();
        container._vnode = vnode;
    };
    const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove1,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) [hydrate, hydrateNode] = createHydrationFns(internals);
    return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
    };
}
function toggleRecurse({ effect , update  }, allowed) {
    effect.allowRecurse = update.allowRecurse = allowed;
}
/**
 * #1156
 * When a component is HMR-enabled, we need to make sure that all static nodes
 * inside a block also inherit the DOM element from the previous tree so that
 * HMR updates (which are full updates) can retrieve the element for patching.
 *
 * #2080
 * Inside keyed `template` fragment static children, if a fragment is moved,
 * the children will always be moved. Therefore, in order to ensure correct move
 * position, el should be inherited from previous nodes.
 */ function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if ((0, _shared.isArray)(ch1) && (0, _shared.isArray)(ch2)) for(let i = 0; i < ch1.length; i++){
        // this is only called in the optimized path so array children are
        // guaranteed to be vnodes
        const c1 = ch1[i];
        let c2 = ch2[i];
        if (c2.shapeFlag & 1 /* ELEMENT */  && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */ ) {
                c2 = ch2[i] = cloneIfMounted(ch2[i]);
                c2.el = c1.el;
            }
            if (!shallow) traverseStaticChildren(c1, c2);
        }
        // also inherit for comment nodes, but not placeholders (e.g. v-if which
        // would have received .el during block patch)
        if (c2.type === Comment && !c2.el) c2.el = c1.el;
    }
}
// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function getSequence(arr) {
    const p = arr.slice();
    const result = [
        0
    ];
    let i, j, u, v, c;
    const len = arr.length;
    for(i = 0; i < len; i++){
        const arrI = arr[i];
        if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while(u < v){
                c = u + v >> 1;
                if (arr[result[c]] < arrI) u = c + 1;
                else v = c;
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) p[i] = result[u - 1];
                result[u] = i;
            }
        }
    }
    u = result.length;
    v = result[u - 1];
    while(u-- > 0){
        result[u] = v;
        v = p[v];
    }
    return result;
}
const isTeleport = (type)=>type.__isTeleport;
const isTeleportDisabled = (props)=>props && (props.disabled || props.disabled === "");
const isTargetSVG = (target)=>typeof SVGElement !== "undefined" && target instanceof SVGElement;
const resolveTarget = (props, select)=>{
    const targetSelector = props && props.to;
    if ((0, _shared.isString)(targetSelector)) {
        if (!select) {
            warn(`Current renderer does not support string target for Teleports. ` + `(missing querySelector renderer option)`);
            return null;
        } else {
            const target = select(targetSelector);
            if (!target) warn(`Failed to locate Teleport target with selector "${targetSelector}". ` + `Note the target element must exist before the component is mounted - ` + `i.e. the target cannot be rendered by the component itself, and ` + `ideally should be outside of the entire Vue component tree.`);
            return target;
        }
    } else {
        if (!targetSelector && !isTeleportDisabled(props)) warn(`Invalid Teleport target: ${targetSelector}`);
        return targetSelector;
    }
};
const TeleportImpl = {
    __isTeleport: true,
    process (n1, n2, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren , pc: patchChildren , pbc: patchBlockChildren , o: { insert , querySelector , createText , createComment  }  } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag , children , dynamicChildren  } = n2;
        // #3302
        // HMR updated, force full diff
        if (isHmrUpdating) {
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            // insert anchors in the main view
            const placeholder = n2.el = createComment("teleport start");
            const mainAnchor = n2.anchor = createComment("teleport end");
            insert(placeholder, container2, anchor2);
            insert(mainAnchor, container2, anchor2);
            const target = n2.target = resolveTarget(n2.props, querySelector);
            const targetAnchor = n2.targetAnchor = createText("");
            if (target) {
                insert(targetAnchor, target);
                // #2652 we could be teleporting from a non-SVG tree into an SVG tree
                isSVG = isSVG || isTargetSVG(target);
            } else if (!disabled) warn("Invalid Teleport target on mount:", target, `(${typeof target})`);
            const mount = (container, anchor)=>{
                // Teleport *always* has Array children. This is enforced in both the
                // compiler and vnode children normalization.
                if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            };
            if (disabled) mount(container2, mainAnchor);
            else if (target) mount(target, targetAnchor);
        } else {
            // update content
            n2.el = n1.el;
            const mainAnchor = n2.anchor = n1.anchor;
            const target = n2.target = n1.target;
            const targetAnchor = n2.targetAnchor = n1.targetAnchor;
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container2 : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            isSVG = isSVG || isTargetSVG(target);
            if (dynamicChildren) {
                // fast path when the teleport happens to be a block root
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
                // even in block tree mode we need to make sure all root-level nodes
                // in the teleport inherit previous DOM references so that they can
                // be moved in future patches.
                traverseStaticChildren(n1, n2, true);
            } else if (!optimized) patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
            if (disabled) {
                if (!wasDisabled) // enabled -> disabled
                // move into main container
                moveTeleport(n2, container2, mainAnchor, internals, 1 /* TOGGLE */ );
            } else {
                // target changed
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                    const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
                    if (nextTarget) moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */ );
                    else warn("Invalid Teleport target on update:", target, `(${typeof target})`);
                } else if (wasDisabled) // disabled -> enabled
                // move into teleport target
                moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */ );
            }
        }
    },
    remove (vnode, parentComponent, parentSuspense, optimized, { um: unmount , o: { remove: hostRemove  }  }, doRemove) {
        const { shapeFlag , children , anchor , targetAnchor , target , props  } = vnode;
        if (target) hostRemove(targetAnchor);
        // an unmounted teleport should always remove its children if not disabled
        if (doRemove || !isTeleportDisabled(props)) {
            hostRemove(anchor);
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) for(let i = 0; i < children.length; i++){
                const child = children[i];
                unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
        }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert  } , m: move  }, moveType = 2 /* REORDER */ ) {
    // move target anchor if this is a target change.
    if (moveType === 0 /* TARGET_CHANGE */ ) insert(vnode.targetAnchor, container, parentAnchor);
    const { el , anchor , shapeFlag , children , props  } = vnode;
    const isReorder = moveType === 2 /* REORDER */ ;
    // move main view anchor if this is a re-order.
    if (isReorder) insert(el, container, parentAnchor);
    // if this is a re-order and teleport is enabled (content is in target)
    // do not move children. So the opposite is: only move children if this
    // is not a reorder, or the teleport is disabled
    if (!isReorder || isTeleportDisabled(props)) {
        // Teleport has either Array children or no children.
        if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) for(let i = 0; i < children.length; i++)move(children[i], container, parentAnchor, 2 /* REORDER */ );
    }
    // move main view anchor if this is a re-order.
    if (isReorder) insert(anchor, container, parentAnchor);
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling , parentNode , querySelector  }  }, hydrateChildren) {
    const target = vnode.target = resolveTarget(vnode.props, querySelector);
    if (target) {
        // if multiple teleports rendered to the same target element, we need to
        // pick up from where the last teleport finished instead of the first node
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */ ) {
            if (isTeleportDisabled(vnode.props)) {
                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
                vnode.targetAnchor = targetNode;
            } else {
                vnode.anchor = nextSibling(node);
                // lookahead until we find the target anchor
                // we cannot rely on return value of hydrateChildren() because there
                // could be nested teleports
                let targetAnchor = targetNode;
                while(targetAnchor){
                    targetAnchor = nextSibling(targetAnchor);
                    if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
                        vnode.targetAnchor = targetAnchor;
                        target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                        break;
                    }
                }
                hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
        }
    }
    return vnode.anchor && nextSibling(vnode.anchor);
}
// Force-casted public typing for h and TSX props inference
const Teleport = TeleportImpl;
const Fragment = Symbol("Fragment");
const Text = Symbol("Text");
const Comment = Symbol("Comment");
const Static = Symbol("Static");
// Since v-if and v-for are the two possible ways node structure can dynamically
// change, once we consider v-if branches and each v-for fragment a block, we
// can divide a template into nested blocks, and within each block the node
// structure would be stable. This allows us to skip most children diffing
// and only worry about the dynamic nodes (indicated by patch flags).
const blockStack = [];
let currentBlock = null;
/**
 * Open a block.
 * This must be called before `createBlock`. It cannot be part of `createBlock`
 * because the children of the block are evaluated before `createBlock` itself
 * is called. The generated code typically looks like this:
 *
 * ```js
 * function render() {
 *   return (openBlock(),createBlock('div', null, [...]))
 * }
 * ```
 * disableTracking is true when creating a v-for fragment block, since a v-for
 * fragment always diffs its children.
 *
 * @private
 */ function openBlock(disableTracking = false) {
    blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
}
// Whether we should be tracking dynamic child nodes inside a block.
// Only tracks when this value is > 0
// We are not using a simple boolean because this value may need to be
// incremented/decremented by nested usage of v-once (see below)
let isBlockTreeEnabled = 1;
/**
 * Block tracking sometimes needs to be disabled, for example during the
 * creation of a tree that needs to be cached by v-once. The compiler generates
 * code like this:
 *
 * ``` js
 * _cache[1] || (
 *   setBlockTracking(-1),
 *   _cache[1] = createVNode(...),
 *   setBlockTracking(1),
 *   _cache[1]
 * )
 * ```
 *
 * @private
 */ function setBlockTracking(value) {
    isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
    // save current block children on the block vnode
    vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || (0, _shared.EMPTY_ARR) : null;
    // close block
    closeBlock();
    // a block is always going to be patched, so track it as a child of its
    // parent block
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(vnode);
    return vnode;
}
/**
 * @private
 */ function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
    return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true));
}
/**
 * Create a block root vnode. Takes the same exact arguments as `createVNode`.
 * A block root keeps track of dynamic nodes within the block in the
 * `dynamicChildren` array.
 *
 * @private
 */ function createBlock(type, props, children, patchFlag, dynamicProps) {
    return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true));
}
function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
    if (n2.shapeFlag & 6 /* COMPONENT */  && hmrDirtyComponents.has(n2.type)) // HMR only: if the component has been hot-updated, force a reload.
    return false;
    return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
/**
 * Internal API for registering an arguments transform for createVNode
 * used for creating stubs in the test-utils
 * It is *internal* but needs to be exposed for test-utils to pick up proper
 * typings
 */ function transformVNodeArgs(transformer) {
    vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args)=>{
    return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key  })=>key != null ? key : null;
const normalizeRef = ({ ref , ref_key , ref_for  })=>{
    return ref != null ? (0, _shared.isString)(ref) || (0, _reactivity.isRef)(ref) || (0, _shared.isFunction)(ref) ? {
        i: currentRenderingInstance,
        r: ref,
        k: ref_key,
        f: !!ref_for
    } : ref : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1 /* ELEMENT */ , isBlockNode = false, needFullChildrenNormalization = false) {
    const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null
    };
    if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        // normalize suspense children
        if (shapeFlag & 128 /* SUSPENSE */ ) type.normalize(vnode);
    } else if (children) // compiled element vnode - if children is passed, only possible types are
    // string or Array.
    vnode.shapeFlag |= (0, _shared.isString)(children) ? 8 /* TEXT_CHILDREN */  : 16 /* ARRAY_CHILDREN */ ;
    // validate key
    if (vnode.key !== vnode.key) warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
    // track vnode for block tree
    if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
    !isBlockNode && // has current parent block
    currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6 /* COMPONENT */ ) && // the EVENTS flag is only for hydration and if it is the only flag, the
    // vnode should not be considered dynamic due to handler caching.
    vnode.patchFlag !== 32 /* HYDRATE_EVENTS */ ) currentBlock.push(vnode);
    return vnode;
}
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (!type) warn(`Invalid vnode type when creating vnode: ${type}.`);
        type = Comment;
    }
    if (isVNode(type)) {
        // createVNode receiving an existing vnode. This happens in cases like
        // <component :is="vnode"/>
        // #2078 make sure to merge refs during the clone instead of overwriting it
        const cloned = cloneVNode(type, props, true);
        if (children) normalizeChildren(cloned, children);
        if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
            if (cloned.shapeFlag & 6 /* COMPONENT */ ) currentBlock[currentBlock.indexOf(type)] = cloned;
            else currentBlock.push(cloned);
        }
        cloned.patchFlag |= -2 /* BAIL */ ;
        return cloned;
    }
    // class component normalization.
    if (isClassComponent(type)) type = type.__vccOpts;
    // class & style normalization.
    if (props) {
        // for reactive or proxy objects, we need to clone it to enable mutation.
        props = guardReactiveProps(props);
        let { class: klass , style  } = props;
        if (klass && !(0, _shared.isString)(klass)) props.class = (0, _shared.normalizeClass)(klass);
        if ((0, _shared.isObject)(style)) {
            // reactive state objects need to be cloned since they are likely to be
            // mutated
            if ((0, _reactivity.isProxy)(style) && !(0, _shared.isArray)(style)) style = (0, _shared.extend)({}, style);
            props.style = (0, _shared.normalizeStyle)(style);
        }
    }
    // encode the vnode type information into a bitmap
    const shapeFlag = (0, _shared.isString)(type) ? 1 /* ELEMENT */  : isSuspense(type) ? 128 /* SUSPENSE */  : isTeleport(type) ? 64 /* TELEPORT */  : (0, _shared.isObject)(type) ? 4 /* STATEFUL_COMPONENT */  : (0, _shared.isFunction)(type) ? 2 /* FUNCTIONAL_COMPONENT */  : 0;
    if (shapeFlag & 4 /* STATEFUL_COMPONENT */  && (0, _reactivity.isProxy)(type)) {
        type = (0, _reactivity.toRaw)(type);
        warn(`Vue received a Component which was made a reactive object. This can ` + `lead to unnecessary performance overhead, and should be avoided by ` + `marking the component with \`markRaw\` or using \`shallowRef\` ` + `instead of \`ref\`.`, `\nComponent that was made reactive: `, type);
    }
    return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
    if (!props) return null;
    return (0, _reactivity.isProxy)(props) || InternalObjectKey in props ? (0, _shared.extend)({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
    // This is intentionally NOT using spread or extend to avoid the runtime
    // key enumeration cost.
    const { props , ref , patchFlag , children  } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
    const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? // if the vnode itself already has a ref, cloneVNode will need to merge
        // the refs so the single vnode can be set on multiple refs
        mergeRef && ref ? (0, _shared.isArray)(ref) ? ref.concat(normalizeRef(extraProps)) : [
            ref,
            normalizeRef(extraProps)
        ] : normalizeRef(extraProps) : ref,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children: patchFlag === -1 /* HOISTED */  && (0, _shared.isArray)(children) ? children.map(deepCloneVNode) : children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: preserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 // hoisted node
         ? 16 /* FULL_PROPS */  : patchFlag | 16 /* FULL_PROPS */  : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor
    };
    return cloned;
}
/**
 * Dev only, for HMR of hoisted vnodes reused in v-for
 * https://github.com/vitejs/vite/issues/2022
 */ function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if ((0, _shared.isArray)(vnode.children)) cloned.children = vnode.children.map(deepCloneVNode);
    return cloned;
}
/**
 * @private
 */ function createTextVNode(text = " ", flag = 0) {
    return createVNode(Text, null, text, flag);
}
/**
 * @private
 */ function createStaticVNode(content, numberOfNodes) {
    // A static vnode can contain multiple stringified elements, and the number
    // of elements is necessary for hydration.
    const vnode = createVNode(Static, null, content);
    vnode.staticCount = numberOfNodes;
    return vnode;
}
/**
 * @private
 */ function createCommentVNode(text = "", // when used as the v-else branch, the comment node must be created as a
// block to ensure correct updates.
asBlock = false) {
    return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
    if (child == null || typeof child === "boolean") // empty placeholder
    return createVNode(Comment);
    else if ((0, _shared.isArray)(child)) // fragment
    return createVNode(Fragment, null, // #3666, avoid reference pollution when reusing vnode
    child.slice());
    else if (typeof child === "object") // already vnode, this should be the most common since compiled templates
    // always produce all-vnode children arrays
    return cloneIfMounted(child);
    else // strings and numbers
    return createVNode(Text, null, String(child));
}
// optimized normalization for template-compiled render fns
function cloneIfMounted(child) {
    return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag  } = vnode;
    if (children == null) children = null;
    else if ((0, _shared.isArray)(children)) type = 16 /* ARRAY_CHILDREN */ ;
    else if (typeof children === "object") {
        if (shapeFlag & 65 /* TELEPORT */ ) {
            // Normalize slot to plain children for plain element and Teleport
            const slot = children.default;
            if (slot) {
                // _c marker is added by withCtx() indicating this is a compiled slot
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
            }
            return;
        } else {
            type = 32 /* SLOTS_CHILDREN */ ;
            const slotFlag = children._;
            if (!slotFlag && !(InternalObjectKey in children)) children._ctx = currentRenderingInstance;
            else if (slotFlag === 3 /* FORWARDED */  && currentRenderingInstance) {
                // a child component receives forwarded slots from the parent.
                // its slot type is determined by its parent's slot type.
                if (currentRenderingInstance.slots._ === 1 /* STABLE */ ) children._ = 1 /* STABLE */ ;
                else {
                    children._ = 2 /* DYNAMIC */ ;
                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */ ;
                }
            }
        }
    } else if ((0, _shared.isFunction)(children)) {
        children = {
            default: children,
            _ctx: currentRenderingInstance
        };
        type = 32 /* SLOTS_CHILDREN */ ;
    } else {
        children = String(children);
        // force teleport children to array so it can be moved around
        if (shapeFlag & 64 /* TELEPORT */ ) {
            type = 16 /* ARRAY_CHILDREN */ ;
            children = [
                createTextVNode(children)
            ];
        } else type = 8 /* TEXT_CHILDREN */ ;
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
}
function mergeProps(...args) {
    const ret = {};
    for(let i = 0; i < args.length; i++){
        const toMerge = args[i];
        for(const key in toMerge){
            if (key === "class") {
                if (ret.class !== toMerge.class) ret.class = (0, _shared.normalizeClass)([
                    ret.class,
                    toMerge.class
                ]);
            } else if (key === "style") ret.style = (0, _shared.normalizeStyle)([
                ret.style,
                toMerge.style
            ]);
            else if ((0, _shared.isOn)(key)) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (incoming && existing !== incoming && !((0, _shared.isArray)(existing) && existing.includes(incoming))) ret[key] = existing ? [].concat(existing, incoming) : incoming;
            } else if (key !== "") ret[key] = toMerge[key];
        }
    }
    return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */ , [
        vnode,
        prevVNode
    ]);
}
const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    // inherit parent app context - or - if root, adopt from root vnode
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
        uid: uid$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        effect: null,
        update: null,
        scope: new (0, _reactivity.EffectScope)(true),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        // local resolved assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        emitted: null,
        // props default value
        propsDefaults: (0, _shared.EMPTY_OBJ),
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: (0, _shared.EMPTY_OBJ),
        data: (0, _shared.EMPTY_OBJ),
        props: (0, _shared.EMPTY_OBJ),
        attrs: (0, _shared.EMPTY_OBJ),
        slots: (0, _shared.EMPTY_OBJ),
        refs: (0, _shared.EMPTY_OBJ),
        setupState: (0, _shared.EMPTY_OBJ),
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
    };
    instance.ctx = createDevRenderContext(instance);
    instance.root = parent ? parent.root : instance;
    instance.emit = emit$1.bind(null, instance);
    // apply custom element special handling
    if (vnode.ce) vnode.ce(instance);
    return instance;
}
let currentInstance = null;
const getCurrentInstance = ()=>currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance)=>{
    currentInstance = instance;
    instance.scope.on();
};
const unsetCurrentInstance = ()=>{
    currentInstance && currentInstance.scope.off();
    currentInstance = null;
};
const isBuiltInTag = /*#__PURE__*/ (0, _shared.makeMap)("slot,component");
function validateComponentName(name, config) {
    const appIsNativeTag = config.isNativeTag || (0, _shared.NO);
    if (isBuiltInTag(name) || appIsNativeTag(name)) warn("Do not use built-in or reserved HTML elements as component id: " + name);
}
function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
    isInSSRComponentSetup = isSSR;
    const { props , children  } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children);
    const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : undefined;
    isInSSRComponentSetup = false;
    return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
    var _a;
    const Component = instance.type;
    if (Component.name) validateComponentName(Component.name, instance.appContext.config);
    if (Component.components) {
        const names = Object.keys(Component.components);
        for(let i = 0; i < names.length; i++)validateComponentName(names[i], instance.appContext.config);
    }
    if (Component.directives) {
        const names = Object.keys(Component.directives);
        for(let i = 0; i < names.length; i++)validateDirectiveName(names[i]);
    }
    if (Component.compilerOptions && isRuntimeOnly()) warn(`"compilerOptions" is only supported when using a build of Vue that ` + `includes the runtime compiler. Since you are using a runtime-only ` + `build, the options should be passed via your build tool config instead.`);
    // 0. create render proxy property access cache
    instance.accessCache = Object.create(null);
    // 1. create public instance / render proxy
    // also mark it raw so it's never observed
    instance.proxy = (0, _reactivity.markRaw)(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
    exposePropsOnRenderContext(instance);
    // 2. call setup()
    const { setup  } = Component;
    if (setup) {
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        setCurrentInstance(instance);
        (0, _reactivity.pauseTracking)();
        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */ , [
            (0, _reactivity.shallowReadonly)(instance.props),
            setupContext
        ]);
        (0, _reactivity.resetTracking)();
        unsetCurrentInstance();
        if ((0, _shared.isPromise)(setupResult)) {
            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
            if (isSSR) // return the promise so server-renderer can wait on it
            return setupResult.then((resolvedResult)=>{
                handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e)=>{
                handleError(e, instance, 0 /* SETUP_FUNCTION */ );
            });
            else {
                // async setup returned Promise.
                // bail here and wait for re-entry.
                instance.asyncDep = setupResult;
                if (!instance.suspense) {
                    const name = (_a = Component.name) !== null && _a !== void 0 ? _a : "Anonymous";
                    warn(`Component <${name}>: setup function returned a promise, but no ` + `<Suspense> boundary was found in the parent component tree. ` + `A component with async setup() must be nested in a <Suspense> ` + `in order to be rendered.`);
                }
            }
        } else handleSetupResult(instance, setupResult, isSSR);
    } else finishComponentSetup(instance, isSSR);
}
function handleSetupResult(instance, setupResult, isSSR) {
    if ((0, _shared.isFunction)(setupResult)) {
        // setup returned an inline render function
        if (instance.type.__ssrInlineRender) // when the function's name is `ssrRender` (compiled by SFC inline mode),
        // set it as ssrRender instead.
        instance.ssrRender = setupResult;
        else instance.render = setupResult;
    } else if ((0, _shared.isObject)(setupResult)) {
        if (isVNode(setupResult)) warn(`setup() should not return VNodes directly - ` + `return a render function instead.`);
        instance.devtoolsRawSetupState = setupResult;
        instance.setupState = (0, _reactivity.proxyRefs)(setupResult);
        exposeSetupStateOnRenderContext(instance);
    } else if (setupResult !== undefined) warn(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
    finishComponentSetup(instance, isSSR);
}
let compile;
let installWithProxy;
/**
 * For runtime-dom to register the compiler.
 * Note the exported method uses any to avoid d.ts relying on the compiler types.
 */ function registerRuntimeCompiler(_compile) {
    compile = _compile;
    installWithProxy = (i)=>{
        if (i.render._rc) i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    };
}
// dev only
const isRuntimeOnly = ()=>!compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    // template / render function normalization
    // could be already set when returned from setup()
    if (!instance.render) {
        // only do on-the-fly compile if not in SSR - SSR on-the-fly compilation
        // is done by server-renderer
        if (!isSSR && compile && !Component.render) {
            const template = Component.template;
            if (template) {
                startMeasure(instance, `compile`);
                const { isCustomElement , compilerOptions  } = instance.appContext.config;
                const { delimiters , compilerOptions: componentCompilerOptions  } = Component;
                const finalCompilerOptions = (0, _shared.extend)((0, _shared.extend)({
                    isCustomElement,
                    delimiters
                }, compilerOptions), componentCompilerOptions);
                Component.render = compile(template, finalCompilerOptions);
                endMeasure(instance, `compile`);
            }
        }
        instance.render = Component.render || (0, _shared.NOOP);
        // for runtime-compiled render functions using `with` blocks, the render
        // proxy used needs a different `has` handler which is more performant and
        // also only allows a whitelist of globals to fallthrough.
        if (installWithProxy) installWithProxy(instance);
    }
    // support for 2.x options
    if (__VUE_OPTIONS_API__ && true) {
        setCurrentInstance(instance);
        (0, _reactivity.pauseTracking)();
        applyOptions(instance);
        (0, _reactivity.resetTracking)();
        unsetCurrentInstance();
    }
    // warn missing template/render
    // the runtime compilation of template in SSR is done by server-render
    if (!Component.render && instance.render === (0, _shared.NOOP) && !isSSR) {
        /* istanbul ignore if */ if (!compile && Component.template) warn(`Component provided template option but ` + `runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
        else warn(`Component is missing template or render function.`);
    }
}
function createAttrsProxy(instance) {
    return new Proxy(instance.attrs, {
        get (target, key) {
            markAttrsAccessed();
            (0, _reactivity.track)(instance, "get" /* GET */ , "$attrs");
            return target[key];
        },
        set () {
            warn(`setupContext.attrs is readonly.`);
            return false;
        },
        deleteProperty () {
            warn(`setupContext.attrs is readonly.`);
            return false;
        }
    });
}
function createSetupContext(instance) {
    const expose = (exposed)=>{
        if (instance.exposed) warn(`expose() should be called only once per setup().`);
        instance.exposed = exposed || {};
    };
    let attrs;
    // We use getters in dev in case libs like test-utils overwrite instance
    // properties (overwrites should not be done in prod)
    return Object.freeze({
        get attrs () {
            return attrs || (attrs = createAttrsProxy(instance));
        },
        get slots () {
            return (0, _reactivity.shallowReadonly)(instance.slots);
        },
        get emit () {
            return (event, ...args)=>instance.emit(event, ...args);
        },
        expose
    });
}
function getExposeProxy(instance) {
    if (instance.exposed) return instance.exposeProxy || (instance.exposeProxy = new Proxy((0, _reactivity.proxyRefs)((0, _reactivity.markRaw)(instance.exposed)), {
        get (target, key) {
            if (key in target) return target[key];
            else if (key in publicPropertiesMap) return publicPropertiesMap[key](instance);
        }
    }));
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str)=>str.replace(classifyRE, (c)=>c.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
    return (0, _shared.isFunction)(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
/* istanbul ignore next */ function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) name = match[1];
    }
    if (!name && instance && instance.parent) {
        // try to infer the name based on reverse resolution
        const inferFromRegistry = (registry)=>{
            for(const key in registry){
                if (registry[key] === Component) return key;
            }
        };
        name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
    return (0, _shared.isFunction)(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions)=>{
    // @ts-ignore
    return (0, _reactivity.computed)(getterOrOptions, debugOptions, isInSSRComponentSetup);
};
// dev only
const warnRuntimeUsage = (method)=>warn(`${method}() is a compiler-hint helper that is only usable inside ` + `<script setup> of a single file component. Its arguments should be ` + `compiled away and passing it at runtime has no effect.`);
// implementation
function defineProps() {
    warnRuntimeUsage(`defineProps`);
    return null;
}
// implementation
function defineEmits() {
    warnRuntimeUsage(`defineEmits`);
    return null;
}
/**
 * Vue `<script setup>` compiler macro for declaring a component's exposed
 * instance properties when it is accessed by a parent component via template
 * refs.
 *
 * `<script setup>` components are closed by default - i.e. variables inside
 * the `<script setup>` scope is not exposed to parent unless explicitly exposed
 * via `defineExpose`.
 *
 * This is only usable inside `<script setup>`, is compiled away in the
 * output and should **not** be actually called at runtime.
 */ function defineExpose(exposed) {
    warnRuntimeUsage(`defineExpose`);
}
/**
 * Vue `<script setup>` compiler macro for providing props default values when
 * using type-based `defineProps` declaration.
 *
 * Example usage:
 * ```ts
 * withDefaults(defineProps<{
 *   size?: number
 *   labels?: string[]
 * }>(), {
 *   size: 3,
 *   labels: () => ['default label']
 * })
 * ```
 *
 * This is only usable inside `<script setup>`, is compiled away in the output
 * and should **not** be actually called at runtime.
 */ function withDefaults(props, defaults) {
    warnRuntimeUsage(`withDefaults`);
    return null;
}
function useSlots() {
    return getContext().slots;
}
function useAttrs() {
    return getContext().attrs;
}
function getContext() {
    const i = getCurrentInstance();
    if (!i) warn(`useContext() called without active instance.`);
    return i.setupContext || (i.setupContext = createSetupContext(i));
}
/**
 * Runtime helper for merging default declarations. Imported by compiled code
 * only.
 * @internal
 */ function mergeDefaults(raw, defaults) {
    const props = (0, _shared.isArray)(raw) ? raw.reduce((normalized, p)=>(normalized[p] = {}, normalized), {}) : raw;
    for(const key in defaults){
        const opt = props[key];
        if (opt) {
            if ((0, _shared.isArray)(opt) || (0, _shared.isFunction)(opt)) props[key] = {
                type: opt,
                default: defaults[key]
            };
            else opt.default = defaults[key];
        } else if (opt === null) props[key] = {
            default: defaults[key]
        };
        else warn(`props default key "${key}" has no corresponding declaration.`);
    }
    return props;
}
/**
 * Used to create a proxy for the rest element when destructuring props with
 * defineProps().
 * @internal
 */ function createPropsRestProxy(props, excludedKeys) {
    const ret = {};
    for(const key in props)if (!excludedKeys.includes(key)) Object.defineProperty(ret, key, {
        enumerable: true,
        get: ()=>props[key]
    });
    return ret;
}
/**
 * `<script setup>` helper for persisting the current instance context over
 * async/await flows.
 *
 * `@vue/compiler-sfc` converts the following:
 *
 * ```ts
 * const x = await foo()
 * ```
 *
 * into:
 *
 * ```ts
 * let __temp, __restore
 * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)
 * ```
 * @internal
 */ function withAsyncContext(getAwaitable) {
    const ctx = getCurrentInstance();
    if (!ctx) warn(`withAsyncContext called without active current instance. ` + `This is likely a bug.`);
    let awaitable = getAwaitable();
    unsetCurrentInstance();
    if ((0, _shared.isPromise)(awaitable)) awaitable = awaitable.catch((e)=>{
        setCurrentInstance(ctx);
        throw e;
    });
    return [
        awaitable,
        ()=>setCurrentInstance(ctx)
    ];
}
// Actual implementation
function h(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
        if ((0, _shared.isObject)(propsOrChildren) && !(0, _shared.isArray)(propsOrChildren)) {
            // single vnode without props
            if (isVNode(propsOrChildren)) return createVNode(type, null, [
                propsOrChildren
            ]);
            // props without children
            return createVNode(type, propsOrChildren);
        } else // omit props
        return createVNode(type, null, propsOrChildren);
    } else {
        if (l > 3) children = Array.prototype.slice.call(arguments, 2);
        else if (l === 3 && isVNode(children)) children = [
            children
        ];
        return createVNode(type, propsOrChildren, children);
    }
}
const ssrContextKey = Symbol(`ssrContext`);
const useSSRContext = ()=>{
    {
        const ctx = inject(ssrContextKey);
        if (!ctx) warn(`Server rendering context not provided. Make sure to only call ` + `useSSRContext() conditionally in the server build.`);
        return ctx;
    }
};
function isShallow(value) {
    return !!(value && value["__v_isShallow" /* IS_SHALLOW */ ]);
}
function initCustomFormatter() {
    /* eslint-disable no-restricted-globals */ if (typeof window === "undefined") return;
    const vueStyle = {
        style: "color:#3ba776"
    };
    const numberStyle = {
        style: "color:#0b1bc9"
    };
    const stringStyle = {
        style: "color:#b62e24"
    };
    const keywordStyle = {
        style: "color:#9d288c"
    };
    // custom formatter for Chrome
    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html
    const formatter = {
        header (obj) {
            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup
            if (!(0, _shared.isObject)(obj)) return null;
            if (obj.__isVue) return [
                "div",
                vueStyle,
                `VueInstance`
            ];
            else if ((0, _reactivity.isRef)(obj)) return [
                "div",
                {},
                [
                    "span",
                    vueStyle,
                    genRefFlag(obj)
                ],
                "<",
                formatValue(obj.value),
                `>`
            ];
            else if ((0, _reactivity.isReactive)(obj)) return [
                "div",
                {},
                [
                    "span",
                    vueStyle,
                    isShallow(obj) ? "ShallowReactive" : "Reactive"
                ],
                "<",
                formatValue(obj),
                `>${(0, _reactivity.isReadonly)(obj) ? ` (readonly)` : ``}`
            ];
            else if ((0, _reactivity.isReadonly)(obj)) return [
                "div",
                {},
                [
                    "span",
                    vueStyle,
                    isShallow(obj) ? "ShallowReadonly" : "Readonly"
                ],
                "<",
                formatValue(obj),
                ">"
            ];
            return null;
        },
        hasBody (obj) {
            return obj && obj.__isVue;
        },
        body (obj) {
            if (obj && obj.__isVue) return [
                "div",
                {},
                ...formatInstance(obj.$)
            ];
        }
    };
    function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) blocks.push(createInstanceBlock("props", (0, _reactivity.toRaw)(instance.props)));
        if (instance.setupState !== (0, _shared.EMPTY_OBJ)) blocks.push(createInstanceBlock("setup", instance.setupState));
        if (instance.data !== (0, _shared.EMPTY_OBJ)) blocks.push(createInstanceBlock("data", (0, _reactivity.toRaw)(instance.data)));
        const computed1 = extractKeys(instance, "computed");
        if (computed1) blocks.push(createInstanceBlock("computed", computed1));
        const injected = extractKeys(instance, "inject");
        if (injected) blocks.push(createInstanceBlock("injected", injected));
        blocks.push([
            "div",
            {},
            [
                "span",
                {
                    style: keywordStyle.style + ";opacity:0.66"
                },
                "$ (internal): "
            ],
            [
                "object",
                {
                    object: instance
                }
            ]
        ]);
        return blocks;
    }
    function createInstanceBlock(type, target) {
        target = (0, _shared.extend)({}, target);
        if (!Object.keys(target).length) return [
            "span",
            {}
        ];
        return [
            "div",
            {
                style: "line-height:1.25em;margin-bottom:0.6em"
            },
            [
                "div",
                {
                    style: "color:#476582"
                },
                type
            ],
            [
                "div",
                {
                    style: "padding-left:1.25em"
                },
                ...Object.keys(target).map((key)=>{
                    return [
                        "div",
                        {},
                        [
                            "span",
                            keywordStyle,
                            key + ": "
                        ],
                        formatValue(target[key], false)
                    ];
                })
            ]
        ];
    }
    function formatValue(v, asRaw = true) {
        if (typeof v === "number") return [
            "span",
            numberStyle,
            v
        ];
        else if (typeof v === "string") return [
            "span",
            stringStyle,
            JSON.stringify(v)
        ];
        else if (typeof v === "boolean") return [
            "span",
            keywordStyle,
            v
        ];
        else if ((0, _shared.isObject)(v)) return [
            "object",
            {
                object: asRaw ? (0, _reactivity.toRaw)(v) : v
            }
        ];
        else return [
            "span",
            stringStyle,
            String(v)
        ];
    }
    function extractKeys(instance, type) {
        const Comp = instance.type;
        if ((0, _shared.isFunction)(Comp)) return;
        const extracted = {};
        for(const key in instance.ctx)if (isKeyOfType(Comp, key, type)) extracted[key] = instance.ctx[key];
        return extracted;
    }
    function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if ((0, _shared.isArray)(opts) && opts.includes(key) || (0, _shared.isObject)(opts) && key in opts) return true;
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) return true;
        if (Comp.mixins && Comp.mixins.some((m)=>isKeyOfType(m, key, type))) return true;
    }
    function genRefFlag(v) {
        if (isShallow(v)) return `ShallowRef`;
        if (v.effect) return `ComputedRef`;
        return `Ref`;
    }
    if (window.devtoolsFormatters) window.devtoolsFormatters.push(formatter);
    else window.devtoolsFormatters = [
        formatter
    ];
}
function withMemo(memo, render, cache, index) {
    const cached = cache[index];
    if (cached && isMemoSame(cached, memo)) return cached;
    const ret = render();
    // shallow clone
    ret.memo = memo.slice();
    return cache[index] = ret;
}
function isMemoSame(cached, memo) {
    const prev = cached.memo;
    if (prev.length != memo.length) return false;
    for(let i = 0; i < prev.length; i++){
        if ((0, _shared.hasChanged)(prev[i], memo[i])) return false;
    }
    // make sure to let parent block track it when returning cached
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(cached);
    return true;
}
// Core API ------------------------------------------------------------------
const version = "3.2.37";
const _ssrUtils = {
    createComponentInstance,
    setupComponent,
    renderComponentRoot,
    setCurrentRenderingInstance,
    isVNode,
    normalizeVNode
};
/**
 * SSR utils for \@vue/server-renderer. Only exposed in ssr-possible builds.
 * @internal
 */ const ssrUtils = _ssrUtils;
/**
 * @internal only exposed in compat builds
 */ const resolveFilter = null;
/**
 * @internal only exposed in compat builds.
 */ const compatUtils = null;

},{"@vue/reactivity":"d7UXQ","@vue/shared":"3SM3y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d7UXQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EffectScope", ()=>EffectScope);
parcelHelpers.export(exports, "ITERATE_KEY", ()=>ITERATE_KEY);
parcelHelpers.export(exports, "ReactiveEffect", ()=>ReactiveEffect);
parcelHelpers.export(exports, "computed", ()=>computed);
parcelHelpers.export(exports, "customRef", ()=>customRef);
parcelHelpers.export(exports, "deferredComputed", ()=>deferredComputed);
parcelHelpers.export(exports, "effect", ()=>effect);
parcelHelpers.export(exports, "effectScope", ()=>effectScope);
parcelHelpers.export(exports, "enableTracking", ()=>enableTracking);
parcelHelpers.export(exports, "getCurrentScope", ()=>getCurrentScope);
parcelHelpers.export(exports, "isProxy", ()=>isProxy);
parcelHelpers.export(exports, "isReactive", ()=>isReactive);
parcelHelpers.export(exports, "isReadonly", ()=>isReadonly);
parcelHelpers.export(exports, "isRef", ()=>isRef);
parcelHelpers.export(exports, "isShallow", ()=>isShallow);
parcelHelpers.export(exports, "markRaw", ()=>markRaw);
parcelHelpers.export(exports, "onScopeDispose", ()=>onScopeDispose);
parcelHelpers.export(exports, "pauseTracking", ()=>pauseTracking);
parcelHelpers.export(exports, "proxyRefs", ()=>proxyRefs);
parcelHelpers.export(exports, "reactive", ()=>reactive);
parcelHelpers.export(exports, "readonly", ()=>readonly);
parcelHelpers.export(exports, "ref", ()=>ref);
parcelHelpers.export(exports, "resetTracking", ()=>resetTracking);
parcelHelpers.export(exports, "shallowReactive", ()=>shallowReactive);
parcelHelpers.export(exports, "shallowReadonly", ()=>shallowReadonly);
parcelHelpers.export(exports, "shallowRef", ()=>shallowRef);
parcelHelpers.export(exports, "stop", ()=>stop);
parcelHelpers.export(exports, "toRaw", ()=>toRaw);
parcelHelpers.export(exports, "toRef", ()=>toRef);
parcelHelpers.export(exports, "toRefs", ()=>toRefs);
parcelHelpers.export(exports, "track", ()=>track);
parcelHelpers.export(exports, "trigger", ()=>trigger);
parcelHelpers.export(exports, "triggerRef", ()=>triggerRef);
parcelHelpers.export(exports, "unref", ()=>unref);
var _shared = require("@vue/shared");
function warn(msg, ...args) {
    console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
class EffectScope {
    constructor(detached = false){
        /**
         * @internal
         */ this.active = true;
        /**
         * @internal
         */ this.effects = [];
        /**
         * @internal
         */ this.cleanups = [];
        if (!detached && activeEffectScope) {
            this.parent = activeEffectScope;
            this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
    }
    run(fn) {
        if (this.active) {
            const currentEffectScope = activeEffectScope;
            try {
                activeEffectScope = this;
                return fn();
            } finally{
                activeEffectScope = currentEffectScope;
            }
        } else warn(`cannot run an inactive effect scope.`);
    }
    /**
     * This should only be called on non-detached scopes
     * @internal
     */ on() {
        activeEffectScope = this;
    }
    /**
     * This should only be called on non-detached scopes
     * @internal
     */ off() {
        activeEffectScope = this.parent;
    }
    stop(fromParent) {
        if (this.active) {
            let i, l;
            for(i = 0, l = this.effects.length; i < l; i++)this.effects[i].stop();
            for(i = 0, l = this.cleanups.length; i < l; i++)this.cleanups[i]();
            if (this.scopes) for(i = 0, l = this.scopes.length; i < l; i++)this.scopes[i].stop(true);
            // nested scope, dereference from parent to avoid memory leaks
            if (this.parent && !fromParent) {
                // optimized O(1) removal
                const last = this.parent.scopes.pop();
                if (last && last !== this) {
                    this.parent.scopes[this.index] = last;
                    last.index = this.index;
                }
            }
            this.active = false;
        }
    }
}
function effectScope(detached) {
    return new EffectScope(detached);
}
function recordEffectScope(effect1, scope = activeEffectScope) {
    if (scope && scope.active) scope.effects.push(effect1);
}
function getCurrentScope() {
    return activeEffectScope;
}
function onScopeDispose(fn) {
    if (activeEffectScope) activeEffectScope.cleanups.push(fn);
    else warn(`onScopeDispose() is called when there is no active effect scope` + ` to be associated with.`);
}
const createDep = (effects)=>{
    const dep = new Set(effects);
    dep.w = 0;
    dep.n = 0;
    return dep;
};
const wasTracked = (dep)=>(dep.w & trackOpBit) > 0;
const newTracked = (dep)=>(dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps  })=>{
    if (deps.length) for(let i = 0; i < deps.length; i++)deps[i].w |= trackOpBit; // set was tracked
};
const finalizeDepMarkers = (effect2)=>{
    const { deps  } = effect2;
    if (deps.length) {
        let ptr = 0;
        for(let i = 0; i < deps.length; i++){
            const dep = deps[i];
            if (wasTracked(dep) && !newTracked(dep)) dep.delete(effect2);
            else deps[ptr++] = dep;
            // clear bits
            dep.w &= ~trackOpBit;
            dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
    }
};
const targetMap = new WeakMap();
// The number of effects currently being tracked recursively.
let effectTrackDepth = 0;
let trackOpBit = 1;
/**
 * The bitwise track markers support at most 30 levels of recursion.
 * This value is chosen to enable modern JS engines to use a SMI on all platforms.
 * When recursion depth is greater, fall back to using a full cleanup.
 */ const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol("iterate");
const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
class ReactiveEffect {
    constructor(fn, scheduler1 = null, scope){
        this.fn = fn;
        this.scheduler = scheduler1;
        this.active = true;
        this.deps = [];
        this.parent = undefined;
        recordEffectScope(this, scope);
    }
    run() {
        if (!this.active) return this.fn();
        let parent = activeEffect;
        let lastShouldTrack = shouldTrack;
        while(parent){
            if (parent === this) return;
            parent = parent.parent;
        }
        try {
            this.parent = activeEffect;
            activeEffect = this;
            shouldTrack = true;
            trackOpBit = 1 << ++effectTrackDepth;
            if (effectTrackDepth <= maxMarkerBits) initDepMarkers(this);
            else cleanupEffect(this);
            return this.fn();
        } finally{
            if (effectTrackDepth <= maxMarkerBits) finalizeDepMarkers(this);
            trackOpBit = 1 << --effectTrackDepth;
            activeEffect = this.parent;
            shouldTrack = lastShouldTrack;
            this.parent = undefined;
            if (this.deferStop) this.stop();
        }
    }
    stop() {
        // stopped while running itself - defer the cleanup
        if (activeEffect === this) this.deferStop = true;
        else if (this.active) {
            cleanupEffect(this);
            if (this.onStop) this.onStop();
            this.active = false;
        }
    }
}
function cleanupEffect(effect3) {
    const { deps  } = effect3;
    if (deps.length) {
        for(let i = 0; i < deps.length; i++)deps[i].delete(effect3);
        deps.length = 0;
    }
}
function effect(fn, options) {
    if (fn.effect) fn = fn.effect.fn;
    const _effect = new ReactiveEffect(fn);
    if (options) {
        (0, _shared.extend)(_effect, options);
        if (options.scope) recordEffectScope(_effect, options.scope);
    }
    if (!options || !options.lazy) _effect.run();
    const runner = _effect.run.bind(_effect);
    runner.effect = _effect;
    return runner;
}
function stop(runner) {
    runner.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
}
function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
}
function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === undefined ? true : last;
}
function track(target, type, key) {
    if (shouldTrack && activeEffect) {
        let depsMap = targetMap.get(target);
        if (!depsMap) targetMap.set(target, depsMap = new Map());
        let dep = depsMap.get(key);
        if (!dep) depsMap.set(key, dep = createDep());
        const eventInfo = {
            effect: activeEffect,
            target,
            type,
            key
        };
        trackEffects(dep, eventInfo);
    }
}
function trackEffects(dep, debuggerEventExtraInfo) {
    let shouldTrack1 = false;
    if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
            dep.n |= trackOpBit; // set newly tracked
            shouldTrack1 = !wasTracked(dep);
        }
    } else // Full cleanup mode.
    shouldTrack1 = !dep.has(activeEffect);
    if (shouldTrack1) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (activeEffect.onTrack) activeEffect.onTrack(Object.assign({
            effect: activeEffect
        }, debuggerEventExtraInfo));
    }
}
function trigger(target, type, key1, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) // never been tracked
    return;
    let deps = [];
    if (type === "clear" /* CLEAR */ ) // collection being cleared
    // trigger all effects for target
    deps = [
        ...depsMap.values()
    ];
    else if (key1 === "length" && (0, _shared.isArray)(target)) depsMap.forEach((dep, key)=>{
        if (key === "length" || key >= newValue) deps.push(dep);
    });
    else {
        // schedule runs for SET | ADD | DELETE
        if (key1 !== void 0) deps.push(depsMap.get(key1));
        // also run for iteration key on ADD | DELETE | Map.SET
        switch(type){
            case "add" /* ADD */ :
                if (!(0, _shared.isArray)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if ((0, _shared.isMap)(target)) deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                } else if ((0, _shared.isIntegerKey)(key1)) // new index added to array -> length changes
                deps.push(depsMap.get("length"));
                break;
            case "delete" /* DELETE */ :
                if (!(0, _shared.isArray)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if ((0, _shared.isMap)(target)) deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                }
                break;
            case "set" /* SET */ :
                if ((0, _shared.isMap)(target)) deps.push(depsMap.get(ITERATE_KEY));
                break;
        }
    }
    const eventInfo = {
        target,
        type,
        key: key1,
        newValue,
        oldValue,
        oldTarget
    };
    if (deps.length === 1) {
        if (deps[0]) triggerEffects(deps[0], eventInfo);
    } else {
        const effects = [];
        for (const dep of deps)if (dep) effects.push(...dep);
        triggerEffects(createDep(effects), eventInfo);
    }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
    // spread into array for stabilization
    const effects = (0, _shared.isArray)(dep) ? dep : [
        ...dep
    ];
    for (const effect5 of effects)if (effect5.computed) triggerEffect(effect5, debuggerEventExtraInfo);
    for (const effect4 of effects)if (!effect4.computed) triggerEffect(effect4, debuggerEventExtraInfo);
}
function triggerEffect(effect6, debuggerEventExtraInfo) {
    if (effect6 !== activeEffect || effect6.allowRecurse) {
        if (effect6.onTrigger) effect6.onTrigger((0, _shared.extend)({
            effect: effect6
        }, debuggerEventExtraInfo));
        if (effect6.scheduler) effect6.scheduler();
        else effect6.run();
    }
}
const isNonTrackableKeys = /*#__PURE__*/ (0, _shared.makeMap)(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(/*#__PURE__*/ Object.getOwnPropertyNames(Symbol)// ios10.x Object.getOwnPropertyNames(Symbol) can enumerate 'arguments' and 'caller'
// but accessing them on Symbol leads to TypeError because Symbol is a strict mode
// function
.filter((key)=>key !== "arguments" && key !== "caller").map((key)=>Symbol[key]).filter((0, _shared.isSymbol)));
const get = /*#__PURE__*/ createGetter();
const shallowGet = /*#__PURE__*/ createGetter(false, true);
const readonlyGet = /*#__PURE__*/ createGetter(true);
const shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);
const arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();
function createArrayInstrumentations() {
    const instrumentations = {};
    [
        "includes",
        "indexOf",
        "lastIndexOf"
    ].forEach((key)=>{
        instrumentations[key] = function(...args) {
            const arr = toRaw(this);
            for(let i = 0, l = this.length; i < l; i++)track(arr, "get" /* GET */ , i + "");
            // we run the method using the original args first (which may be reactive)
            const res = arr[key](...args);
            if (res === -1 || res === false) // if that didn't work, run it again using raw values.
            return arr[key](...args.map(toRaw));
            else return res;
        };
    });
    [
        "push",
        "pop",
        "shift",
        "unshift",
        "splice"
    ].forEach((key)=>{
        instrumentations[key] = function(...args) {
            pauseTracking();
            const res = toRaw(this)[key].apply(this, args);
            resetTracking();
            return res;
        };
    });
    return instrumentations;
}
function createGetter(isReadonly1 = false, shallow = false) {
    return function get(target, key, receiver) {
        if (key === "__v_isReactive" /* IS_REACTIVE */ ) return !isReadonly1;
        else if (key === "__v_isReadonly" /* IS_READONLY */ ) return isReadonly1;
        else if (key === "__v_isShallow" /* IS_SHALLOW */ ) return shallow;
        else if (key === "__v_raw" /* RAW */  && receiver === (isReadonly1 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) return target;
        const targetIsArray = (0, _shared.isArray)(target);
        if (!isReadonly1 && targetIsArray && (0, _shared.hasOwn)(arrayInstrumentations, key)) return Reflect.get(arrayInstrumentations, key, receiver);
        const res = Reflect.get(target, key, receiver);
        if ((0, _shared.isSymbol)(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) return res;
        if (!isReadonly1) track(target, "get" /* GET */ , key);
        if (shallow) return res;
        if (isRef(res)) // ref unwrapping - skip unwrap for Array + integer key.
        return targetIsArray && (0, _shared.isIntegerKey)(key) ? res : res.value;
        if ((0, _shared.isObject)(res)) // Convert returned value into a proxy as well. we do the isObject check
        // here to avoid invalid value warning. Also need to lazy access readonly
        // and reactive here to avoid circular dependency.
        return isReadonly1 ? readonly(res) : reactive(res);
        return res;
    };
}
const set = /*#__PURE__*/ createSetter();
const shallowSet = /*#__PURE__*/ createSetter(true);
function createSetter(shallow = false) {
    return function set(target, key, value, receiver) {
        let oldValue = target[key];
        if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) return false;
        if (!shallow && !isReadonly(value)) {
            if (!isShallow(value)) {
                value = toRaw(value);
                oldValue = toRaw(oldValue);
            }
            if (!(0, _shared.isArray)(target) && isRef(oldValue) && !isRef(value)) {
                oldValue.value = value;
                return true;
            }
        }
        const hadKey = (0, _shared.isArray)(target) && (0, _shared.isIntegerKey)(key) ? Number(key) < target.length : (0, _shared.hasOwn)(target, key);
        const result = Reflect.set(target, key, value, receiver);
        // don't trigger if target is something up in the prototype chain of original
        if (target === toRaw(receiver)) {
            if (!hadKey) trigger(target, "add" /* ADD */ , key, value);
            else if ((0, _shared.hasChanged)(value, oldValue)) trigger(target, "set" /* SET */ , key, value, oldValue);
        }
        return result;
    };
}
function deleteProperty(target, key) {
    const hadKey = (0, _shared.hasOwn)(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) trigger(target, "delete" /* DELETE */ , key, undefined, oldValue);
    return result;
}
function has(target, key) {
    const result = Reflect.has(target, key);
    if (!(0, _shared.isSymbol)(key) || !builtInSymbols.has(key)) track(target, "has" /* HAS */ , key);
    return result;
}
function ownKeys(target) {
    track(target, "iterate" /* ITERATE */ , (0, _shared.isArray)(target) ? "length" : ITERATE_KEY);
    return Reflect.ownKeys(target);
}
const mutableHandlers = {
    get,
    set,
    deleteProperty,
    has,
    ownKeys
};
const readonlyHandlers = {
    get: readonlyGet,
    set (target, key) {
        warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    },
    deleteProperty (target, key) {
        warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    }
};
const shallowReactiveHandlers = /*#__PURE__*/ (0, _shared.extend)({}, mutableHandlers, {
    get: shallowGet,
    set: shallowSet
});
// Props handlers are special in the sense that it should not unwrap top-level
// refs (in order to allow refs to be explicitly passed down), but should
// retain the reactivity of the normal readonly object.
const shallowReadonlyHandlers = /*#__PURE__*/ (0, _shared.extend)({}, readonlyHandlers, {
    get: shallowReadonlyGet
});
const toShallow = (value)=>value;
const getProto = (v)=>Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly2 = false, isShallow1 = false) {
    // #1772: readonly(reactive(Map)) should return readonly + reactive version
    // of the value
    target = target["__v_raw" /* RAW */ ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (!isReadonly2) {
        if (key !== rawKey) track(rawTarget, "get" /* GET */ , key);
        track(rawTarget, "get" /* GET */ , rawKey);
    }
    const { has: has1  } = getProto(rawTarget);
    const wrap = isShallow1 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    if (has1.call(rawTarget, key)) return wrap(target.get(key));
    else if (has1.call(rawTarget, rawKey)) return wrap(target.get(rawKey));
    else if (target !== rawTarget) // #3602 readonly(reactive(Map))
    // ensure that the nested reactive `Map` can do tracking for itself
    target.get(key);
}
function has$1(key, isReadonly3 = false) {
    const target = this["__v_raw" /* RAW */ ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (!isReadonly3) {
        if (key !== rawKey) track(rawTarget, "has" /* HAS */ , key);
        track(rawTarget, "has" /* HAS */ , rawKey);
    }
    return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly4 = false) {
    target = target["__v_raw" /* RAW */ ];
    !isReadonly4 && track(toRaw(target), "iterate" /* ITERATE */ , ITERATE_KEY);
    return Reflect.get(target, "size", target);
}
function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
        target.add(value);
        trigger(target, "add" /* ADD */ , value, value);
    }
    return this;
}
function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has: has2 , get: get1  } = getProto(target);
    let hadKey = has2.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has2.call(target, key);
    } else checkIdentityKeys(target, has2, key);
    const oldValue = get1.call(target, key);
    target.set(key, value);
    if (!hadKey) trigger(target, "add" /* ADD */ , key, value);
    else if ((0, _shared.hasChanged)(value, oldValue)) trigger(target, "set" /* SET */ , key, value, oldValue);
    return this;
}
function deleteEntry(key) {
    const target = toRaw(this);
    const { has: has3 , get: get2  } = getProto(target);
    let hadKey = has3.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has3.call(target, key);
    } else checkIdentityKeys(target, has3, key);
    const oldValue = get2 ? get2.call(target, key) : undefined;
    // forward the operation before queueing reactions
    const result = target.delete(key);
    if (hadKey) trigger(target, "delete" /* DELETE */ , key, undefined, oldValue);
    return result;
}
function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = (0, _shared.isMap)(target) ? new Map(target) : new Set(target);
    // forward the operation before queueing reactions
    const result = target.clear();
    if (hadItems) trigger(target, "clear" /* CLEAR */ , undefined, undefined, oldTarget);
    return result;
}
function createForEach(isReadonly5, isShallow2) {
    return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw" /* RAW */ ];
        const rawTarget = toRaw(target);
        const wrap = isShallow2 ? toShallow : isReadonly5 ? toReadonly : toReactive;
        !isReadonly5 && track(rawTarget, "iterate" /* ITERATE */ , ITERATE_KEY);
        return target.forEach((value, key)=>{
            // important: make sure the callback is
            // 1. invoked with the reactive map as `this` and 3rd arg
            // 2. the value received should be a corresponding reactive/readonly.
            return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
    };
}
function createIterableMethod(method, isReadonly6, isShallow3) {
    return function(...args) {
        const target = this["__v_raw" /* RAW */ ];
        const rawTarget = toRaw(target);
        const targetIsMap = (0, _shared.isMap)(rawTarget);
        const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === "keys" && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow3 ? toShallow : isReadonly6 ? toReadonly : toReactive;
        !isReadonly6 && track(rawTarget, "iterate" /* ITERATE */ , isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        // return a wrapped iterator which returns observed versions of the
        // values emitted from the real iterator
        return {
            // iterator protocol
            next () {
                const { value , done  } = innerIterator.next();
                return done ? {
                    value,
                    done
                } : {
                    value: isPair ? [
                        wrap(value[0]),
                        wrap(value[1])
                    ] : wrap(value),
                    done
                };
            },
            // iterable protocol
            [Symbol.iterator] () {
                return this;
            }
        };
    };
}
function createReadonlyMethod(type) {
    return function(...args) {
        {
            const key = args[0] ? `on key "${args[0]}" ` : ``;
            console.warn(`${(0, _shared.capitalize)(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" /* DELETE */  ? false : this;
    };
}
function createInstrumentations() {
    const mutableInstrumentations1 = {
        get (key) {
            return get$1(this, key);
        },
        get size () {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
    };
    const shallowInstrumentations1 = {
        get (key) {
            return get$1(this, key, false, true);
        },
        get size () {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
    };
    const readonlyInstrumentations1 = {
        get (key) {
            return get$1(this, key, true);
        },
        get size () {
            return size(this, true);
        },
        has (key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */ ),
        set: createReadonlyMethod("set" /* SET */ ),
        delete: createReadonlyMethod("delete" /* DELETE */ ),
        clear: createReadonlyMethod("clear" /* CLEAR */ ),
        forEach: createForEach(true, false)
    };
    const shallowReadonlyInstrumentations1 = {
        get (key) {
            return get$1(this, key, true, true);
        },
        get size () {
            return size(this, true);
        },
        has (key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */ ),
        set: createReadonlyMethod("set" /* SET */ ),
        delete: createReadonlyMethod("delete" /* DELETE */ ),
        clear: createReadonlyMethod("clear" /* CLEAR */ ),
        forEach: createForEach(true, true)
    };
    const iteratorMethods = [
        "keys",
        "values",
        "entries",
        Symbol.iterator
    ];
    iteratorMethods.forEach((method)=>{
        mutableInstrumentations1[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations1[method] = createIterableMethod(method, true, false);
        shallowInstrumentations1[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations1[method] = createIterableMethod(method, true, true);
    });
    return [
        mutableInstrumentations1,
        readonlyInstrumentations1,
        shallowInstrumentations1,
        shallowReadonlyInstrumentations1
    ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();
function createInstrumentationGetter(isReadonly7, shallow) {
    const instrumentations = shallow ? isReadonly7 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly7 ? readonlyInstrumentations : mutableInstrumentations;
    return (target, key, receiver)=>{
        if (key === "__v_isReactive" /* IS_REACTIVE */ ) return !isReadonly7;
        else if (key === "__v_isReadonly" /* IS_READONLY */ ) return isReadonly7;
        else if (key === "__v_raw" /* RAW */ ) return target;
        return Reflect.get((0, _shared.hasOwn)(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
}
const mutableCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has4, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has4.call(target, rawKey)) {
        const type = (0, _shared.toRawType)(target);
        console.warn(`Reactive ${type} contains both the raw and reactive ` + `versions of the same object${type === `Map` ? ` as keys` : ``}, ` + `which can lead to inconsistencies. ` + `Avoid differentiating between the raw and reactive versions ` + `of an object and only use the reactive version if possible.`);
    }
}
const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
    switch(rawType){
        case "Object":
        case "Array":
            return 1 /* COMMON */ ;
        case "Map":
        case "Set":
        case "WeakMap":
        case "WeakSet":
            return 2 /* COLLECTION */ ;
        default:
            return 0 /* INVALID */ ;
    }
}
function getTargetType(value) {
    return value["__v_skip" /* SKIP */ ] || !Object.isExtensible(value) ? 0 /* INVALID */  : targetTypeMap((0, _shared.toRawType)(value));
}
function reactive(target) {
    // if trying to observe a readonly proxy, return the readonly version.
    if (isReadonly(target)) return target;
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
/**
 * Return a shallowly-reactive copy of the original object, where only the root
 * level properties are reactive. It also does not auto-unwrap refs (even at the
 * root level).
 */ function shallowReactive(target) {
    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
/**
 * Creates a readonly copy of the original object. Note the returned copy is not
 * made reactive, but `readonly` can be called on an already reactive object.
 */ function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
/**
 * Returns a reactive-copy of the original object, where only the root level
 * properties are readonly, and does NOT unwrap refs nor recursively convert
 * returned properties.
 * This is used for creating the props proxy object for stateful components.
 */ function shallowReadonly(target) {
    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly8, baseHandlers, collectionHandlers, proxyMap) {
    if (!(0, _shared.isObject)(target)) {
        console.warn(`value cannot be made reactive: ${String(target)}`);
        return target;
    }
    // target is already a Proxy, return it.
    // exception: calling readonly() on a reactive object
    if (target["__v_raw" /* RAW */ ] && !(isReadonly8 && target["__v_isReactive" /* IS_REACTIVE */ ])) return target;
    // target already has corresponding Proxy
    const existingProxy = proxyMap.get(target);
    if (existingProxy) return existingProxy;
    // only specific value types can be observed.
    const targetType = getTargetType(target);
    if (targetType === 0 /* INVALID */ ) return target;
    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */  ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
}
function isReactive(value) {
    if (isReadonly(value)) return isReactive(value["__v_raw" /* RAW */ ]);
    return !!(value && value["__v_isReactive" /* IS_REACTIVE */ ]);
}
function isReadonly(value) {
    return !!(value && value["__v_isReadonly" /* IS_READONLY */ ]);
}
function isShallow(value) {
    return !!(value && value["__v_isShallow" /* IS_SHALLOW */ ]);
}
function isProxy(value) {
    return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
    const raw = observed && observed["__v_raw" /* RAW */ ];
    return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
    (0, _shared.def)(value, "__v_skip" /* SKIP */ , true);
    return value;
}
const toReactive = (value)=>(0, _shared.isObject)(value) ? reactive(value) : value;
const toReadonly = (value)=>(0, _shared.isObject)(value) ? readonly(value) : value;
function trackRefValue(ref1) {
    if (shouldTrack && activeEffect) {
        ref1 = toRaw(ref1);
        trackEffects(ref1.dep || (ref1.dep = createDep()), {
            target: ref1,
            type: "get" /* GET */ ,
            key: "value"
        });
    }
}
function triggerRefValue(ref2, newVal) {
    ref2 = toRaw(ref2);
    if (ref2.dep) triggerEffects(ref2.dep, {
        target: ref2,
        type: "set" /* SET */ ,
        key: "value",
        newValue: newVal
    });
}
function isRef(r) {
    return !!(r && r.__v_isRef === true);
}
function ref(value) {
    return createRef(value, false);
}
function shallowRef(value) {
    return createRef(value, true);
}
function createRef(rawValue, shallow) {
    if (isRef(rawValue)) return rawValue;
    return new RefImpl(rawValue, shallow);
}
class RefImpl {
    constructor(value, __v_isShallow){
        this.__v_isShallow = __v_isShallow;
        this.dep = undefined;
        this.__v_isRef = true;
        this._rawValue = __v_isShallow ? value : toRaw(value);
        this._value = __v_isShallow ? value : toReactive(value);
    }
    get value() {
        trackRefValue(this);
        return this._value;
    }
    set value(newVal) {
        newVal = this.__v_isShallow ? newVal : toRaw(newVal);
        if ((0, _shared.hasChanged)(newVal, this._rawValue)) {
            this._rawValue = newVal;
            this._value = this.__v_isShallow ? newVal : toReactive(newVal);
            triggerRefValue(this, newVal);
        }
    }
}
function triggerRef(ref3) {
    triggerRefValue(ref3, ref3.value);
}
function unref(ref4) {
    return isRef(ref4) ? ref4.value : ref4;
}
const shallowUnwrapHandlers = {
    get: (target, key, receiver)=>unref(Reflect.get(target, key, receiver)),
    set: (target, key, value, receiver)=>{
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
        } else return Reflect.set(target, key, value, receiver);
    }
};
function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
    constructor(factory){
        this.dep = undefined;
        this.__v_isRef = true;
        const { get: get3 , set: set1  } = factory(()=>trackRefValue(this), ()=>triggerRefValue(this));
        this._get = get3;
        this._set = set1;
    }
    get value() {
        return this._get();
    }
    set value(newVal) {
        this._set(newVal);
    }
}
function customRef(factory) {
    return new CustomRefImpl(factory);
}
function toRefs(object) {
    if (!isProxy(object)) console.warn(`toRefs() expects a reactive object but received a plain one.`);
    const ret = (0, _shared.isArray)(object) ? new Array(object.length) : {};
    for(const key in object)ret[key] = toRef(object, key);
    return ret;
}
class ObjectRefImpl {
    constructor(_object, _key, _defaultValue){
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this.__v_isRef = true;
    }
    get value() {
        const val = this._object[this._key];
        return val === undefined ? this._defaultValue : val;
    }
    set value(newVal) {
        this._object[this._key] = newVal;
    }
}
function toRef(object, key, defaultValue) {
    const val = object[key];
    return isRef(val) ? val : new ObjectRefImpl(object, key, defaultValue);
}
class ComputedRefImpl {
    constructor(getter, _setter, isReadonly9, isSSR){
        this._setter = _setter;
        this.dep = undefined;
        this.__v_isRef = true;
        this._dirty = true;
        this.effect = new ReactiveEffect(getter, ()=>{
            if (!this._dirty) {
                this._dirty = true;
                triggerRefValue(this);
            }
        });
        this.effect.computed = this;
        this.effect.active = this._cacheable = !isSSR;
        this["__v_isReadonly" /* IS_READONLY */ ] = isReadonly9;
    }
    get value() {
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        const self = toRaw(this);
        trackRefValue(self);
        if (self._dirty || !self._cacheable) {
            self._dirty = false;
            self._value = self.effect.run();
        }
        return self._value;
    }
    set value(newValue) {
        this._setter(newValue);
    }
}
function computed(getterOrOptions, debugOptions, isSSR = false) {
    let getter;
    let setter;
    const onlyGetter = (0, _shared.isFunction)(getterOrOptions);
    if (onlyGetter) {
        getter = getterOrOptions;
        setter = ()=>{
            console.warn("Write operation failed: computed value is readonly");
        };
    } else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
    }
    const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
    if (debugOptions && !isSSR) {
        cRef.effect.onTrack = debugOptions.onTrack;
        cRef.effect.onTrigger = debugOptions.onTrigger;
    }
    return cRef;
}
var _a;
const tick = /*#__PURE__*/ Promise.resolve();
const queue = [];
let queued = false;
const scheduler = (fn)=>{
    queue.push(fn);
    if (!queued) {
        queued = true;
        tick.then(flush);
    }
};
const flush = ()=>{
    for(let i = 0; i < queue.length; i++)queue[i]();
    queue.length = 0;
    queued = false;
};
class DeferredComputedRefImpl {
    constructor(getter){
        this.dep = undefined;
        this._dirty = true;
        this.__v_isRef = true;
        this[_a] = true;
        let compareTarget;
        let hasCompareTarget = false;
        let scheduled = false;
        this.effect = new ReactiveEffect(getter, (computedTrigger)=>{
            if (this.dep) {
                if (computedTrigger) {
                    compareTarget = this._value;
                    hasCompareTarget = true;
                } else if (!scheduled) {
                    const valueToCompare = hasCompareTarget ? compareTarget : this._value;
                    scheduled = true;
                    hasCompareTarget = false;
                    scheduler(()=>{
                        if (this.effect.active && this._get() !== valueToCompare) triggerRefValue(this);
                        scheduled = false;
                    });
                }
                // chained upstream computeds are notified synchronously to ensure
                // value invalidation in case of sync access; normal effects are
                // deferred to be triggered in scheduler.
                for (const e of this.dep)if (e.computed instanceof DeferredComputedRefImpl) e.scheduler(true);
            }
            this._dirty = true;
        });
        this.effect.computed = this;
    }
    _get() {
        if (this._dirty) {
            this._dirty = false;
            return this._value = this.effect.run();
        }
        return this._value;
    }
    get value() {
        trackRefValue(this);
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        return toRaw(this)._get();
    }
}
_a = "__v_isReadonly" /* IS_READONLY */ ;
function deferredComputed(getter) {
    return new DeferredComputedRefImpl(getter);
}

},{"@vue/shared":"3SM3y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3SM3y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ);
parcelHelpers.export(exports, "NO", ()=>NO);
parcelHelpers.export(exports, "NOOP", ()=>NOOP);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "def", ()=>def);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "genPropsAccessExp", ()=>genPropsAccessExp);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr);
parcelHelpers.export(exports, "isBuiltInDirective", ()=>isBuiltInDirective);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr);
parcelHelpers.export(exports, "isMap", ()=>isMap);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener);
parcelHelpers.export(exports, "isNoUnitNumericStyleProp", ()=>isNoUnitNumericStyleProp);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
parcelHelpers.export(exports, "isSet", ()=>isSet);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf);
parcelHelpers.export(exports, "makeMap", ()=>makeMap);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap);
parcelHelpers.export(exports, "remove", ()=>remove);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toRawType", ()=>toRawType);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
var global = arguments[3];
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */ function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(",");
    for(let i = 0; i < list.length; i++)map[list[i]] = true;
    return expectsLowerCase ? (val)=>!!map[val.toLowerCase()] : (val)=>!!map[val];
}
/**
 * dev only flag -> name mapping
 */ const PatchFlagNames = {
    [1 /* TEXT */ ]: `TEXT`,
    [2 /* CLASS */ ]: `CLASS`,
    [4 /* STYLE */ ]: `STYLE`,
    [8 /* PROPS */ ]: `PROPS`,
    [16 /* FULL_PROPS */ ]: `FULL_PROPS`,
    [32 /* HYDRATE_EVENTS */ ]: `HYDRATE_EVENTS`,
    [64 /* STABLE_FRAGMENT */ ]: `STABLE_FRAGMENT`,
    [128 /* KEYED_FRAGMENT */ ]: `KEYED_FRAGMENT`,
    [256 /* UNKEYED_FRAGMENT */ ]: `UNKEYED_FRAGMENT`,
    [512 /* NEED_PATCH */ ]: `NEED_PATCH`,
    [1024 /* DYNAMIC_SLOTS */ ]: `DYNAMIC_SLOTS`,
    [2048 /* DEV_ROOT_FRAGMENT */ ]: `DEV_ROOT_FRAGMENT`,
    [-1 /* HOISTED */ ]: `HOISTED`,
    [-2 /* BAIL */ ]: `BAIL`
};
/**
 * Dev only
 */ const slotFlagsText = {
    [1 /* STABLE */ ]: "STABLE",
    [2 /* DYNAMIC */ ]: "DYNAMIC",
    [3 /* FORWARDED */ ]: "FORWARDED"
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    // Split the content into individual lines but capture the newline sequence
    // that separated each line. This is important because the actual sequence is
    // needed to properly take into account the full line length for offset
    // comparison
    let lines = source.split(/(\r?\n)/);
    // Separate the lines and newline sequences into separate arrays for easier referencing
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1);
    lines = lines.filter((_, idx)=>idx % 2 === 0);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    // push underline
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join("\n");
}
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */ const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */ const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
/**
 * Boolean attributes should be included if the value is truthy or ''.
 * e.g. `<select multiple>` compiles to `{ multiple: '' }`
 */ function includeBooleanAttr(value) {
    return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: "accept-charset",
    className: "class",
    htmlFor: "for",
    httpEquiv: "http-equiv"
};
/**
 * CSS properties that accept plain numbers
 */ const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG
`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */ const isKnownHtmlAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
/**
 * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
 */ const isKnownSvgAttr = /*#__PURE__*/ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` + `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` + `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` + `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` + `color-interpolation-filters,color-profile,color-rendering,` + `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` + `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` + `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` + `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` + `font-family,font-size,font-size-adjust,font-stretch,font-style,` + `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` + `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` + `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` + `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` + `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` + `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` + `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` + `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` + `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` + `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` + `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` + `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` + `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` + `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` + `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` + `specularConstant,specularExponent,speed,spreadMethod,startOffset,` + `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` + `strikethrough-position,strikethrough-thickness,string,stroke,` + `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` + `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` + `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` + `text-decoration,text-rendering,textLength,to,transform,transform-origin,` + `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` + `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` + `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` + `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` + `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` + `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` + `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value)) return value;
    else if (isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = "";
    if (!styles || isString(styles)) return ret;
    for(const key in styles){
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) || typeof value === "number" && isNoUnitNumericStyleProp(normalizedKey)) // only render valid values
        ret += `${normalizedKey}:${value};`;
    }
    return ret;
}
function normalizeClass(value) {
    let res = "";
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + " ";
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + " ";
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */ const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */ const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */ const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = "" + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = "";
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = "&quot;";
                break;
            case 38:
                escaped = "&amp;";
                break;
            case 39:
                escaped = "&#39;";
                break;
            case 60:
                escaped = "&lt;";
                break;
            case 62:
                escaped = "&gt;";
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.slice(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, "");
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isSymbol(a);
    bValidType = isSymbol(b);
    if (aValidType || bValidType) return a === b;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */ if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val));
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */ const toDisplayString = (val)=>{
    return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val1)=>{
    // can't use isRef here since @vue/shared has no deps
    if (val1 && val1.__v_isRef) return replacer(_key, val1.value);
    else if (isMap(val1)) return {
        [`Map(${val1.size})`]: [
            ...val1.entries()
        ].reduce((entries, [key, val])=>{
            entries[`${key} =>`] = val;
            return entries;
        }, {})
    };
    else if (isSet(val1)) return {
        [`Set(${val1.size})`]: [
            ...val1.values()
        ]
    };
    else if (isObject(val1) && !isArray(val1) && !isPlainObject(val1)) return String(val1);
    return val1;
};
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{};
/**
 * Always return false.
 */ const NO = ()=>false;
const onRE = /^on[^a-z]/;
const isOn = (key)=>onRE.test(key);
const isModelListener = (key)=>key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === "[object Map]";
const isSet = (val)=>toTypeString(val) === "[object Set]";
const isDate = (val)=>toTypeString(val) === "[object Date]";
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const toRawType = (value)=>{
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
const isIntegerKey = (key)=>isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /*#__PURE__*/ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const isBuiltInDirective = /*#__PURE__*/ makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */ const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
/**
 * @private
 */ const capitalize = cacheStringFunction((str)=>str.charAt(0).toUpperCase() + str.slice(1));
/**
 * @private
 */ const toHandlerKey = cacheStringFunction((str)=>str ? `on${capitalize(str)}` : ``);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue);
const invokeArrayFns = (fns, arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](arg);
};
const def = (obj, key, value)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
function genPropsAccessExp(name) {
    return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"fYNyc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./App.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./App.vue").render;
    require("custom:./App.vue").default(script);
    script.__scopeId = "data-v-db26cd";
    script.__file = "/home/jelly/temp/in-browser-p2p-chatter/src/App.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "db26cd-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("db26cd-hmr", script)) __VUE_HMR_RUNTIME__.reload("db26cd-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./App.vue":"iiJmB","template:./App.vue":"evi43","custom:./App.vue":"h0MjM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iiJmB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>App);
var _tsDecorateMjs = require("@swc/helpers/src/_ts_decorate.mjs");
var _tsDecorateMjsDefault = parcelHelpers.interopDefault(_tsDecorateMjs);
var _libp2PKadDht = require("libp2p-kad-dht");
var _libp2PKadDhtDefault = parcelHelpers.interopDefault(_libp2PKadDht);
var _libp2P = require("libp2p");
var _libp2PDefault = parcelHelpers.interopDefault(_libp2P);
var _libp2PMplex = require("libp2p-mplex");
var _libp2PMplexDefault = parcelHelpers.interopDefault(_libp2PMplex);
var _peerId = require("peer-id");
var _peerIdDefault = parcelHelpers.interopDefault(_peerId);
var _itPushable = require("it-pushable");
var _itPushableDefault = parcelHelpers.interopDefault(_itPushable);
var _itPipe = require("it-pipe");
var _itPipeDefault = parcelHelpers.interopDefault(_itPipe);
var _libp2PWebrtcStar = require("libp2p-webrtc-star");
var _libp2PWebrtcStarDefault = parcelHelpers.interopDefault(_libp2PWebrtcStar);
var _libp2PWebsockets = require("libp2p-websockets");
var _libp2PWebsocketsDefault = parcelHelpers.interopDefault(_libp2PWebsockets);
var _libp2PNoise = require("libp2p-noise");
var _utils = require("./utils");
var _vueFacingDecorator = require("vue-facing-decorator");
const chatProtocol = "/chat/0.1.0";
let App = class App extends (0, _vueFacingDecorator.Vue) {
    myPeerId = "";
    otherPeerId = "";
    otherPeerMultiaddrs = [];
    otherPeerProtocols = [];
    otherPeerMultiaddr = "";
    otherPeerProtocol = "";
    remotePeerId = "";
    chatMessage = "";
    messages = [];
    chatQueue = false;
    async init() {
        this.libp2p = await (0, _libp2PDefault.default).create({
            addresses: {
                // Listen through relay servers
                // Cross-subnet P2P direct connection not supported due to NAT/firewalls 
                listen: [
                    "/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star",
                    "/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star", 
                ]
            },
            modules: {
                transport: [
                    (0, _libp2PWebsocketsDefault.default),
                    (0, _libp2PWebrtcStarDefault.default)
                ],
                connEncryption: [
                    (0, _libp2PNoise.NOISE)
                ],
                streamMuxer: [
                    (0, _libp2PMplexDefault.default)
                ],
                dht: (0, _libp2PKadDhtDefault.default)
            },
            config: {
                dht: {
                    enabled: true
                }
            }
        });
        // window.libp2p = this.libp2p;
        await this.libp2p.start();
        this.myPeerId = this.libp2p.peerId.toB58String();
        this.libp2p.handle(chatProtocol, ({ connection , stream , protocol  })=>{
            this.remotePeerId = connection.remoteAddr.getPeerId();
            // Init an async data stream
            (0, _itPipeDefault.default)(stream, (source)=>{
                return async function*() {
                    for await (const buf of source)yield (0, _utils.array2str)(buf.slice());
                }();
            }, async (source)=>{
                for await (const msg of source)this.messages.push("> " + msg);
            });
        });
    }
    mounted() {
        this.init();
    }
    async findOtherPeer() {
        let peerId = (0, _peerIdDefault.default).parse(this.otherPeerId);
        let result = await this.libp2p.peerRouting.findPeer(peerId);
        this.otherPeerMultiaddrs = result.multiaddrs;
        this.otherPeerProtocols = this.libp2p.peerStore.protoBook.get(peerId);
        this.otherPeerMultiaddr = this.otherPeerMultiaddrs[0];
        this.otherPeerProtocol = chatProtocol; // should be the last protocol (here for conveninence)
    }
    // Wrapper function
    async dialProtocol() {
        let peerId = (0, _peerIdDefault.default).parse(this.otherPeerId);
        const { stream , protocol  } = await this.libp2p.dialProtocol(peerId, chatProtocol);
        this.chatQueue = (0, _itPushableDefault.default)();
        (0, _itPipeDefault.default)(this.chatQueue, (source)=>{
            return async function*() {
                for await (const msg of source)yield (0, _utils.str2array)(msg);
            }();
        }, stream);
    }
    sendMessage() {
        this.chatQueue.push(this.chatMessage);
        this.messages.push("< " + this.chatMessage);
        this.chatMessage = "";
    }
};
App = (0, _tsDecorateMjsDefault.default)([
    (0, _vueFacingDecorator.Component)
], App);

},{"@swc/helpers/src/_ts_decorate.mjs":"6yEaS","libp2p-kad-dht":"lk0ry","libp2p":"dKsEo","libp2p-mplex":"5YGqS","peer-id":"etBKN","it-pushable":"fVlDP","it-pipe":"jkWle","libp2p-webrtc-star":"4KMsB","libp2p-websockets":"ehlSk","libp2p-noise":"kcIgt","./utils":"en4he","vue-facing-decorator":"laSf9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6yEaS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _tslib.__decorate));
var _tslib = require("tslib");

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v1) {
        Promise.resolve(v1).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lk0ry":[function(require,module,exports) {
"use strict";
const { EventEmitter  } = require("events");
const errcode = require("err-code");
const libp2pRecord = require("libp2p-record");
const { MemoryDatastore  } = require("interface-datastore");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const RoutingTable = require("./routing");
const utils = require("./utils");
const c = require("./constants");
const Network = require("./network");
const contentFetching = require("./content-fetching");
const contentRouting = require("./content-routing");
const peerRouting = require("./peer-routing");
const Message = require("./message");
const Providers = require("./providers");
const RandomWalk = require("./random-walk");
const QueryManager = require("./query-manager");
const Record = libp2pRecord.Record;
/**
 * @typedef {*} Libp2p
 * @typedef {*} PeerStore
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {*} Dialer
 * @typedef {*} Registrar
 * @typedef {import('multiformats/cid').CID} CID
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {object} PeerData
 * @property {PeerId} id
 * @property {Multiaddr[]} multiaddrs
 *
 * @typedef {object} RandomWalkOptions
 * @property {boolean} enabled discovery enabled (default: true)
 * @property {number} queriesPerPeriod how many queries to run per period (default: 1)
 * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)
 * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)
 * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)
 */ /**
 * A DHT implementation modeled after Kademlia with S/Kademlia modifications.
 * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.
 */ class KadDHT extends EventEmitter {
    /**
   * Create a new KadDHT.
   *
   * @param {Object} props
   * @param {Libp2p} props.libp2p - the libp2p instance
   * @param {Dialer} props.dialer - libp2p dialer instance
   * @param {PeerId} props.peerId - peer's peerId
   * @param {PeerStore} props.peerStore - libp2p peerStore
   * @param {Registrar} props.registrar - libp2p registrar instance
   * @param {string} [props.protocolPrefix = '/ipfs'] - libp2p registrar handle protocol
   * @param {boolean} [props.forceProtocolLegacy = false] - WARNING: this is not recommended and should only be used for legacy purposes
   * @param {number} props.kBucketSize - k-bucket size (default 20)
   * @param {boolean} props.clientMode - If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)
   * @param {number} props.concurrency - alpha concurrency of queries (default 3)
   * @param {Datastore} props.datastore - datastore (default MemoryDatastore)
   * @param {object} props.validators - validators object with namespace as keys and function(key, record, callback)
   * @param {object} props.selectors - selectors object with namespace as keys and function(key, records)
   * @param {RandomWalkOptions} props.randomWalk - randomWalk options
   * @param {function(import('libp2p-record').Record, PeerId): void} [props.onPut] - Called when an entry is added to or changed in the datastore
   * @param {function(import('libp2p-record').Record): void} [props.onRemove] - Called when an entry is removed from the datastore
   */ constructor({ libp2p , dialer , peerId , peerStore , registrar , protocolPrefix ="/ipfs" , forceProtocolLegacy =false , datastore =new MemoryDatastore() , kBucketSize =c.K , clientMode =false , concurrency =c.ALPHA , validators ={} , selectors ={} , randomWalk ={
        enabled: false,
        queriesPerPeriod: 1,
        interval: 300000,
        timeout: 30000,
        delay: 10000
    } , onPut =()=>{} , onRemove =()=>{}  }){
        super();
        if (!dialer) throw new Error("libp2p-kad-dht requires an instance of Dialer");
        /**
     * Local reference to the libp2p instance. May be undefined.
     *
     * @type {Libp2p}
     */ this.libp2p = libp2p;
        /**
     * Local reference to the libp2p dialer instance
     *
     * @type {Dialer}
     */ this.dialer = dialer;
        /**
     * Local peer-id
     *
     * @type {PeerId}
     */ this.peerId = peerId;
        /**
     * Local PeerStore
     *
     * @type {PeerStore}
     */ this.peerStore = peerStore;
        /**
     * Local peer info
     *
     * @type {Registrar}
     */ this.registrar = registrar;
        /**
     * Registrar protocol
     *
     * @type {string}
     */ this.protocol = protocolPrefix + (forceProtocolLegacy ? "" : c.PROTOCOL_DHT);
        /**
     * k-bucket size
     *
     * @type {number}
     */ this.kBucketSize = kBucketSize;
        this._clientMode = clientMode;
        /**
     * ALPHA concurrency at which each query path with run, defaults to 3
     *
     * @type {number}
     */ this.concurrency = concurrency;
        /**
     * Number of disjoint query paths to use
     * This is set to `kBucketSize`/2 per the S/Kademlia paper
     *
     * @type {number}
     */ this.disjointPaths = Math.ceil(this.kBucketSize / 2);
        /**
     * The routing table.
     *
     * @type {RoutingTable}
     */ this.routingTable = new RoutingTable(this.peerId, this.kBucketSize);
        /**
     * Reference to the datastore, uses an in-memory store if none given.
     *
     * @type {Datastore}
     */ this.datastore = datastore;
        /**
     * Provider management
     *
     * @type {Providers}
     */ this.providers = new Providers(this.datastore, this.peerId);
        this.validators = {
            pk: libp2pRecord.validator.validators.pk,
            ...validators
        };
        this.selectors = {
            pk: libp2pRecord.selection.selectors.pk,
            ...selectors
        };
        this.network = new Network(this);
        this._log = utils.logger(this.peerId);
        /**
     * Random walk management
     *
     * @type {RandomWalk}
     */ this.randomWalk = new RandomWalk(this, randomWalk);
        /**
     * Keeps track of running queries
     *
     * @type {QueryManager}
     */ this._queryManager = new QueryManager();
        this._running = false;
        // DHT components
        this.contentFetching = contentFetching(this);
        this.contentRouting = contentRouting(this);
        this.peerRouting = peerRouting(this);
        // datastore events
        this.onPut = onPut;
        this.onRemove = onRemove;
    }
    /**
   * Is this DHT running.
   */ get isStarted() {
        return this._running;
    }
    /**
   * Start listening to incoming connections.
   */ start() {
        if (this._running) return;
        this._running = true;
        this.providers.start();
        this._queryManager.start();
        this.network.start();
        // Start random walk, it will not run if it's disabled
        this.randomWalk.start();
    }
    /**
   * Stop accepting incoming connections and sending outgoing
   * messages.
   */ stop() {
        this._running = false;
        this.randomWalk.stop();
        this.network.stop();
        this._queryManager.stop();
        this.providers.stop();
    }
    /**
   * Store the given key/value  pair in the DHT.
   *
   * @param {Uint8Array} key
   * @param {Uint8Array} value
   * @param {Object} [options] - put options
   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)
   * @returns {Promise<void>}
   */ async put(key, value, options = {}) {
        return this.contentFetching.put(key, value, options);
    }
    /**
   * Get the value to the given key.
   * Times out after 1 minute by default.
   *
   * @param {Uint8Array} key
   * @param {Object} [options] - get options
   * @param {number} [options.timeout] - optional timeout (default: 60000)
   * @returns {Promise<Uint8Array>}
   */ async get(key, options = {}) {
        return this.contentFetching.get(key, options);
    }
    /**
   * Get the `n` values to the given key without sorting.
   *
   * @param {Uint8Array} key
   * @param {number} nvals
   * @param {Object} [options] - get options
   * @param {number} [options.timeout] - optional timeout (default: 60000)
   */ async getMany(key, nvals, options = {}) {
        return this.contentFetching.getMany(key, nvals, options);
    }
    /**
   * Remove the given key from the local datastore.
   *
   * @param {Uint8Array} key
   */ async removeLocal(key) {
        this._log(`removeLocal: ${uint8ArrayToString(key, "base32")}`);
        const dsKey = utils.bufferToKey(key);
        try {
            await this.datastore.delete(dsKey);
        } catch (err) {
            if (err.code === "ERR_NOT_FOUND") return undefined;
            throw err;
        }
    }
    /**
   * @param {Uint8Array} key
   * @param {Uint8Array} value
   */ async _putLocal(key, value) {
        this._log(`_putLocal: ${uint8ArrayToString(key, "base32")}`);
        const dsKey = utils.bufferToKey(key);
        await this.datastore.put(dsKey, value);
    }
    // ----------- Content Routing
    /**
   * Announce to the network that we can provide given key's value.
   *
   * @param {CID} key
   * @returns {Promise<void>}
   */ async provide(key) {
        return this.contentRouting.provide(key);
    }
    /**
   * Search the dht for up to `K` providers of the given CID.
   *
   * @param {CID} key
   * @param {Object} [options] - findProviders options
   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)
   * @param {number} [options.maxNumProviders=5] - maximum number of providers to find
   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}
   */ async *findProviders(key, options = {
        timeout: 6000,
        maxNumProviders: 5
    }) {
        for await (const peerData of this.contentRouting.findProviders(key, options))yield peerData;
    }
    // ----------- Peer Routing -----------
    /**
   * Search for a peer with the given ID.
   *
   * @param {PeerId} id
   * @param {Object} [options] - findPeer options
   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)
   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}
   */ async findPeer(id, options = {
        timeout: 60000
    }) {
        return this.peerRouting.findPeer(id, options);
    }
    /**
   * Kademlia 'node lookup' operation.
   *
   * @param {Uint8Array} key
   * @param {Object} [options]
   * @param {boolean} [options.shallow = false] - shallow query
   */ async *getClosestPeers(key, options = {
        shallow: false
    }) {
        yield* this.peerRouting.getClosestPeers(key, options);
    }
    /**
   * Get the public key for the given peer id.
   *
   * @param {PeerId} peer
   */ getPublicKey(peer) {
        return this.peerRouting.getPublicKey(peer);
    }
    // ----------- Discovery -----------
    /**
   * @param {PeerId} peerId
   * @param {Multiaddr[]} multiaddrs
   */ _peerDiscovered(peerId, multiaddrs) {
        this.emit("peer", {
            id: peerId,
            multiaddrs
        });
    }
    // ----------- Internals -----------
    /**
   * Returns the routing tables closest peers, for the key of
   * the message.
   *
   * @param {Message} msg
   */ async _nearestPeersToQuery(msg) {
        const key = await utils.convertBuffer(msg.key);
        const ids = this.routingTable.closestPeers(key, this.kBucketSize);
        return ids.map((p)=>{
            /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */ const peer = this.peerStore.get(p);
            return {
                id: p,
                multiaddrs: peer ? peer.addresses.map((address)=>address.multiaddr) : []
            };
        });
    }
    /**
   * Get the nearest peers to the given query, but iff closer
   * than self.
   *
   * @param {Message} msg
   * @param {PeerId} peerId
   */ async _betterPeersToQuery(msg, peerId) {
        this._log("betterPeersToQuery");
        const closer1 = await this._nearestPeersToQuery(msg);
        return closer1.filter((closer)=>{
            if (this._isSelf(closer.id)) {
                // Should bail, not sure
                this._log.error("trying to return self as closer");
                return false;
            }
            return !closer.id.isEqual(peerId);
        });
    }
    /**
   * Try to fetch a given record by from the local datastore.
   * Returns the record iff it is still valid, meaning
   * - it was either authored by this node, or
   * - it was received less than `MAX_RECORD_AGE` ago.
   *
   * @param {Uint8Array} key
   */ async _checkLocalDatastore(key) {
        this._log(`checkLocalDatastore: ${uint8ArrayToString(key)} %b`, key);
        const dsKey = utils.bufferToKey(key);
        // Fetch value from ds
        let rawRecord;
        try {
            rawRecord = await this.datastore.get(dsKey);
        } catch (err) {
            if (err.code === "ERR_NOT_FOUND") return undefined;
            throw err;
        }
        // Create record from the returned bytes
        const record = Record.deserialize(rawRecord);
        if (!record) throw errcode(new Error("Invalid record"), "ERR_INVALID_RECORD");
        // Check validity: compare time received with max record age
        if (record.timeReceived == null || utils.now() - record.timeReceived.getTime() > c.MAX_RECORD_AGE) {
            // If record is bad delete it and return
            await this.datastore.delete(dsKey);
            this.onRemove(record);
            return undefined;
        }
        // Record is valid
        return record;
    }
    /**
   * Add the peer to the routing table and update it in the peerStore.
   *
   * @param {PeerId} peerId
   */ async _add(peerId) {
        await this.routingTable.add(peerId);
    }
    /**
   * Verify a record without searching the DHT.
   *
   * @param {import('libp2p-record').Record} record
   */ async _verifyRecordLocally(record) {
        this._log("verifyRecordLocally");
        await libp2pRecord.validator.verifyRecord(this.validators, record);
    }
    /**
   * Is the given peer id our PeerId?
   *
   * @param {PeerId} other
   */ _isSelf(other) {
        return other && uint8ArrayEquals(this.peerId.id, other.id);
    }
    /**
   * Store the given key/value pair at the peer `target`.
   *
   * @param {Uint8Array} key
   * @param {Uint8Array} rec - encoded record
   * @param {PeerId} target
   */ async _putValueToPeer(key, rec, target) {
        const msg = new Message(Message.TYPES.PUT_VALUE, key, 0);
        msg.record = Record.deserialize(rec);
        const resp = await this.network.sendRequest(target, msg);
        if (resp.record && !uint8ArrayEquals(resp.record.value, Record.deserialize(rec).value)) throw errcode(new Error("value not put correctly"), "ERR_PUT_VALUE_INVALID");
    }
    /**
   * Query a particular peer for the value for the given key.
   * It will either return the value or a list of closer peers.
   *
   * Note: The peerStore is updated with new addresses found for the given peer.
   *
   * @param {PeerId} peer
   * @param {Uint8Array} key
   */ async _getValueOrPeers(peer, key) {
        const msg = await this._getValueSingle(peer, key);
        const peers = msg.closerPeers;
        const record = msg.record;
        if (record) {
            // We have a record
            try {
                await this._verifyRecordOnline(record);
            } catch (err) {
                const errMsg = "invalid record received, discarded";
                this._log(errMsg);
                throw errcode(new Error(errMsg), "ERR_INVALID_RECORD");
            }
            return {
                record,
                peers
            };
        }
        if (peers.length > 0) return {
            peers
        };
        throw errcode(new Error("Not found"), "ERR_NOT_FOUND");
    }
    /**
   * Get a value via rpc call for the given parameters.
   *
   * @param {PeerId} peer
   * @param {Uint8Array} key
   */ async _getValueSingle(peer, key) {
        const msg = new Message(Message.TYPES.GET_VALUE, key, 0);
        return this.network.sendRequest(peer, msg);
    }
    /**
   * Verify a record, fetching missing public keys from the network.
   * Calls back with an error if the record is invalid.
   *
   * @param {import('libp2p-record').Record} record
   * @returns {Promise<void>}
   */ async _verifyRecordOnline(record) {
        await libp2pRecord.validator.verifyRecord(this.validators, record);
    }
}
module.exports = KadDHT;
module.exports.multicodec = "/ipfs" + c.PROTOCOL_DHT;

},{"events":"1VQLm","err-code":"dUrrM","libp2p-record":"3iJYP","interface-datastore":"ijjFd","uint8arrays/equals":"iZMnE","uint8arrays/to-string":"w8mvE","./routing":"fvUSe","./utils":"1wrtw","./constants":"ghCGZ","./network":"dkOsM","./content-fetching":"67nTW","./content-routing":"emf4P","./peer-routing":"8zeAP","./message":"6c5Nm","./providers":"6I9sF","./random-walk":"3reOT","./query-manager":"fkomw"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"dUrrM":[function(require,module,exports) {
"use strict";
/**
 * @typedef {{ [key: string]: any }} Extensions
 * @typedef {Error} Err
 * @property {string} message
 */ /**
 *
 * @param {Error} obj
 * @param {Extensions} props
 * @returns {Error & Extensions}
 */ function assign(obj, props) {
    for(const key in props)Object.defineProperty(obj, key, {
        value: props[key],
        enumerable: true,
        configurable: true
    });
    return obj;
}
/**
 *
 * @param {any} err - An Error
 * @param {string|Extensions} code - A string code or props to set on the error
 * @param {Extensions} [props] - Props to set on the error
 * @returns {Error & Extensions}
 */ function createError(err, code, props) {
    if (!err || typeof err === "string") throw new TypeError("Please pass an Error to err-code");
    if (!props) props = {};
    if (typeof code === "object") {
        props = code;
        code = "";
    }
    if (code) props.code = code;
    try {
        return assign(err, props);
    } catch (_) {
        props.message = err.message;
        props.stack = err.stack;
        const ErrClass = function() {};
        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));
        // @ts-ignore
        const output = assign(new ErrClass(), props);
        return output;
    }
}
module.exports = createError;

},{}],"3iJYP":[function(require,module,exports) {
"use strict";
module.exports = {
    Record: require("./record"),
    validator: require("./validator"),
    selection: require("./selection")
};

},{"./record":"2UkFU","./validator":"bzSZD","./selection":"j5LCC"}],"2UkFU":[function(require,module,exports) {
"use strict";
const { Record: PBRecord  } = require("./record");
const utils = require("../utils");
/**
 * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord
 */ class Record {
    /**
   * @param {Uint8Array} [key]
   * @param {Uint8Array} [value]
   * @param {Date} [timeReceived]
   */ constructor(key, value, timeReceived){
        if (!(key instanceof Uint8Array)) throw new Error("key must be a Uint8Array");
        if (!(value instanceof Uint8Array)) throw new Error("value must be a Uint8Array");
        this.key = key;
        this.value = value;
        this.timeReceived = timeReceived;
    }
    serialize() {
        return PBRecord.encode(this.prepareSerialize()).finish();
    }
    /**
   * Return the object format ready to be given to the protobuf library.
   */ prepareSerialize() {
        return {
            key: this.key,
            value: this.value,
            timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)
        };
    }
    /**
   * Decode a protobuf encoded record.
   *
   * @param {Uint8Array} raw
   */ static deserialize(raw) {
        const message = PBRecord.decode(raw);
        return Record.fromDeserialized(PBRecord.toObject(message, {
            defaults: false,
            arrays: true,
            longs: Number,
            objects: false
        }));
    }
    /**
   * Create a record from the raw object returned from the protobuf library.
   *
   * @param {{ [k: string]: any }} obj
   */ static fromDeserialized(obj) {
        let recvtime;
        if (obj.timeReceived) recvtime = utils.parseRFC3339(obj.timeReceived);
        const rec = new Record(obj.key, obj.value, recvtime);
        return rec;
    }
}
module.exports = Record;

},{"./record":"3IqHe","../utils":"9X4ZW"}],"3IqHe":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-record"] || ($protobuf.roots["libp2p-record"] = {});
$root.Record = function() {
    /**
     * Properties of a Record.
     * @exports IRecord
     * @interface IRecord
     * @property {Uint8Array|null} [key] Record key
     * @property {Uint8Array|null} [value] Record value
     * @property {string|null} [timeReceived] Record timeReceived
     */ /**
     * Constructs a new Record.
     * @exports Record
     * @classdesc Represents a Record.
     * @implements IRecord
     * @constructor
     * @param {IRecord=} [p] Properties to set
     */ function Record(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * Record key.
     * @member {Uint8Array} key
     * @memberof Record
     * @instance
     */ Record.prototype.key = $util.newBuffer([]);
    /**
     * Record value.
     * @member {Uint8Array} value
     * @memberof Record
     * @instance
     */ Record.prototype.value = $util.newBuffer([]);
    /**
     * Record timeReceived.
     * @member {string} timeReceived
     * @memberof Record
     * @instance
     */ Record.prototype.timeReceived = "";
    /**
     * Encodes the specified Record message. Does not implicitly {@link Record.verify|verify} messages.
     * @function encode
     * @memberof Record
     * @static
     * @param {IRecord} m Record message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ Record.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.key != null && Object.hasOwnProperty.call(m, "key")) w.uint32(10).bytes(m.key);
        if (m.value != null && Object.hasOwnProperty.call(m, "value")) w.uint32(18).bytes(m.value);
        if (m.timeReceived != null && Object.hasOwnProperty.call(m, "timeReceived")) w.uint32(42).string(m.timeReceived);
        return w;
    };
    /**
     * Decodes a Record message from the specified reader or buffer.
     * @function decode
     * @memberof Record
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {Record} Record
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ Record.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Record();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.key = r.bytes();
                    break;
                case 2:
                    m.value = r.bytes();
                    break;
                case 5:
                    m.timeReceived = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates a Record message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Record
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {Record} Record
     */ Record.fromObject = function fromObject(d) {
        if (d instanceof $root.Record) return d;
        var m = new $root.Record();
        if (d.key != null) {
            if (typeof d.key === "string") $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);
            else if (d.key.length) m.key = d.key;
        }
        if (d.value != null) {
            if (typeof d.value === "string") $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);
            else if (d.value.length) m.value = d.value;
        }
        if (d.timeReceived != null) m.timeReceived = String(d.timeReceived);
        return m;
    };
    /**
     * Creates a plain object from a Record message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Record
     * @static
     * @param {Record} m Record
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ Record.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            if (o.bytes === String) d.key = "";
            else {
                d.key = [];
                if (o.bytes !== Array) d.key = $util.newBuffer(d.key);
            }
            if (o.bytes === String) d.value = "";
            else {
                d.value = [];
                if (o.bytes !== Array) d.value = $util.newBuffer(d.value);
            }
            d.timeReceived = "";
        }
        if (m.key != null && m.hasOwnProperty("key")) d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
        if (m.value != null && m.hasOwnProperty("value")) d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;
        if (m.timeReceived != null && m.hasOwnProperty("timeReceived")) d.timeReceived = m.timeReceived;
        return d;
    };
    /**
     * Converts this Record to JSON.
     * @function toJSON
     * @memberof Record
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ Record.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Record;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"kgguT":[function(require,module,exports) {
// minimal library entry point.
"use strict";
module.exports = require("./src/index-minimal");

},{"./src/index-minimal":"kFkOY"}],"kFkOY":[function(require,module,exports) {
"use strict";
var protobuf = exports;
/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */ protobuf.build = "minimal";
// Serialization
protobuf.Writer = require("./writer");
protobuf.BufferWriter = require("./writer_buffer");
protobuf.Reader = require("./reader");
protobuf.BufferReader = require("./reader_buffer");
// Utility
protobuf.util = require("./util/minimal");
protobuf.rpc = require("./rpc");
protobuf.roots = require("./roots");
protobuf.configure = configure;
/* istanbul ignore next */ /**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */ function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}
// Set up buffer utility according to the environment
configure();

},{"./writer":"boWmp","./writer_buffer":"gIB4S","./reader":"bN2lE","./reader_buffer":"1b0Ms","./util/minimal":"4HDe1","./rpc":"eRwa1","./roots":"bJQDp"}],"boWmp":[function(require,module,exports) {
"use strict";
module.exports = Writer;
var util = require("./util/minimal");
var BufferWriter; // cyclic
var LongBits = util.LongBits, base64 = util.base64, utf8 = util.utf8;
/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */ function Op(fn, len, val) {
    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */ this.fn = fn;
    /**
     * Value byte length.
     * @type {number}
     */ this.len = len;
    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */ this.next = undefined;
    /**
     * Value to write.
     * @type {*}
     */ this.val = val; // type varies
}
/* istanbul ignore next */ function noop() {} // eslint-disable-line no-empty-function
/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */ function State(writer) {
    /**
     * Current head.
     * @type {Writer.Op}
     */ this.head = writer.head;
    /**
     * Current tail.
     * @type {Writer.Op}
     */ this.tail = writer.tail;
    /**
     * Current buffer length.
     * @type {number}
     */ this.len = writer.len;
    /**
     * Next state.
     * @type {State|null}
     */ this.next = writer.states;
}
/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */ function Writer() {
    /**
     * Current length.
     * @type {number}
     */ this.len = 0;
    /**
     * Operations head.
     * @type {Object}
     */ this.head = new Op(noop, 0, 0);
    /**
     * Operations tail
     * @type {Object}
     */ this.tail = this.head;
    /**
     * Linked forked states.
     * @type {Object|null}
     */ this.states = null;
// When a value is written, the writer calculates its byte length and puts it into a linked
// list of operations to perform when finish() is called. This both allows us to allocate
// buffers of the exact required size and reduces the amount of work we have to do compared
// to first calculating over objects and then encoding over objects. In our case, the encoding
// part is just a linked list walk calling operations with already prepared values.
}
var create = function create() {
    return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
            return new BufferWriter();
        })();
    } : function create_array() {
        return new Writer();
    };
};
/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */ Writer.create = create();
/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */ Writer.alloc = function alloc(size) {
    return new util.Array(size);
};
// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */ if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */ Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};
function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}
function writeVarint32(val, buf, pos) {
    while(val > 127){
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}
/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */ function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}
VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;
/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
    return this;
};
/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.int32 = function write_int32(value) {
    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
     : this.uint32(value);
};
/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};
function writeVarint64(val, buf, pos) {
    while(val.hi){
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while(val.lo > 127){
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}
/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};
/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.int64 = Writer.prototype.uint64;
/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};
/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};
function writeFixed32(val, buf, pos) {
    buf[pos] = val & 255;
    buf[pos + 1] = val >>> 8 & 255;
    buf[pos + 2] = val >>> 16 & 255;
    buf[pos + 3] = val >>> 24;
}
/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};
/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.sfixed32 = Writer.prototype.fixed32;
/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};
/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.sfixed64 = Writer.prototype.fixed64;
/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};
/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};
var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
    buf.set(val, pos); // also works for plain array values
} : function writeBytes_for(val, buf, pos) {
    for(var i = 0; i < val.length; ++i)buf[pos + i] = val[i];
};
/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */ Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len) return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};
/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
};
/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */ Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};
/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */ Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
    }
    return this;
};
/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */ Writer.prototype.ldelim = function ldelim() {
    var head = this.head, tail = this.tail, len = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};
/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */ Writer.prototype.finish = function finish() {
    var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
    while(head){
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};
Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};

},{"./util/minimal":"4HDe1"}],"4HDe1":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var util = exports;
// used to return a Promise where callback is omitted
util.asPromise = require("@protobufjs/aspromise");
// converts to / from base64 encoded strings
util.base64 = require("@protobufjs/base64");
// base class of rpc.Service
util.EventEmitter = require("@protobufjs/eventemitter");
// float handling accross browsers
util.float = require("@protobufjs/float");
// requires modules optionally and hides the call from bundlers
util.inquire = require("@protobufjs/inquire");
// converts to / from utf8 encoded strings
util.utf8 = require("@protobufjs/utf8");
// provides a node-like buffer pool in the browser
util.pool = require("@protobufjs/pool");
// utility to work with the low and high bits of a 64 bit value
util.LongBits = require("./longbits");
/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */ util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */ util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || this; // eslint-disable-line no-invalid-this
/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */ util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes
/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */ util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes
/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */ util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};
/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */ util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};
/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */ util.isObject = function isObject(value) {
    return value && typeof value === "object";
};
/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */ util.isset = /**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */ util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};
/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */ /**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */ util.Buffer = function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */ return null;
    }
}();
// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;
// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;
/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */ util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */ return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
};
/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */ util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */  : Array;
/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */ /**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */ util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long || /* istanbul ignore next */ util.global.Long || util.inquire("long");
/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */ util.key2Re = /^true|false|0|1$/;
/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */ util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */ util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */ util.longToHash = function longToHash(value) {
    return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
};
/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */ util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};
/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */ function merge(dst, src, ifNotSet) {
    for(var keys = Object.keys(src), i = 0; i < keys.length; ++i)if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];
    return dst;
}
util.merge = merge;
/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */ util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};
/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */ function newError(name) {
    function CustomError(message, properties) {
        if (!(this instanceof CustomError)) return new CustomError(message, properties);
        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function
        Object.defineProperty(this, "message", {
            get: function() {
                return message;
            }
        });
        /* istanbul ignore next */ if (Error.captureStackTrace) Error.captureStackTrace(this, CustomError);
        else Object.defineProperty(this, "stack", {
            value: new Error().stack || ""
        });
        if (properties) merge(this, properties);
    }
    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
    Object.defineProperty(CustomError.prototype, "name", {
        get: function() {
            return name;
        }
    });
    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };
    return CustomError;
}
util.newError = newError;
/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */ util.ProtocolError = newError("ProtocolError");
/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */ /**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */ /**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */ util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for(var i1 = 0; i1 < fieldNames.length; ++i1)fieldMap[fieldNames[i1]] = 1;
    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */ return function() {
        for(var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
    };
};
/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */ /**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */ util.oneOfSetter = function setOneOf(fieldNames) {
    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */ return function(name) {
        for(var i = 0; i < fieldNames.length; ++i)if (fieldNames[i] !== name) delete this[fieldNames[i]];
    };
};
/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */ util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};
// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */ if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */ function Buffer_from(value, encoding) {
        return new Buffer(value, encoding);
    };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */ function Buffer_allocUnsafe(size) {
        return new Buffer(size);
    };
};

},{"@protobufjs/aspromise":"gv7US","@protobufjs/base64":"aOjmr","@protobufjs/eventemitter":"lWFnX","@protobufjs/float":"gifXM","@protobufjs/inquire":"fon4w","@protobufjs/utf8":"8DJTf","@protobufjs/pool":"fadtm","./longbits":"c4DvK"}],"gv7US":[function(require,module,exports) {
"use strict";
module.exports = asPromise;
/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */ /**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */ function asPromise(fn, ctx /*, varargs */ ) {
    var params1 = new Array(arguments.length - 1), offset1 = 0, index = 2, pending = true;
    while(index < arguments.length)params1[offset1++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params1[offset1] = function callback(err /*, varargs */ ) {
            if (pending) {
                pending = false;
                if (err) reject(err);
                else {
                    var params = new Array(arguments.length - 1), offset = 0;
                    while(offset < params.length)params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params1);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}

},{}],"aOjmr":[function(require,module,exports) {
"use strict";
/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */ var base64 = exports;
/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */ base64.length = function length(string) {
    var p = string.length;
    if (!p) return 0;
    var n = 0;
    while(--p % 4 > 1 && string.charAt(p) === "=")++n;
    return Math.ceil(string.length * 3) / 4 - n;
};
// Base64 encoding table
var b64 = new Array(64);
// Base64 decoding table
var s64 = new Array(123);
// 65..90, 97..122, 48..57, 43, 47
for(var i = 0; i < 64;)s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */ base64.encode = function encode(buffer, start, end) {
    var parts = null, chunk = [];
    var i1 = 0, j = 0, t; // temporary
    while(start < end){
        var b = buffer[start++];
        switch(j){
            case 0:
                chunk[i1++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i1++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i1++] = b64[t | b >> 6];
                chunk[i1++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i1 > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i1 = 0;
        }
    }
    if (j) {
        chunk[i1++] = b64[t];
        chunk[i1++] = 61;
        if (j === 1) chunk[i1++] = 61;
    }
    if (parts) {
        if (i1) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i1)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i1));
};
var invalidEncoding = "invalid encoding";
/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */ base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, t; // temporary
    for(var i2 = 0; i2 < string.length;){
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1) break;
        if ((c = s64[c]) === undefined) throw Error(invalidEncoding);
        switch(j){
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1) throw Error(invalidEncoding);
    return offset - start;
};
/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */ base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};

},{}],"lWFnX":[function(require,module,exports) {
"use strict";
module.exports = EventEmitter;
/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */ function EventEmitter() {
    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */ this._listeners = {};
}
/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn: fn,
        ctx: ctx || this
    });
    return this;
};
/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined) this._listeners = {};
    else if (fn === undefined) this._listeners[evt] = [];
    else {
        var listeners = this._listeners[evt];
        for(var i = 0; i < listeners.length;)if (listeners[i].fn === fn) listeners.splice(i, 1);
        else ++i;
    }
    return this;
};
/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [], i = 1;
        for(; i < arguments.length;)args.push(arguments[i++]);
        for(i = 0; i < listeners.length;)listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};

},{}],"gifXM":[function(require,module,exports) {
"use strict";
module.exports = factory(factory);
/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */ /**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ // Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {
    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {
        var f32 = new Float32Array([
            -0
        ]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }
        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }
        /* istanbul ignore next */ exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */ exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }
        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }
        /* istanbul ignore next */ exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */ exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
    // float: ieee754
    })();
    else (function() {
        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val)) writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }
        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
             ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }
        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
    })();
    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {
        var f64 = new Float64Array([
            -0
        ]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }
        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }
        /* istanbul ignore next */ exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */ exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }
        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }
        /* istanbul ignore next */ exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */ exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
    // double: ieee754
    })();
    else (function() {
        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) {
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) {
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024) exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }
        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
             ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }
        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
    })();
    return exports;
}
// uint helpers
function writeUintLE(val, buf, pos) {
    buf[pos] = val & 255;
    buf[pos + 1] = val >>> 8 & 255;
    buf[pos + 2] = val >>> 16 & 255;
    buf[pos + 3] = val >>> 24;
}
function writeUintBE(val, buf, pos) {
    buf[pos] = val >>> 24;
    buf[pos + 1] = val >>> 16 & 255;
    buf[pos + 2] = val >>> 8 & 255;
    buf[pos + 3] = val & 255;
}
function readUintLE(buf, pos) {
    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
}
function readUintBE(buf, pos) {
    return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
}

},{}],"fon4w":[function(require,module,exports) {
"use strict";
module.exports = inquire;
/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */ function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length)) return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}

},{}],"8DJTf":[function(require,module,exports) {
"use strict";
/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */ var utf8 = exports;
/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */ utf8.length = function utf8_length(string) {
    var len = 0, c = 0;
    for(var i = 0; i < string.length; ++i){
        c = string.charCodeAt(i);
        if (c < 128) len += 1;
        else if (c < 2048) len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else len += 3;
    }
    return len;
};
/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */ utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1) return "";
    var parts = null, chunk = [], i = 0, t; // temporary
    while(start < end){
        t = buffer[start++];
        if (t < 128) chunk[i++] = t;
        else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};
/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */ utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset, c1, c2; // character 2
    for(var i = 0; i < string.length; ++i){
        c1 = string.charCodeAt(i);
        if (c1 < 128) buffer[offset++] = c1;
        else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6 | 192;
            buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18 | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12 | 224;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
        }
    }
    return offset - start;
};

},{}],"fadtm":[function(require,module,exports) {
"use strict";
module.exports = pool;
/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */ /**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */ /**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */ function pool(alloc, slice, size1) {
    var SIZE = size1 || 8192;
    var MAX = SIZE >>> 1;
    var slab = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX) return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) offset = (offset | 7) + 1;
        return buf;
    };
}

},{}],"c4DvK":[function(require,module,exports) {
"use strict";
module.exports = LongBits;
var util = require("../util/minimal");
/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */ function LongBits(lo, hi) {
    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.
    /**
     * Low bits.
     * @type {number}
     */ this.lo = lo >>> 0;
    /**
     * High bits.
     * @type {number}
     */ this.hi = hi >>> 0;
}
/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */ var zero = LongBits.zero = new LongBits(0, 0);
zero.toNumber = function() {
    return 0;
};
zero.zzEncode = zero.zzDecode = function() {
    return this;
};
zero.length = function() {
    return 1;
};
/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */ var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */ LongBits.fromNumber = function fromNumber(value) {
    if (value === 0) return zero;
    var sign = value < 0;
    if (sign) value = -value;
    var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295) hi = 0;
        }
    }
    return new LongBits(lo, hi);
};
/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */ LongBits.from = function from(value) {
    if (typeof value === "number") return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */ if (util.Long) value = util.Long.fromString(value);
        else return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};
/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */ LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo) hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};
/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */ LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : {
        low: this.lo | 0,
        high: this.hi | 0,
        unsigned: Boolean(unsigned)
    };
};
var charCodeAt = String.prototype.charCodeAt;
/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */ LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash) return zero;
    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
};
/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */ LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
};
/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */ LongBits.prototype.zzEncode = function zzEncode() {
    var mask = this.hi >> 31;
    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo = (this.lo << 1 ^ mask) >>> 0;
    return this;
};
/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */ LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi = (this.hi >>> 1 ^ mask) >>> 0;
    return this;
};
/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */ LongBits.prototype.length = function length() {
    var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
};

},{"../util/minimal":"4HDe1"}],"gIB4S":[function(require,module,exports) {
"use strict";
module.exports = BufferWriter;
// extends Writer
var Writer = require("./writer");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
var util = require("./util/minimal");
/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */ function BufferWriter() {
    Writer.call(this);
}
BufferWriter._configure = function() {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */ BufferWriter.alloc = util._Buffer_allocUnsafe;
    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
    // also works for plain array values
    } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) val.copy(buf, pos, 0, val.length);
        else for(var i = 0; i < val.length;)buf[pos++] = val[i++];
    };
};
/**
 * @override
 */ BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value)) value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len) this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};
function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) util.utf8.write(val, buf, pos);
    else if (buf.utf8Write) buf.utf8Write(val, pos);
    else buf.write(val, pos);
}
/**
 * @override
 */ BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len) this._push(writeStringBuffer, len, value);
    return this;
};
/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */ BufferWriter._configure();

},{"./writer":"boWmp","./util/minimal":"4HDe1"}],"bN2lE":[function(require,module,exports) {
"use strict";
module.exports = Reader;
var util = require("./util/minimal");
var BufferReader; // cyclic
var LongBits = util.LongBits, utf8 = util.utf8;
/* istanbul ignore next */ function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}
/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */ function Reader(buffer) {
    /**
     * Read buffer.
     * @type {Uint8Array}
     */ this.buf = buffer;
    /**
     * Read buffer position.
     * @type {number}
     */ this.pos = 0;
    /**
     * Read buffer length.
     * @type {number}
     */ this.len = buffer.length;
}
var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);
    throw Error("illegal buffer");
} : function create_array(buffer) {
    if (Array.isArray(buffer)) return new Reader(buffer);
    throw Error("illegal buffer");
};
var create = function create() {
    return util.Buffer ? function create_buffer_setup(buffer1) {
        return (Reader.create = function create_buffer(buffer) {
            return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer) : create_array(buffer);
        })(buffer1);
    } : create_array;
};
/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */ Reader.create = create();
Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;
/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.uint32 = function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        /* istanbul ignore if */ if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
}();
/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */ Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};
/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */ Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};
/* eslint-disable no-invalid-this */ function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) {
        for(; i < 4; ++i){
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
        i = 0;
    } else {
        for(; i < 3; ++i){
            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) for(; i < 5; ++i){
        // 6th..10th
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
    }
    else for(; i < 5; ++i){
        /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
        // 6th..10th
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
    }
    /* istanbul ignore next */ throw Error("invalid varint encoding");
}
/* eslint-enable no-invalid-this */ /**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */ Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};
function readFixed32_end(buf, end) {
    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
}
/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */ Reader.prototype.fixed32 = function read_fixed32() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return readFixed32_end(this.buf, this.pos += 4);
};
/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */ Reader.prototype.sfixed32 = function read_sfixed32() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return readFixed32_end(this.buf, this.pos += 4) | 0;
};
/* eslint-disable no-invalid-this */ function readFixed64() {
    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);
    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}
/* eslint-enable no-invalid-this */ /**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.float = function read_float() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};
/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.double = function read_double() {
    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);
    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};
/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */ Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(), start = this.pos, end = this.pos + length;
    /* istanbul ignore if */ if (end > this.len) throw indexOutOfRange(this, length);
    this.pos += length;
    if (Array.isArray(this.buf)) return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
     ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
};
/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */ Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};
/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */ Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */ if (this.pos + length > this.len) throw indexOutOfRange(this, length);
        this.pos += length;
    } else do {
        /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
    }while (this.buf[this.pos++] & 128);
    return this;
};
/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */ Reader.prototype.skipType = function(wireType) {
    switch(wireType){
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while((wireType = this.uint32() & 7) !== 4)this.skipType(wireType);
            break;
        case 5:
            this.skip(4);
            break;
        /* istanbul ignore next */ default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};
Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();
    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {
        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }
    });
};

},{"./util/minimal":"4HDe1"}],"1b0Ms":[function(require,module,exports) {
"use strict";
module.exports = BufferReader;
// extends Reader
var Reader = require("./reader");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
var util = require("./util/minimal");
/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */ function BufferReader(buffer) {
    Reader.call(this, buffer);
/**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */ }
BufferReader._configure = function() {
    /* istanbul ignore else */ if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;
};
/**
 * @override
 */ BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};
/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */ BufferReader._configure();

},{"./reader":"bN2lE","./util/minimal":"4HDe1"}],"eRwa1":[function(require,module,exports) {
"use strict";
/**
 * Streaming RPC helpers.
 * @namespace
 */ var rpc = exports;
/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */ /**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */ rpc.Service = require("./rpc/service");

},{"./rpc/service":"lVKlz"}],"lVKlz":[function(require,module,exports) {
"use strict";
module.exports = Service;
var util = require("../util/minimal");
// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */ /**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */ /**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */ function Service(rpcImpl, requestDelimited, responseDelimited) {
    if (typeof rpcImpl !== "function") throw TypeError("rpcImpl must be a function");
    util.EventEmitter.call(this);
    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */ this.rpcImpl = rpcImpl;
    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */ this.requestDelimited = Boolean(requestDelimited);
    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */ this.responseDelimited = Boolean(responseDelimited);
}
/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */ Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
    if (!request) throw TypeError("request must be specified");
    var self = this;
    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);
    if (!self.rpcImpl) {
        setTimeout(function() {
            callback(Error("already ended"));
        }, 0);
        return undefined;
    }
    try {
        return self.rpcImpl(method, requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
            if (err) {
                self.emit("error", err, method);
                return callback(err);
            }
            if (response === null) {
                self.end(/* endedByRPC */ true);
                return undefined;
            }
            if (!(response instanceof responseCtor)) try {
                response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
            } catch (err1) {
                self.emit("error", err1, method);
                return callback(err1);
            }
            self.emit("data", response, method);
            return callback(null, response);
        });
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() {
            callback(err);
        }, 0);
        return undefined;
    }
};
/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */ Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

},{"../util/minimal":"4HDe1"}],"bJQDp":[function(require,module,exports) {
"use strict";
module.exports = {}; /**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */ 

},{}],"9X4ZW":[function(require,module,exports) {
"use strict";
/**
 * Convert a JavaScript date into an `RFC3339Nano` formatted
 * string.
 *
 * @param {Date} time
 */ module.exports.toRFC3339 = (time)=>{
    const year = time.getUTCFullYear();
    const month = String(time.getUTCMonth() + 1).padStart(2, "0");
    const day = String(time.getUTCDate()).padStart(2, "0");
    const hour = String(time.getUTCHours()).padStart(2, "0");
    const minute = String(time.getUTCMinutes()).padStart(2, "0");
    const seconds = String(time.getUTCSeconds()).padStart(2, "0");
    const milliseconds = time.getUTCMilliseconds();
    const nanoseconds = milliseconds * 1000000;
    return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;
};
/**
 * Parses a date string formatted as `RFC3339Nano` into a
 * JavaScript Date object.
 *
 * @param {string} time
 */ module.exports.parseRFC3339 = (time)=>{
    const rfc3339Matcher = new RegExp(// 2006-01-02T
    "(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d+)Z");
    const m = String(time).trim().match(rfc3339Matcher);
    if (!m) throw new Error("Invalid format");
    const year = parseInt(m[1], 10);
    const month = parseInt(m[2], 10) - 1;
    const date = parseInt(m[3], 10);
    const hour = parseInt(m[4], 10);
    const minute = parseInt(m[5], 10);
    const second = parseInt(m[6], 10);
    const millisecond = parseInt(m[7].slice(0, -6), 10);
    return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));
};

},{}],"bzSZD":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
/**
 * @typedef {import('./record')} Record
 */ /**
 * Checks a record and ensures it is still valid.
 * It runs the needed validators.
 * If verification fails the returned Promise will reject with the error.
 *
 * @param {import('libp2p-interfaces/src/types').DhtValidators} validators
 * @param {Record} record
 */ const verifyRecord = (validators, record)=>{
    const key = record.key;
    const keyString = uint8ArrayToString(key);
    const parts = keyString.split("/");
    if (parts.length < 3) // No validator available
    return;
    const validator = validators[parts[1].toString()];
    if (!validator) {
        const errMsg = "Invalid record keytype";
        throw errcode(new Error(errMsg), "ERR_INVALID_RECORD_KEY_TYPE");
    }
    return validator.func(key, record.value);
};
module.exports = {
    verifyRecord: verifyRecord,
    validators: require("./validators")
};

},{"err-code":"dUrrM","uint8arrays/to-string":"w8mvE","./validators":"gVCsX"}],"w8mvE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bases = require("./util/bases.js");
function toString(array, encoding = "utf8") {
    const base = bases[encoding];
    if (!base) throw new Error(`Unsupported encoding "${encoding}"`);
    return base.encoder.encode(array).substring(1);
}
exports.toString = toString;

},{"./util/bases.js":"ekopG"}],"ekopG":[function(require,module,exports) {
"use strict";
var basics = require("multiformats/basics");
function createCodec(name, prefix, encode, decode) {
    return {
        name,
        prefix,
        encoder: {
            name,
            prefix,
            encode
        },
        decoder: {
            decode
        }
    };
}
const string = createCodec("utf8", "u", (buf)=>{
    const decoder = new TextDecoder("utf8");
    return "u" + decoder.decode(buf);
}, (str)=>{
    const encoder = new TextEncoder();
    return encoder.encode(str.substring(1));
});
const ascii = createCodec("ascii", "a", (buf)=>{
    let string1 = "a";
    for(let i = 0; i < buf.length; i++)string1 += String.fromCharCode(buf[i]);
    return string1;
}, (str)=>{
    str = str.substring(1);
    const buf = new Uint8Array(str.length);
    for(let i = 0; i < str.length; i++)buf[i] = str.charCodeAt(i);
    return buf;
});
const BASES = {
    utf8: string,
    "utf-8": string,
    hex: basics.bases.base16,
    latin1: ascii,
    ascii: ascii,
    binary: ascii,
    ...basics.bases
};
module.exports = BASES;

},{"multiformats/basics":"a826o"}],"a826o":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var identity = require("./bases/identity.js");
var base2 = require("./bases/base2.js");
var base8 = require("./bases/base8.js");
var base10 = require("./bases/base10.js");
var base16 = require("./bases/base16.js");
var base32 = require("./bases/base32.js");
var base36 = require("./bases/base36.js");
var base58 = require("./bases/base58.js");
var base64 = require("./bases/base64.js");
var base256emoji = require("./bases/base256emoji.js");
var sha2 = require("./hashes/sha2.js");
var identity$1 = require("./hashes/identity.js");
var raw = require("./codecs/raw.js");
var json = require("./codecs/json.js");
require("./index.js");
var cid = require("./cid.js");
var hasher = require("./hashes/hasher.js");
var digest = require("./hashes/digest.js");
var varint = require("./varint.js");
var bytes = require("./bytes.js");
const bases = {
    ...identity,
    ...base2,
    ...base8,
    ...base10,
    ...base16,
    ...base32,
    ...base36,
    ...base58,
    ...base64,
    ...base256emoji
};
const hashes = {
    ...sha2,
    ...identity$1
};
const codecs = {
    raw,
    json
};
exports.CID = cid.CID;
exports.hasher = hasher;
exports.digest = digest;
exports.varint = varint;
exports.bytes = bytes;
exports.bases = bases;
exports.codecs = codecs;
exports.hashes = hashes;

},{"./bases/identity.js":"jy16e","./bases/base2.js":"jAOxB","./bases/base8.js":"3WMjP","./bases/base10.js":"aFB7O","./bases/base16.js":"e5DKK","./bases/base32.js":"apmz1","./bases/base36.js":"22c8Y","./bases/base58.js":"9KkrI","./bases/base64.js":"3gCnk","./bases/base256emoji.js":"cSiGJ","./hashes/sha2.js":"7U0mx","./hashes/identity.js":"bj4ky","./codecs/raw.js":"cxcPD","./codecs/json.js":"7lUAp","./index.js":"3QFUn","./cid.js":"4uoBU","./hashes/hasher.js":"lU6YS","./hashes/digest.js":"9JdI8","./varint.js":"8P1F2","./bytes.js":"ent0w"}],"jy16e":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
var bytes = require("../bytes.js");
const identity = base.from({
    prefix: "\0",
    name: "identity",
    encode: (buf)=>bytes.toString(buf),
    decode: (str)=>bytes.fromString(str)
});
exports.identity = identity;

},{"./base.js":"j888T","../bytes.js":"ent0w"}],"j888T":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var baseX$1 = require("../../vendor/base-x.js");
var bytes = require("../bytes.js");
class Encoder {
    constructor(name, prefix, baseEncode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes1) {
        if (bytes1 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(bytes1)}`;
        else throw Error("Unknown type, must be binary type");
    }
}
class Decoder {
    constructor(name, prefix, baseDecode){
        this.name = name;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === undefined) throw new Error("Invalid prefix character");
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            return this.baseDecode(text.slice(this.prefix.length));
        } else throw Error("Can only multibase decode strings");
    }
    or(decoder) {
        return or(this, decoder);
    }
}
class ComposedDecoder {
    constructor(decoders){
        this.decoders = decoders;
    }
    or(decoder) {
        return or(this, decoder);
    }
    decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) return decoder.decode(input);
        else throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
}
const or = (left, right)=>new ComposedDecoder({
        ...left.decoders || {
            [left.prefix]: left
        },
        ...right.decoders || {
            [right.prefix]: right
        }
    });
class Codec {
    constructor(name, prefix, baseEncode, baseDecode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder(name, prefix, baseEncode);
        this.decoder = new Decoder(name, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
}
const from = ({ name , prefix , encode: encode1 , decode: decode1  })=>new Codec(name, prefix, encode1, decode1);
const baseX = ({ prefix , name , alphabet  })=>{
    const { encode: encode2 , decode: decode2  } = baseX$1(alphabet, name);
    return from({
        prefix,
        name,
        encode: encode2,
        decode: (text)=>bytes.coerce(decode2(text))
    });
};
const decode = (string, alphabet, bitsPerChar, name)=>{
    const codes = {};
    for(let i = 0; i < alphabet.length; ++i)codes[alphabet[i]] = i;
    let end = string.length;
    while(string[end - 1] === "=")--end;
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for(let i1 = 0; i1 < end; ++i1){
        const value = codes[string[i1]];
        if (value === undefined) throw new SyntaxError(`Non-${name} character`);
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
        }
    }
    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) throw new SyntaxError("Unexpected end of data");
    return out;
};
const encode = (data, alphabet, bitsPerChar)=>{
    const pad = alphabet[alphabet.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer = 0;
    for(let i = 0; i < data.length; ++i){
        buffer = buffer << 8 | data[i];
        bits += 8;
        while(bits > bitsPerChar){
            bits -= bitsPerChar;
            out += alphabet[mask & buffer >> bits];
        }
    }
    if (bits) out += alphabet[mask & buffer << bitsPerChar - bits];
    if (pad) while(out.length * bitsPerChar & 7)out += "=";
    return out;
};
const rfc4648 = ({ name , prefix , bitsPerChar , alphabet  })=>{
    return from({
        prefix,
        name,
        encode (input) {
            return encode(input, alphabet, bitsPerChar);
        },
        decode (input) {
            return decode(input, alphabet, bitsPerChar, name);
        }
    });
};
exports.Codec = Codec;
exports.baseX = baseX;
exports.from = from;
exports.or = or;
exports.rfc4648 = rfc4648;

},{"../../vendor/base-x.js":"bPHFa","../bytes.js":"ent0w"}],"bPHFa":[function(require,module,exports) {
"use strict";
function base(ALPHABET, name) {
    if (ALPHABET.length >= 255) throw new TypeError("Alphabet too long");
    var BASE_MAP = new Uint8Array(256);
    for(var j1 = 0; j1 < BASE_MAP.length; j1++)BASE_MAP[j1] = 255;
    for(var i1 = 0; i1 < ALPHABET.length; i1++){
        var x = ALPHABET.charAt(i1);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) throw new TypeError(x + " is ambiguous");
        BASE_MAP[xc] = i1;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode(source) {
        if (source instanceof Uint8Array) ;
        else if (ArrayBuffer.isView(source)) source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        else if (Array.isArray(source)) source = Uint8Array.from(source);
        if (!(source instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
        if (source.length === 0) return "";
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while(pbegin !== pend){
            var carry = source[pbegin];
            var i = 0;
            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            pbegin++;
        }
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0)it2++;
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") throw new TypeError("Expected String");
        if (source.length === 0) return new Uint8Array();
        var psz = 0;
        if (source[psz] === " ") return;
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while(source[psz]){
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) return;
            var i = 0;
            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            psz++;
        }
        if (source[psz] === " ") return;
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0)it4++;
        var vch = new Uint8Array(zeroes + (size - it4));
        var j = zeroes;
        while(it4 !== size)vch[j++] = b256[it4++];
        return vch;
    }
    function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) return buffer;
        throw new Error(`Non-${name} character`);
    }
    return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
    };
}
var src = base;
var _brrp__multiformats_scope_baseX = src;
module.exports = _brrp__multiformats_scope_baseX;

},{}],"ent0w":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const empty = new Uint8Array(0);
const toHex = (d)=>d.reduce((hex, byte)=>hex + byte.toString(16).padStart(2, "0"), "");
const fromHex = (hex)=>{
    const hexes = hex.match(/../g);
    return hexes ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : empty;
};
const equals = (aa, bb)=>{
    if (aa === bb) return true;
    if (aa.byteLength !== bb.byteLength) return false;
    for(let ii = 0; ii < aa.byteLength; ii++){
        if (aa[ii] !== bb[ii]) return false;
    }
    return true;
};
const coerce = (o)=>{
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    throw new Error("Unknown type, must be binary type");
};
const isBinary = (o)=>o instanceof ArrayBuffer || ArrayBuffer.isView(o);
const fromString = (str)=>new TextEncoder().encode(str);
const toString = (b)=>new TextDecoder().decode(b);
exports.coerce = coerce;
exports.empty = empty;
exports.equals = equals;
exports.fromHex = fromHex;
exports.fromString = fromString;
exports.isBinary = isBinary;
exports.toHex = toHex;
exports.toString = toString;

},{}],"jAOxB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base2 = base.rfc4648({
    prefix: "0",
    name: "base2",
    alphabet: "01",
    bitsPerChar: 1
});
exports.base2 = base2;

},{"./base.js":"j888T"}],"3WMjP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base8 = base.rfc4648({
    prefix: "7",
    name: "base8",
    alphabet: "01234567",
    bitsPerChar: 3
});
exports.base8 = base8;

},{"./base.js":"j888T"}],"aFB7O":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base10 = base.baseX({
    prefix: "9",
    name: "base10",
    alphabet: "0123456789"
});
exports.base10 = base10;

},{"./base.js":"j888T"}],"e5DKK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base16 = base.rfc4648({
    prefix: "f",
    name: "base16",
    alphabet: "0123456789abcdef",
    bitsPerChar: 4
});
const base16upper = base.rfc4648({
    prefix: "F",
    name: "base16upper",
    alphabet: "0123456789ABCDEF",
    bitsPerChar: 4
});
exports.base16 = base16;
exports.base16upper = base16upper;

},{"./base.js":"j888T"}],"apmz1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base32 = base.rfc4648({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
});
const base32upper = base.rfc4648({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
});
const base32pad = base.rfc4648({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
});
const base32padupper = base.rfc4648({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
});
const base32hex = base.rfc4648({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
});
const base32hexupper = base.rfc4648({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
});
const base32hexpad = base.rfc4648({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
});
const base32hexpadupper = base.rfc4648({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
});
const base32z = base.rfc4648({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
});
exports.base32 = base32;
exports.base32hex = base32hex;
exports.base32hexpad = base32hexpad;
exports.base32hexpadupper = base32hexpadupper;
exports.base32hexupper = base32hexupper;
exports.base32pad = base32pad;
exports.base32padupper = base32padupper;
exports.base32upper = base32upper;
exports.base32z = base32z;

},{"./base.js":"j888T"}],"22c8Y":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base36 = base.baseX({
    prefix: "k",
    name: "base36",
    alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
const base36upper = base.baseX({
    prefix: "K",
    name: "base36upper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});
exports.base36 = base36;
exports.base36upper = base36upper;

},{"./base.js":"j888T"}],"9KkrI":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base58btc = base.baseX({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
const base58flickr = base.baseX({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});
exports.base58btc = base58btc;
exports.base58flickr = base58flickr;

},{"./base.js":"j888T"}],"3gCnk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base64 = base.rfc4648({
    prefix: "m",
    name: "base64",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    bitsPerChar: 6
});
const base64pad = base.rfc4648({
    prefix: "M",
    name: "base64pad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    bitsPerChar: 6
});
const base64url = base.rfc4648({
    prefix: "u",
    name: "base64url",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    bitsPerChar: 6
});
const base64urlpad = base.rfc4648({
    prefix: "U",
    name: "base64urlpad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
    bitsPerChar: 6
});
exports.base64 = base64;
exports.base64pad = base64pad;
exports.base64url = base64url;
exports.base64urlpad = base64urlpad;

},{"./base.js":"j888T"}],"cSiGJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const alphabet = Array.from("\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42");
const alphabetBytesToChars = alphabet.reduce((p, c, i)=>{
    p[i] = c;
    return p;
}, []);
const alphabetCharsToBytes = alphabet.reduce((p, c, i)=>{
    p[c.codePointAt(0)] = i;
    return p;
}, []);
function encode(data) {
    return data.reduce((p, c)=>{
        p += alphabetBytesToChars[c];
        return p;
    }, "");
}
function decode(str) {
    const byts = [];
    for (const char of str){
        const byt = alphabetCharsToBytes[char.codePointAt(0)];
        if (byt === undefined) throw new Error(`Non-base256emoji character: ${char}`);
        byts.push(byt);
    }
    return new Uint8Array(byts);
}
const base256emoji = base.from({
    prefix: "\uD83D\uDE80",
    name: "base256emoji",
    encode,
    decode
});
exports.base256emoji = base256emoji;

},{"./base.js":"j888T"}],"7U0mx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var hasher = require("./hasher.js");
const sha = (name)=>async (data)=>new Uint8Array(await crypto.subtle.digest(name, data));
const sha256 = hasher.from({
    name: "sha2-256",
    code: 18,
    encode: sha("SHA-256")
});
const sha512 = hasher.from({
    name: "sha2-512",
    code: 19,
    encode: sha("SHA-512")
});
exports.sha256 = sha256;
exports.sha512 = sha512;

},{"./hasher.js":"lU6YS"}],"lU6YS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var digest = require("./digest.js");
const from = ({ name , code , encode  })=>new Hasher(name, code, encode);
class Hasher {
    constructor(name, code, encode){
        this.name = name;
        this.code = code;
        this.encode = encode;
    }
    digest(input) {
        if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? digest.create(this.code, result) : result.then((digest$1)=>digest.create(this.code, digest$1));
        } else throw Error("Unknown type, must be binary type");
    }
}
exports.Hasher = Hasher;
exports.from = from;

},{"./digest.js":"9JdI8"}],"9JdI8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bytes = require("../bytes.js");
var varint = require("../varint.js");
const create = (code, digest)=>{
    const size = digest.byteLength;
    const sizeOffset = varint.encodingLength(code);
    const digestOffset = sizeOffset + varint.encodingLength(size);
    const bytes1 = new Uint8Array(digestOffset + size);
    varint.encodeTo(code, bytes1, 0);
    varint.encodeTo(size, bytes1, sizeOffset);
    bytes1.set(digest, digestOffset);
    return new Digest(code, size, digest, bytes1);
};
const decode = (multihash)=>{
    const bytes$1 = bytes.coerce(multihash);
    const [code, sizeOffset] = varint.decode(bytes$1);
    const [size, digestOffset] = varint.decode(bytes$1.subarray(sizeOffset));
    const digest = bytes$1.subarray(sizeOffset + digestOffset);
    if (digest.byteLength !== size) throw new Error("Incorrect length");
    return new Digest(code, size, digest, bytes$1);
};
const equals = (a, b)=>{
    if (a === b) return true;
    else return a.code === b.code && a.size === b.size && bytes.equals(a.bytes, b.bytes);
};
class Digest {
    constructor(code, size, digest, bytes2){
        this.code = code;
        this.size = size;
        this.digest = digest;
        this.bytes = bytes2;
    }
}
exports.Digest = Digest;
exports.create = create;
exports.decode = decode;
exports.equals = equals;

},{"../bytes.js":"ent0w","../varint.js":"8P1F2"}],"8P1F2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var varint$1 = require("../vendor/varint.js");
const decode = (data)=>{
    const code = varint$1.decode(data);
    return [
        code,
        varint$1.decode.bytes
    ];
};
const encodeTo = (int, target, offset = 0)=>{
    varint$1.encode(int, target, offset);
    return target;
};
const encodingLength = (int)=>{
    return varint$1.encodingLength(int);
};
exports.decode = decode;
exports.encodeTo = encodeTo;
exports.encodingLength = encodingLength;

},{"../vendor/varint.js":"lYpdI"}],"lYpdI":[function(require,module,exports) {
"use strict";
var encode_1 = encode;
var MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);
function encode(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT){
        out[offset++] = num & 255 | MSB;
        num /= 128;
    }
    while(num & MSBALL){
        out[offset++] = num & 255 | MSB;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode.bytes = offset - oldOffset + 1;
    return out;
}
var decode = read;
var MSB$1 = 128, REST$1 = 127;
function read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l) {
            read.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB$1);
    read.bytes = counter - offset;
    return res;
}
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
    encode: encode_1,
    decode: decode,
    encodingLength: length
};
var _brrp_varint = varint;
var varint$1 = _brrp_varint;
module.exports = varint$1;

},{}],"bj4ky":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bytes = require("../bytes.js");
var digest$1 = require("./digest.js");
const code = 0;
const name = "identity";
const encode = bytes.coerce;
const digest = (input)=>digest$1.create(code, encode(input));
const identity = {
    code,
    name,
    encode,
    digest
};
exports.identity = identity;

},{"../bytes.js":"ent0w","./digest.js":"9JdI8"}],"cxcPD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bytes = require("../bytes.js");
const name = "raw";
const code = 85;
const encode = (node)=>bytes.coerce(node);
const decode = (data)=>bytes.coerce(data);
exports.code = code;
exports.decode = decode;
exports.encode = encode;
exports.name = name;

},{"../bytes.js":"ent0w"}],"7lUAp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();
const name = "json";
const code = 512;
const encode = (node)=>textEncoder.encode(JSON.stringify(node));
const decode = (data)=>JSON.parse(textDecoder.decode(data));
exports.code = code;
exports.decode = decode;
exports.encode = encode;
exports.name = name;

},{}],"3QFUn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var cid = require("./cid.js");
var varint = require("./varint.js");
var bytes = require("./bytes.js");
var hasher = require("./hashes/hasher.js");
var digest = require("./hashes/digest.js");
exports.CID = cid.CID;
exports.varint = varint;
exports.bytes = bytes;
exports.hasher = hasher;
exports.digest = digest;

},{"./cid.js":"4uoBU","./varint.js":"8P1F2","./bytes.js":"ent0w","./hashes/hasher.js":"lU6YS","./hashes/digest.js":"9JdI8"}],"4uoBU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var varint = require("./varint.js");
var digest = require("./hashes/digest.js");
var base58 = require("./bases/base58.js");
var base32 = require("./bases/base32.js");
var bytes = require("./bytes.js");
class CID {
    constructor(version1, code, multihash, bytes1){
        this.code = code;
        this.version = version1;
        this.multihash = multihash;
        this.bytes = bytes1;
        this.byteOffset = bytes1.byteOffset;
        this.byteLength = bytes1.byteLength;
        this.asCID = this;
        this._baseCache = new Map();
        Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
        });
    }
    toV0() {
        switch(this.version){
            case 0:
                return this;
            default:
                {
                    const { code , multihash  } = this;
                    if (code !== DAG_PB_CODE) throw new Error("Cannot convert a non dag-pb CID to CIDv0");
                    if (multihash.code !== SHA_256_CODE) throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
                    return CID.createV0(multihash);
                }
        }
    }
    toV1() {
        switch(this.version){
            case 0:
                {
                    const { code , digest: digest$1  } = this.multihash;
                    const multihash = digest.create(code, digest$1);
                    return CID.createV1(this.code, multihash);
                }
            case 1:
                return this;
            default:
                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
    }
    equals(other) {
        return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);
    }
    toString(base) {
        const { bytes: bytes2 , version: version2 , _baseCache  } = this;
        switch(version2){
            case 0:
                return toStringV0(bytes2, _baseCache, base || base58.base58btc.encoder);
            default:
                return toStringV1(bytes2, _baseCache, base || base32.base32.encoder);
        }
    }
    toJSON() {
        return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
        };
    }
    get [Symbol.toStringTag]() {
        return "CID";
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        return "CID(" + this.toString() + ")";
    }
    static isCID(value) {
        deprecate(/^0\.0/, IS_CID_DEPRECATION);
        return !!(value && (value[cidSymbol] || value.asCID === value));
    }
    get toBaseEncodedString() {
        throw new Error("Deprecated, use .toString()");
    }
    get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
    }
    get buffer() {
        throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
    }
    get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
    }
    get prefix() {
        throw new Error('"prefix" property is deprecated');
    }
    static asCID(value) {
        if (value instanceof CID) return value;
        else if (value != null && value.asCID === value) {
            const { version: version3 , code , multihash , bytes: bytes3  } = value;
            return new CID(version3, code, multihash, bytes3 || encodeCID(version3, code, multihash.bytes));
        } else if (value != null && value[cidSymbol] === true) {
            const { version: version4 , multihash , code  } = value;
            const digest$1 = digest.decode(multihash);
            return CID.create(version4, code, digest$1);
        } else return null;
    }
    static create(version5, code, digest1) {
        if (typeof code !== "number") throw new Error("String codecs are no longer supported");
        switch(version5){
            case 0:
                if (code !== DAG_PB_CODE) throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
                else return new CID(version5, code, digest1, digest1.bytes);
            case 1:
                {
                    const bytes4 = encodeCID(version5, code, digest1.bytes);
                    return new CID(version5, code, digest1, bytes4);
                }
            default:
                throw new Error("Invalid version");
        }
    }
    static createV0(digest2) {
        return CID.create(0, DAG_PB_CODE, digest2);
    }
    static createV1(code, digest3) {
        return CID.create(1, code, digest3);
    }
    static decode(bytes5) {
        const [cid, remainder] = CID.decodeFirst(bytes5);
        if (remainder.length) throw new Error("Incorrect length");
        return cid;
    }
    static decodeFirst(bytes$1) {
        const specs = CID.inspectBytes(bytes$1);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) throw new Error("Incorrect length");
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);
        return [
            cid,
            bytes$1.subarray(specs.size)
        ];
    }
    static inspectBytes(initialBytes) {
        let offset = 0;
        const next = ()=>{
            const [i, length] = varint.decode(initialBytes.subarray(offset));
            offset += length;
            return i;
        };
        let version6 = next();
        let codec = DAG_PB_CODE;
        if (version6 === 18) {
            version6 = 0;
            offset = 0;
        } else if (version6 === 1) codec = next();
        if (version6 !== 0 && version6 !== 1) throw new RangeError(`Invalid CID version ${version6}`);
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
            version: version6,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
        };
    }
    static parse(source, base) {
        const [prefix, bytes6] = parseCIDtoBytes(source, base);
        const cid = CID.decode(bytes6);
        cid._baseCache.set(prefix, source);
        return cid;
    }
}
const parseCIDtoBytes = (source, base)=>{
    switch(source[0]){
        case "Q":
            {
                const decoder = base || base58.base58btc;
                return [
                    base58.base58btc.prefix,
                    decoder.decode(`${base58.base58btc.prefix}${source}`)
                ];
            }
        case base58.base58btc.prefix:
            {
                const decoder = base || base58.base58btc;
                return [
                    base58.base58btc.prefix,
                    decoder.decode(source)
                ];
            }
        case base32.base32.prefix:
            {
                const decoder = base || base32.base32;
                return [
                    base32.base32.prefix,
                    decoder.decode(source)
                ];
            }
        default:
            if (base == null) throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            return [
                source[0],
                base.decode(source)
            ];
    }
};
const toStringV0 = (bytes7, cache, base)=>{
    const { prefix  } = base;
    if (prefix !== base58.base58btc.prefix) throw Error(`Cannot string encode V0 in ${base.name} encoding`);
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid = base.encode(bytes7).slice(1);
        cache.set(prefix, cid);
        return cid;
    } else return cid;
};
const toStringV1 = (bytes8, cache, base)=>{
    const { prefix  } = base;
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid = base.encode(bytes8);
        cache.set(prefix, cid);
        return cid;
    } else return cid;
};
const DAG_PB_CODE = 112;
const SHA_256_CODE = 18;
const encodeCID = (version7, code, multihash)=>{
    const codeOffset = varint.encodingLength(version7);
    const hashOffset = codeOffset + varint.encodingLength(code);
    const bytes9 = new Uint8Array(hashOffset + multihash.byteLength);
    varint.encodeTo(version7, bytes9, 0);
    varint.encodeTo(code, bytes9, codeOffset);
    bytes9.set(multihash, hashOffset);
    return bytes9;
};
const cidSymbol = Symbol.for("@ipld/js-cid/CID");
const readonly = {
    writable: false,
    configurable: false,
    enumerable: true
};
const hidden = {
    writable: false,
    enumerable: false,
    configurable: false
};
const version = "0.0.0-dev";
const deprecate = (range, message)=>{
    if (range.test(version)) console.warn(message);
    else throw new Error(message);
};
const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
exports.CID = CID;

},{"./varint.js":"8P1F2","./hashes/digest.js":"9JdI8","./bases/base58.js":"9KkrI","./bases/base32.js":"apmz1","./bytes.js":"ent0w"}],"gVCsX":[function(require,module,exports) {
"use strict";
module.exports = {
    pk: require("./public-key")
};

},{"./public-key":"l1Jvg"}],"l1Jvg":[function(require,module,exports) {
"use strict";
const { sha256  } = require("multiformats/hashes/sha2");
const errcode = require("err-code");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
/**
 * Validator for public key records.
 * Verifies that the passed in record value is the PublicKey
 * that matches the passed in key.
 * If validation fails the returned Promise will reject with the error.
 *
 * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`
 * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).
 */ const validatePublicKeyRecord = async (key, publicKey)=>{
    if (!(key instanceof Uint8Array)) throw errcode(new Error('"key" must be a Uint8Array'), "ERR_INVALID_RECORD_KEY_NOT_BUFFER");
    if (key.byteLength < 5) throw errcode(new Error("invalid public key record"), "ERR_INVALID_RECORD_KEY_TOO_SHORT");
    const prefix = uint8ArrayToString(key.subarray(0, 4));
    if (prefix !== "/pk/") throw errcode(new Error("key was not prefixed with /pk/"), "ERR_INVALID_RECORD_KEY_BAD_PREFIX");
    const keyhash = key.slice(4);
    const publicKeyHash = await sha256.digest(publicKey);
    if (!uint8ArrayEquals(keyhash, publicKeyHash.bytes)) throw errcode(new Error("public key does not match passed in key"), "ERR_INVALID_RECORD_HASH_MISMATCH");
};
module.exports = {
    func: validatePublicKeyRecord,
    sign: false
};

},{"multiformats/hashes/sha2":"7U0mx","err-code":"dUrrM","uint8arrays/to-string":"w8mvE","uint8arrays/equals":"iZMnE"}],"iZMnE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function equals(a, b) {
    if (a === b) return true;
    if (a.byteLength !== b.byteLength) return false;
    for(let i = 0; i < a.byteLength; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
exports.equals = equals;

},{}],"j5LCC":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
/**
 * Select the best record out of the given records.
 *
 * @param {import('libp2p-interfaces/src/types').DhtSelectors} selectors
 * @param {Uint8Array} k
 * @param {Array<Uint8Array>} records
 */ const bestRecord = (selectors, k, records)=>{
    if (records.length === 0) {
        const errMsg = "No records given";
        throw errcode(new Error(errMsg), "ERR_NO_RECORDS_RECEIVED");
    }
    const kStr = uint8ArrayToString(k);
    const parts = kStr.split("/");
    if (parts.length < 3) {
        const errMsg = "Record key does not have a selector function";
        throw errcode(new Error(errMsg), "ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY");
    }
    const selector = selectors[parts[1].toString()];
    if (!selector) {
        const errMsg = `Unrecognized key prefix: ${parts[1]}`;
        throw errcode(new Error(errMsg), "ERR_UNRECOGNIZED_KEY_PREFIX");
    }
    if (records.length === 1) return 0;
    return selector(k, records);
};
module.exports = {
    bestRecord: bestRecord,
    selectors: require("./selectors")
};

},{"err-code":"dUrrM","uint8arrays/to-string":"w8mvE","./selectors":"fDPNw"}],"fDPNw":[function(require,module,exports) {
"use strict";
module.exports = {
    pk: require("./public-key")
};

},{"./public-key":"f4evm"}],"f4evm":[function(require,module,exports) {
"use strict";
/**
 * Best record selector, for public key records.
 * Simply returns the first record, as all valid public key
 * records are equal.
 *
 * @param {Uint8Array} k
 * @param {Array<Uint8Array>} records
 */ const publicKeySelector = (k, records)=>{
    return 0;
};
module.exports = publicKeySelector;

},{}],"ijjFd":[function(require,module,exports) {
"use strict";
/**
 * @typedef {import('./types').Datastore} Datastore
 * @typedef {import('./types').Batch} Batch
 * @typedef {import('interface-store').Options} Options
 * @typedef {import('./types').Query} Query
 * @typedef {import('./types').QueryFilter} QueryFilter
 * @typedef {import('./types').QueryOrder} QueryOrder
 * @typedef {import('./types').KeyQuery} KeyQuery
 * @typedef {import('./types').KeyQueryFilter} KeyQueryFilter
 * @typedef {import('./types').KeyQueryOrder} KeyQueryOrder
 * @typedef {import('./types').Pair} Pair
 */ const Key = require("./key");
const MemoryDatastore = require("./memory");
const utils = require("./utils");
const Errors = require("./errors");
const Adapter = require("./adapter");
module.exports = {
    Key,
    MemoryDatastore,
    utils,
    Errors,
    Adapter
};

},{"./key":"4I6vO","./memory":"iwg8X","./utils":"hOsvf","./errors":"4OBPI","./adapter":"ewyzH"}],"4I6vO":[function(require,module,exports) {
"use strict";
const { nanoid  } = require("nanoid");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const pathSepS = "/";
const pathSepB = new TextEncoder().encode(pathSepS);
const pathSep = pathSepB[0];
/**
 * A Key represents the unique identifier of an object.
 * Our Key scheme is inspired by file systems and Google App Engine key model.
 * Keys are meant to be unique across a system. Keys are hierarchical,
 * incorporating more and more specific namespaces. Thus keys can be deemed
 * 'children' or 'ancestors' of other keys:
 * - `new Key('/Comedy')`
 * - `new Key('/Comedy/MontyPython')`
 * Also, every namespace can be parametrized to embed relevant object
 * information. For example, the Key `name` (most specific namespace) could
 * include the object type:
 * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`
 *
 */ class Key {
    /**
   * @param {string | Uint8Array} s
   * @param {boolean} [clean]
   */ constructor(s, clean){
        if (typeof s === "string") this._buf = uint8ArrayFromString(s);
        else if (s instanceof Uint8Array) this._buf = s;
        else throw new Error("Invalid key, should be String of Uint8Array");
        if (clean == null) clean = true;
        if (clean) this.clean();
        if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) throw new Error("Invalid key");
    }
    /**
   * Convert to the string representation
   *
   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.
   * @returns {string}
   */ toString(encoding = "utf8") {
        return uint8ArrayToString(this._buf, encoding);
    }
    /**
   * Return the Uint8Array representation of the key
   *
   * @returns {Uint8Array}
   */ uint8Array() {
        return this._buf;
    }
    /**
   * Return string representation of the key
   *
   * @returns {string}
   */ get [Symbol.toStringTag]() {
        return `Key(${this.toString()})`;
    }
    /**
   * Constructs a key out of a namespace array.
   *
   * @param {Array<string>} list - The array of namespaces
   * @returns {Key}
   *
   * @example
   * ```js
   * Key.withNamespaces(['one', 'two'])
   * // => Key('/one/two')
   * ```
   */ static withNamespaces(list) {
        return new Key(list.join(pathSepS));
    }
    /**
   * Returns a randomly (uuid) generated key.
   *
   * @returns {Key}
   *
   * @example
   * ```js
   * Key.random()
   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')
   * ```
   */ static random() {
        return new Key(nanoid().replace(/-/g, ""));
    }
    /**
   * @param {*} other
   */ static asKey(other) {
        if (other instanceof Uint8Array || typeof other === "string") // we can create a key from this
        return new Key(other);
        if (other.uint8Array) // this is an older version or may have crossed the esm/cjs boundary
        return new Key(other.uint8Array());
        return null;
    }
    /**
   * Cleanup the current key
   *
   * @returns {void}
   */ clean() {
        if (!this._buf || this._buf.byteLength === 0) this._buf = pathSepB;
        if (this._buf[0] !== pathSep) {
            const bytes = new Uint8Array(this._buf.byteLength + 1);
            bytes.fill(pathSep, 0, 1);
            bytes.set(this._buf, 1);
            this._buf = bytes;
        }
        // normalize does not remove trailing slashes
        while(this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep)this._buf = this._buf.subarray(0, -1);
    }
    /**
   * Check if the given key is sorted lower than ourself.
   *
   * @param {Key} key - The other Key to check against
   * @returns {boolean}
   */ less(key) {
        const list1 = this.list();
        const list2 = key.list();
        for(let i = 0; i < list1.length; i++){
            if (list2.length < i + 1) return false;
            const c1 = list1[i];
            const c2 = list2[i];
            if (c1 < c2) return true;
            else if (c1 > c2) return false;
        }
        return list1.length < list2.length;
    }
    /**
   * Returns the key with all parts in reversed order.
   *
   * @returns {Key}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()
   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')
   * ```
   */ reverse() {
        return Key.withNamespaces(this.list().slice().reverse());
    }
    /**
   * Returns the `namespaces` making up this Key.
   *
   * @returns {Array<string>}
   */ namespaces() {
        return this.list();
    }
    /** Returns the "base" namespace of this key.
   *
   * @returns {string}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()
   * // => 'Actor:JohnCleese'
   * ```
   */ baseNamespace() {
        const ns = this.namespaces();
        return ns[ns.length - 1];
    }
    /**
   * Returns the `list` representation of this key.
   *
   * @returns {Array<string>}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()
   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']
   * ```
   */ list() {
        return this.toString().split(pathSepS).slice(1);
    }
    /**
   * Returns the "type" of this key (value of last namespace).
   *
   * @returns {string}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()
   * // => 'Actor'
   * ```
   */ type() {
        return namespaceType(this.baseNamespace());
    }
    /**
   * Returns the "name" of this key (field of last namespace).
   *
   * @returns {string}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()
   * // => 'JohnCleese'
   * ```
   */ name() {
        return namespaceValue(this.baseNamespace());
    }
    /**
   * Returns an "instance" of this type key (appends value to namespace).
   *
   * @param {string} s - The string to append.
   * @returns {Key}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')
   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
   * ```
   */ instance(s) {
        return new Key(this.toString() + ":" + s);
    }
    /**
   * Returns the "path" of this key (parent + type).
   *
   * @returns {Key}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()
   * // => Key('/Comedy/MontyPython/Actor')
   * ```
   */ path() {
        let p = this.parent().toString();
        if (!p.endsWith(pathSepS)) p += pathSepS;
        p += this.type();
        return new Key(p);
    }
    /**
   * Returns the `parent` Key of this Key.
   *
   * @returns {Key}
   *
   * @example
   * ```js
   * new Key("/Comedy/MontyPython/Actor:JohnCleese").parent()
   * // => Key("/Comedy/MontyPython")
   * ```
   */ parent() {
        const list = this.list();
        if (list.length === 1) return new Key(pathSepS);
        return new Key(list.slice(0, -1).join(pathSepS));
    }
    /**
   * Returns the `child` Key of this Key.
   *
   * @param {Key} key - The child Key to add
   * @returns {Key}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))
   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
   * ```
   */ child(key) {
        if (this.toString() === pathSepS) return key;
        else if (key.toString() === pathSepS) return this;
        return new Key(this.toString() + key.toString(), false);
    }
    /**
   * Returns whether this key is a prefix of `other`
   *
   * @param {Key} other - The other key to test against
   * @returns {boolean}
   *
   * @example
   * ```js
   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')
   * // => true
   * ```
   */ isAncestorOf(other) {
        if (other.toString() === this.toString()) return false;
        return other.toString().startsWith(this.toString());
    }
    /**
   * Returns whether this key is a contains another as prefix.
   *
   * @param {Key} other - The other Key to test against
   * @returns {boolean}
   *
   * @example
   * ```js
   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')
   * // => true
   * ```
   */ isDecendantOf(other) {
        if (other.toString() === this.toString()) return false;
        return this.toString().startsWith(other.toString());
    }
    /**
   * Checks if this key has only one namespace.
   *
   * @returns {boolean}
   *
   */ isTopLevel() {
        return this.list().length === 1;
    }
    /**
   * Concats one or more Keys into one new Key.
   *
   * @param {Array<Key>} keys - The array of keys to concatenate
   * @returns {Key}
   */ concat(...keys) {
        return Key.withNamespaces([
            ...this.namespaces(),
            ...flatten(keys.map((key)=>key.namespaces()))
        ]);
    }
}
/**
 * The first component of a namespace. `foo` in `foo:bar`
 *
 * @param {string} ns
 * @returns {string}
 */ function namespaceType(ns) {
    const parts = ns.split(":");
    if (parts.length < 2) return "";
    return parts.slice(0, -1).join(":");
}
/**
 * The last component of a namespace, `baz` in `foo:bar:baz`.
 *
 * @param {string} ns
 * @returns {string}
 */ function namespaceValue(ns) {
    const parts = ns.split(":");
    return parts[parts.length - 1];
}
/**
 * Flatten array of arrays (only one level)
 *
 * @template T
 * @param {Array<T|T[]>} arr
 * @returns {T[]}
 */ function flatten(arr) {
    return /** @type {T[]} */ [].concat(...arr);
}
module.exports = Key;

},{"nanoid":"2ifus","uint8arrays/to-string":"w8mvE","uint8arrays/from-string":"7qjkp"}],"2ifus":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nanoid", ()=>nanoid);
parcelHelpers.export(exports, "customAlphabet", ()=>customAlphabet);
parcelHelpers.export(exports, "customRandom", ()=>customRandom);
parcelHelpers.export(exports, "urlAlphabet", ()=>(0, _indexJs.urlAlphabet));
parcelHelpers.export(exports, "random", ()=>random);
var _indexJs = require("./url-alphabet/index.js");
let random = (bytes)=>crypto.getRandomValues(new Uint8Array(bytes));
let customRandom = (alphabet, defaultSize, getRandom)=>{
    let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
    let step = -~(1.6 * mask * defaultSize / alphabet.length);
    return (size = defaultSize)=>{
        let id = "";
        while(true){
            let bytes = getRandom(step);
            let j = step;
            while(j--){
                id += alphabet[bytes[j] & mask] || "";
                if (id.length === size) return id;
            }
        }
    };
};
let customAlphabet = (alphabet, size = 21)=>customRandom(alphabet, size, random);
let nanoid = (size = 21)=>crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte)=>{
        byte &= 63;
        if (byte < 36) id += byte.toString(36);
        else if (byte < 62) id += (byte - 26).toString(36).toUpperCase();
        else if (byte > 62) id += "-";
        else id += "_";
        return id;
    }, "");

},{"./url-alphabet/index.js":"8jQFj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8jQFj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "urlAlphabet", ()=>urlAlphabet);
let urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7qjkp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bases = require("./util/bases.js");
function fromString(string, encoding = "utf8") {
    const base = bases[encoding];
    if (!base) throw new Error(`Unsupported encoding "${encoding}"`);
    return base.decoder.decode(`${base.prefix}${string}`);
}
exports.fromString = fromString;

},{"./util/bases.js":"ekopG"}],"iwg8X":[function(require,module,exports) {
"use strict";
const Key = require("./key");
const Adapter = require("./adapter");
const Errors = require("./errors");
/**
 * @typedef {import('./types').Pair} Pair
 * @typedef {import('./types').Datastore} Datastore
 * @typedef {import('interface-store').Options} Options
 */ /**
 * @class MemoryDatastore
 * @implements {Datastore}
 */ class MemoryDatastore extends Adapter {
    constructor(){
        super();
        /** @type {Record<string, Uint8Array>} */ this.data = {};
    }
    open() {
        return Promise.resolve();
    }
    close() {
        return Promise.resolve();
    }
    /**
   * @param {Key} key
   * @param {Uint8Array} val
   */ async put(key, val) {
        this.data[key.toString()] = val;
    }
    /**
   * @param {Key} key
   */ async get(key) {
        const exists = await this.has(key);
        if (!exists) throw Errors.notFoundError();
        return this.data[key.toString()];
    }
    /**
   * @param {Key} key
   */ async has(key) {
        return this.data[key.toString()] !== undefined;
    }
    /**
   * @param {Key} key
   */ async delete(key) {
        delete this.data[key.toString()];
    }
    async *_all() {
        yield* Object.entries(this.data).map(([key, value])=>({
                key: new Key(key),
                value
            }));
    }
    async *_allKeys() {
        yield* Object.entries(this.data).map(([key])=>new Key(key));
    }
}
module.exports = MemoryDatastore;

},{"./key":"4I6vO","./adapter":"ewyzH","./errors":"4OBPI"}],"ewyzH":[function(require,module,exports) {
"use strict";
const { sortAll  } = require("./utils");
const drain = require("it-drain");
const filter = require("it-filter");
const take = require("it-take");
/**
 * @typedef {import('interface-store').Options} Options
 * @typedef {import('./key')} Key
 * @typedef {import('./types').Pair} Pair
 * @typedef {import('./types').Datastore} Datastore
 * @typedef {import('./types').Query} Query
 * @typedef {import('./types').KeyQuery} KeyQuery
 * @typedef {import('./types').Batch} Batch
 */ /**
 * @template O
 * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable
 */ /**
 * @implements {Datastore}
 */ class Adapter {
    /**
   * @returns {Promise<void>}
   */ open() {
        return Promise.reject(new Error(".open is not implemented"));
    }
    /**
   * @returns {Promise<void>}
   */ close() {
        return Promise.reject(new Error(".close is not implemented"));
    }
    /**
   * @param {Key} key
   * @param {Uint8Array} val
   * @param {Options} [options]
   * @returns {Promise<void>}
   */ put(key, val, options) {
        return Promise.reject(new Error(".put is not implemented"));
    }
    /**
   * @param {Key} key
   * @param {Options} [options]
   * @returns {Promise<Uint8Array>}
   */ get(key, options) {
        return Promise.reject(new Error(".get is not implemented"));
    }
    /**
   * @param {Key} key
   * @param {Options} [options]
   * @returns {Promise<boolean>}
   */ has(key, options) {
        return Promise.reject(new Error(".has is not implemented"));
    }
    /**
   * @param {Key} key
   * @param {Options} [options]
   * @returns {Promise<void>}
   */ delete(key, options) {
        return Promise.reject(new Error(".delete is not implemented"));
    }
    /**
   * @param {AwaitIterable<Pair>} source
   * @param {Options} [options]
   * @returns {AsyncIterable<Pair>}
   */ async *putMany(source, options = {}) {
        for await (const { key , value  } of source){
            await this.put(key, value, options);
            yield {
                key,
                value
            };
        }
    }
    /**
   * @param {AwaitIterable<Key>} source
   * @param {Options} [options]
   * @returns {AsyncIterable<Uint8Array>}
   */ async *getMany(source, options = {}) {
        for await (const key of source)yield this.get(key, options);
    }
    /**
   * @param {AwaitIterable<Key>} source
   * @param {Options} [options]
   * @returns {AsyncIterable<Key>}
   */ async *deleteMany(source, options = {}) {
        for await (const key of source){
            await this.delete(key, options);
            yield key;
        }
    }
    /**
   * @returns {Batch}
   */ batch() {
        /** @type {Pair[]} */ let puts = [];
        /** @type {Key[]} */ let dels = [];
        return {
            put (key, value) {
                puts.push({
                    key,
                    value
                });
            },
            delete (key) {
                dels.push(key);
            },
            commit: async (options)=>{
                await drain(this.putMany(puts, options));
                puts = [];
                await drain(this.deleteMany(dels, options));
                dels = [];
            }
        };
    }
    /**
   * Extending classes should override `query` or implement this method
   *
   * @param {Query} q
   * @param {Options} [options]
   * @returns {AsyncIterable<Pair>}
   */ // eslint-disable-next-line require-yield
    async *_all(q, options) {
        throw new Error("._all is not implemented");
    }
    /**
   * Extending classes should override `queryKeys` or implement this method
   *
   * @param {KeyQuery} q
   * @param {Options} [options]
   * @returns {AsyncIterable<Key>}
   */ // eslint-disable-next-line require-yield
    async *_allKeys(q, options) {
        throw new Error("._allKeys is not implemented");
    }
    /**
   * @param {Query} q
   * @param {Options} [options]
   */ query(q, options) {
        let it1 = this._all(q, options);
        if (q.prefix != null) it1 = filter(it1, (e)=>e.key.toString().startsWith(q.prefix));
        if (Array.isArray(q.filters)) it1 = q.filters.reduce((it, f)=>filter(it, f), it1);
        if (Array.isArray(q.orders)) it1 = q.orders.reduce((it, f)=>sortAll(it, f), it1);
        if (q.offset != null) {
            let i = 0;
            it1 = filter(it1, ()=>(i++) >= q.offset);
        }
        if (q.limit != null) it1 = take(it1, q.limit);
        return it1;
    }
    /**
   * @param {KeyQuery} q
   * @param {Options} [options]
   */ queryKeys(q, options) {
        let it2 = this._allKeys(q, options);
        if (q.prefix != null) it2 = filter(it2, (key)=>key.toString().startsWith(q.prefix));
        if (Array.isArray(q.filters)) it2 = q.filters.reduce((it, f)=>filter(it, f), it2);
        if (Array.isArray(q.orders)) it2 = q.orders.reduce((it, f)=>sortAll(it, f), it2);
        if (q.offset != null) {
            let i = 0;
            it2 = filter(it2, ()=>(i++) >= q.offset);
        }
        if (q.limit != null) it2 = take(it2, q.limit);
        return it2;
    }
}
module.exports = Adapter;

},{"./utils":"hOsvf","it-drain":"5xgCg","it-filter":"SXQVc","it-take":"4PIw8"}],"hOsvf":[function(require,module,exports) {
"use strict";
const tempdir = require("ipfs-utils/src/temp-dir");
const all = require("it-all");
/**
 * Collect all values from the iterable and sort them using
 * the passed sorter function
 *
 * @template T
 * @param {AsyncIterable<T> | Iterable<T>} iterable
 * @param {(a: T, b: T) => -1 | 0 | 1} sorter
 * @returns {AsyncIterable<T>}
 */ const sortAll = (iterable, sorter)=>{
    return async function*() {
        const values = await all(iterable);
        yield* values.sort(sorter);
    }();
};
/**
 * @param {string} s
 * @param {string} r
 */ const replaceStartWith = (s, r)=>{
    const matcher = new RegExp("^" + r);
    return s.replace(matcher, "");
};
module.exports = {
    sortAll,
    tmpdir: tempdir,
    replaceStartWith
};

},{"ipfs-utils/src/temp-dir":"3WMvE","it-all":"3roGN"}],"3WMvE":[function(require,module,exports) {
"use strict";
const { nanoid  } = require("nanoid");
/**
 * Temporary folder
 *
 * @param {(uuid: string) => string} transform - Transform function to add prefixes or sufixes to the unique id
 * @returns {string} - Full real path to a temporary folder
 */ const tempdir = (transform = (d)=>d)=>{
    return transform(nanoid());
};
module.exports = tempdir;

},{"nanoid":"2ifus"}],"3roGN":[function(require,module,exports) {
"use strict";
/**
 * Collects all values from an (async) iterable into an array and returns it.
 *
 * @template T
 * @param {AsyncIterable<T>|Iterable<T>} source
 */ const all = async (source)=>{
    const arr = [];
    for await (const entry of source)arr.push(entry);
    return arr;
};
module.exports = all;

},{}],"5xgCg":[function(require,module,exports) {
"use strict";
/**
 * Drains an (async) iterable discarding its' content and does not return
 * anything.
 *
 * @template T
 * @param {AsyncIterable<T>|Iterable<T>} source
 * @returns {Promise<void>}
 */ const drain = async (source)=>{
    for await (const _ of source); // eslint-disable-line no-unused-vars,no-empty
};
module.exports = drain;

},{}],"SXQVc":[function(require,module,exports) {
"use strict";
/**
 * Filters the passed (async) iterable by using the filter function
 *
 * @template T
 * @param {AsyncIterable<T>|Iterable<T>} source
 * @param {function(T):boolean|Promise<boolean>} fn
 */ const filter = async function*(source, fn) {
    for await (const entry of source)if (await fn(entry)) yield entry;
};
module.exports = filter;

},{}],"4PIw8":[function(require,module,exports) {
"use strict";
/**
 * Stop iteration after n items have been received.
 *
 * @template T
 * @param {AsyncIterable<T>|Iterable<T>} source
 * @param {number} limit
 * @returns {AsyncIterable<T>}
 */ const take = async function*(source, limit) {
    let items = 0;
    if (limit < 1) return;
    for await (const entry of source){
        yield entry;
        items++;
        if (items === limit) return;
    }
};
module.exports = take;

},{}],"4OBPI":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
/**
 * @param {Error} [err]
 */ function dbOpenFailedError(err) {
    err = err || new Error("Cannot open database");
    return errCode(err, "ERR_DB_OPEN_FAILED");
}
/**
 * @param {Error} [err]
 */ function dbDeleteFailedError(err) {
    err = err || new Error("Delete failed");
    return errCode(err, "ERR_DB_DELETE_FAILED");
}
/**
 * @param {Error} [err]
 */ function dbWriteFailedError(err) {
    err = err || new Error("Write failed");
    return errCode(err, "ERR_DB_WRITE_FAILED");
}
/**
 * @param {Error} [err]
 */ function notFoundError(err) {
    err = err || new Error("Not Found");
    return errCode(err, "ERR_NOT_FOUND");
}
/**
 * @param {Error} [err]
 */ function abortedError(err) {
    err = err || new Error("Aborted");
    return errCode(err, "ERR_ABORTED");
}
module.exports = {
    dbOpenFailedError,
    dbDeleteFailedError,
    dbWriteFailedError,
    notFoundError,
    abortedError
};

},{"err-code":"dUrrM"}],"fvUSe":[function(require,module,exports) {
"use strict";
// @ts-ignore
const KBucket = require("k-bucket");
const utils = require("./utils");
/**
 * @typedef {import('peer-id')} PeerId
 *
 * @typedef {object} KBucketPeer
 * @property {Uint8Array} id
 * @property {PeerId} peer
 */ /**
 * A wrapper around `k-bucket`, to provide easy store and
 * retrieval for peers.
 */ class RoutingTable {
    /**
   * @param {PeerId} self
   * @param {number} kBucketSize
   */ constructor(self, kBucketSize){
        this.self = self;
        this._onPing = this._onPing.bind(this);
        this._onInit(kBucketSize);
    }
    /**
   * @param {number} kBucketSize
   */ async _onInit(kBucketSize) {
        const selfKey = await utils.convertPeerId(this.self);
        this.kb = new KBucket({
            localNodeId: selfKey,
            numberOfNodesPerKBucket: kBucketSize,
            numberOfNodesToPing: 1
        });
        this.kb.on("ping", this._onPing);
    }
    /**
   * Called on the `ping` event from `k-bucket`.
   * Currently this just removes the oldest contact from
   * the list, without actually pinging the individual peers.
   * This is the same as go does, but should probably
   * be upgraded to actually ping the individual peers.
   *
   * @param {KBucketPeer[]} oldContacts
   * @param {KBucketPeer} newContact
   */ _onPing(oldContacts, newContact) {
        // just use the first one (k-bucket sorts from oldest to newest)
        const oldest = oldContacts[0];
        if (oldest) // remove the oldest one
        this.kb.remove(oldest.id);
        // add the new one
        this.kb.add(newContact);
    }
    // -- Public Interface
    /**
   * Amount of currently stored peers.
   */ get size() {
        return this.kb.count();
    }
    /**
   * Find a specific peer by id.
   *
   * @param {PeerId} peer
   * @returns {Promise<PeerId | undefined>}
   */ async find(peer) {
        const key = await utils.convertPeerId(peer);
        const closest = this.closestPeer(key);
        if (closest && peer.equals(closest)) return closest;
    }
    /**
   * Retrieve the closest peers to the given key.
   *
   * @param {Uint8Array} key
   */ closestPeer(key) {
        const res = this.closestPeers(key, 1);
        if (res.length > 0) return res[0];
    }
    /**
   * Retrieve the `count`-closest peers to the given key.
   *
   * @param {Uint8Array} key
   * @param {number} count
   */ closestPeers(key, count) {
        /** @type {KBucketPeer[]} */ const closest = this.kb.closest(key, count);
        return closest.map((p)=>p.peer);
    }
    /**
   * Add or update the routing table with the given peer.
   *
   * @param {PeerId} peer
   */ async add(peer) {
        const id = await utils.convertPeerId(peer);
        this.kb.add({
            id: id,
            peer: peer
        });
    }
    /**
   * Remove a given peer from the table.
   *
   * @param {PeerId} peer
   */ async remove(peer) {
        const id = await utils.convertPeerId(peer);
        this.kb.remove(id);
    }
}
module.exports = RoutingTable;

},{"k-bucket":"x8LNd","./utils":"1wrtw"}],"x8LNd":[function(require,module,exports) {
/*
index.js - Kademlia DHT K-bucket implementation as a binary tree.

The MIT License (MIT)

Copyright (c) 2013-2021 Tristan Slominski

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/ "use strict";
const randomBytes = require("randombytes");
const { EventEmitter  } = require("events");
/**
 * @param  {Uint8Array} array1
 * @param  {Uint8Array} array2
 * @return {Boolean}
 */ function arrayEquals(array1, array2) {
    if (array1 === array2) return true;
    if (array1.length !== array2.length) return false;
    for(let i = 0, length = array1.length; i < length; ++i){
        if (array1[i] !== array2[i]) return false;
    }
    return true;
}
function createNode() {
    return {
        contacts: [],
        dontSplit: false,
        left: null,
        right: null
    };
}
function ensureInt8(name, val) {
    if (!(val instanceof Uint8Array)) throw new TypeError(name + " is not a Uint8Array");
}
/**
 * Implementation of a Kademlia DHT k-bucket used for storing
 * contact (peer node) information.
 *
 * @extends EventEmitter
 */ class KBucket extends EventEmitter {
    /**
   * `options`:
   *   `distance`: _Function_
   *     `function (firstId, secondId) { return distance }` An optional
   *     `distance` function that gets two `id` Uint8Arrays
   *     and return distance (as number) between them.
   *   `arbiter`: _Function_ _(Default: vectorClock arbiter)_
   *     `function (incumbent, candidate) { return contact; }` An optional
   *     `arbiter` function that givent two `contact` objects with the same `id`
   *     returns the desired object to be used for updating the k-bucket. For
   *     more details, see [arbiter function](#arbiter-function).
   *   `localNodeId`: _Uint8Array_ An optional Uint8Array representing the local node id.
   *     If not provided, a local node id will be created via `randomBytes(20)`.
   *     `metadata`: _Object_ _(Default: {})_ Optional satellite data to include
   *     with the k-bucket. `metadata` property is guaranteed not be altered by,
   *     it is provided as an explicit container for users of k-bucket to store
   *     implementation-specific data.
   *   `numberOfNodesPerKBucket`: _Integer_ _(Default: 20)_ The number of nodes
   *     that a k-bucket can contain before being full or split.
   *     `numberOfNodesToPing`: _Integer_ _(Default: 3)_ The number of nodes to
   *     ping when a bucket that should not be split becomes full. KBucket will
   *     emit a `ping` event that contains `numberOfNodesToPing` nodes that have
   *     not been contacted the longest.
   *
   * @param {Object=} options optional
   */ constructor(options = {}){
        super();
        this.localNodeId = options.localNodeId || randomBytes(20);
        this.numberOfNodesPerKBucket = options.numberOfNodesPerKBucket || 20;
        this.numberOfNodesToPing = options.numberOfNodesToPing || 3;
        this.distance = options.distance || KBucket.distance;
        // use an arbiter from options or vectorClock arbiter by default
        this.arbiter = options.arbiter || KBucket.arbiter;
        this.metadata = Object.assign({}, options.metadata);
        ensureInt8("option.localNodeId as parameter 1", this.localNodeId);
        this.root = createNode();
    }
    /**
   * Default arbiter function for contacts with the same id. Uses
   * contact.vectorClock to select which contact to update the k-bucket with.
   * Contact with larger vectorClock field will be selected. If vectorClock is
   * the same, candidat will be selected.
   *
   * @param  {Object} incumbent Contact currently stored in the k-bucket.
   * @param  {Object} candidate Contact being added to the k-bucket.
   * @return {Object}           Contact to updated the k-bucket with.
   */ static arbiter(incumbent, candidate) {
        return incumbent.vectorClock > candidate.vectorClock ? incumbent : candidate;
    }
    /**
   * Default distance function. Finds the XOR
   * distance between firstId and secondId.
   *
   * @param  {Uint8Array} firstId  Uint8Array containing first id.
   * @param  {Uint8Array} secondId Uint8Array containing second id.
   * @return {Number}              Integer The XOR distance between firstId
   *                               and secondId.
   */ static distance(firstId, secondId) {
        let distance = 0;
        let i = 0;
        const min = Math.min(firstId.length, secondId.length);
        const max = Math.max(firstId.length, secondId.length);
        for(; i < min; ++i)distance = distance * 256 + (firstId[i] ^ secondId[i]);
        for(; i < max; ++i)distance = distance * 256 + 255;
        return distance;
    }
    /**
   * Adds a contact to the k-bucket.
   *
   * @param {Object} contact the contact object to add
   */ add(contact) {
        ensureInt8("contact.id", (contact || {}).id);
        let bitIndex = 0;
        let node = this.root;
        while(node.contacts === null)// this is not a leaf node but an inner node with 'low' and 'high'
        // branches; we will check the appropriate bit of the identifier and
        // delegate to the appropriate node for further processing
        node = this._determineNode(node, contact.id, bitIndex++);
        // check if the contact already exists
        const index = this._indexOf(node, contact.id);
        if (index >= 0) {
            this._update(node, index, contact);
            return this;
        }
        if (node.contacts.length < this.numberOfNodesPerKBucket) {
            node.contacts.push(contact);
            this.emit("added", contact);
            return this;
        }
        // the bucket is full
        if (node.dontSplit) {
            // we are not allowed to split the bucket
            // we need to ping the first this.numberOfNodesToPing
            // in order to determine if they are alive
            // only if one of the pinged nodes does not respond, can the new contact
            // be added (this prevents DoS flodding with new invalid contacts)
            this.emit("ping", node.contacts.slice(0, this.numberOfNodesToPing), contact);
            return this;
        }
        this._split(node, bitIndex);
        return this.add(contact);
    }
    /**
   * Get the n closest contacts to the provided node id. "Closest" here means:
   * closest according to the XOR metric of the contact node id.
   *
   * @param  {Uint8Array} id  Contact node id
   * @param  {Number=} n      Integer (Default: Infinity) The maximum number of
   *                          closest contacts to return
   * @return {Array}          Array Maximum of n closest contacts to the node id
   */ closest(id, n = Infinity) {
        ensureInt8("id", id);
        if (!Number.isInteger(n) && n !== Infinity || n <= 0) throw new TypeError("n is not positive number");
        let contacts = [];
        for(let nodes = [
            this.root
        ], bitIndex = 0; nodes.length > 0 && contacts.length < n;){
            const node = nodes.pop();
            if (node.contacts === null) {
                const detNode = this._determineNode(node, id, bitIndex++);
                nodes.push(node.left === detNode ? node.right : node.left);
                nodes.push(detNode);
            } else contacts = contacts.concat(node.contacts);
        }
        return contacts.map((a)=>[
                this.distance(a.id, id),
                a
            ]).sort((a, b)=>a[0] - b[0]).slice(0, n).map((a)=>a[1]);
    }
    /**
   * Counts the total number of contacts in the tree.
   *
   * @return {Number} The number of contacts held in the tree
   */ count() {
        // return this.toArray().length
        let count = 0;
        for(const nodes = [
            this.root
        ]; nodes.length > 0;){
            const node = nodes.pop();
            if (node.contacts === null) nodes.push(node.right, node.left);
            else count += node.contacts.length;
        }
        return count;
    }
    /**
   * Determines whether the id at the bitIndex is 0 or 1.
   * Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise
   *
   * @param  {Object} node     internal object that has 2 leafs: left and right
   * @param  {Uint8Array} id   Id to compare localNodeId with.
   * @param  {Number} bitIndex Integer (Default: 0) The bit index to which bit
   *                           to check in the id Uint8Array.
   * @return {Object}          left leaf if id at bitIndex is 0, right leaf otherwise.
   */ _determineNode(node, id, bitIndex) {
        // **NOTE** remember that id is a Uint8Array and has granularity of
        // bytes (8 bits), whereas the bitIndex is the _bit_ index (not byte)
        // id's that are too short are put in low bucket (1 byte = 8 bits)
        // (bitIndex >> 3) finds how many bytes the bitIndex describes
        // bitIndex % 8 checks if we have extra bits beyond byte multiples
        // if number of bytes is <= no. of bytes described by bitIndex and there
        // are extra bits to consider, this means id has less bits than what
        // bitIndex describes, id therefore is too short, and will be put in low
        // bucket
        const bytesDescribedByBitIndex = bitIndex >> 3;
        const bitIndexWithinByte = bitIndex % 8;
        if (id.length <= bytesDescribedByBitIndex && bitIndexWithinByte !== 0) return node.left;
        const byteUnderConsideration = id[bytesDescribedByBitIndex];
        // byteUnderConsideration is an integer from 0 to 255 represented by 8 bits
        // where 255 is 11111111 and 0 is 00000000
        // in order to find out whether the bit at bitIndexWithinByte is set
        // we construct (1 << (7 - bitIndexWithinByte)) which will consist
        // of all bits being 0, with only one bit set to 1
        // for example, if bitIndexWithinByte is 3, we will construct 00010000 by
        // (1 << (7 - 3)) -> (1 << 4) -> 16
        if (byteUnderConsideration & 1 << 7 - bitIndexWithinByte) return node.right;
        return node.left;
    }
    /**
   * Get a contact by its exact ID.
   * If this is a leaf, loop through the bucket contents and return the correct
   * contact if we have it or null if not. If this is an inner node, determine
   * which branch of the tree to traverse and repeat.
   *
   * @param  {Uint8Array} id The ID of the contact to fetch.
   * @return {Object|Null}   The contact if available, otherwise null
   */ get(id) {
        ensureInt8("id", id);
        let bitIndex = 0;
        let node = this.root;
        while(node.contacts === null)node = this._determineNode(node, id, bitIndex++);
        // index of uses contact id for matching
        const index = this._indexOf(node, id);
        return index >= 0 ? node.contacts[index] : null;
    }
    /**
   * Returns the index of the contact with provided
   * id if it exists, returns -1 otherwise.
   *
   * @param  {Object} node    internal object that has 2 leafs: left and right
   * @param  {Uint8Array} id  Contact node id.
   * @return {Number}         Integer Index of contact with provided id if it
   *                          exists, -1 otherwise.
   */ _indexOf(node, id) {
        for(let i = 0; i < node.contacts.length; ++i){
            if (arrayEquals(node.contacts[i].id, id)) return i;
        }
        return -1;
    }
    /**
   * Removes contact with the provided id.
   *
   * @param  {Uint8Array} id The ID of the contact to remove.
   * @return {Object}        The k-bucket itself.
   */ remove(id) {
        ensureInt8("the id as parameter 1", id);
        let bitIndex = 0;
        let node = this.root;
        while(node.contacts === null)node = this._determineNode(node, id, bitIndex++);
        const index = this._indexOf(node, id);
        if (index >= 0) {
            const contact = node.contacts.splice(index, 1)[0];
            this.emit("removed", contact);
        }
        return this;
    }
    /**
   * Splits the node, redistributes contacts to the new nodes, and marks the
   * node that was split as an inner node of the binary tree of nodes by
   * setting this.root.contacts = null
   *
   * @param  {Object} node     node for splitting
   * @param  {Number} bitIndex the bitIndex to which byte to check in the
   *                           Uint8Array for navigating the binary tree
   */ _split(node, bitIndex) {
        node.left = createNode();
        node.right = createNode();
        // redistribute existing contacts amongst the two newly created nodes
        for (const contact of node.contacts)this._determineNode(node, contact.id, bitIndex).contacts.push(contact);
        node.contacts = null // mark as inner tree node
        ;
        // don't split the "far away" node
        // we check where the local node would end up and mark the other one as
        // "dontSplit" (i.e. "far away")
        const detNode = this._determineNode(node, this.localNodeId, bitIndex);
        const otherNode = node.left === detNode ? node.right : node.left;
        otherNode.dontSplit = true;
    }
    /**
   * Returns all the contacts contained in the tree as an array.
   * If this is a leaf, return a copy of the bucket. If this is not a leaf,
   * return the union of the low and high branches (themselves also as arrays).
   *
   * @return {Array} All of the contacts in the tree, as an array
   */ toArray() {
        let result = [];
        for(const nodes = [
            this.root
        ]; nodes.length > 0;){
            const node = nodes.pop();
            if (node.contacts === null) nodes.push(node.right, node.left);
            else result = result.concat(node.contacts);
        }
        return result;
    }
    /**
   * Similar to `toArray()` but instead of buffering everything up into an
   * array before returning it, yields contacts as they are encountered while
   * walking the tree.
   *
   * @return {Iterable} All of the contacts in the tree, as an iterable
   */ *toIterable() {
        for(const nodes = [
            this.root
        ]; nodes.length > 0;){
            const node = nodes.pop();
            if (node.contacts === null) nodes.push(node.right, node.left);
            else yield* node.contacts;
        }
    }
    /**
   * Updates the contact selected by the arbiter.
   * If the selection is our old contact and the candidate is some new contact
   * then the new contact is abandoned (not added).
   * If the selection is our old contact and the candidate is our old contact
   * then we are refreshing the contact and it is marked as most recently
   * contacted (by being moved to the right/end of the bucket array).
   * If the selection is our new contact, the old contact is removed and the new
   * contact is marked as most recently contacted.
   *
   * @param  {Object} node    internal object that has 2 leafs: left and right
   * @param  {Number} index   the index in the bucket where contact exists
   *                          (index has already been computed in a previous
   *                          calculation)
   * @param  {Object} contact The contact object to update.
   */ _update(node, index, contact) {
        // sanity check
        if (!arrayEquals(node.contacts[index].id, contact.id)) throw new Error("wrong index for _update");
        const incumbent = node.contacts[index];
        const selection = this.arbiter(incumbent, contact);
        // if the selection is our old contact and the candidate is some new
        // contact, then there is nothing to do
        if (selection === incumbent && incumbent !== contact) return;
        node.contacts.splice(index, 1) // remove old contact
        ;
        node.contacts.push(selection) // add more recent contact version
        ;
        this.emit("updated", incumbent, selection);
    }
}
module.exports = KBucket;

},{"randombytes":"8hjhE","events":"1VQLm"}],"8hjhE":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var process = require("process");
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;
function oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
}
var Buffer = require("safe-buffer").Buffer;
var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) module.exports = randomBytes;
else module.exports = oldBrowser;
function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
    var bytes = Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        else crypto.getRandomValues(bytes);
    }
    if (typeof cb === "function") return process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

},{"process":"d5jf4","safe-buffer":"eW7r9"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"eW7r9":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("buffer");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"buffer":"fCgem"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("base64-js");
const ieee754 = require("ieee754");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength1 && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val = this[offset + --byteLength2];
    let mul = 1;
    while(byteLength2 > 0 && (mul *= 0x100))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength3 && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset >>> 0;
    byteLength4 = byteLength4 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    let i = byteLength4;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength5 = byteLength5 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength5 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength5;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength6 = byteLength6 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    let i = byteLength6 - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength6;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength7 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength7;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    let i = byteLength8 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength8;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength9) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength9] === undefined) boundsError(offset, buf.length - (byteLength9 + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength10) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength10 > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength10 + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength10 + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength10 + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength10);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len2; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i2 = start; i2 < end; i2 += 3){
        tmp = (uint8[i2] << 16 & 0xFF0000) + (uint8[i2 + 1] << 8 & 0xFF00) + (uint8[i2 + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len3 = uint8.length;
    var extraBytes = len3 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i3 = 0, len2 = len3 - extraBytes; i3 < len2; i3 += maxChunkLength)parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len2 ? len2 : i3 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len3 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len3 - 2] << 8) + uint8[len3 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"1wrtw":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const { sha256  } = require("multiformats/hashes/sha2");
const { base58btc  } = require("multiformats/bases/base58");
const { Key  } = require("interface-datastore");
// @ts-ignore
const distance = require("xor-distance");
const pMap = require("p-map");
const { Record  } = require("libp2p-record");
const PeerId = require("peer-id");
const errcode = require("err-code");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
const pTimeout = require("p-timeout");
/**
 * Creates a DHT ID by hashing a given Uint8Array.
 *
 * @param {Uint8Array} buf
 * @returns {Promise<Uint8Array>}
 */ exports.convertBuffer = async (buf)=>{
    return (await sha256.digest(buf)).digest;
};
/**
 * Creates a DHT ID by hashing a Peer ID
 *
 * @param {PeerId} peer
 * @returns {Promise<Uint8Array>}
 */ exports.convertPeerId = async (peer)=>{
    return (await sha256.digest(peer.id)).digest;
};
/**
 * Convert a Uint8Array to their SHA2-256 hash.
 *
 * @param {Uint8Array} buf
 * @returns {Key}
 */ exports.bufferToKey = (buf)=>{
    return new Key("/" + exports.encodeBase32(buf), false);
};
/**
 * Generate the key for a public key.
 *
 * @param {PeerId} peer
 * @returns {Uint8Array}
 */ exports.keyForPublicKey = (peer)=>{
    return uint8ArrayConcat([
        uint8ArrayFromString("/pk/"),
        peer.id
    ]);
};
/**
 * @param {Uint8Array} key
 */ exports.isPublicKeyKey = (key)=>{
    return uint8ArrayToString(key.slice(0, 4)) === "/pk/";
};
/**
 * @param {Uint8Array} key
 */ exports.fromPublicKeyKey = (key)=>{
    return new PeerId(key.slice(4));
};
/**
 * Get the current time as timestamp.
 *
 * @returns {number}
 */ exports.now = ()=>{
    return Date.now();
};
/**
 * Encode a given Uint8Array into a base32 string.
 *
 * @param {Uint8Array} buf
 * @returns {string}
 */ exports.encodeBase32 = (buf)=>{
    return uint8ArrayToString(buf, "base32");
};
/**
 * Decode a given base32 string into a Uint8Array.
 *
 * @param {string} raw
 * @returns {Uint8Array}
 */ exports.decodeBase32 = (raw)=>{
    return uint8ArrayFromString(raw, "base32");
};
/**
 * Sort peers by distance to the given `target`.
 *
 * @param {Array<PeerId>} peers
 * @param {Uint8Array} target
 */ exports.sortClosestPeers = async (peers, target)=>{
    const distances = await pMap(peers, async (peer)=>{
        const id = await exports.convertPeerId(peer);
        return {
            peer: peer,
            distance: distance(id, target)
        };
    });
    return distances.sort(exports.xorCompare).map((d)=>d.peer);
};
/**
 * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.
 *
 * @param {{ distance: Uint8Array }} a
 * @param {{ distance: Uint8Array }} b
 */ exports.xorCompare = (a, b)=>{
    return distance.compare(a.distance, b.distance);
};
/**
 * Computes how many results to collect on each disjoint path, rounding up.
 * This ensures that we look for at least one result per path.
 *
 * @param {number} resultsWanted
 * @param {number} numPaths - total number of paths
 */ exports.pathSize = (resultsWanted, numPaths)=>{
    return Math.ceil(resultsWanted / numPaths);
};
/**
 * Create a new put record, encodes and signs it if enabled.
 *
 * @param {Uint8Array} key
 * @param {Uint8Array} value
 * @returns {Uint8Array}
 */ exports.createPutRecord = (key, value)=>{
    const timeReceived = new Date();
    const rec = new Record(key, value, timeReceived);
    return rec.serialize();
};
/**
 * Creates a logger for the given subsystem
 *
 * @param {PeerId} [id]
 * @param {string} [subsystem]
 */ exports.logger = (id, subsystem)=>{
    const name = [
        "libp2p",
        "dht"
    ];
    if (subsystem) name.push(subsystem);
    if (id) name.push(`${id.toB58String().slice(0, 8)}`);
    // Add a formatter for converting to a base58 string
    debug.formatters.b = (v)=>{
        return base58btc.baseEncode(v);
    };
    const logger = Object.assign(debug(name.join(":")), {
        error: debug(name.concat([
            "error"
        ]).join(":"))
    });
    return logger;
};
exports.TimeoutError = class TimeoutError extends Error {
    get code() {
        return "ETIMEDOUT";
    }
};
/**
 * Creates an async function that calls the given `asyncFn` and Errors
 * if it does not resolve within `time` ms
 *
 * @template T
 * @param {(...args: any[]) => Promise<T>} asyncFn
 * @param {number} [time]
 */ exports.withTimeout = (asyncFn, time)=>{
    /**
   * @param  {...any} args
   * @returns {Promise<T>}
   */ async function timeoutFn(...args) {
        if (!time) return asyncFn(...args);
        let res;
        try {
            res = await pTimeout(asyncFn(...args), time);
        } catch (err) {
            if (err instanceof pTimeout.TimeoutError) throw errcode(err, "ETIMEDOUT");
            throw err;
        }
        return res;
    }
    return timeoutFn;
};
/**
 * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.
 * Returns a promise that resolves when all items of the `asyncIterator` have been passed
 * through `asyncFn`.
 *
 * @template T
 * @template O
 *
 * @param {AsyncIterable<T>} asyncIterator
 * @param {(arg0: T) => Promise<O>} asyncFn
 */ exports.mapParallel = async function(asyncIterator, asyncFn) {
    const tasks = [];
    for await (const item of asyncIterator)tasks.push(asyncFn(item));
    return Promise.all(tasks);
};

},{"debug":"l0oUb","multiformats/hashes/sha2":"7U0mx","multiformats/bases/base58":"9KkrI","interface-datastore":"ijjFd","xor-distance":"8gha1","p-map":"6cgrC","libp2p-record":"3iJYP","peer-id":"etBKN","err-code":"dUrrM","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE","uint8arrays/concat":"gqJ9u","p-timeout":"2j2Zi"}],"l0oUb":[function(require,module,exports) {
var process = require("process");
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) return true;
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) return;
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === "%%") return;
        index++;
        if (match === "%c") // We only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) exports.storage.setItem("debug", namespaces);
        else exports.storage.removeItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== "undefined" && "env" in process) r = undefined;
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = require("./common")(exports);
const { formatters  } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
    }
};

},{"process":"d5jf4","./common":"6Yq2n"}],"6Yq2n":[function(require,module,exports) {
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require("ms");
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) return;
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") // Anything else let's inspect with %O
            args.unshift("%O");
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === "%%") return "%";
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) return enableOverride;
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === "function") createDebug.init(debug);
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for(i = 0; i < len; i++){
            if (!split[i]) continue;
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            else createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace)=>"-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        if (name[name.length - 1] === "*") return true;
        let i;
        let len;
        for(i = 0, len = createDebug.skips.length; i < len; i++){
            if (createDebug.skips[i].test(name)) return false;
        }
        for(i = 0, len = createDebug.names.length; i < len; i++){
            if (createDebug.names[i].test(name)) return true;
        }
        return false;
    }
    /**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/ function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) return val.stack || val.message;
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;

},{"ms":"jauEe"}],"jauEe":[function(require,module,exports) {
/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) return parse(val);
    else if (type === "number" && isFinite(val)) return options.long ? fmtLong(val) : fmtShort(val);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) return;
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) return;
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch(type){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * y;
        case "weeks":
        case "week":
        case "w":
            return n * w;
        case "days":
        case "day":
        case "d":
            return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) return Math.round(ms / d) + "d";
    if (msAbs >= h) return Math.round(ms / h) + "h";
    if (msAbs >= m) return Math.round(ms / m) + "m";
    if (msAbs >= s) return Math.round(ms / s) + "s";
    return ms + "ms";
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) return plural(ms, msAbs, d, "day");
    if (msAbs >= h) return plural(ms, msAbs, h, "hour");
    if (msAbs >= m) return plural(ms, msAbs, m, "minute");
    if (msAbs >= s) return plural(ms, msAbs, s, "second");
    return ms + " ms";
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
}

},{}],"8gha1":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
module.exports = dist;
function dist(a, b) {
    if (a.length !== b.length) throw new Error("Inputs should have the same length");
    var result = Buffer.allocUnsafe(a.length);
    for(var i = 0; i < a.length; i++)result[i] = a[i] ^ b[i];
    return result;
}
dist.compare = function compare(a, b) {
    if (a.length !== b.length) throw new Error("Inputs should have the same length");
    for(var i = 0; i < a.length; i++){
        if (a[i] === b[i]) continue;
        return a[i] < b[i] ? -1 : 1;
    }
    return 0;
};
dist.gt = function gt(a, b) {
    return dist.compare(a, b) === 1;
};
dist.lt = function lt(a, b) {
    return dist.compare(a, b) === -1;
};
dist.eq = function eq(a, b) {
    return dist.compare(a, b) === 0;
};

},{"buffer":"fCgem"}],"6cgrC":[function(require,module,exports) {
"use strict";
const AggregateError = require("aggregate-error");
module.exports = async (iterable, mapper, { concurrency =Infinity , stopOnError =true  } = {})=>{
    return new Promise((resolve, reject)=>{
        if (typeof mapper !== "function") throw new TypeError("Mapper function is required");
        if (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${concurrency}\` (${typeof concurrency})`);
        const result = [];
        const errors = [];
        const iterator = iterable[Symbol.iterator]();
        let isRejected = false;
        let isIterableDone = false;
        let resolvingCount = 0;
        let currentIndex = 0;
        const next = ()=>{
            if (isRejected) return;
            const nextItem = iterator.next();
            const index = currentIndex;
            currentIndex++;
            if (nextItem.done) {
                isIterableDone = true;
                if (resolvingCount === 0) {
                    if (!stopOnError && errors.length !== 0) reject(new AggregateError(errors));
                    else resolve(result);
                }
                return;
            }
            resolvingCount++;
            (async ()=>{
                try {
                    const element = await nextItem.value;
                    result[index] = await mapper(element, index);
                    resolvingCount--;
                    next();
                } catch (error) {
                    if (stopOnError) {
                        isRejected = true;
                        reject(error);
                    } else {
                        errors.push(error);
                        resolvingCount--;
                        next();
                    }
                }
            })();
        };
        for(let i = 0; i < concurrency; i++){
            next();
            if (isIterableDone) break;
        }
    });
};

},{"aggregate-error":"f0pKK"}],"f0pKK":[function(require,module,exports) {
"use strict";
const indentString = require("indent-string");
const cleanStack = require("clean-stack");
const cleanInternalStack = (stack)=>stack.replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g, "");
class AggregateError extends Error {
    constructor(errors){
        if (!Array.isArray(errors)) throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);
        errors = [
            ...errors
        ].map((error)=>{
            if (error instanceof Error) return error;
            if (error !== null && typeof error === "object") // Handle plain error objects with message property and/or possibly other metadata
            return Object.assign(new Error(error.message), error);
            return new Error(error);
        });
        let message = errors.map((error)=>{
            // The `stack` property is not standardized, so we can't assume it exists
            return typeof error.stack === "string" ? cleanInternalStack(cleanStack(error.stack)) : String(error);
        }).join("\n");
        message = "\n" + indentString(message, 4);
        super(message);
        this.name = "AggregateError";
        Object.defineProperty(this, "_errors", {
            value: errors
        });
    }
    *[Symbol.iterator]() {
        for (const error of this._errors)yield error;
    }
}
module.exports = AggregateError;

},{"indent-string":"3hbwN","clean-stack":"8wTDb"}],"3hbwN":[function(require,module,exports) {
"use strict";
module.exports = (string, count = 1, options)=>{
    options = {
        indent: " ",
        includeEmptyLines: false,
        ...options
    };
    if (typeof string !== "string") throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string}\``);
    if (typeof count !== "number") throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);
    if (typeof options.indent !== "string") throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``);
    if (count === 0) return string;
    const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
    return string.replace(regex, options.indent.repeat(count));
};

},{}],"8wTDb":[function(require,module,exports) {
"use strict";
const os = require("os");
const extractPathRegex = /\s+at.*(?:\(|\s)(.*)\)?/;
const pathRegex = /^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)\.js:\d+:\d+)|native)/;
const homeDir = typeof os.homedir === "undefined" ? "" : os.homedir();
module.exports = (stack, options)=>{
    options = Object.assign({
        pretty: false
    }, options);
    return stack.replace(/\\/g, "/").split("\n").filter((line)=>{
        const pathMatches = line.match(extractPathRegex);
        if (pathMatches === null || !pathMatches[1]) return true;
        const match = pathMatches[1];
        // Electron
        if (match.includes(".app/Contents/Resources/electron.asar") || match.includes(".app/Contents/Resources/default_app.asar")) return false;
        return !pathRegex.test(match);
    }).filter((line)=>line.trim() !== "").map((line)=>{
        if (options.pretty) return line.replace(extractPathRegex, (m, p1)=>m.replace(p1, p1.replace(homeDir, "~")));
        return line;
    }).join("\n");
};

},{"os":"jhUEF"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"etBKN":[function(require,module,exports) {
/*
 * Id is an object representation of a peer Id. a peer Id is a multihash
 */ "use strict";
const { CID  } = require("multiformats/cid");
const b32 = require("multiformats/bases/base32");
const b36 = require("multiformats/bases/base36");
const b58 = require("multiformats/bases/base58");
const b64 = require("multiformats/bases/base64");
const { base58btc  } = require("multiformats/bases/base58");
const { base32  } = require("multiformats/bases/base32");
const { base16  } = require("multiformats/bases/base16");
const Digest = require("multiformats/hashes/digest");
const cryptoKeys = require("libp2p-crypto/src/keys");
const withIs = require("class-is");
const { PeerIdProto  } = require("./proto");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { identity  } = require("multiformats/hashes/identity");
const bases = {
    ...b32,
    ...b36,
    ...b58,
    ...b64
};
const baseDecoder = Object.keys(bases).reduce((acc, curr)=>acc.or(bases[curr]), base32.decoder);
// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv
const DAG_PB_CODE = 0x70;
const LIBP2P_KEY_CODE = 0x72;
class PeerId {
    constructor(id, privKey, pubKey){
        if (!(id instanceof Uint8Array)) throw new Error("invalid id provided");
        if (privKey && pubKey && !uint8ArrayEquals(privKey.public.bytes, pubKey.bytes)) throw new Error("inconsistent arguments");
        this._id = id;
        this._idB58String = base58btc.encode(this.id).substring(1);
        this._privKey = privKey;
        this._pubKey = pubKey;
    }
    get id() {
        return this._id;
    }
    set id(val) {
        throw new Error("Id is immutable");
    }
    get privKey() {
        return this._privKey;
    }
    set privKey(privKey) {
        this._privKey = privKey;
    }
    get pubKey() {
        if (this._pubKey) return this._pubKey;
        if (this._privKey) return this._privKey.public;
        try {
            const decoded = Digest.decode(this.id);
            if (decoded.code === identity.code) this._pubKey = cryptoKeys.unmarshalPublicKey(decoded.digest);
        } catch (_) {
        // Ignore, there is no valid public key
        }
        return this._pubKey;
    }
    set pubKey(pubKey) {
        this._pubKey = pubKey;
    }
    // Return the protobuf version of the public key, matching go ipfs formatting
    marshalPubKey() {
        if (this.pubKey) return cryptoKeys.marshalPublicKey(this.pubKey);
    }
    // Return the protobuf version of the private key, matching go ipfs formatting
    marshalPrivKey() {
        if (this.privKey) return cryptoKeys.marshalPrivateKey(this.privKey);
    }
    // Return the protobuf version of the peer-id
    marshal(excludePriv) {
        return PeerIdProto.encode({
            id: this.toBytes(),
            pubKey: this.marshalPubKey(),
            privKey: excludePriv ? null : this.marshalPrivKey()
        }).finish();
    }
    toPrint() {
        let pid = this.toB58String();
        // All sha256 nodes start with Qm
        // We can skip the Qm to make the peer.ID more useful
        if (pid.startsWith("Qm")) pid = pid.slice(2);
        let maxRunes = 6;
        if (pid.length < maxRunes) maxRunes = pid.length;
        return "<peer.ID " + pid.substr(0, maxRunes) + ">";
    }
    // return the jsonified version of the key, matching the formatting
    // of go-ipfs for its config file
    toJSON() {
        return {
            id: this.toB58String(),
            privKey: toB64Opt(this.marshalPrivKey()),
            pubKey: toB64Opt(this.marshalPubKey())
        };
    }
    // encode/decode functions
    toHexString() {
        return base16.encode(this.id).substring(1);
    }
    toBytes() {
        return this.id;
    }
    toB58String() {
        return this._idB58String;
    }
    // return self-describing String representation
    // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209
    toString() {
        if (!this._idCIDString) {
            const cid = CID.createV1(LIBP2P_KEY_CODE, Digest.decode(this.id));
            Object.defineProperty(this, "_idCIDString", {
                value: cid.toString(),
                enumerable: false
            });
        }
        return this._idCIDString;
    }
    /**
   * Checks the equality of `this` peer against a given PeerId.
   *
   * @param {Uint8Array|PeerId} id
   * @returns {boolean}
   */ equals(id) {
        if (id instanceof Uint8Array) return uint8ArrayEquals(this.id, id);
        else if (id.id) return uint8ArrayEquals(this.id, id.id);
        else throw new Error("not valid Id");
    }
    /**
   * Checks the equality of `this` peer against a given PeerId.
   *
   * @deprecated Use `.equals`
   * @param {Uint8Array|PeerId} id
   * @returns {boolean}
   */ isEqual(id) {
        return this.equals(id);
    }
    /*
   * Check if this PeerId instance is valid (privKey -> pubKey -> Id)
   */ isValid() {
        // TODO: needs better checking
        return Boolean(this.privKey && this.privKey.public && this.privKey.public.bytes && this.pubKey.bytes instanceof Uint8Array && uint8ArrayEquals(this.privKey.public.bytes, this.pubKey.bytes));
    }
    /**
   * Check if the PeerId has an inline public key.
   *
   * @returns {boolean}
   */ hasInlinePublicKey() {
        try {
            const decoded = Digest.decode(this.id);
            if (decoded.code === identity.code) return true;
        } catch (_) {
        // Ignore, there is no valid public key
        }
        return false;
    }
}
const PeerIdWithIs = withIs(PeerId, {
    className: "PeerId",
    symbolName: "@libp2p/js-peer-id/PeerId"
});
exports = module.exports = PeerIdWithIs;
const computeDigest = (pubKey)=>{
    if (pubKey.bytes.length <= 42) return Digest.create(identity.code, pubKey.bytes).bytes;
    else return pubKey.hash();
};
const computePeerId = async (privKey, pubKey)=>{
    const digest = await computeDigest(pubKey);
    return new PeerIdWithIs(digest, privKey, pubKey);
};
// generation
exports.create = async (opts)=>{
    opts = opts || {};
    opts.bits = opts.bits || 2048;
    opts.keyType = opts.keyType || "RSA";
    const key = await cryptoKeys.generateKeyPair(opts.keyType, opts.bits);
    return computePeerId(key, key.public);
};
exports.createFromHexString = (str)=>{
    return new PeerIdWithIs(base16.decode("f" + str));
};
exports.createFromBytes = (buf)=>{
    try {
        const cid = CID.decode(buf);
        if (!validMulticodec(cid)) throw new Error("Supplied PeerID CID is invalid");
        return exports.createFromCID(cid);
    } catch  {
        const digest = Digest.decode(buf);
        if (digest.code !== identity.code) throw new Error("Supplied PeerID CID is invalid");
        return new PeerIdWithIs(buf);
    }
};
exports.createFromB58String = (str)=>{
    return exports.createFromBytes(base58btc.decode("z" + str));
};
const validMulticodec = (cid)=>{
    // supported: 'libp2p-key' (CIDv1) and 'dag-pb' (CIDv0 converted to CIDv1)
    return cid.code === LIBP2P_KEY_CODE || cid.code === DAG_PB_CODE;
};
exports.createFromCID = (cid)=>{
    cid = CID.asCID(cid);
    if (!cid || !validMulticodec(cid)) throw new Error("Supplied PeerID CID is invalid");
    return new PeerIdWithIs(cid.multihash.bytes);
};
// Public Key input will be a Uint8Array
exports.createFromPubKey = async (key)=>{
    let buf = key;
    if (typeof buf === "string") buf = uint8ArrayFromString(key, "base64pad");
    if (!(buf instanceof Uint8Array)) throw new Error("Supplied key is neither a base64 string nor a Uint8Array");
    const pubKey = await cryptoKeys.unmarshalPublicKey(buf);
    return computePeerId(undefined, pubKey);
};
// Private key input will be a string
exports.createFromPrivKey = async (key)=>{
    if (typeof key === "string") key = uint8ArrayFromString(key, "base64pad");
    if (!(key instanceof Uint8Array)) throw new Error("Supplied key is neither a base64 string nor a Uint8Array");
    const privKey = await cryptoKeys.unmarshalPrivateKey(key);
    return computePeerId(privKey, privKey.public);
};
exports.createFromJSON = async (obj)=>{
    const id = base58btc.decode("z" + obj.id);
    const rawPrivKey = obj.privKey && uint8ArrayFromString(obj.privKey, "base64pad");
    const rawPubKey = obj.pubKey && uint8ArrayFromString(obj.pubKey, "base64pad");
    const pub = rawPubKey && await cryptoKeys.unmarshalPublicKey(rawPubKey);
    if (!rawPrivKey) return new PeerIdWithIs(id, undefined, pub);
    const privKey = await cryptoKeys.unmarshalPrivateKey(rawPrivKey);
    const privDigest = await computeDigest(privKey.public);
    let pubDigest;
    if (pub) pubDigest = await computeDigest(pub);
    if (pub && !uint8ArrayEquals(privDigest, pubDigest)) throw new Error("Public and private key do not match");
    if (id && !uint8ArrayEquals(privDigest, id)) throw new Error("Id and private key do not match");
    return new PeerIdWithIs(id, privKey, pub);
};
exports.createFromProtobuf = async (buf)=>{
    if (typeof buf === "string") buf = uint8ArrayFromString(buf, "base16");
    let { id , privKey , pubKey  } = PeerIdProto.decode(buf);
    privKey = privKey ? await cryptoKeys.unmarshalPrivateKey(privKey) : false;
    pubKey = pubKey ? await cryptoKeys.unmarshalPublicKey(pubKey) : false;
    let pubDigest;
    let privDigest;
    if (privKey) privDigest = await computeDigest(privKey.public);
    if (pubKey) pubDigest = await computeDigest(pubKey);
    if (privKey) {
        if (pubKey) {
            if (!uint8ArrayEquals(privDigest, pubDigest)) throw new Error("Public and private key do not match");
        }
        return new PeerIdWithIs(privDigest, privKey, privKey.public);
    }
    // TODO: val id and pubDigest
    if (pubKey) return new PeerIdWithIs(pubDigest, undefined, pubKey);
    if (id) return new PeerIdWithIs(id);
    throw new Error("Protobuf did not contain any usable key material");
};
exports.parse = (str)=>{
    if (str.charAt(0) === "1" || str.charAt(0) === "Q") // identity hash ed25519 key or sha2-256 hash of rsa public key
    // base58btc encoded either way
    str = `z${str}`;
    return exports.createFromBytes(baseDecoder.decode(str));
};
exports.isPeerId = (peerId)=>{
    return Boolean(typeof peerId === "object" && peerId._id && peerId._idB58String);
};
function toB64Opt(val) {
    if (val) return uint8ArrayToString(val, "base64pad");
}

},{"multiformats/cid":"4uoBU","multiformats/bases/base32":"apmz1","multiformats/bases/base36":"22c8Y","multiformats/bases/base58":"9KkrI","multiformats/bases/base64":"3gCnk","multiformats/bases/base16":"e5DKK","multiformats/hashes/digest":"9JdI8","libp2p-crypto/src/keys":"aOOrg","class-is":"50lkq","./proto":"cvXS0","uint8arrays/equals":"iZMnE","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE","multiformats/hashes/identity":"bj4ky"}],"aOOrg":[function(require,module,exports) {
"use strict";
const keysPBM = require("./keys");
require("node-forge/lib/asn1");
require("node-forge/lib/pbe");
const forge = require("node-forge/lib/forge");
const errcode = require("err-code");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const importer = require("./importer");
const supportedKeys = {
    rsa: require("./rsa-class"),
    ed25519: require("./ed25519-class"),
    secp256k1: require("./secp256k1-class")(keysPBM, require("../random-bytes"))
};
const ErrMissingSecp256K1 = {
    message: "secp256k1 support requires libp2p-crypto-secp256k1 package",
    code: "ERR_MISSING_PACKAGE"
};
function typeToKey(type) {
    const key = supportedKeys[type.toLowerCase()];
    if (!key) {
        const supported = Object.keys(supportedKeys).join(" / ");
        throw errcode(new Error(`invalid or unsupported key type ${type}. Must be ${supported}`), "ERR_UNSUPPORTED_KEY_TYPE");
    }
    return key;
}
// Generates a keypair of the given type and bitsize
const generateKeyPair = async (type, bits)=>{
    return typeToKey(type).generateKeyPair(bits);
};
// Generates a keypair of the given type and bitsize
// seed is a 32 byte uint8array
const generateKeyPairFromSeed = async (type, seed, bits)=>{
    const key = typeToKey(type);
    if (type.toLowerCase() !== "ed25519") throw errcode(new Error("Seed key derivation is unimplemented for RSA or secp256k1"), "ERR_UNSUPPORTED_KEY_DERIVATION_TYPE");
    return key.generateKeyPairFromSeed(seed, bits);
};
// Converts a protobuf serialized public key into its
// representative object
const unmarshalPublicKey = (buf)=>{
    const decoded = keysPBM.PublicKey.decode(buf);
    const data = decoded.Data;
    switch(decoded.Type){
        case keysPBM.KeyType.RSA:
            return supportedKeys.rsa.unmarshalRsaPublicKey(data);
        case keysPBM.KeyType.Ed25519:
            return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);
        case keysPBM.KeyType.Secp256k1:
            if (supportedKeys.secp256k1) return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);
            else throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);
        default:
            typeToKey(decoded.Type) // throws because type is not supported
            ;
    }
};
// Converts a public key object into a protobuf serialized public key
const marshalPublicKey = (key, type)=>{
    type = (type || "rsa").toLowerCase();
    typeToKey(type) // check type
    ;
    return key.bytes;
};
// Converts a protobuf serialized private key into its
// representative object
const unmarshalPrivateKey = async (buf)=>{
    const decoded = keysPBM.PrivateKey.decode(buf);
    const data = decoded.Data;
    switch(decoded.Type){
        case keysPBM.KeyType.RSA:
            return supportedKeys.rsa.unmarshalRsaPrivateKey(data);
        case keysPBM.KeyType.Ed25519:
            return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);
        case keysPBM.KeyType.Secp256k1:
            if (supportedKeys.secp256k1) return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);
            else throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);
        default:
            typeToKey(decoded.Type) // throws because type is not supported
            ;
    }
};
// Converts a private key object into a protobuf serialized private key
const marshalPrivateKey = (key, type)=>{
    type = (type || "rsa").toLowerCase();
    typeToKey(type) // check type
    ;
    return key.bytes;
};
/**
 *
 * @param {string} encryptedKey
 * @param {string} password
 */ const importKey = async (encryptedKey, password)=>{
    try {
        const key = await importer.import(encryptedKey, password);
        return unmarshalPrivateKey(key);
    } catch (_) {
    // Ignore and try the old pem decrypt
    }
    // Only rsa supports pem right now
    const key = forge.pki.decryptRsaPrivateKey(encryptedKey, password);
    if (key === null) throw errcode(new Error("Cannot read the key, most likely the password is wrong or not a RSA key"), "ERR_CANNOT_DECRYPT_PEM");
    let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));
    der = uint8ArrayFromString(der.getBytes(), "ascii");
    return supportedKeys.rsa.unmarshalRsaPrivateKey(der);
};
module.exports = {
    supportedKeys,
    keysPBM,
    keyStretcher: require("./key-stretcher"),
    generateEphemeralKeyPair: require("./ephemeral-keys"),
    generateKeyPair,
    generateKeyPairFromSeed,
    unmarshalPublicKey,
    marshalPublicKey,
    unmarshalPrivateKey,
    marshalPrivateKey,
    import: importKey
};

},{"./keys":"7wzSQ","node-forge/lib/asn1":"G8i2L","node-forge/lib/pbe":"AvWMf","node-forge/lib/forge":"9OMxz","err-code":"dUrrM","uint8arrays/from-string":"7qjkp","./importer":"chiVn","./rsa-class":"cYLUT","./ed25519-class":"bmWj6","./secp256k1-class":"2agOQ","../random-bytes":"hLp1E","./key-stretcher":"97lWA","./ephemeral-keys":"99rTS"}],"7wzSQ":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-crypto-keys"] || ($protobuf.roots["libp2p-crypto-keys"] = {});
/**
 * KeyType enum.
 * @exports KeyType
 * @enum {number}
 * @property {number} RSA=0 RSA value
 * @property {number} Ed25519=1 Ed25519 value
 * @property {number} Secp256k1=2 Secp256k1 value
 */ $root.KeyType = function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "RSA"] = 0;
    values[valuesById[1] = "Ed25519"] = 1;
    values[valuesById[2] = "Secp256k1"] = 2;
    return values;
}();
$root.PublicKey = function() {
    /**
     * Properties of a PublicKey.
     * @exports IPublicKey
     * @interface IPublicKey
     * @property {KeyType} Type PublicKey Type
     * @property {Uint8Array} Data PublicKey Data
     */ /**
     * Constructs a new PublicKey.
     * @exports PublicKey
     * @classdesc Represents a PublicKey.
     * @implements IPublicKey
     * @constructor
     * @param {IPublicKey=} [p] Properties to set
     */ function PublicKey(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * PublicKey Type.
     * @member {KeyType} Type
     * @memberof PublicKey
     * @instance
     */ PublicKey.prototype.Type = 0;
    /**
     * PublicKey Data.
     * @member {Uint8Array} Data
     * @memberof PublicKey
     * @instance
     */ PublicKey.prototype.Data = $util.newBuffer([]);
    /**
     * Encodes the specified PublicKey message. Does not implicitly {@link PublicKey.verify|verify} messages.
     * @function encode
     * @memberof PublicKey
     * @static
     * @param {IPublicKey} m PublicKey message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ PublicKey.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        w.uint32(8).int32(m.Type);
        w.uint32(18).bytes(m.Data);
        return w;
    };
    /**
     * Decodes a PublicKey message from the specified reader or buffer.
     * @function decode
     * @memberof PublicKey
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {PublicKey} PublicKey
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ PublicKey.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.PublicKey();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.Type = r.int32();
                    break;
                case 2:
                    m.Data = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        if (!m.hasOwnProperty("Type")) throw $util.ProtocolError("missing required 'Type'", {
            instance: m
        });
        if (!m.hasOwnProperty("Data")) throw $util.ProtocolError("missing required 'Data'", {
            instance: m
        });
        return m;
    };
    /**
     * Creates a PublicKey message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PublicKey
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {PublicKey} PublicKey
     */ PublicKey.fromObject = function fromObject(d) {
        if (d instanceof $root.PublicKey) return d;
        var m = new $root.PublicKey();
        switch(d.Type){
            case "RSA":
            case 0:
                m.Type = 0;
                break;
            case "Ed25519":
            case 1:
                m.Type = 1;
                break;
            case "Secp256k1":
            case 2:
                m.Type = 2;
                break;
        }
        if (d.Data != null) {
            if (typeof d.Data === "string") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);
            else if (d.Data.length) m.Data = d.Data;
        }
        return m;
    };
    /**
     * Creates a plain object from a PublicKey message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PublicKey
     * @static
     * @param {PublicKey} m PublicKey
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ PublicKey.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            d.Type = o.enums === String ? "RSA" : 0;
            if (o.bytes === String) d.Data = "";
            else {
                d.Data = [];
                if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);
            }
        }
        if (m.Type != null && m.hasOwnProperty("Type")) d.Type = o.enums === String ? $root.KeyType[m.Type] : m.Type;
        if (m.Data != null && m.hasOwnProperty("Data")) d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
        return d;
    };
    /**
     * Converts this PublicKey to JSON.
     * @function toJSON
     * @memberof PublicKey
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ PublicKey.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PublicKey;
}();
$root.PrivateKey = function() {
    /**
     * Properties of a PrivateKey.
     * @exports IPrivateKey
     * @interface IPrivateKey
     * @property {KeyType} Type PrivateKey Type
     * @property {Uint8Array} Data PrivateKey Data
     */ /**
     * Constructs a new PrivateKey.
     * @exports PrivateKey
     * @classdesc Represents a PrivateKey.
     * @implements IPrivateKey
     * @constructor
     * @param {IPrivateKey=} [p] Properties to set
     */ function PrivateKey(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * PrivateKey Type.
     * @member {KeyType} Type
     * @memberof PrivateKey
     * @instance
     */ PrivateKey.prototype.Type = 0;
    /**
     * PrivateKey Data.
     * @member {Uint8Array} Data
     * @memberof PrivateKey
     * @instance
     */ PrivateKey.prototype.Data = $util.newBuffer([]);
    /**
     * Encodes the specified PrivateKey message. Does not implicitly {@link PrivateKey.verify|verify} messages.
     * @function encode
     * @memberof PrivateKey
     * @static
     * @param {IPrivateKey} m PrivateKey message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ PrivateKey.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        w.uint32(8).int32(m.Type);
        w.uint32(18).bytes(m.Data);
        return w;
    };
    /**
     * Decodes a PrivateKey message from the specified reader or buffer.
     * @function decode
     * @memberof PrivateKey
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {PrivateKey} PrivateKey
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ PrivateKey.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.PrivateKey();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.Type = r.int32();
                    break;
                case 2:
                    m.Data = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        if (!m.hasOwnProperty("Type")) throw $util.ProtocolError("missing required 'Type'", {
            instance: m
        });
        if (!m.hasOwnProperty("Data")) throw $util.ProtocolError("missing required 'Data'", {
            instance: m
        });
        return m;
    };
    /**
     * Creates a PrivateKey message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PrivateKey
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {PrivateKey} PrivateKey
     */ PrivateKey.fromObject = function fromObject(d) {
        if (d instanceof $root.PrivateKey) return d;
        var m = new $root.PrivateKey();
        switch(d.Type){
            case "RSA":
            case 0:
                m.Type = 0;
                break;
            case "Ed25519":
            case 1:
                m.Type = 1;
                break;
            case "Secp256k1":
            case 2:
                m.Type = 2;
                break;
        }
        if (d.Data != null) {
            if (typeof d.Data === "string") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);
            else if (d.Data.length) m.Data = d.Data;
        }
        return m;
    };
    /**
     * Creates a plain object from a PrivateKey message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PrivateKey
     * @static
     * @param {PrivateKey} m PrivateKey
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ PrivateKey.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            d.Type = o.enums === String ? "RSA" : 0;
            if (o.bytes === String) d.Data = "";
            else {
                d.Data = [];
                if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);
            }
        }
        if (m.Type != null && m.hasOwnProperty("Type")) d.Type = o.enums === String ? $root.KeyType[m.Type] : m.Type;
        if (m.Data != null && m.hasOwnProperty("Data")) d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
        return d;
    };
    /**
     * Converts this PrivateKey to JSON.
     * @function toJSON
     * @memberof PrivateKey
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ PrivateKey.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PrivateKey;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"G8i2L":[function(require,module,exports) {
/**
 * Javascript implementation of Abstract Syntax Notation Number One.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 *
 * An API for storing data using the Abstract Syntax Notation Number One
 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
 * implementation exists for that purpose.
 *
 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
 * syntax of information without restricting the way the information is encoded
 * for transmission. It provides a standard that allows for open systems
 * communication. ASN.1 defines the syntax of information data and a number of
 * simple data types as well as a notation for describing them and specifying
 * values for them.
 *
 * The RSA algorithm creates public and private keys that are often stored in
 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
 * class provides the most basic functionality required to store and load DSA
 * keys that are encoded according to ASN.1.
 *
 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
 * has stricter requirements for how data must be encoded.
 *
 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
 * and a byte array for the value of this ASN1 structure which may be data or a
 * list of ASN.1 structures.
 *
 * Each ASN.1 structure using BER is (Tag-Length-Value):
 *
 * | byte 0 | bytes X | bytes Y |
 * |--------|---------|----------
 * |  tag   | length  |  value  |
 *
 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
 * be two or more octets, but that is not supported by this class. A tag is
 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
 * particular 'class'), 6 indicates whether or not the ASN.1 value is
 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
 * then the class is APPLICATION. If only bit 8 is set, then the class is
 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
 * The tag numbers for the data types for the class UNIVERSAL are listed below:
 *
 * UNIVERSAL 0 Reserved for use by the encoding rules
 * UNIVERSAL 1 Boolean type
 * UNIVERSAL 2 Integer type
 * UNIVERSAL 3 Bitstring type
 * UNIVERSAL 4 Octetstring type
 * UNIVERSAL 5 Null type
 * UNIVERSAL 6 Object identifier type
 * UNIVERSAL 7 Object descriptor type
 * UNIVERSAL 8 External type and Instance-of type
 * UNIVERSAL 9 Real type
 * UNIVERSAL 10 Enumerated type
 * UNIVERSAL 11 Embedded-pdv type
 * UNIVERSAL 12 UTF8String type
 * UNIVERSAL 13 Relative object identifier type
 * UNIVERSAL 14-15 Reserved for future editions
 * UNIVERSAL 16 Sequence and Sequence-of types
 * UNIVERSAL 17 Set and Set-of types
 * UNIVERSAL 18-22, 25-30 Character string types
 * UNIVERSAL 23-24 Time types
 *
 * The length of an ASN.1 structure is specified after the tag identifier.
 * There is a definite form and an indefinite form. The indefinite form may
 * be used if the encoding is constructed and not all immediately available.
 * The indefinite form is encoded using a length byte with only the 8th bit
 * set. The end of the constructed object is marked using end-of-contents
 * octets (two zero bytes).
 *
 * The definite form looks like this:
 *
 * The length may take up 1 or more bytes, it depends on the length of the
 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
 * structure has a value that has a length greater than 127, more than 1 byte
 * will be used to store its length, otherwise just one byte will be used.
 * This is strict.
 *
 * In the case that the length of the ASN.1 value is less than 127, 1 octet
 * (byte) is used to store the "short form" length. The 8th bit has a value of
 * 0 indicating the length is "short form" and not "long form" and bits 7-1
 * give the length of the data. (The 8th bit is the left-most, most significant
 * bit: also known as big endian or network format).
 *
 * In the case that the length of the ASN.1 value is greater than 127, 2 to
 * 127 octets (bytes) are used to store the "long form" length. The first
 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
 * give the number of additional octets. All following octets are in base 256
 * with the most significant digit first (typical big-endian binary unsigned
 * integer storage). So, for instance, if the length of a value was 257, the
 * first byte would be set to:
 *
 * 10000010 = 130 = 0x82.
 *
 * This indicates there are 2 octets (base 256) for the length. The second and
 * third bytes (the octets just mentioned) would store the length in base 256:
 *
 * octet 2: 00000001 = 1 * 256^1 = 256
 * octet 3: 00000001 = 1 * 256^0 = 1
 * total = 257
 *
 * The algorithm for converting a js integer value of 257 to base-256 is:
 *
 * var value = 257;
 * var bytes = [];
 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
 * bytes[1] = value & 0xFF;        // least significant byte last
 *
 * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
 *
 * An OID can be written like: "value1.value2.value3...valueN"
 *
 * The DER encoding rules:
 *
 * The first byte has the value 40 * value1 + value2.
 * The following bytes, if any, encode the remaining values. Each value is
 * encoded in base 128, most significant digit first (big endian), with as
 * few digits as possible, and the most significant bit of each byte set
 * to 1 except the last in each value's encoding. For example: Given the
 * OID "1.2.840.113549", its DER encoding is (remember each byte except the
 * last one in each encoding is OR'd with 0x80):
 *
 * byte 1: 40 * 1 + 2 = 42 = 0x2A.
 * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
 * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
 *
 * The final value is: 0x2A864886F70D.
 * The full OID (including ASN.1 tag and length of 6 bytes) is:
 * 0x06062A864886F70D
 */ var forge = require("./forge");
require("./util");
require("./oids");
/* ASN.1 API */ var asn1 = module.exports = forge.asn1 = forge.asn1 || {};
/**
 * ASN.1 classes.
 */ asn1.Class = {
    UNIVERSAL: 0x00,
    APPLICATION: 0x40,
    CONTEXT_SPECIFIC: 0x80,
    PRIVATE: 0xC0
};
/**
 * ASN.1 types. Not all types are supported by this implementation, only
 * those necessary to implement a simple PKI are implemented.
 */ asn1.Type = {
    NONE: 0,
    BOOLEAN: 1,
    INTEGER: 2,
    BITSTRING: 3,
    OCTETSTRING: 4,
    NULL: 5,
    OID: 6,
    ODESC: 7,
    EXTERNAL: 8,
    REAL: 9,
    ENUMERATED: 10,
    EMBEDDED: 11,
    UTF8: 12,
    ROID: 13,
    SEQUENCE: 16,
    SET: 17,
    PRINTABLESTRING: 19,
    IA5STRING: 22,
    UTCTIME: 23,
    GENERALIZEDTIME: 24,
    BMPSTRING: 30
};
/**
 * Creates a new asn1 object.
 *
 * @param tagClass the tag class for the object.
 * @param type the data type (tag number) for the object.
 * @param constructed true if the asn1 object is in constructed form.
 * @param value the value for the object, if it is not constructed.
 * @param [options] the options to use:
 *          [bitStringContents] the plain BIT STRING content including padding
 *            byte.
 *
 * @return the asn1 object.
 */ asn1.create = function(tagClass, type, constructed, value, options) {
    /* An asn1 object has a tagClass, a type, a constructed flag, and a
    value. The value's type depends on the constructed flag. If
    constructed, it will contain a list of other asn1 objects. If not,
    it will contain the ASN.1 value as an array of bytes formatted
    according to the ASN.1 data type. */ // remove undefined values
    if (forge.util.isArray(value)) {
        var tmp = [];
        for(var i = 0; i < value.length; ++i)if (value[i] !== undefined) tmp.push(value[i]);
        value = tmp;
    }
    var obj = {
        tagClass: tagClass,
        type: type,
        constructed: constructed,
        composed: constructed || forge.util.isArray(value),
        value: value
    };
    if (options && "bitStringContents" in options) {
        // TODO: copy byte buffer if it's a buffer not a string
        obj.bitStringContents = options.bitStringContents;
        // TODO: add readonly flag to avoid this overhead
        // save copy to detect changes
        obj.original = asn1.copy(obj);
    }
    return obj;
};
/**
 * Copies an asn1 object.
 *
 * @param obj the asn1 object.
 * @param [options] copy options:
 *          [excludeBitStringContents] true to not copy bitStringContents
 *
 * @return the a copy of the asn1 object.
 */ asn1.copy = function(obj, options) {
    var copy;
    if (forge.util.isArray(obj)) {
        copy = [];
        for(var i = 0; i < obj.length; ++i)copy.push(asn1.copy(obj[i], options));
        return copy;
    }
    if (typeof obj === "string") // TODO: copy byte buffer if it's a buffer not a string
    return obj;
    copy = {
        tagClass: obj.tagClass,
        type: obj.type,
        constructed: obj.constructed,
        composed: obj.composed,
        value: asn1.copy(obj.value, options)
    };
    if (options && !options.excludeBitStringContents) // TODO: copy byte buffer if it's a buffer not a string
    copy.bitStringContents = obj.bitStringContents;
    return copy;
};
/**
 * Compares asn1 objects for equality.
 *
 * Note this function does not run in constant time.
 *
 * @param obj1 the first asn1 object.
 * @param obj2 the second asn1 object.
 * @param [options] compare options:
 *          [includeBitStringContents] true to compare bitStringContents
 *
 * @return true if the asn1 objects are equal.
 */ asn1.equals = function(obj1, obj2, options) {
    if (forge.util.isArray(obj1)) {
        if (!forge.util.isArray(obj2)) return false;
        if (obj1.length !== obj2.length) return false;
        for(var i = 0; i < obj1.length; ++i){
            if (!asn1.equals(obj1[i], obj2[i])) return false;
        }
        return true;
    }
    if (typeof obj1 !== typeof obj2) return false;
    if (typeof obj1 === "string") return obj1 === obj2;
    var equal = obj1.tagClass === obj2.tagClass && obj1.type === obj2.type && obj1.constructed === obj2.constructed && obj1.composed === obj2.composed && asn1.equals(obj1.value, obj2.value);
    if (options && options.includeBitStringContents) equal = equal && obj1.bitStringContents === obj2.bitStringContents;
    return equal;
};
/**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param b the BER-encoded ASN.1 byte buffer, starting with the first
 *          length byte.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */ asn1.getBerValueLength = function(b) {
    // TODO: move this function and related DER/BER functions to a der.js
    // file; better abstract ASN.1 away from der/ber.
    var b2 = b.getByte();
    if (b2 === 0x80) return undefined;
    // see if the length is "short form" or "long form" (bit 8 set)
    var length;
    var longForm = b2 & 0x80;
    if (!longForm) // length is just the first byte
    length = b2;
    else // the number of bytes the length is specified in bits 7 through 1
    // and each length byte is in big-endian base-256
    length = b.getInt((b2 & 0x7F) << 3);
    return length;
};
/**
 * Check if the byte buffer has enough bytes. Throws an Error if not.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 * @param n the number of bytes the buffer must have.
 */ function _checkBufferLength(bytes, remaining, n) {
    if (n > remaining) {
        var error = new Error("Too few bytes to parse DER.");
        error.available = bytes.length();
        error.remaining = remaining;
        error.requested = n;
        throw error;
    }
}
/**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */ var _getValueLength = function(bytes, remaining) {
    // TODO: move this function and related DER/BER functions to a der.js
    // file; better abstract ASN.1 away from der/ber.
    // fromDer already checked that this byte exists
    var b2 = bytes.getByte();
    remaining--;
    if (b2 === 0x80) return undefined;
    // see if the length is "short form" or "long form" (bit 8 set)
    var length;
    var longForm = b2 & 0x80;
    if (!longForm) // length is just the first byte
    length = b2;
    else {
        // the number of bytes the length is specified in bits 7 through 1
        // and each length byte is in big-endian base-256
        var longFormBytes = b2 & 0x7F;
        _checkBufferLength(bytes, remaining, longFormBytes);
        length = bytes.getInt(longFormBytes << 3);
    }
    // FIXME: this will only happen for 32 bit getInt with high bit set
    if (length < 0) throw new Error("Negative length: " + length);
    return length;
};
/**
 * Parses an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param [strict] true to be strict when checking value lengths, false to
 *          allow truncated values (default: true).
 * @param [options] object with options or boolean strict flag
 *          [strict] true to be strict when checking value lengths, false to
 *            allow truncated values (default: true).
 *          [decodeBitStrings] true to attempt to decode the content of
 *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that
 *            without schema support to understand the data context this can
 *            erroneously decode values that happen to be valid ASN.1. This
 *            flag will be deprecated or removed as soon as schema support is
 *            available. (default: true)
 *
 * @return the parsed asn1 object.
 */ asn1.fromDer = function(bytes, options) {
    if (options === undefined) options = {
        strict: true,
        decodeBitStrings: true
    };
    if (typeof options === "boolean") options = {
        strict: options,
        decodeBitStrings: true
    };
    if (!("strict" in options)) options.strict = true;
    if (!("decodeBitStrings" in options)) options.decodeBitStrings = true;
    // wrap in buffer if needed
    if (typeof bytes === "string") bytes = forge.util.createBuffer(bytes);
    return _fromDer(bytes, bytes.length(), 0, options);
};
/**
 * Internal function to parse an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the number of bytes remaining for this chunk.
 * @param depth the current parsing depth.
 * @param options object with same options as fromDer().
 *
 * @return the parsed asn1 object.
 */ function _fromDer(bytes, remaining, depth, options) {
    // temporary storage for consumption calculations
    var start;
    // minimum length for ASN.1 DER structure is 2
    _checkBufferLength(bytes, remaining, 2);
    // get the first byte
    var b1 = bytes.getByte();
    // consumed one byte
    remaining--;
    // get the tag class
    var tagClass = b1 & 0xC0;
    // get the type (bits 1-5)
    var type = b1 & 0x1F;
    // get the variable value length and adjust remaining bytes
    start = bytes.length();
    var length = _getValueLength(bytes, remaining);
    remaining -= start - bytes.length();
    // ensure there are enough bytes to get the value
    if (length !== undefined && length > remaining) {
        if (options.strict) {
            var error = new Error("Too few bytes to read ASN.1 value.");
            error.available = bytes.length();
            error.remaining = remaining;
            error.requested = length;
            throw error;
        }
        // Note: be lenient with truncated values and use remaining state bytes
        length = remaining;
    }
    // value storage
    var value;
    // possible BIT STRING contents storage
    var bitStringContents;
    // constructed flag is bit 6 (32 = 0x20) of the first byte
    var constructed = (b1 & 0x20) === 0x20;
    if (constructed) {
        // parse child asn1 objects from the value
        value = [];
        if (length === undefined) // asn1 object of indefinite length, read until end tag
        for(;;){
            _checkBufferLength(bytes, remaining, 2);
            if (bytes.bytes(2) === String.fromCharCode(0, 0)) {
                bytes.getBytes(2);
                remaining -= 2;
                break;
            }
            start = bytes.length();
            value.push(_fromDer(bytes, remaining, depth + 1, options));
            remaining -= start - bytes.length();
        }
        else // parsing asn1 object of definite length
        while(length > 0){
            start = bytes.length();
            value.push(_fromDer(bytes, length, depth + 1, options));
            remaining -= start - bytes.length();
            length -= start - bytes.length();
        }
    }
    // if a BIT STRING, save the contents including padding
    if (value === undefined && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING) bitStringContents = bytes.bytes(length);
    // determine if a non-constructed value should be decoded as a composed
    // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)
    // can be used this way.
    if (value === undefined && options.decodeBitStrings && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING /*|| type === asn1.Type.OCTETSTRING*/  && length > 1) {
        // save read position
        var savedRead = bytes.read;
        var savedRemaining = remaining;
        var unused = 0;
        if (type === asn1.Type.BITSTRING) {
            /* The first octet gives the number of bits by which the length of the
        bit string is less than the next multiple of eight (this is called
        the "number of unused bits").

        The second and following octets give the value of the bit string
        converted to an octet string. */ _checkBufferLength(bytes, remaining, 1);
            unused = bytes.getByte();
            remaining--;
        }
        // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs
        if (unused === 0) try {
            // attempt to parse child asn1 object from the value
            // (stored in array to signal composed value)
            start = bytes.length();
            var subOptions = {
                // enforce strict mode to avoid parsing ASN.1 from plain data
                verbose: options.verbose,
                strict: true,
                decodeBitStrings: true
            };
            var composed = _fromDer(bytes, remaining, depth + 1, subOptions);
            var used = start - bytes.length();
            remaining -= used;
            if (type == asn1.Type.BITSTRING) used++;
            // if the data all decoded and the class indicates UNIVERSAL or
            // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object
            var tc = composed.tagClass;
            if (used === length && (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) value = [
                composed
            ];
        } catch (ex) {}
        if (value === undefined) {
            // restore read position
            bytes.read = savedRead;
            remaining = savedRemaining;
        }
    }
    if (value === undefined) {
        // asn1 not constructed or composed, get raw value
        // TODO: do DER to OID conversion and vice-versa in .toDer?
        if (length === undefined) {
            if (options.strict) throw new Error("Non-constructed ASN.1 object of indefinite length.");
            // be lenient and use remaining state bytes
            length = remaining;
        }
        if (type === asn1.Type.BMPSTRING) {
            value = "";
            for(; length > 0; length -= 2){
                _checkBufferLength(bytes, remaining, 2);
                value += String.fromCharCode(bytes.getInt16());
                remaining -= 2;
            }
        } else value = bytes.getBytes(length);
    }
    // add BIT STRING contents if available
    var asn1Options = bitStringContents === undefined ? null : {
        bitStringContents: bitStringContents
    };
    // create and return asn1 object
    return asn1.create(tagClass, type, constructed, value, asn1Options);
}
/**
 * Converts the given asn1 object to a buffer of bytes in DER format.
 *
 * @param asn1 the asn1 object to convert to bytes.
 *
 * @return the buffer of bytes.
 */ asn1.toDer = function(obj) {
    var bytes = forge.util.createBuffer();
    // build the first byte
    var b1 = obj.tagClass | obj.type;
    // for storing the ASN.1 value
    var value = forge.util.createBuffer();
    // use BIT STRING contents if available and data not changed
    var useBitStringContents = false;
    if ("bitStringContents" in obj) {
        useBitStringContents = true;
        if (obj.original) useBitStringContents = asn1.equals(obj, obj.original);
    }
    if (useBitStringContents) value.putBytes(obj.bitStringContents);
    else if (obj.composed) {
        // if composed, use each child asn1 object's DER bytes as value
        // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
        // from other asn1 objects
        if (obj.constructed) b1 |= 0x20;
        else // type is a bit string, add unused bits of 0x00
        value.putByte(0x00);
        // add all of the child DER bytes together
        for(var i = 0; i < obj.value.length; ++i)if (obj.value[i] !== undefined) value.putBuffer(asn1.toDer(obj.value[i]));
    } else {
        // use asn1.value directly
        if (obj.type === asn1.Type.BMPSTRING) for(var i = 0; i < obj.value.length; ++i)value.putInt16(obj.value.charCodeAt(i));
        else // ensure integer is minimally-encoded
        // TODO: should all leading bytes be stripped vs just one?
        // .. ex '00 00 01' => '01'?
        if (obj.type === asn1.Type.INTEGER && obj.value.length > 1 && (obj.value.charCodeAt(0) === 0 && (obj.value.charCodeAt(1) & 0x80) === 0 || obj.value.charCodeAt(0) === 0xFF && (obj.value.charCodeAt(1) & 0x80) === 0x80)) value.putBytes(obj.value.substr(1));
        else value.putBytes(obj.value);
    }
    // add tag byte
    bytes.putByte(b1);
    // use "short form" encoding
    if (value.length() <= 127) // one byte describes the length
    // bit 8 = 0 and bits 7-1 = length
    bytes.putByte(value.length() & 0x7F);
    else {
        // use "long form" encoding
        // 2 to 127 bytes describe the length
        // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
        // other bytes: length in base 256, big-endian
        var len = value.length();
        var lenBytes = "";
        do {
            lenBytes += String.fromCharCode(len & 0xFF);
            len = len >>> 8;
        }while (len > 0);
        // set first byte to # bytes used to store the length and turn on
        // bit 8 to indicate long-form length is used
        bytes.putByte(lenBytes.length | 0x80);
        // concatenate length bytes in reverse since they were generated
        // little endian and we need big endian
        for(var i = lenBytes.length - 1; i >= 0; --i)bytes.putByte(lenBytes.charCodeAt(i));
    }
    // concatenate value bytes
    bytes.putBuffer(value);
    return bytes;
};
/**
 * Converts an OID dot-separated string to a byte buffer. The byte buffer
 * contains only the DER-encoded value, not any tag or length bytes.
 *
 * @param oid the OID dot-separated string.
 *
 * @return the byte buffer.
 */ asn1.oidToDer = function(oid) {
    // split OID into individual values
    var values = oid.split(".");
    var bytes = forge.util.createBuffer();
    // first byte is 40 * value1 + value2
    bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
    // other bytes are each value in base 128 with 8th bit set except for
    // the last byte for each value
    var last, valueBytes, value, b;
    for(var i = 2; i < values.length; ++i){
        // produce value bytes in reverse because we don't know how many
        // bytes it will take to store the value
        last = true;
        valueBytes = [];
        value = parseInt(values[i], 10);
        do {
            b = value & 0x7F;
            value = value >>> 7;
            // if value is not last, then turn on 8th bit
            if (!last) b |= 0x80;
            valueBytes.push(b);
            last = false;
        }while (value > 0);
        // add value bytes in reverse (needs to be in big endian)
        for(var n = valueBytes.length - 1; n >= 0; --n)bytes.putByte(valueBytes[n]);
    }
    return bytes;
};
/**
 * Converts a DER-encoded byte buffer to an OID dot-separated string. The
 * byte buffer should contain only the DER-encoded value, not any tag or
 * length bytes.
 *
 * @param bytes the byte buffer.
 *
 * @return the OID dot-separated string.
 */ asn1.derToOid = function(bytes) {
    var oid;
    // wrap in buffer if needed
    if (typeof bytes === "string") bytes = forge.util.createBuffer(bytes);
    // first byte is 40 * value1 + value2
    var b = bytes.getByte();
    oid = Math.floor(b / 40) + "." + b % 40;
    // other bytes are each value in base 128 with 8th bit set except for
    // the last byte for each value
    var value = 0;
    while(bytes.length() > 0){
        b = bytes.getByte();
        value = value << 7;
        // not the last byte for the value
        if (b & 0x80) value += b & 0x7F;
        else {
            // last byte
            oid += "." + (value + b);
            value = 0;
        }
    }
    return oid;
};
/**
 * Converts a UTCTime value to a date.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates past 2049. Parsing that structure hasn't been implemented yet.
 *
 * @param utc the UTCTime value to convert.
 *
 * @return the date.
 */ asn1.utcTimeToDate = function(utc) {
    /* The following formats can be used:

    YYMMDDhhmmZ
    YYMMDDhhmm+hh'mm'
    YYMMDDhhmm-hh'mm'
    YYMMDDhhmmssZ
    YYMMDDhhmmss+hh'mm'
    YYMMDDhhmmss-hh'mm'

    Where:

    YY is the least significant two digits of the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */ var date = new Date();
    // if YY >= 50 use 19xx, if YY < 50 use 20xx
    var year = parseInt(utc.substr(0, 2), 10);
    year = year >= 50 ? 1900 + year : 2000 + year;
    var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month
    var DD = parseInt(utc.substr(4, 2), 10);
    var hh = parseInt(utc.substr(6, 2), 10);
    var mm = parseInt(utc.substr(8, 2), 10);
    var ss = 0;
    // not just YYMMDDhhmmZ
    if (utc.length > 11) {
        // get character after minutes
        var c = utc.charAt(10);
        var end = 10;
        // see if seconds are present
        if (c !== "+" && c !== "-") {
            // get seconds
            ss = parseInt(utc.substr(10, 2), 10);
            end += 2;
        }
    }
    // update date
    date.setUTCFullYear(year, MM, DD);
    date.setUTCHours(hh, mm, ss, 0);
    if (end) {
        // get +/- after end of time
        c = utc.charAt(end);
        if (c === "+" || c === "-") {
            // get hours+minutes offset
            var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
            var mmoffset = parseInt(utc.substr(end + 4, 2), 10);
            // calculate offset in milliseconds
            var offset = hhoffset * 60 + mmoffset;
            offset *= 60000;
            // apply offset
            if (c === "+") date.setTime(+date - offset);
            else date.setTime(+date + offset);
        }
    }
    return date;
};
/**
 * Converts a GeneralizedTime value to a date.
 *
 * @param gentime the GeneralizedTime value to convert.
 *
 * @return the date.
 */ asn1.generalizedTimeToDate = function(gentime) {
    /* The following formats can be used:

    YYYYMMDDHHMMSS
    YYYYMMDDHHMMSS.fff
    YYYYMMDDHHMMSSZ
    YYYYMMDDHHMMSS.fffZ
    YYYYMMDDHHMMSS+hh'mm'
    YYYYMMDDHHMMSS.fff+hh'mm'
    YYYYMMDDHHMMSS-hh'mm'
    YYYYMMDDHHMMSS.fff-hh'mm'

    Where:

    YYYY is the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    .fff is the second fraction, accurate to three decimal places
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */ var date = new Date();
    var YYYY = parseInt(gentime.substr(0, 4), 10);
    var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month
    var DD = parseInt(gentime.substr(6, 2), 10);
    var hh = parseInt(gentime.substr(8, 2), 10);
    var mm = parseInt(gentime.substr(10, 2), 10);
    var ss = parseInt(gentime.substr(12, 2), 10);
    var fff = 0;
    var offset = 0;
    var isUTC = false;
    if (gentime.charAt(gentime.length - 1) === "Z") isUTC = true;
    var end = gentime.length - 5, c = gentime.charAt(end);
    if (c === "+" || c === "-") {
        // get hours+minutes offset
        var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
        var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);
        // calculate offset in milliseconds
        offset = hhoffset * 60 + mmoffset;
        offset *= 60000;
        // apply offset
        if (c === "+") offset *= -1;
        isUTC = true;
    }
    // check for second fraction
    if (gentime.charAt(14) === ".") fff = parseFloat(gentime.substr(14), 10) * 1000;
    if (isUTC) {
        date.setUTCFullYear(YYYY, MM, DD);
        date.setUTCHours(hh, mm, ss, fff);
        // apply offset
        date.setTime(+date + offset);
    } else {
        date.setFullYear(YYYY, MM, DD);
        date.setHours(hh, mm, ss, fff);
    }
    return date;
};
/**
 * Converts a date to a UTCTime value.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates past 2049. Converting to a GeneralizedTime hasn't been
 * implemented yet.
 *
 * @param date the date to convert.
 *
 * @return the UTCTime value.
 */ asn1.dateToUtcTime = function(date) {
    // TODO: validate; currently assumes proper format
    if (typeof date === "string") return date;
    var rval = "";
    // create format YYMMDDhhmmssZ
    var format = [];
    format.push(("" + date.getUTCFullYear()).substr(2));
    format.push("" + (date.getUTCMonth() + 1));
    format.push("" + date.getUTCDate());
    format.push("" + date.getUTCHours());
    format.push("" + date.getUTCMinutes());
    format.push("" + date.getUTCSeconds());
    // ensure 2 digits are used for each format entry
    for(var i = 0; i < format.length; ++i){
        if (format[i].length < 2) rval += "0";
        rval += format[i];
    }
    rval += "Z";
    return rval;
};
/**
 * Converts a date to a GeneralizedTime value.
 *
 * @param date the date to convert.
 *
 * @return the GeneralizedTime value as a string.
 */ asn1.dateToGeneralizedTime = function(date) {
    // TODO: validate; currently assumes proper format
    if (typeof date === "string") return date;
    var rval = "";
    // create format YYYYMMDDHHMMSSZ
    var format = [];
    format.push("" + date.getUTCFullYear());
    format.push("" + (date.getUTCMonth() + 1));
    format.push("" + date.getUTCDate());
    format.push("" + date.getUTCHours());
    format.push("" + date.getUTCMinutes());
    format.push("" + date.getUTCSeconds());
    // ensure 2 digits are used for each format entry
    for(var i = 0; i < format.length; ++i){
        if (format[i].length < 2) rval += "0";
        rval += format[i];
    }
    rval += "Z";
    return rval;
};
/**
 * Converts a javascript integer to a DER-encoded byte buffer to be used
 * as the value for an INTEGER type.
 *
 * @param x the integer.
 *
 * @return the byte buffer.
 */ asn1.integerToDer = function(x) {
    var rval = forge.util.createBuffer();
    if (x >= -128 && x < 0x80) return rval.putSignedInt(x, 8);
    if (x >= -32768 && x < 0x8000) return rval.putSignedInt(x, 16);
    if (x >= -8388608 && x < 0x800000) return rval.putSignedInt(x, 24);
    if (x >= -2147483648 && x < 0x80000000) return rval.putSignedInt(x, 32);
    var error = new Error("Integer too large; max is 32-bits.");
    error.integer = x;
    throw error;
};
/**
 * Converts a DER-encoded byte buffer to a javascript integer. This is
 * typically used to decode the value of an INTEGER type.
 *
 * @param bytes the byte buffer.
 *
 * @return the integer.
 */ asn1.derToInteger = function(bytes) {
    // wrap in buffer if needed
    if (typeof bytes === "string") bytes = forge.util.createBuffer(bytes);
    var n = bytes.length() * 8;
    if (n > 32) throw new Error("Integer too large; max is 32-bits.");
    return bytes.getSignedInt(n);
};
/**
 * Validates that the given ASN.1 object is at least a super set of the
 * given ASN.1 structure. Only tag classes and types are checked. An
 * optional map may also be provided to capture ASN.1 values while the
 * structure is checked.
 *
 * To capture an ASN.1 value, set an object in the validator's 'capture'
 * parameter to the key to use in the capture map. To capture the full
 * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including
 * the leading unused bits counter byte, specify 'captureBitStringContents'.
 * To capture BIT STRING bytes, without the leading unused bits counter byte,
 * specify 'captureBitStringValue'.
 *
 * Objects in the validator may set a field 'optional' to true to indicate
 * that it isn't necessary to pass validation.
 *
 * @param obj the ASN.1 object to validate.
 * @param v the ASN.1 structure validator.
 * @param capture an optional map to capture values in.
 * @param errors an optional array for storing validation errors.
 *
 * @return true on success, false on failure.
 */ asn1.validate = function(obj, v, capture, errors) {
    var rval = false;
    // ensure tag class and type are the same if specified
    if ((obj.tagClass === v.tagClass || typeof v.tagClass === "undefined") && (obj.type === v.type || typeof v.type === "undefined")) {
        // ensure constructed flag is the same if specified
        if (obj.constructed === v.constructed || typeof v.constructed === "undefined") {
            rval = true;
            // handle sub values
            if (v.value && forge.util.isArray(v.value)) {
                var j = 0;
                for(var i = 0; rval && i < v.value.length; ++i){
                    rval = v.value[i].optional || false;
                    if (obj.value[j]) {
                        rval = asn1.validate(obj.value[j], v.value[i], capture, errors);
                        if (rval) ++j;
                        else if (v.value[i].optional) rval = true;
                    }
                    if (!rval && errors) errors.push("[" + v.name + "] " + 'Tag class "' + v.tagClass + '", type "' + v.type + '" expected value length "' + v.value.length + '", got "' + obj.value.length + '"');
                }
            }
            if (rval && capture) {
                if (v.capture) capture[v.capture] = obj.value;
                if (v.captureAsn1) capture[v.captureAsn1] = obj;
                if (v.captureBitStringContents && "bitStringContents" in obj) capture[v.captureBitStringContents] = obj.bitStringContents;
                if (v.captureBitStringValue && "bitStringContents" in obj) {
                    var value;
                    if (obj.bitStringContents.length < 2) capture[v.captureBitStringValue] = "";
                    else {
                        // FIXME: support unused bits with data shifting
                        var unused = obj.bitStringContents.charCodeAt(0);
                        if (unused !== 0) throw new Error("captureBitStringValue only supported for zero unused bits");
                        capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);
                    }
                }
            }
        } else if (errors) errors.push("[" + v.name + "] " + 'Expected constructed "' + v.constructed + '", got "' + obj.constructed + '"');
    } else if (errors) {
        if (obj.tagClass !== v.tagClass) errors.push("[" + v.name + "] " + 'Expected tag class "' + v.tagClass + '", got "' + obj.tagClass + '"');
        if (obj.type !== v.type) errors.push("[" + v.name + "] " + 'Expected type "' + v.type + '", got "' + obj.type + '"');
    }
    return rval;
};
// regex for testing for non-latin characters
var _nonLatinRegex = /[^\\u0000-\\u00ff]/;
/**
 * Pretty prints an ASN.1 object to a string.
 *
 * @param obj the object to write out.
 * @param level the level in the tree.
 * @param indentation the indentation to use.
 *
 * @return the string.
 */ asn1.prettyPrint = function(obj, level, indentation) {
    var rval = "";
    // set default level and indentation
    level = level || 0;
    indentation = indentation || 2;
    // start new line for deep levels
    if (level > 0) rval += "\n";
    // create indent
    var indent = "";
    for(var i = 0; i < level * indentation; ++i)indent += " ";
    // print class:type
    rval += indent + "Tag: ";
    switch(obj.tagClass){
        case asn1.Class.UNIVERSAL:
            rval += "Universal:";
            break;
        case asn1.Class.APPLICATION:
            rval += "Application:";
            break;
        case asn1.Class.CONTEXT_SPECIFIC:
            rval += "Context-Specific:";
            break;
        case asn1.Class.PRIVATE:
            rval += "Private:";
            break;
    }
    if (obj.tagClass === asn1.Class.UNIVERSAL) {
        rval += obj.type;
        // known types
        switch(obj.type){
            case asn1.Type.NONE:
                rval += " (None)";
                break;
            case asn1.Type.BOOLEAN:
                rval += " (Boolean)";
                break;
            case asn1.Type.INTEGER:
                rval += " (Integer)";
                break;
            case asn1.Type.BITSTRING:
                rval += " (Bit string)";
                break;
            case asn1.Type.OCTETSTRING:
                rval += " (Octet string)";
                break;
            case asn1.Type.NULL:
                rval += " (Null)";
                break;
            case asn1.Type.OID:
                rval += " (Object Identifier)";
                break;
            case asn1.Type.ODESC:
                rval += " (Object Descriptor)";
                break;
            case asn1.Type.EXTERNAL:
                rval += " (External or Instance of)";
                break;
            case asn1.Type.REAL:
                rval += " (Real)";
                break;
            case asn1.Type.ENUMERATED:
                rval += " (Enumerated)";
                break;
            case asn1.Type.EMBEDDED:
                rval += " (Embedded PDV)";
                break;
            case asn1.Type.UTF8:
                rval += " (UTF8)";
                break;
            case asn1.Type.ROID:
                rval += " (Relative Object Identifier)";
                break;
            case asn1.Type.SEQUENCE:
                rval += " (Sequence)";
                break;
            case asn1.Type.SET:
                rval += " (Set)";
                break;
            case asn1.Type.PRINTABLESTRING:
                rval += " (Printable String)";
                break;
            case asn1.Type.IA5String:
                rval += " (IA5String (ASCII))";
                break;
            case asn1.Type.UTCTIME:
                rval += " (UTC time)";
                break;
            case asn1.Type.GENERALIZEDTIME:
                rval += " (Generalized time)";
                break;
            case asn1.Type.BMPSTRING:
                rval += " (BMP String)";
                break;
        }
    } else rval += obj.type;
    rval += "\n";
    rval += indent + "Constructed: " + obj.constructed + "\n";
    if (obj.composed) {
        var subvalues = 0;
        var sub = "";
        for(var i = 0; i < obj.value.length; ++i)if (obj.value[i] !== undefined) {
            subvalues += 1;
            sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);
            if (i + 1 < obj.value.length) sub += ",";
        }
        rval += indent + "Sub values: " + subvalues + sub;
    } else {
        rval += indent + "Value: ";
        if (obj.type === asn1.Type.OID) {
            var oid = asn1.derToOid(obj.value);
            rval += oid;
            if (forge.pki && forge.pki.oids) {
                if (oid in forge.pki.oids) rval += " (" + forge.pki.oids[oid] + ") ";
            }
        }
        if (obj.type === asn1.Type.INTEGER) try {
            rval += asn1.derToInteger(obj.value);
        } catch (ex) {
            rval += "0x" + forge.util.bytesToHex(obj.value);
        }
        else if (obj.type === asn1.Type.BITSTRING) {
            // TODO: shift bits as needed to display without padding
            if (obj.value.length > 1) // remove unused bits field
            rval += "0x" + forge.util.bytesToHex(obj.value.slice(1));
            else rval += "(none)";
            // show unused bit count
            if (obj.value.length > 0) {
                var unused = obj.value.charCodeAt(0);
                if (unused == 1) rval += " (1 unused bit shown)";
                else if (unused > 1) rval += " (" + unused + " unused bits shown)";
            }
        } else if (obj.type === asn1.Type.OCTETSTRING) {
            if (!_nonLatinRegex.test(obj.value)) rval += "(" + obj.value + ") ";
            rval += "0x" + forge.util.bytesToHex(obj.value);
        } else if (obj.type === asn1.Type.UTF8) rval += forge.util.decodeUtf8(obj.value);
        else if (obj.type === asn1.Type.PRINTABLESTRING || obj.type === asn1.Type.IA5String) rval += obj.value;
        else if (_nonLatinRegex.test(obj.value)) rval += "0x" + forge.util.bytesToHex(obj.value);
        else if (obj.value.length === 0) rval += "[null]";
        else rval += obj.value;
    }
    return rval;
};

},{"./forge":"9OMxz","./util":"9XcEH","./oids":"4xWOI"}],"9OMxz":[function(require,module,exports) {
/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */ module.exports = {
    // default options
    options: {
        usePureJavaScript: false
    }
};

},{}],"9XcEH":[function(require,module,exports) {
var process = require("process");
var Buffer = require("buffer").Buffer;
var global = arguments[3];
/**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2018 Digital Bazaar, Inc.
 */ var forge = require("./forge");
var baseN = require("./baseN");
/* Utilities API */ var util = module.exports = forge.util = forge.util || {};
// define setImmediate and nextTick
(function() {
    typeof process !== "undefined" && process.nextTick;
    // polyfill nextTick with native setImmediate
    if (typeof setImmediate === "function") {
        util.setImmediate = function() {
            return setImmediate.apply(undefined, arguments);
        };
        util.nextTick = function(callback) {
            return setImmediate(callback);
        };
        return;
    }
    /* Note: A polyfill upgrade pattern is used here to allow combining
  polyfills. For example, MutationObserver is fast, but blocks UI updates,
  so it needs to allow UI updates periodically, so it falls back on
  postMessage or setTimeout. */ // polyfill with setTimeout
    util.setImmediate = function(callback) {
        setTimeout(callback, 0);
    };
    // upgrade polyfill to use postMessage
    if (typeof window !== "undefined" && typeof window.postMessage === "function") {
        var msg = "forge.setImmediate";
        var callbacks = [];
        util.setImmediate = function(callback) {
            callbacks.push(callback);
            // only send message when one hasn't been sent in
            // the current turn of the event loop
            if (callbacks.length === 1) window.postMessage(msg, "*");
        };
        function handler(event) {
            if (event.source === window && event.data === msg) {
                event.stopPropagation();
                var copy = callbacks.slice();
                callbacks.length = 0;
                copy.forEach(function(callback) {
                    callback();
                });
            }
        }
        window.addEventListener("message", handler, true);
    }
    // upgrade polyfill to use MutationObserver
    if (typeof MutationObserver !== "undefined") {
        // polyfill with MutationObserver
        var now = Date.now();
        var attr = true;
        var div = document.createElement("div");
        var callbacks = [];
        new MutationObserver(function() {
            var copy = callbacks.slice();
            callbacks.length = 0;
            copy.forEach(function(callback) {
                callback();
            });
        }).observe(div, {
            attributes: true
        });
        var oldSetImmediate = util.setImmediate;
        util.setImmediate = function(callback) {
            if (Date.now() - now > 15) {
                now = Date.now();
                oldSetImmediate(callback);
            } else {
                callbacks.push(callback);
                // only trigger observer when it hasn't been triggered in
                // the current turn of the event loop
                if (callbacks.length === 1) div.setAttribute("a", attr = !attr);
            }
        };
    }
    util.nextTick = util.setImmediate;
})();
// check if running under Node.js
util.isNodejs = typeof process !== "undefined" && process.versions && process.versions.node;
// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
// it will point to `window` in the main thread.
// To remain compatible with older browsers, we fall back to 'window' if 'self'
// is not available.
util.globalScope = function() {
    if (util.isNodejs) return global;
    return typeof self === "undefined" ? window : self;
}();
// define isArray
util.isArray = Array.isArray || function(x) {
    return Object.prototype.toString.call(x) === "[object Array]";
};
// define isArrayBuffer
util.isArrayBuffer = function(x) {
    return typeof ArrayBuffer !== "undefined" && x instanceof ArrayBuffer;
};
// define isArrayBufferView
util.isArrayBufferView = function(x) {
    return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
};
/**
 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
 * design only allow for byte operations of a limited size.
 *
 * @param n number of bits.
 *
 * Throw Error if n invalid.
 */ function _checkBitsParam(n) {
    if (!(n === 8 || n === 16 || n === 24 || n === 32)) throw new Error("Only 8, 16, 24, or 32 bits supported: " + n);
}
// TODO: set ByteBuffer to best available backing
util.ByteBuffer = ByteStringBuffer;
/** Buffer w/BinaryString backing */ /**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */ function ByteStringBuffer(b) {
    // TODO: update to match DataBuffer API
    // the data in this buffer
    this.data = "";
    // the pointer for reading from this buffer
    this.read = 0;
    if (typeof b === "string") this.data = b;
    else if (util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
        if (typeof Buffer !== "undefined" && b instanceof Buffer) this.data = b.toString("binary");
        else {
            // convert native buffer to forge buffer
            // FIXME: support native buffers internally instead
            var arr = new Uint8Array(b);
            try {
                this.data = String.fromCharCode.apply(null, arr);
            } catch (e) {
                for(var i = 0; i < arr.length; ++i)this.putByte(arr[i]);
            }
        }
    } else if (b instanceof ByteStringBuffer || typeof b === "object" && typeof b.data === "string" && typeof b.read === "number") {
        // copy existing buffer
        this.data = b.data;
        this.read = b.read;
    }
    // used for v8 optimization
    this._constructedStringLength = 0;
}
util.ByteStringBuffer = ByteStringBuffer;
/* Note: This is an optimization for V8-based browsers. When V8 concatenates
  a string, the strings are only joined logically using a "cons string" or
  "constructed/concatenated string". These containers keep references to one
  another and can result in very large memory usage. For example, if a 2MB
  string is constructed by concatenating 4 bytes together at a time, the
  memory usage will be ~44MB; so ~22x increase. The strings are only joined
  together when an operation requiring their joining takes place, such as
  substr(). This function is called when adding data to this buffer to ensure
  these types of strings are periodically joined to reduce the memory
  footprint. */ var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
    this._constructedStringLength += x;
    if (this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
        // this substr() should cause the constructed string to join
        this.data.substr(0, 1);
        this._constructedStringLength = 0;
    }
};
/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */ util.ByteStringBuffer.prototype.length = function() {
    return this.data.length - this.read;
};
/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */ util.ByteStringBuffer.prototype.isEmpty = function() {
    return this.length() <= 0;
};
/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putByte = function(b) {
    return this.putBytes(String.fromCharCode(b));
};
/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
    b = String.fromCharCode(b);
    var d = this.data;
    while(n > 0){
        if (n & 1) d += b;
        n >>>= 1;
        if (n > 0) b += b;
    }
    this.data = d;
    this._optimizeConstructedString(n);
    return this;
};
/**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a binary encoded string) to put.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putBytes = function(bytes) {
    this.data += bytes;
    this._optimizeConstructedString(bytes.length);
    return this;
};
/**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putString = function(str) {
    return this.putBytes(util.encodeUtf8(str));
};
/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putInt16 = function(i) {
    return this.putBytes(String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putInt24 = function(i) {
    return this.putBytes(String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putInt32 = function(i) {
    return this.putBytes(String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putInt16Le = function(i) {
    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF));
};
/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putInt24Le = function(i) {
    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF));
};
/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putInt32Le = function(i) {
    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 24 & 0xFF));
};
/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putInt = function(i, n) {
    _checkBitsParam(n);
    var bytes = "";
    do {
        n -= 8;
        bytes += String.fromCharCode(i >> n & 0xFF);
    }while (n > 0);
    return this.putBytes(bytes);
};
/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
    // putInt checks n
    if (i < 0) i += 2 << n - 1;
    return this.putInt(i, n);
};
/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
    return this.putBytes(buffer.getBytes());
};
/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */ util.ByteStringBuffer.prototype.getByte = function() {
    return this.data.charCodeAt(this.read++);
};
/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */ util.ByteStringBuffer.prototype.getInt16 = function() {
    var rval = this.data.charCodeAt(this.read) << 8 ^ this.data.charCodeAt(this.read + 1);
    this.read += 2;
    return rval;
};
/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */ util.ByteStringBuffer.prototype.getInt24 = function() {
    var rval = this.data.charCodeAt(this.read) << 16 ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2);
    this.read += 3;
    return rval;
};
/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */ util.ByteStringBuffer.prototype.getInt32 = function() {
    var rval = this.data.charCodeAt(this.read) << 24 ^ this.data.charCodeAt(this.read + 1) << 16 ^ this.data.charCodeAt(this.read + 2) << 8 ^ this.data.charCodeAt(this.read + 3);
    this.read += 4;
    return rval;
};
/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */ util.ByteStringBuffer.prototype.getInt16Le = function() {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8;
    this.read += 2;
    return rval;
};
/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */ util.ByteStringBuffer.prototype.getInt24Le = function() {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16;
    this.read += 3;
    return rval;
};
/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */ util.ByteStringBuffer.prototype.getInt32Le = function() {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16 ^ this.data.charCodeAt(this.read + 3) << 24;
    this.read += 4;
    return rval;
};
/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by ceil(n/8).
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */ util.ByteStringBuffer.prototype.getInt = function(n) {
    _checkBitsParam(n);
    var rval = 0;
    do {
        // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
        rval = (rval << 8) + this.data.charCodeAt(this.read++);
        n -= 8;
    }while (n > 0);
    return rval;
};
/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */ util.ByteStringBuffer.prototype.getSignedInt = function(n) {
    // getInt checks n
    var x = this.getInt(n);
    var max = 2 << n - 2;
    if (x >= max) x -= max << 1;
    return x;
};
/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer. Note that the resulting string is binary encoded (in node.js this
 * encoding is referred to as `binary`, it is *not* `utf8`).
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */ util.ByteStringBuffer.prototype.getBytes = function(count) {
    var rval;
    if (count) {
        // read count bytes
        count = Math.min(this.length(), count);
        rval = this.data.slice(this.read, this.read + count);
        this.read += count;
    } else if (count === 0) rval = "";
    else {
        // read all bytes, optimize to only copy when needed
        rval = this.read === 0 ? this.data : this.data.slice(this.read);
        this.clear();
    }
    return rval;
};
/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */ util.ByteStringBuffer.prototype.bytes = function(count) {
    return typeof count === "undefined" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
};
/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */ util.ByteStringBuffer.prototype.at = function(i) {
    return this.data.charCodeAt(this.read + i);
};
/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.setAt = function(i, b) {
    this.data = this.data.substr(0, this.read + i) + String.fromCharCode(b) + this.data.substr(this.read + i + 1);
    return this;
};
/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */ util.ByteStringBuffer.prototype.last = function() {
    return this.data.charCodeAt(this.data.length - 1);
};
/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */ util.ByteStringBuffer.prototype.copy = function() {
    var c = util.createBuffer(this.data);
    c.read = this.read;
    return c;
};
/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.compact = function() {
    if (this.read > 0) {
        this.data = this.data.slice(this.read);
        this.read = 0;
    }
    return this;
};
/**
 * Clears this buffer.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.clear = function() {
    this.data = "";
    this.read = 0;
    return this;
};
/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */ util.ByteStringBuffer.prototype.truncate = function(count) {
    var len = Math.max(0, this.length() - count);
    this.data = this.data.substr(this.read, len);
    this.read = 0;
    return this;
};
/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */ util.ByteStringBuffer.prototype.toHex = function() {
    var rval = "";
    for(var i = this.read; i < this.data.length; ++i){
        var b = this.data.charCodeAt(i);
        if (b < 16) rval += "0";
        rval += b.toString(16);
    }
    return rval;
};
/**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */ util.ByteStringBuffer.prototype.toString = function() {
    return util.decodeUtf8(this.bytes());
};
/** End Buffer w/BinaryString backing */ /** Buffer w/UInt8Array backing */ /**
 * FIXME: Experimental. Do not use yet.
 *
 * Constructor for an ArrayBuffer-backed byte buffer.
 *
 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
 * TypedArray.
 *
 * If a string is given, its encoding should be provided as an option,
 * otherwise it will default to 'binary'. A 'binary' string is encoded such
 * that each character is one byte in length and size.
 *
 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
 * *directly* without any copying. Note that, if a write to the buffer requires
 * more space, the buffer will allocate a new backing ArrayBuffer to
 * accommodate. The starting read and write offsets for the buffer may be
 * given as options.
 *
 * @param [b] the initial bytes for this buffer.
 * @param options the options to use:
 *          [readOffset] the starting read offset to use (default: 0).
 *          [writeOffset] the starting write offset to use (default: the
 *            length of the first parameter).
 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
 *            accommodate writes (default: 1024).
 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
 *            first parameter, if it is a string (default: 'binary').
 */ function DataBuffer(b, options) {
    // default options
    options = options || {};
    // pointers for read from/write to buffer
    this.read = options.readOffset || 0;
    this.growSize = options.growSize || 1024;
    var isArrayBuffer = util.isArrayBuffer(b);
    var isArrayBufferView = util.isArrayBufferView(b);
    if (isArrayBuffer || isArrayBufferView) {
        // use ArrayBuffer directly
        if (isArrayBuffer) this.data = new DataView(b);
        else // TODO: adjust read/write offset based on the type of view
        // or specify that this must be done in the options ... that the
        // offsets are byte-based
        this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
        this.write = "writeOffset" in options ? options.writeOffset : this.data.byteLength;
        return;
    }
    // initialize to empty array buffer and add any given bytes using putBytes
    this.data = new DataView(new ArrayBuffer(0));
    this.write = 0;
    if (b !== null && b !== undefined) this.putBytes(b);
    if ("writeOffset" in options) this.write = options.writeOffset;
}
util.DataBuffer = DataBuffer;
/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */ util.DataBuffer.prototype.length = function() {
    return this.write - this.read;
};
/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */ util.DataBuffer.prototype.isEmpty = function() {
    return this.length() <= 0;
};
/**
 * Ensures this buffer has enough empty space to accommodate the given number
 * of bytes. An optional parameter may be given that indicates a minimum
 * amount to grow the buffer if necessary. If the parameter is not given,
 * the buffer will be grown by some previously-specified default amount
 * or heuristic.
 *
 * @param amount the number of bytes to accommodate.
 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
 *          necessary.
 */ util.DataBuffer.prototype.accommodate = function(amount, growSize) {
    if (this.length() >= amount) return this;
    growSize = Math.max(growSize || this.growSize, amount);
    // grow buffer
    var src = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);
    var dst = new Uint8Array(this.length() + growSize);
    dst.set(src);
    this.data = new DataView(dst.buffer);
    return this;
};
/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putByte = function(b) {
    this.accommodate(1);
    this.data.setUint8(this.write++, b);
    return this;
};
/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.fillWithByte = function(b, n) {
    this.accommodate(n);
    for(var i = 0; i < n; ++i)this.data.setUint8(b);
    return this;
};
/**
 * Puts bytes in this buffer. The bytes may be given as a string, an
 * ArrayBuffer, a DataView, or a TypedArray.
 *
 * @param bytes the bytes to put.
 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
 *          'utf16', 'hex'), if it is a string (default: 'binary').
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
    if (util.isArrayBufferView(bytes)) {
        var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
        var len = src.byteLength - src.byteOffset;
        this.accommodate(len);
        var dst = new Uint8Array(this.data.buffer, this.write);
        dst.set(src);
        this.write += len;
        return this;
    }
    if (util.isArrayBuffer(bytes)) {
        var src = new Uint8Array(bytes);
        this.accommodate(src.byteLength);
        var dst = new Uint8Array(this.data.buffer);
        dst.set(src, this.write);
        this.write += src.byteLength;
        return this;
    }
    // bytes is a util.DataBuffer or equivalent
    if (bytes instanceof util.DataBuffer || typeof bytes === "object" && typeof bytes.read === "number" && typeof bytes.write === "number" && util.isArrayBufferView(bytes.data)) {
        var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
        this.accommodate(src.byteLength);
        var dst = new Uint8Array(bytes.data.byteLength, this.write);
        dst.set(src);
        this.write += src.byteLength;
        return this;
    }
    if (bytes instanceof util.ByteStringBuffer) {
        // copy binary string and process as the same as a string parameter below
        bytes = bytes.data;
        encoding = "binary";
    }
    // string conversion
    encoding = encoding || "binary";
    if (typeof bytes === "string") {
        var view;
        // decode from string
        if (encoding === "hex") {
            this.accommodate(Math.ceil(bytes.length / 2));
            view = new Uint8Array(this.data.buffer, this.write);
            this.write += util.binary.hex.decode(bytes, view, this.write);
            return this;
        }
        if (encoding === "base64") {
            this.accommodate(Math.ceil(bytes.length / 4) * 3);
            view = new Uint8Array(this.data.buffer, this.write);
            this.write += util.binary.base64.decode(bytes, view, this.write);
            return this;
        }
        // encode text as UTF-8 bytes
        if (encoding === "utf8") {
            // encode as UTF-8 then decode string as raw binary
            bytes = util.encodeUtf8(bytes);
            encoding = "binary";
        }
        // decode string as raw binary
        if (encoding === "binary" || encoding === "raw") {
            // one byte per character
            this.accommodate(bytes.length);
            view = new Uint8Array(this.data.buffer, this.write);
            this.write += util.binary.raw.decode(view);
            return this;
        }
        // encode text as UTF-16 bytes
        if (encoding === "utf16") {
            // two bytes per character
            this.accommodate(bytes.length * 2);
            view = new Uint16Array(this.data.buffer, this.write);
            this.write += util.text.utf16.encode(view);
            return this;
        }
        throw new Error("Invalid encoding: " + encoding);
    }
    throw Error("Invalid parameter: " + bytes);
};
/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putBuffer = function(buffer) {
    this.putBytes(buffer);
    buffer.clear();
    return this;
};
/**
 * Puts a string into this buffer.
 *
 * @param str the string to put.
 * @param [encoding] the encoding for the string (default: 'utf16').
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putString = function(str) {
    return this.putBytes(str, "utf16");
};
/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putInt16 = function(i) {
    this.accommodate(2);
    this.data.setInt16(this.write, i);
    this.write += 2;
    return this;
};
/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putInt24 = function(i) {
    this.accommodate(3);
    this.data.setInt16(this.write, i >> 8 & 0xFFFF);
    this.data.setInt8(this.write, i >> 16 & 0xFF);
    this.write += 3;
    return this;
};
/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putInt32 = function(i) {
    this.accommodate(4);
    this.data.setInt32(this.write, i);
    this.write += 4;
    return this;
};
/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putInt16Le = function(i) {
    this.accommodate(2);
    this.data.setInt16(this.write, i, true);
    this.write += 2;
    return this;
};
/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putInt24Le = function(i) {
    this.accommodate(3);
    this.data.setInt8(this.write, i >> 16 & 0xFF);
    this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
    this.write += 3;
    return this;
};
/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putInt32Le = function(i) {
    this.accommodate(4);
    this.data.setInt32(this.write, i, true);
    this.write += 4;
    return this;
};
/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putInt = function(i, n) {
    _checkBitsParam(n);
    this.accommodate(n / 8);
    do {
        n -= 8;
        this.data.setInt8(this.write++, i >> n & 0xFF);
    }while (n > 0);
    return this;
};
/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.putSignedInt = function(i, n) {
    _checkBitsParam(n);
    this.accommodate(n / 8);
    if (i < 0) i += 2 << n - 1;
    return this.putInt(i, n);
};
/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */ util.DataBuffer.prototype.getByte = function() {
    return this.data.getInt8(this.read++);
};
/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */ util.DataBuffer.prototype.getInt16 = function() {
    var rval = this.data.getInt16(this.read);
    this.read += 2;
    return rval;
};
/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */ util.DataBuffer.prototype.getInt24 = function() {
    var rval = this.data.getInt16(this.read) << 8 ^ this.data.getInt8(this.read + 2);
    this.read += 3;
    return rval;
};
/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */ util.DataBuffer.prototype.getInt32 = function() {
    var rval = this.data.getInt32(this.read);
    this.read += 4;
    return rval;
};
/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */ util.DataBuffer.prototype.getInt16Le = function() {
    var rval = this.data.getInt16(this.read, true);
    this.read += 2;
    return rval;
};
/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */ util.DataBuffer.prototype.getInt24Le = function() {
    var rval = this.data.getInt8(this.read) ^ this.data.getInt16(this.read + 1, true) << 8;
    this.read += 3;
    return rval;
};
/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */ util.DataBuffer.prototype.getInt32Le = function() {
    var rval = this.data.getInt32(this.read, true);
    this.read += 4;
    return rval;
};
/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */ util.DataBuffer.prototype.getInt = function(n) {
    _checkBitsParam(n);
    var rval = 0;
    do {
        // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
        rval = (rval << 8) + this.data.getInt8(this.read++);
        n -= 8;
    }while (n > 0);
    return rval;
};
/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */ util.DataBuffer.prototype.getSignedInt = function(n) {
    // getInt checks n
    var x = this.getInt(n);
    var max = 2 << n - 2;
    if (x >= max) x -= max << 1;
    return x;
};
/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */ util.DataBuffer.prototype.getBytes = function(count) {
    // TODO: deprecate this method, it is poorly named and
    // this.toString('binary') replaces it
    // add a toTypedArray()/toArrayBuffer() function
    var rval;
    if (count) {
        // read count bytes
        count = Math.min(this.length(), count);
        rval = this.data.slice(this.read, this.read + count);
        this.read += count;
    } else if (count === 0) rval = "";
    else {
        // read all bytes, optimize to only copy when needed
        rval = this.read === 0 ? this.data : this.data.slice(this.read);
        this.clear();
    }
    return rval;
};
/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */ util.DataBuffer.prototype.bytes = function(count) {
    // TODO: deprecate this method, it is poorly named, add "getString()"
    return typeof count === "undefined" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
};
/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */ util.DataBuffer.prototype.at = function(i) {
    return this.data.getUint8(this.read + i);
};
/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.setAt = function(i, b) {
    this.data.setUint8(i, b);
    return this;
};
/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */ util.DataBuffer.prototype.last = function() {
    return this.data.getUint8(this.write - 1);
};
/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */ util.DataBuffer.prototype.copy = function() {
    return new util.DataBuffer(this);
};
/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.compact = function() {
    if (this.read > 0) {
        var src = new Uint8Array(this.data.buffer, this.read);
        var dst = new Uint8Array(src.byteLength);
        dst.set(src);
        this.data = new DataView(dst);
        this.write -= this.read;
        this.read = 0;
    }
    return this;
};
/**
 * Clears this buffer.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.clear = function() {
    this.data = new DataView(new ArrayBuffer(0));
    this.read = this.write = 0;
    return this;
};
/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */ util.DataBuffer.prototype.truncate = function(count) {
    this.write = Math.max(0, this.length() - count);
    this.read = Math.min(this.read, this.write);
    return this;
};
/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */ util.DataBuffer.prototype.toHex = function() {
    var rval = "";
    for(var i = this.read; i < this.data.byteLength; ++i){
        var b = this.data.getUint8(i);
        if (b < 16) rval += "0";
        rval += b.toString(16);
    }
    return rval;
};
/**
 * Converts this buffer to a string, using the given encoding. If no
 * encoding is given, 'utf8' (UTF-8) is used.
 *
 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
 *          'base64' (default: 'utf8').
 *
 * @return a string representation of the bytes in this buffer.
 */ util.DataBuffer.prototype.toString = function(encoding) {
    var view = new Uint8Array(this.data, this.read, this.length());
    encoding = encoding || "utf8";
    // encode to string
    if (encoding === "binary" || encoding === "raw") return util.binary.raw.encode(view);
    if (encoding === "hex") return util.binary.hex.encode(view);
    if (encoding === "base64") return util.binary.base64.encode(view);
    // decode to text
    if (encoding === "utf8") return util.text.utf8.decode(view);
    if (encoding === "utf16") return util.text.utf16.decode(view);
    throw new Error("Invalid encoding: " + encoding);
};
/** End Buffer w/UInt8Array backing */ /**
 * Creates a buffer that stores bytes. A value may be given to populate the
 * buffer with data. This value can either be string of encoded bytes or a
 * regular string of characters. When passing a string of binary encoded
 * bytes, the encoding `raw` should be given. This is also the default. When
 * passing a string of characters, the encoding `utf8` should be given.
 *
 * @param [input] a string with encoded bytes to store in the buffer.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */ util.createBuffer = function(input, encoding) {
    // TODO: deprecate, use new ByteBuffer() instead
    encoding = encoding || "raw";
    if (input !== undefined && encoding === "utf8") input = util.encodeUtf8(input);
    return new util.ByteBuffer(input);
};
/**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */ util.fillString = function(c, n) {
    var s = "";
    while(n > 0){
        if (n & 1) s += c;
        n >>>= 1;
        if (n > 0) c += c;
    }
    return s;
};
/**
 * Performs a per byte XOR between two byte strings and returns the result as a
 * string of bytes.
 *
 * @param s1 first string of bytes.
 * @param s2 second string of bytes.
 * @param n the number of bytes to XOR.
 *
 * @return the XOR'd result.
 */ util.xorBytes = function(s1, s2, n) {
    var s3 = "";
    var b = "";
    var t = "";
    var i = 0;
    var c = 0;
    for(; n > 0; --n, ++i){
        b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
        if (c >= 10) {
            s3 += t;
            t = "";
            c = 0;
        }
        t += String.fromCharCode(b);
        ++c;
    }
    s3 += t;
    return s3;
};
/**
 * Converts a hex string into a 'binary' encoded string of bytes.
 *
 * @param hex the hexadecimal string to convert.
 *
 * @return the binary-encoded string of bytes.
 */ util.hexToBytes = function(hex) {
    // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
    var rval = "";
    var i = 0;
    if (hex.length & true) {
        // odd number of characters, convert first character alone
        i = 1;
        rval += String.fromCharCode(parseInt(hex[0], 16));
    }
    // convert 2 characters (1 byte) at a time
    for(; i < hex.length; i += 2)rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    return rval;
};
/**
 * Converts a 'binary' encoded string of bytes to hex.
 *
 * @param bytes the byte string to convert.
 *
 * @return the string of hexadecimal characters.
 */ util.bytesToHex = function(bytes) {
    // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
    return util.createBuffer(bytes).toHex();
};
/**
 * Converts an 32-bit integer to 4-big-endian byte string.
 *
 * @param i the integer.
 *
 * @return the byte string.
 */ util.int32ToBytes = function(i) {
    return String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF);
};
// base64 characters, reverse mapping
var _base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var _base64Idx = [
    /*43 -43 = 0*/ /*'+',  1,  2,  3,'/' */ 62,
    -1,
    -1,
    -1,
    63,
    /*'0','1','2','3','4','5','6','7','8','9' */ 52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    /*15, 16, 17,'=', 19, 20, 21 */ -1,
    -1,
    -1,
    64,
    -1,
    -1,
    -1,
    /*65 - 43 = 22*/ /*'A','B','C','D','E','F','G','H','I','J','K','L','M', */ 0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    /*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */ 13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    /*91 - 43 = 48 */ /*48, 49, 50, 51, 52, 53 */ -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    /*97 - 43 = 54*/ /*'a','b','c','d','e','f','g','h','i','j','k','l','m' */ 26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    /*'n','o','p','q','r','s','t','u','v','w','x','y','z' */ 39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
];
// base58 characters (Bitcoin alphabet)
var _base58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
/**
 * Base64 encodes a 'binary' encoded string of bytes.
 *
 * @param input the binary encoded string of bytes to base64-encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output.
 */ util.encode64 = function(input, maxline) {
    // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
    var line = "";
    var output = "";
    var chr1, chr2, chr3;
    var i = 0;
    while(i < input.length){
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        // encode 4 character group
        line += _base64.charAt(chr1 >> 2);
        line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);
        if (isNaN(chr2)) line += "==";
        else {
            line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
            line += isNaN(chr3) ? "=" : _base64.charAt(chr3 & 63);
        }
        if (maxline && line.length > maxline) {
            output += line.substr(0, maxline) + "\r\n";
            line = line.substr(maxline);
        }
    }
    output += line;
    return output;
};
/**
 * Base64 decodes a string into a 'binary' encoded string of bytes.
 *
 * @param input the base64-encoded input.
 *
 * @return the binary encoded string.
 */ util.decode64 = function(input) {
    // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."
    // remove all non-base64 characters
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    var output = "";
    var enc1, enc2, enc3, enc4;
    var i = 0;
    while(i < input.length){
        enc1 = _base64Idx[input.charCodeAt(i++) - 43];
        enc2 = _base64Idx[input.charCodeAt(i++) - 43];
        enc3 = _base64Idx[input.charCodeAt(i++) - 43];
        enc4 = _base64Idx[input.charCodeAt(i++) - 43];
        output += String.fromCharCode(enc1 << 2 | enc2 >> 4);
        if (enc3 !== 64) {
            // decoded at least 2 bytes
            output += String.fromCharCode((enc2 & 15) << 4 | enc3 >> 2);
            if (enc4 !== 64) // decoded 3 bytes
            output += String.fromCharCode((enc3 & 3) << 6 | enc4);
        }
    }
    return output;
};
/**
 * Encodes the given string of characters (a standard JavaScript
 * string) as a binary encoded string where the bytes represent
 * a UTF-8 encoded string of characters. Non-ASCII characters will be
 * encoded as multiple bytes according to UTF-8.
 *
 * @param str a standard string of characters to encode.
 *
 * @return the binary encoded string.
 */ util.encodeUtf8 = function(str) {
    return unescape(encodeURIComponent(str));
};
/**
 * Decodes a binary encoded string that contains bytes that
 * represent a UTF-8 encoded string of characters -- into a
 * string of characters (a standard JavaScript string).
 *
 * @param str the binary encoded string to decode.
 *
 * @return the resulting standard string of characters.
 */ util.decodeUtf8 = function(str) {
    return decodeURIComponent(escape(str));
};
// binary encoding/decoding tools
// FIXME: Experimental. Do not use yet.
util.binary = {
    raw: {},
    hex: {},
    base64: {},
    base58: {},
    baseN: {
        encode: baseN.encode,
        decode: baseN.decode
    }
};
/**
 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param bytes the Uint8Array to encode.
 *
 * @return the binary-encoded string.
 */ util.binary.raw.encode = function(bytes) {
    return String.fromCharCode.apply(null, bytes);
};
/**
 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param str the binary-encoded string to decode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ util.binary.raw.decode = function(str, output, offset) {
    var out = output;
    if (!out) out = new Uint8Array(str.length);
    offset = offset || 0;
    var j = offset;
    for(var i = 0; i < str.length; ++i)out[j++] = str.charCodeAt(i);
    return output ? j - offset : out;
};
/**
 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
 * ByteBuffer as a string of hexadecimal characters.
 *
 * @param bytes the bytes to convert.
 *
 * @return the string of hexadecimal characters.
 */ util.binary.hex.encode = util.bytesToHex;
/**
 * Decodes a hex-encoded string to a Uint8Array.
 *
 * @param hex the hexadecimal string to convert.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ util.binary.hex.decode = function(hex, output, offset) {
    var out = output;
    if (!out) out = new Uint8Array(Math.ceil(hex.length / 2));
    offset = offset || 0;
    var i = 0, j = offset;
    if (hex.length & 1) {
        // odd number of characters, convert first character alone
        i = 1;
        out[j++] = parseInt(hex[0], 16);
    }
    // convert 2 characters (1 byte) at a time
    for(; i < hex.length; i += 2)out[j++] = parseInt(hex.substr(i, 2), 16);
    return output ? j - offset : out;
};
/**
 * Base64-encodes a Uint8Array.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output string.
 */ util.binary.base64.encode = function(input, maxline) {
    var line = "";
    var output = "";
    var chr1, chr2, chr3;
    var i = 0;
    while(i < input.byteLength){
        chr1 = input[i++];
        chr2 = input[i++];
        chr3 = input[i++];
        // encode 4 character group
        line += _base64.charAt(chr1 >> 2);
        line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);
        if (isNaN(chr2)) line += "==";
        else {
            line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
            line += isNaN(chr3) ? "=" : _base64.charAt(chr3 & 63);
        }
        if (maxline && line.length > maxline) {
            output += line.substr(0, maxline) + "\r\n";
            line = line.substr(maxline);
        }
    }
    output += line;
    return output;
};
/**
 * Decodes a base64-encoded string to a Uint8Array.
 *
 * @param input the base64-encoded input string.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ util.binary.base64.decode = function(input, output, offset) {
    var out = output;
    if (!out) out = new Uint8Array(Math.ceil(input.length / 4) * 3);
    // remove all non-base64 characters
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    offset = offset || 0;
    var enc1, enc2, enc3, enc4;
    var i = 0, j = offset;
    while(i < input.length){
        enc1 = _base64Idx[input.charCodeAt(i++) - 43];
        enc2 = _base64Idx[input.charCodeAt(i++) - 43];
        enc3 = _base64Idx[input.charCodeAt(i++) - 43];
        enc4 = _base64Idx[input.charCodeAt(i++) - 43];
        out[j++] = enc1 << 2 | enc2 >> 4;
        if (enc3 !== 64) {
            // decoded at least 2 bytes
            out[j++] = (enc2 & 15) << 4 | enc3 >> 2;
            if (enc4 !== 64) // decoded 3 bytes
            out[j++] = (enc3 & 3) << 6 | enc4;
        }
    }
    // make sure result is the exact decoded length
    return output ? j - offset : out.subarray(0, j);
};
// add support for base58 encoding/decoding with Bitcoin alphabet
util.binary.base58.encode = function(input, maxline) {
    return util.binary.baseN.encode(input, _base58, maxline);
};
util.binary.base58.decode = function(input, maxline) {
    return util.binary.baseN.decode(input, _base58, maxline);
};
// text encoding/decoding tools
// FIXME: Experimental. Do not use yet.
util.text = {
    utf8: {},
    utf16: {}
};
/**
 * Encodes the given string as UTF-8 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ util.text.utf8.encode = function(str, output, offset) {
    str = util.encodeUtf8(str);
    var out = output;
    if (!out) out = new Uint8Array(str.length);
    offset = offset || 0;
    var j = offset;
    for(var i = 0; i < str.length; ++i)out[j++] = str.charCodeAt(i);
    return output ? j - offset : out;
};
/**
 * Decodes the UTF-8 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */ util.text.utf8.decode = function(bytes) {
    return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
};
/**
 * Encodes the given string as UTF-16 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ util.text.utf16.encode = function(str, output, offset) {
    var out = output;
    if (!out) out = new Uint8Array(str.length * 2);
    var view = new Uint16Array(out.buffer);
    offset = offset || 0;
    var j = offset;
    var k = offset;
    for(var i = 0; i < str.length; ++i){
        view[k++] = str.charCodeAt(i);
        j += 2;
    }
    return output ? j - offset : out;
};
/**
 * Decodes the UTF-16 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */ util.text.utf16.decode = function(bytes) {
    return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
};
/**
 * Deflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true to return only raw deflate data, false to include zlib
 *          header and trailer.
 *
 * @return the deflated data as a string.
 */ util.deflate = function(api, bytes, raw) {
    bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);
    // strip zlib header and trailer if necessary
    if (raw) {
        // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
        // there is a 4-byte DICT (alder-32) block before the data if
        // its 5th bit is set
        var start = 2;
        var flg = bytes.charCodeAt(1);
        if (flg & 0x20) start = 6;
        // zlib trailer is 4 bytes of adler-32
        bytes = bytes.substring(start, bytes.length - 4);
    }
    return bytes;
};
/**
 * Inflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true if the incoming data has no zlib header or trailer and is
 *          raw DEFLATE data.
 *
 * @return the inflated data as a string, null on error.
 */ util.inflate = function(api, bytes, raw) {
    // TODO: add zlib header and trailer if necessary/possible
    var rval = api.inflate(util.encode64(bytes)).rval;
    return rval === null ? null : util.decode64(rval);
};
/**
 * Sets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param obj the storage object, null to remove.
 */ var _setStorageObject = function(api, id, obj) {
    if (!api) throw new Error("WebStorage not available.");
    var rval;
    if (obj === null) rval = api.removeItem(id);
    else {
        // json-encode and base64-encode object
        obj = util.encode64(JSON.stringify(obj));
        rval = api.setItem(id, obj);
    }
    // handle potential flash error
    if (typeof rval !== "undefined" && rval.rval !== true) {
        var error = new Error(rval.error.message);
        error.id = rval.error.id;
        error.name = rval.error.name;
        throw error;
    }
};
/**
 * Gets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 *
 * @return the storage object entry or null if none exists.
 */ var _getStorageObject = function(api, id) {
    if (!api) throw new Error("WebStorage not available.");
    // get the existing entry
    var rval = api.getItem(id);
    /* Note: We check api.init because we can't do (api == localStorage)
    on IE because of "Class doesn't support Automation" exception. Only
    the flash api has an init method so this works too, but we need a
    better solution in the future. */ // flash returns item wrapped in an object, handle special case
    if (api.init) {
        if (rval.rval === null) {
            if (rval.error) {
                var error = new Error(rval.error.message);
                error.id = rval.error.id;
                error.name = rval.error.name;
                throw error;
            }
            // no error, but also no item
            rval = null;
        } else rval = rval.rval;
    }
    // handle decoding
    if (rval !== null) // base64-decode and json-decode data
    rval = JSON.parse(util.decode64(rval));
    return rval;
};
/**
 * Stores an item in local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 */ var _setItem = function(api, id, key, data) {
    // get storage object
    var obj = _getStorageObject(api, id);
    if (obj === null) // create a new storage object
    obj = {};
    // update key
    obj[key] = data;
    // set storage object
    _setStorageObject(api, id, obj);
};
/**
 * Gets an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 *
 * @return the item.
 */ var _getItem = function(api, id, key) {
    // get storage object
    var rval = _getStorageObject(api, id);
    if (rval !== null) // return data at key
    rval = key in rval ? rval[key] : null;
    return rval;
};
/**
 * Removes an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 */ var _removeItem = function(api, id, key) {
    // get storage object
    var obj = _getStorageObject(api, id);
    if (obj !== null && key in obj) {
        // remove key
        delete obj[key];
        // see if entry has no keys remaining
        var empty = true;
        for(var prop in obj){
            empty = false;
            break;
        }
        if (empty) // remove entry entirely if no keys are left
        obj = null;
        // set storage object
        _setStorageObject(api, id, obj);
    }
};
/**
 * Clears the local disk storage identified by the given ID.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 */ var _clearItems = function(api, id) {
    _setStorageObject(api, id, null);
};
/**
 * Calls a storage function.
 *
 * @param func the function to call.
 * @param args the arguments for the function.
 * @param location the location argument.
 *
 * @return the return value from the function.
 */ var _callStorageFunction = function(func, args, location) {
    var rval = null;
    // default storage types
    if (typeof location === "undefined") location = [
        "web",
        "flash"
    ];
    // apply storage types in order of preference
    var type;
    var done = false;
    var exception = null;
    for(var idx in location){
        type = location[idx];
        try {
            if (type === "flash" || type === "both") {
                if (args[0] === null) throw new Error("Flash local storage not available.");
                rval = func.apply(this, args);
                done = type === "flash";
            }
            if (type === "web" || type === "both") {
                args[0] = localStorage;
                rval = func.apply(this, args);
                done = true;
            }
        } catch (ex) {
            exception = ex;
        }
        if (done) break;
    }
    if (!done) throw exception;
    return rval;
};
/**
 * Stores an item on local disk.
 *
 * The available types of local storage include 'flash', 'web', and 'both'.
 *
 * The type 'flash' refers to flash local storage (SharedObject). In order
 * to use flash local storage, the 'api' parameter must be valid. The type
 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
 * refers to storing using both 'flash' and 'web', not just one or the
 * other.
 *
 * The location array should list the storage types to use in order of
 * preference:
 *
 * ['flash']: flash only storage
 * ['web']: web only storage
 * ['both']: try to store in both
 * ['flash','web']: store in flash first, but if not available, 'web'
 * ['web','flash']: store in web first, but if not available, 'flash'
 *
 * The location array defaults to: ['web', 'flash']
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 * @param location an array with the preferred types of storage to use.
 */ util.setItem = function(api, id, key, data, location) {
    _callStorageFunction(_setItem, arguments, location);
};
/**
 * Gets an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 *
 * @return the item.
 */ util.getItem = function(api, id, key, location) {
    return _callStorageFunction(_getItem, arguments, location);
};
/**
 * Removes an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 */ util.removeItem = function(api, id, key, location) {
    _callStorageFunction(_removeItem, arguments, location);
};
/**
 * Clears the local disk storage identified by the given ID.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface if flash is available.
 * @param id the storage ID to use.
 * @param location an array with the preferred types of storage to use.
 */ util.clearItems = function(api, id, location) {
    _callStorageFunction(_clearItems, arguments, location);
};
/**
 * Parses the scheme, host, and port from an http(s) url.
 *
 * @param str the url string.
 *
 * @return the parsed url object or null if the url is invalid.
 */ util.parseUrl = function(str) {
    // FIXME: this regex looks a bit broken
    var regex = /^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;
    regex.lastIndex = 0;
    var m = regex.exec(str);
    var url = m === null ? null : {
        full: str,
        scheme: m[1],
        host: m[2],
        port: m[3],
        path: m[4]
    };
    if (url) {
        url.fullHost = url.host;
        if (url.port) {
            if (url.port !== 80 && url.scheme === "http") url.fullHost += ":" + url.port;
            else if (url.port !== 443 && url.scheme === "https") url.fullHost += ":" + url.port;
        } else if (url.scheme === "http") url.port = 80;
        else if (url.scheme === "https") url.port = 443;
        url.full = url.scheme + "://" + url.fullHost;
    }
    return url;
};
/* Storage for query variables */ var _queryVariables = null;
/**
 * Returns the window location query variables. Query is parsed on the first
 * call and the same object is returned on subsequent calls. The mapping
 * is from keys to an array of values. Parameters without values will have
 * an object key set but no value added to the value array. Values are
 * unescaped.
 *
 * ...?k1=v1&k2=v2:
 * {
 *   "k1": ["v1"],
 *   "k2": ["v2"]
 * }
 *
 * ...?k1=v1&k1=v2:
 * {
 *   "k1": ["v1", "v2"]
 * }
 *
 * ...?k1=v1&k2:
 * {
 *   "k1": ["v1"],
 *   "k2": []
 * }
 *
 * ...?k1=v1&k1:
 * {
 *   "k1": ["v1"]
 * }
 *
 * ...?k1&k1:
 * {
 *   "k1": []
 * }
 *
 * @param query the query string to parse (optional, default to cached
 *          results from parsing window location search query).
 *
 * @return object mapping keys to variables.
 */ util.getQueryVariables = function(query) {
    var parse = function(q) {
        var rval = {};
        var kvpairs = q.split("&");
        for(var i = 0; i < kvpairs.length; i++){
            var pos = kvpairs[i].indexOf("=");
            var key;
            var val;
            if (pos > 0) {
                key = kvpairs[i].substring(0, pos);
                val = kvpairs[i].substring(pos + 1);
            } else {
                key = kvpairs[i];
                val = null;
            }
            if (!(key in rval)) rval[key] = [];
            // disallow overriding object prototype keys
            if (!(key in Object.prototype) && val !== null) rval[key].push(unescape(val));
        }
        return rval;
    };
    var rval1;
    if (typeof query === "undefined") {
        // set cached variables if needed
        if (_queryVariables === null) {
            if (typeof window !== "undefined" && window.location && window.location.search) // parse window search query
            _queryVariables = parse(window.location.search.substring(1));
            else // no query variables available
            _queryVariables = {};
        }
        rval1 = _queryVariables;
    } else // parse given query
    rval1 = parse(query);
    return rval1;
};
/**
 * Parses a fragment into a path and query. This method will take a URI
 * fragment and break it up as if it were the main URI. For example:
 *    /bar/baz?a=1&b=2
 * results in:
 *    {
 *       path: ["bar", "baz"],
 *       query: {"k1": ["v1"], "k2": ["v2"]}
 *    }
 *
 * @return object with a path array and query object.
 */ util.parseFragment = function(fragment) {
    // default to whole fragment
    var fp = fragment;
    var fq = "";
    // split into path and query if possible at the first '?'
    var pos = fragment.indexOf("?");
    if (pos > 0) {
        fp = fragment.substring(0, pos);
        fq = fragment.substring(pos + 1);
    }
    // split path based on '/' and ignore first element if empty
    var path = fp.split("/");
    if (path.length > 0 && path[0] === "") path.shift();
    // convert query into object
    var query = fq === "" ? {} : util.getQueryVariables(fq);
    return {
        pathString: fp,
        queryString: fq,
        path: path,
        query: query
    };
};
/**
 * Makes a request out of a URI-like request string. This is intended to
 * be used where a fragment id (after a URI '#') is parsed as a URI with
 * path and query parts. The string should have a path beginning and
 * delimited by '/' and optional query parameters following a '?'. The
 * query should be a standard URL set of key value pairs delimited by
 * '&'. For backwards compatibility the initial '/' on the path is not
 * required. The request object has the following API, (fully described
 * in the method code):
 *    {
 *       path: <the path string part>.
 *       query: <the query string part>,
 *       getPath(i): get part or all of the split path array,
 *       getQuery(k, i): get part or all of a query key array,
 *       getQueryLast(k, _default): get last element of a query key array.
 *    }
 *
 * @return object with request parameters.
 */ util.makeRequest = function(reqString) {
    var frag = util.parseFragment(reqString);
    var req = {
        // full path string
        path: frag.pathString,
        // full query string
        query: frag.queryString,
        /**
     * Get path or element in path.
     *
     * @param i optional path index.
     *
     * @return path or part of path if i provided.
     */ getPath: function(i) {
            return typeof i === "undefined" ? frag.path : frag.path[i];
        },
        /**
     * Get query, values for a key, or value for a key index.
     *
     * @param k optional query key.
     * @param i optional query key index.
     *
     * @return query, values for a key, or value for a key index.
     */ getQuery: function(k, i) {
            var rval;
            if (typeof k === "undefined") rval = frag.query;
            else {
                rval = frag.query[k];
                if (rval && typeof i !== "undefined") rval = rval[i];
            }
            return rval;
        },
        getQueryLast: function(k, _default) {
            var rval;
            var vals = req.getQuery(k);
            if (vals) rval = vals[vals.length - 1];
            else rval = _default;
            return rval;
        }
    };
    return req;
};
/**
 * Makes a URI out of a path, an object with query parameters, and a
 * fragment. Uses jQuery.param() internally for query string creation.
 * If the path is an array, it will be joined with '/'.
 *
 * @param path string path or array of strings.
 * @param query object with query parameters. (optional)
 * @param fragment fragment string. (optional)
 *
 * @return string object with request parameters.
 */ util.makeLink = function(path, query, fragment) {
    // join path parts if needed
    path = jQuery.isArray(path) ? path.join("/") : path;
    var qstr = jQuery.param(query || {});
    fragment = fragment || "";
    return path + (qstr.length > 0 ? "?" + qstr : "") + (fragment.length > 0 ? "#" + fragment : "");
};
/**
 * Check if an object is empty.
 *
 * Taken from:
 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
 *
 * @param object the object to check.
 */ util.isEmpty = function(obj) {
    for(var prop in obj){
        if (obj.hasOwnProperty(prop)) return false;
    }
    return true;
};
/**
 * Format with simple printf-style interpolation.
 *
 * %%: literal '%'
 * %s,%o: convert next argument into a string.
 *
 * @param format the string to format.
 * @param ... arguments to interpolate into the format string.
 */ util.format = function(format) {
    var re = /%./g;
    // current match
    var match;
    // current part
    var part;
    // current arg index
    var argi = 0;
    // collected parts to recombine later
    var parts = [];
    // last index found
    var last = 0;
    // loop while matches remain
    while(match = re.exec(format)){
        part = format.substring(last, re.lastIndex - 2);
        // don't add empty strings (ie, parts between %s%s)
        if (part.length > 0) parts.push(part);
        last = re.lastIndex;
        // switch on % code
        var code = match[0][1];
        switch(code){
            case "s":
            case "o":
                // check if enough arguments were given
                if (argi < arguments.length) parts.push(arguments[(argi++) + 1]);
                else parts.push("<?>");
                break;
            // FIXME: do proper formating for numbers, etc
            //case 'f':
            //case 'd':
            case "%":
                parts.push("%");
                break;
            default:
                parts.push("<%" + code + "?>");
        }
    }
    // add trailing part of format string
    parts.push(format.substring(last));
    return parts.join("");
};
/**
 * Formats a number.
 *
 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
 */ util.formatNumber = function(number, decimals, dec_point, thousands_sep) {
    // http://kevin.vanzonneveld.net
    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +     bugfix by: Michael White (http://crestidg.com)
    // +     bugfix by: Benjamin Lupton
    // +     bugfix by: Allan Jensen (http://www.winternet.no)
    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // *     example 1: number_format(1234.5678, 2, '.', '');
    // *     returns 1: 1234.57
    var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
    var d = dec_point === undefined ? "," : dec_point;
    var t = thousands_sep === undefined ? "." : thousands_sep, s = n < 0 ? "-" : "";
    var i = parseInt(n = Math.abs(+n || 0).toFixed(c), 10) + "";
    var j = i.length > 3 ? i.length % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};
/**
 * Formats a byte size.
 *
 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
 */ util.formatSize = function(size) {
    if (size >= 1073741824) size = util.formatNumber(size / 1073741824, 2, ".", "") + " GiB";
    else if (size >= 1048576) size = util.formatNumber(size / 1048576, 2, ".", "") + " MiB";
    else if (size >= 1024) size = util.formatNumber(size / 1024, 0) + " KiB";
    else size = util.formatNumber(size, 0) + " bytes";
    return size;
};
/**
 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv4 or IPv6 address to convert.
 *
 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
 *         be parsed.
 */ util.bytesFromIP = function(ip) {
    if (ip.indexOf(".") !== -1) return util.bytesFromIPv4(ip);
    if (ip.indexOf(":") !== -1) return util.bytesFromIPv6(ip);
    return null;
};
/**
 * Converts an IPv4 string representation into bytes (in network order).
 *
 * @param ip the IPv4 address to convert.
 *
 * @return the 4-byte address or null if the address can't be parsed.
 */ util.bytesFromIPv4 = function(ip) {
    ip = ip.split(".");
    if (ip.length !== 4) return null;
    var b = util.createBuffer();
    for(var i = 0; i < ip.length; ++i){
        var num = parseInt(ip[i], 10);
        if (isNaN(num)) return null;
        b.putByte(num);
    }
    return b.getBytes();
};
/**
 * Converts an IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv6 address to convert.
 *
 * @return the 16-byte address or null if the address can't be parsed.
 */ util.bytesFromIPv6 = function(ip) {
    var blanks = 0;
    ip = ip.split(":").filter(function(e) {
        if (e.length === 0) ++blanks;
        return true;
    });
    var zeros = (8 - ip.length + blanks) * 2;
    var b = util.createBuffer();
    for(var i = 0; i < 8; ++i){
        if (!ip[i] || ip[i].length === 0) {
            b.fillWithByte(0, zeros);
            zeros = 0;
            continue;
        }
        var bytes = util.hexToBytes(ip[i]);
        if (bytes.length < 2) b.putByte(0);
        b.putBytes(bytes);
    }
    return b.getBytes();
};
/**
 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
 * an IPv6 string representation. The bytes must be in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
 *         respectively, are given, otherwise null.
 */ util.bytesToIP = function(bytes) {
    if (bytes.length === 4) return util.bytesToIPv4(bytes);
    if (bytes.length === 16) return util.bytesToIPv6(bytes);
    return null;
};
/**
 * Converts 4-bytes into an IPv4 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 string representation or null for an invalid # of bytes.
 */ util.bytesToIPv4 = function(bytes) {
    if (bytes.length !== 4) return null;
    var ip = [];
    for(var i = 0; i < bytes.length; ++i)ip.push(bytes.charCodeAt(i));
    return ip.join(".");
};
/**
 * Converts 16-bytes into an IPv16 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv16 string representation or null for an invalid # of bytes.
 */ util.bytesToIPv6 = function(bytes) {
    if (bytes.length !== 16) return null;
    var ip = [];
    var zeroGroups = [];
    var zeroMaxGroup = 0;
    for(var i = 0; i < bytes.length; i += 2){
        var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);
        // canonicalize zero representation
        while(hex[0] === "0" && hex !== "0")hex = hex.substr(1);
        if (hex === "0") {
            var last = zeroGroups[zeroGroups.length - 1];
            var idx = ip.length;
            if (!last || idx !== last.end + 1) zeroGroups.push({
                start: idx,
                end: idx
            });
            else {
                last.end = idx;
                if (last.end - last.start > zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start) zeroMaxGroup = zeroGroups.length - 1;
            }
        }
        ip.push(hex);
    }
    if (zeroGroups.length > 0) {
        var group = zeroGroups[zeroMaxGroup];
        // only shorten group of length > 0
        if (group.end - group.start > 0) {
            ip.splice(group.start, group.end - group.start + 1, "");
            if (group.start === 0) ip.unshift("");
            if (group.end === 7) ip.push("");
        }
    }
    return ip.join(":");
};
/**
 * Estimates the number of processes that can be run concurrently. If
 * creating Web Workers, keep in mind that the main JavaScript process needs
 * its own core.
 *
 * @param options the options to use:
 *          update true to force an update (not use the cached value).
 * @param callback(err, max) called once the operation completes.
 */ util.estimateCores = function(options, callback1) {
    if (typeof options === "function") {
        callback1 = options;
        options = {};
    }
    options = options || {};
    if ("cores" in util && !options.update) return callback1(null, util.cores);
    if (typeof navigator !== "undefined" && "hardwareConcurrency" in navigator && navigator.hardwareConcurrency > 0) {
        util.cores = navigator.hardwareConcurrency;
        return callback1(null, util.cores);
    }
    if (typeof Worker === "undefined") {
        // workers not available
        util.cores = 1;
        return callback1(null, util.cores);
    }
    if (typeof Blob === "undefined") {
        // can't estimate, default to 2
        util.cores = 2;
        return callback1(null, util.cores);
    }
    // create worker concurrency estimation code as blob
    var blobUrl = URL.createObjectURL(new Blob([
        "(",
        (function() {
            self.addEventListener("message", function(e) {
                // run worker for 4 ms
                var st = Date.now();
                var et = st + 4;
                while(Date.now() < et);
                self.postMessage({
                    st: st,
                    et: et
                });
            });
        }).toString(),
        ")()"
    ], {
        type: "application/javascript"
    }));
    // take 5 samples using 16 workers
    sample([], 5, 16);
    function sample(max, samples, numWorkers) {
        if (samples === 0) {
            // get overlap average
            var avg1 = Math.floor(max.reduce(function(avg, x) {
                return avg + x;
            }, 0) / max.length);
            util.cores = Math.max(1, avg1);
            URL.revokeObjectURL(blobUrl);
            return callback1(null, util.cores);
        }
        map(numWorkers, function(err, results) {
            max.push(reduce(numWorkers, results));
            sample(max, samples - 1, numWorkers);
        });
    }
    function map(numWorkers, callback) {
        var workers = [];
        var results = [];
        for(var i1 = 0; i1 < numWorkers; ++i1){
            var worker = new Worker(blobUrl);
            worker.addEventListener("message", function(e) {
                results.push(e.data);
                if (results.length === numWorkers) {
                    for(var i = 0; i < numWorkers; ++i)workers[i].terminate();
                    callback(null, results);
                }
            });
            workers.push(worker);
        }
        for(var i1 = 0; i1 < numWorkers; ++i1)workers[i1].postMessage(i1);
    }
    function reduce(numWorkers, results) {
        // find overlapping time windows
        var overlaps = [];
        for(var n = 0; n < numWorkers; ++n){
            var r1 = results[n];
            var overlap = overlaps[n] = [];
            for(var i = 0; i < numWorkers; ++i){
                if (n === i) continue;
                var r2 = results[i];
                if (r1.st > r2.st && r1.st < r2.et || r2.st > r1.st && r2.st < r1.et) overlap.push(i);
            }
        }
        // get maximum overlaps ... don't include overlapping worker itself
        // as the main JS process was also being scheduled during the work and
        // would have to be subtracted from the estimate anyway
        return overlaps.reduce(function(max, overlap) {
            return Math.max(max, overlap.length);
        }, 0);
    }
};

},{"process":"jhUEF","buffer":"jhUEF","./forge":"9OMxz","./baseN":"b6EZZ"}],"b6EZZ":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/**
 * Base-N/Base-X encoding/decoding functions.
 *
 * Original implementation from base-x:
 * https://github.com/cryptocoinjs/base-x
 *
 * Which is MIT licensed:
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */ var api = {};
module.exports = api;
// baseN alphabet indexes
var _reverseAlphabets = {};
/**
 * BaseN-encodes a Uint8Array using the given alphabet.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the baseN-encoded output string.
 */ api.encode = function(input, alphabet, maxline) {
    if (typeof alphabet !== "string") throw new TypeError('"alphabet" must be a string.');
    if (maxline !== undefined && typeof maxline !== "number") throw new TypeError('"maxline" must be a number.');
    var output = "";
    if (!(input instanceof Uint8Array)) // assume forge byte buffer
    output = _encodeWithByteBuffer(input, alphabet);
    else {
        var i = 0;
        var base = alphabet.length;
        var first = alphabet.charAt(0);
        var digits = [
            0
        ];
        for(i = 0; i < input.length; ++i){
            for(var j = 0, carry = input[i]; j < digits.length; ++j){
                carry += digits[j] << 8;
                digits[j] = carry % base;
                carry = carry / base | 0;
            }
            while(carry > 0){
                digits.push(carry % base);
                carry = carry / base | 0;
            }
        }
        // deal with leading zeros
        for(i = 0; input[i] === 0 && i < input.length - 1; ++i)output += first;
        // convert digits to a string
        for(i = digits.length - 1; i >= 0; --i)output += alphabet[digits[i]];
    }
    if (maxline) {
        var regex = new RegExp(".{1," + maxline + "}", "g");
        output = output.match(regex).join("\r\n");
    }
    return output;
};
/**
 * Decodes a baseN-encoded (using the given alphabet) string to a
 * Uint8Array.
 *
 * @param input the baseN-encoded input string.
 *
 * @return the Uint8Array.
 */ api.decode = function(input, alphabet) {
    if (typeof input !== "string") throw new TypeError('"input" must be a string.');
    if (typeof alphabet !== "string") throw new TypeError('"alphabet" must be a string.');
    var table = _reverseAlphabets[alphabet];
    if (!table) {
        // compute reverse alphabet
        table = _reverseAlphabets[alphabet] = [];
        for(var i = 0; i < alphabet.length; ++i)table[alphabet.charCodeAt(i)] = i;
    }
    // remove whitespace characters
    input = input.replace(/\s/g, "");
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var bytes = [
        0
    ];
    for(var i = 0; i < input.length; i++){
        var value = table[input.charCodeAt(i)];
        if (value === undefined) return;
        for(var j = 0, carry = value; j < bytes.length; ++j){
            carry += bytes[j] * base;
            bytes[j] = carry & 0xff;
            carry >>= 8;
        }
        while(carry > 0){
            bytes.push(carry & 0xff);
            carry >>= 8;
        }
    }
    // deal with leading zeros
    for(var k = 0; input[k] === first && k < input.length - 1; ++k)bytes.push(0);
    if (typeof Buffer !== "undefined") return Buffer.from(bytes.reverse());
    return new Uint8Array(bytes.reverse());
};
function _encodeWithByteBuffer(input, alphabet) {
    var i = 0;
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var digits = [
        0
    ];
    for(i = 0; i < input.length(); ++i){
        for(var j = 0, carry = input.at(i); j < digits.length; ++j){
            carry += digits[j] << 8;
            digits[j] = carry % base;
            carry = carry / base | 0;
        }
        while(carry > 0){
            digits.push(carry % base);
            carry = carry / base | 0;
        }
    }
    var output = "";
    // deal with leading zeros
    for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i)output += first;
    // convert digits to a string
    for(i = digits.length - 1; i >= 0; --i)output += alphabet[digits[i]];
    return output;
}

},{"buffer":"jhUEF"}],"4xWOI":[function(require,module,exports) {
/**
 * Object IDs for ASN.1.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */ var forge = require("./forge");
forge.pki = forge.pki || {};
var oids = module.exports = forge.pki.oids = forge.oids = forge.oids || {};
// set id to name mapping and name to id mapping
function _IN(id, name) {
    oids[id] = name;
    oids[name] = id;
}
// set id to name mapping only
function _I_(id, name) {
    oids[id] = name;
}
// algorithm OIDs
_IN("1.2.840.113549.1.1.1", "rsaEncryption");
// Note: md2 & md4 not implemented
//_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');
//_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');
_IN("1.2.840.113549.1.1.4", "md5WithRSAEncryption");
_IN("1.2.840.113549.1.1.5", "sha1WithRSAEncryption");
_IN("1.2.840.113549.1.1.7", "RSAES-OAEP");
_IN("1.2.840.113549.1.1.8", "mgf1");
_IN("1.2.840.113549.1.1.9", "pSpecified");
_IN("1.2.840.113549.1.1.10", "RSASSA-PSS");
_IN("1.2.840.113549.1.1.11", "sha256WithRSAEncryption");
_IN("1.2.840.113549.1.1.12", "sha384WithRSAEncryption");
_IN("1.2.840.113549.1.1.13", "sha512WithRSAEncryption");
// Edwards-curve Digital Signature Algorithm (EdDSA) Ed25519
_IN("1.3.101.112", "EdDSA25519");
_IN("1.2.840.10040.4.3", "dsa-with-sha1");
_IN("1.3.14.3.2.7", "desCBC");
_IN("1.3.14.3.2.26", "sha1");
_IN("2.16.840.1.101.3.4.2.1", "sha256");
_IN("2.16.840.1.101.3.4.2.2", "sha384");
_IN("2.16.840.1.101.3.4.2.3", "sha512");
_IN("1.2.840.113549.2.5", "md5");
// pkcs#7 content types
_IN("1.2.840.113549.1.7.1", "data");
_IN("1.2.840.113549.1.7.2", "signedData");
_IN("1.2.840.113549.1.7.3", "envelopedData");
_IN("1.2.840.113549.1.7.4", "signedAndEnvelopedData");
_IN("1.2.840.113549.1.7.5", "digestedData");
_IN("1.2.840.113549.1.7.6", "encryptedData");
// pkcs#9 oids
_IN("1.2.840.113549.1.9.1", "emailAddress");
_IN("1.2.840.113549.1.9.2", "unstructuredName");
_IN("1.2.840.113549.1.9.3", "contentType");
_IN("1.2.840.113549.1.9.4", "messageDigest");
_IN("1.2.840.113549.1.9.5", "signingTime");
_IN("1.2.840.113549.1.9.6", "counterSignature");
_IN("1.2.840.113549.1.9.7", "challengePassword");
_IN("1.2.840.113549.1.9.8", "unstructuredAddress");
_IN("1.2.840.113549.1.9.14", "extensionRequest");
_IN("1.2.840.113549.1.9.20", "friendlyName");
_IN("1.2.840.113549.1.9.21", "localKeyId");
_IN("1.2.840.113549.1.9.22.1", "x509Certificate");
// pkcs#12 safe bags
_IN("1.2.840.113549.1.12.10.1.1", "keyBag");
_IN("1.2.840.113549.1.12.10.1.2", "pkcs8ShroudedKeyBag");
_IN("1.2.840.113549.1.12.10.1.3", "certBag");
_IN("1.2.840.113549.1.12.10.1.4", "crlBag");
_IN("1.2.840.113549.1.12.10.1.5", "secretBag");
_IN("1.2.840.113549.1.12.10.1.6", "safeContentsBag");
// password-based-encryption for pkcs#12
_IN("1.2.840.113549.1.5.13", "pkcs5PBES2");
_IN("1.2.840.113549.1.5.12", "pkcs5PBKDF2");
_IN("1.2.840.113549.1.12.1.1", "pbeWithSHAAnd128BitRC4");
_IN("1.2.840.113549.1.12.1.2", "pbeWithSHAAnd40BitRC4");
_IN("1.2.840.113549.1.12.1.3", "pbeWithSHAAnd3-KeyTripleDES-CBC");
_IN("1.2.840.113549.1.12.1.4", "pbeWithSHAAnd2-KeyTripleDES-CBC");
_IN("1.2.840.113549.1.12.1.5", "pbeWithSHAAnd128BitRC2-CBC");
_IN("1.2.840.113549.1.12.1.6", "pbewithSHAAnd40BitRC2-CBC");
// hmac OIDs
_IN("1.2.840.113549.2.7", "hmacWithSHA1");
_IN("1.2.840.113549.2.8", "hmacWithSHA224");
_IN("1.2.840.113549.2.9", "hmacWithSHA256");
_IN("1.2.840.113549.2.10", "hmacWithSHA384");
_IN("1.2.840.113549.2.11", "hmacWithSHA512");
// symmetric key algorithm oids
_IN("1.2.840.113549.3.7", "des-EDE3-CBC");
_IN("2.16.840.1.101.3.4.1.2", "aes128-CBC");
_IN("2.16.840.1.101.3.4.1.22", "aes192-CBC");
_IN("2.16.840.1.101.3.4.1.42", "aes256-CBC");
// certificate issuer/subject OIDs
_IN("2.5.4.3", "commonName");
_IN("2.5.4.5", "serialName");
_IN("2.5.4.6", "countryName");
_IN("2.5.4.7", "localityName");
_IN("2.5.4.8", "stateOrProvinceName");
_IN("2.5.4.9", "streetAddress");
_IN("2.5.4.10", "organizationName");
_IN("2.5.4.11", "organizationalUnitName");
_IN("2.5.4.13", "description");
_IN("2.5.4.15", "businessCategory");
_IN("2.5.4.17", "postalCode");
_IN("1.3.6.1.4.1.311.60.2.1.2", "jurisdictionOfIncorporationStateOrProvinceName");
_IN("1.3.6.1.4.1.311.60.2.1.3", "jurisdictionOfIncorporationCountryName");
// X.509 extension OIDs
_IN("2.16.840.1.113730.1.1", "nsCertType");
_IN("2.16.840.1.113730.1.13", "nsComment"); // deprecated in theory; still widely used
_I_("2.5.29.1", "authorityKeyIdentifier"); // deprecated, use .35
_I_("2.5.29.2", "keyAttributes"); // obsolete use .37 or .15
_I_("2.5.29.3", "certificatePolicies"); // deprecated, use .32
_I_("2.5.29.4", "keyUsageRestriction"); // obsolete use .37 or .15
_I_("2.5.29.5", "policyMapping"); // deprecated use .33
_I_("2.5.29.6", "subtreesConstraint"); // obsolete use .30
_I_("2.5.29.7", "subjectAltName"); // deprecated use .17
_I_("2.5.29.8", "issuerAltName"); // deprecated use .18
_I_("2.5.29.9", "subjectDirectoryAttributes");
_I_("2.5.29.10", "basicConstraints"); // deprecated use .19
_I_("2.5.29.11", "nameConstraints"); // deprecated use .30
_I_("2.5.29.12", "policyConstraints"); // deprecated use .36
_I_("2.5.29.13", "basicConstraints"); // deprecated use .19
_IN("2.5.29.14", "subjectKeyIdentifier");
_IN("2.5.29.15", "keyUsage");
_I_("2.5.29.16", "privateKeyUsagePeriod");
_IN("2.5.29.17", "subjectAltName");
_IN("2.5.29.18", "issuerAltName");
_IN("2.5.29.19", "basicConstraints");
_I_("2.5.29.20", "cRLNumber");
_I_("2.5.29.21", "cRLReason");
_I_("2.5.29.22", "expirationDate");
_I_("2.5.29.23", "instructionCode");
_I_("2.5.29.24", "invalidityDate");
_I_("2.5.29.25", "cRLDistributionPoints"); // deprecated use .31
_I_("2.5.29.26", "issuingDistributionPoint"); // deprecated use .28
_I_("2.5.29.27", "deltaCRLIndicator");
_I_("2.5.29.28", "issuingDistributionPoint");
_I_("2.5.29.29", "certificateIssuer");
_I_("2.5.29.30", "nameConstraints");
_IN("2.5.29.31", "cRLDistributionPoints");
_IN("2.5.29.32", "certificatePolicies");
_I_("2.5.29.33", "policyMappings");
_I_("2.5.29.34", "policyConstraints"); // deprecated use .36
_IN("2.5.29.35", "authorityKeyIdentifier");
_I_("2.5.29.36", "policyConstraints");
_IN("2.5.29.37", "extKeyUsage");
_I_("2.5.29.46", "freshestCRL");
_I_("2.5.29.54", "inhibitAnyPolicy");
// extKeyUsage purposes
_IN("1.3.6.1.4.1.11129.2.4.2", "timestampList");
_IN("1.3.6.1.5.5.7.1.1", "authorityInfoAccess");
_IN("1.3.6.1.5.5.7.3.1", "serverAuth");
_IN("1.3.6.1.5.5.7.3.2", "clientAuth");
_IN("1.3.6.1.5.5.7.3.3", "codeSigning");
_IN("1.3.6.1.5.5.7.3.4", "emailProtection");
_IN("1.3.6.1.5.5.7.3.8", "timeStamping");

},{"./forge":"9OMxz"}],"AvWMf":[function(require,module,exports) {
/**
 * Password-based encryption functions.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * An EncryptedPrivateKeyInfo:
 *
 * EncryptedPrivateKeyInfo ::= SEQUENCE {
 *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
 *   encryptedData        EncryptedData }
 *
 * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedData ::= OCTET STRING
 */ var forge = require("./forge");
require("./aes");
require("./asn1");
require("./des");
require("./md");
require("./oids");
require("./pbkdf2");
require("./pem");
require("./random");
require("./rc2");
require("./rsa");
require("./util");
if (typeof BigInteger === "undefined") var BigInteger = forge.jsbn.BigInteger;
// shortcut for asn.1 API
var asn1 = forge.asn1;
/* Password-based encryption implementation. */ var pki = forge.pki = forge.pki || {};
module.exports = pki.pbe = forge.pbe = forge.pbe || {};
var oids = pki.oids;
// validator for an EncryptedPrivateKeyInfo structure
// Note: Currently only works w/algorithm params
var encryptedPrivateKeyValidator = {
    name: "EncryptedPrivateKeyInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "EncryptedPrivateKeyInfo.encryptionAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "AlgorithmIdentifier.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "encryptionOid"
                },
                {
                    name: "AlgorithmIdentifier.parameters",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    captureAsn1: "encryptionParams"
                }
            ]
        },
        {
            // encryptedData
            name: "EncryptedPrivateKeyInfo.encryptedData",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OCTETSTRING,
            constructed: false,
            capture: "encryptedData"
        }
    ]
};
// validator for a PBES2Algorithms structure
// Note: Currently only works w/PBKDF2 + AES encryption schemes
var PBES2AlgorithmsValidator = {
    name: "PBES2Algorithms",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "PBES2Algorithms.keyDerivationFunc",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "PBES2Algorithms.keyDerivationFunc.oid",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "kdfOid"
                },
                {
                    name: "PBES2Algorithms.params",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    value: [
                        {
                            name: "PBES2Algorithms.params.salt",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.OCTETSTRING,
                            constructed: false,
                            capture: "kdfSalt"
                        },
                        {
                            name: "PBES2Algorithms.params.iterationCount",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.INTEGER,
                            constructed: false,
                            capture: "kdfIterationCount"
                        },
                        {
                            name: "PBES2Algorithms.params.keyLength",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.INTEGER,
                            constructed: false,
                            optional: true,
                            capture: "keyLength"
                        },
                        {
                            // prf
                            name: "PBES2Algorithms.params.prf",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.SEQUENCE,
                            constructed: true,
                            optional: true,
                            value: [
                                {
                                    name: "PBES2Algorithms.params.prf.algorithm",
                                    tagClass: asn1.Class.UNIVERSAL,
                                    type: asn1.Type.OID,
                                    constructed: false,
                                    capture: "prfOid"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            name: "PBES2Algorithms.encryptionScheme",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "PBES2Algorithms.encryptionScheme.oid",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "encOid"
                },
                {
                    name: "PBES2Algorithms.encryptionScheme.iv",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OCTETSTRING,
                    constructed: false,
                    capture: "encIv"
                }
            ]
        }
    ]
};
var pkcs12PbeParamsValidator = {
    name: "pkcs-12PbeParams",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "pkcs-12PbeParams.salt",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OCTETSTRING,
            constructed: false,
            capture: "salt"
        },
        {
            name: "pkcs-12PbeParams.iterations",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "iterations"
        }
    ]
};
/**
 * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
 *
 * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
 *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
 *
 * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
 *
 * PBES2-params ::= SEQUENCE {
 *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
 *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
 * }
 *
 * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
 *
 * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
 *
 * PBKDF2-params ::= SEQUENCE {
 *   salt CHOICE {
 *     specified OCTET STRING,
 *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
 *   },
 *   iterationCount INTEGER (1..MAX),
 *   keyLength INTEGER (1..MAX) OPTIONAL,
 *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
 * }
 *
 * @param obj the ASN.1 PrivateKeyInfo object.
 * @param password the password to encrypt with.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          prfAlgorithm the PRF message digest algorithm to use
 *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */ pki.encryptPrivateKeyInfo = function(obj, password, options) {
    // set default options
    options = options || {};
    options.saltSize = options.saltSize || 8;
    options.count = options.count || 2048;
    options.algorithm = options.algorithm || "aes128";
    options.prfAlgorithm = options.prfAlgorithm || "sha1";
    // generate PBE params
    var salt = forge.random.getBytesSync(options.saltSize);
    var count = options.count;
    var countBytes = asn1.integerToDer(count);
    var dkLen;
    var encryptionAlgorithm;
    var encryptedData;
    if (options.algorithm.indexOf("aes") === 0 || options.algorithm === "des") {
        // do PBES2
        var ivLen, encOid, cipherFn;
        switch(options.algorithm){
            case "aes128":
                dkLen = 16;
                ivLen = 16;
                encOid = oids["aes128-CBC"];
                cipherFn = forge.aes.createEncryptionCipher;
                break;
            case "aes192":
                dkLen = 24;
                ivLen = 16;
                encOid = oids["aes192-CBC"];
                cipherFn = forge.aes.createEncryptionCipher;
                break;
            case "aes256":
                dkLen = 32;
                ivLen = 16;
                encOid = oids["aes256-CBC"];
                cipherFn = forge.aes.createEncryptionCipher;
                break;
            case "des":
                dkLen = 8;
                ivLen = 8;
                encOid = oids["desCBC"];
                cipherFn = forge.des.createEncryptionCipher;
                break;
            default:
                var error = new Error("Cannot encrypt private key. Unknown encryption algorithm.");
                error.algorithm = options.algorithm;
                throw error;
        }
        // get PRF message digest
        var prfAlgorithm = "hmacWith" + options.prfAlgorithm.toUpperCase();
        var md = prfAlgorithmToMessageDigest(prfAlgorithm);
        // encrypt private key using pbe SHA-1 and AES/DES
        var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
        var iv = forge.random.getBytesSync(ivLen);
        var cipher = cipherFn(dk);
        cipher.start(iv);
        cipher.update(asn1.toDer(obj));
        cipher.finish();
        encryptedData = cipher.output.getBytes();
        // get PBKDF2-params
        var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);
        encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids["pkcs5PBES2"]).getBytes()),
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // keyDerivationFunc
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids["pkcs5PBKDF2"]).getBytes()),
                    // PBKDF2-params
                    params
                ]),
                // encryptionScheme
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(encOid).getBytes()),
                    // iv
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)
                ])
            ])
        ]);
    } else if (options.algorithm === "3des") {
        // Do PKCS12 PBE
        dkLen = 24;
        var saltBytes = new forge.util.ByteBuffer(salt);
        var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
        var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
        var cipher = forge.des.createEncryptionCipher(dk);
        cipher.start(iv);
        cipher.update(asn1.toDer(obj));
        cipher.finish();
        encryptedData = cipher.output.getBytes();
        encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]).getBytes()),
            // pkcs-12PbeParams
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // salt
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
                // iteration count
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())
            ])
        ]);
    } else {
        var error = new Error("Cannot encrypt private key. Unknown encryption algorithm.");
        error.algorithm = options.algorithm;
        throw error;
    }
    // EncryptedPrivateKeyInfo
    var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // encryptionAlgorithm
        encryptionAlgorithm,
        // encryptedData
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)
    ]);
    return rval;
};
/**
 * Decrypts a ASN.1 PrivateKeyInfo object.
 *
 * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
 * @param password the password to decrypt with.
 *
 * @return the ASN.1 PrivateKeyInfo on success, null on failure.
 */ pki.decryptPrivateKeyInfo = function(obj, password) {
    var rval = null;
    // get PBE params
    var capture = {};
    var errors = [];
    if (!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
        var error = new Error("Cannot read encrypted private key. ASN.1 object is not a supported EncryptedPrivateKeyInfo.");
        error.errors = errors;
        throw error;
    }
    // get cipher
    var oid = asn1.derToOid(capture.encryptionOid);
    var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);
    // get encrypted data
    var encrypted = forge.util.createBuffer(capture.encryptedData);
    cipher.update(encrypted);
    if (cipher.finish()) rval = asn1.fromDer(cipher.output);
    return rval;
};
/**
 * Converts a EncryptedPrivateKeyInfo to PEM format.
 *
 * @param epki the EncryptedPrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted encrypted private key.
 */ pki.encryptedPrivateKeyToPem = function(epki, maxline) {
    // convert to DER, then PEM-encode
    var msg = {
        type: "ENCRYPTED PRIVATE KEY",
        body: asn1.toDer(epki).getBytes()
    };
    return forge.pem.encode(msg, {
        maxline: maxline
    });
};
/**
 * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
 * is not performed.
 *
 * @param pem the EncryptedPrivateKeyInfo in PEM-format.
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */ pki.encryptedPrivateKeyFromPem = function(pem) {
    var msg = forge.pem.decode(pem)[0];
    if (msg.type !== "ENCRYPTED PRIVATE KEY") {
        var error = new Error('Could not convert encrypted private key from PEM; PEM header type is "ENCRYPTED PRIVATE KEY".');
        error.headerType = msg.type;
        throw error;
    }
    if (msg.procType && msg.procType.type === "ENCRYPTED") throw new Error("Could not convert encrypted private key from PEM; PEM is encrypted.");
    // convert DER to ASN.1 object
    return asn1.fromDer(msg.body);
};
/**
 * Encrypts an RSA private key. By default, the key will be wrapped in
 * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
 * This is the standard, preferred way to encrypt a private key.
 *
 * To produce a non-standard PEM-encrypted private key that uses encapsulated
 * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
 * private key encryption), set the 'legacy' option to true. Note: Using this
 * option will cause the iteration count to be forced to 1.
 *
 * Note: The 'des' algorithm is supported, but it is not considered to be
 * secure because it only uses a single 56-bit key. If possible, it is highly
 * recommended that a different algorithm be used.
 *
 * @param rsaKey the RSA key to encrypt.
 * @param password the password to use.
 * @param options:
 *          algorithm: the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des', 'des').
 *          count: the iteration count to use.
 *          saltSize: the salt size to use.
 *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
 *            headers (DEK-Info) private key.
 *
 * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
 */ pki.encryptRsaPrivateKey = function(rsaKey, password, options) {
    // standard PKCS#8
    options = options || {};
    if (!options.legacy) {
        // encrypt PrivateKeyInfo
        var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
        rval = pki.encryptPrivateKeyInfo(rval, password, options);
        return pki.encryptedPrivateKeyToPem(rval);
    }
    // legacy non-PKCS#8
    var algorithm;
    var iv;
    var dkLen;
    var cipherFn;
    switch(options.algorithm){
        case "aes128":
            algorithm = "AES-128-CBC";
            dkLen = 16;
            iv = forge.random.getBytesSync(16);
            cipherFn = forge.aes.createEncryptionCipher;
            break;
        case "aes192":
            algorithm = "AES-192-CBC";
            dkLen = 24;
            iv = forge.random.getBytesSync(16);
            cipherFn = forge.aes.createEncryptionCipher;
            break;
        case "aes256":
            algorithm = "AES-256-CBC";
            dkLen = 32;
            iv = forge.random.getBytesSync(16);
            cipherFn = forge.aes.createEncryptionCipher;
            break;
        case "3des":
            algorithm = "DES-EDE3-CBC";
            dkLen = 24;
            iv = forge.random.getBytesSync(8);
            cipherFn = forge.des.createEncryptionCipher;
            break;
        case "des":
            algorithm = "DES-CBC";
            dkLen = 8;
            iv = forge.random.getBytesSync(8);
            cipherFn = forge.des.createEncryptionCipher;
            break;
        default:
            var error = new Error('Could not encrypt RSA private key; unsupported encryption algorithm "' + options.algorithm + '".');
            error.algorithm = options.algorithm;
            throw error;
    }
    // encrypt private key using OpenSSL legacy key derivation
    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
    var cipher = cipherFn(dk);
    cipher.start(iv);
    cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
    cipher.finish();
    var msg = {
        type: "RSA PRIVATE KEY",
        procType: {
            version: "4",
            type: "ENCRYPTED"
        },
        dekInfo: {
            algorithm: algorithm,
            parameters: forge.util.bytesToHex(iv).toUpperCase()
        },
        body: cipher.output.getBytes()
    };
    return forge.pem.encode(msg);
};
/**
 * Decrypts an RSA private key.
 *
 * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
 * @param password the password to use.
 *
 * @return the RSA key on success, null on failure.
 */ pki.decryptRsaPrivateKey = function(pem, password) {
    var rval = null;
    var msg = forge.pem.decode(pem)[0];
    if (msg.type !== "ENCRYPTED PRIVATE KEY" && msg.type !== "PRIVATE KEY" && msg.type !== "RSA PRIVATE KEY") {
        var error = new Error('Could not convert private key from PEM; PEM header type is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
        error.headerType = error;
        throw error;
    }
    if (msg.procType && msg.procType.type === "ENCRYPTED") {
        var dkLen;
        var cipherFn;
        switch(msg.dekInfo.algorithm){
            case "DES-CBC":
                dkLen = 8;
                cipherFn = forge.des.createDecryptionCipher;
                break;
            case "DES-EDE3-CBC":
                dkLen = 24;
                cipherFn = forge.des.createDecryptionCipher;
                break;
            case "AES-128-CBC":
                dkLen = 16;
                cipherFn = forge.aes.createDecryptionCipher;
                break;
            case "AES-192-CBC":
                dkLen = 24;
                cipherFn = forge.aes.createDecryptionCipher;
                break;
            case "AES-256-CBC":
                dkLen = 32;
                cipherFn = forge.aes.createDecryptionCipher;
                break;
            case "RC2-40-CBC":
                dkLen = 5;
                cipherFn = function(key) {
                    return forge.rc2.createDecryptionCipher(key, 40);
                };
                break;
            case "RC2-64-CBC":
                dkLen = 8;
                cipherFn = function(key) {
                    return forge.rc2.createDecryptionCipher(key, 64);
                };
                break;
            case "RC2-128-CBC":
                dkLen = 16;
                cipherFn = function(key) {
                    return forge.rc2.createDecryptionCipher(key, 128);
                };
                break;
            default:
                var error = new Error('Could not decrypt private key; unsupported encryption algorithm "' + msg.dekInfo.algorithm + '".');
                error.algorithm = msg.dekInfo.algorithm;
                throw error;
        }
        // use OpenSSL legacy key derivation
        var iv = forge.util.hexToBytes(msg.dekInfo.parameters);
        var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
        var cipher = cipherFn(dk);
        cipher.start(iv);
        cipher.update(forge.util.createBuffer(msg.body));
        if (cipher.finish()) rval = cipher.output.getBytes();
        else return rval;
    } else rval = msg.body;
    if (msg.type === "ENCRYPTED PRIVATE KEY") rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
    else // decryption already performed above
    rval = asn1.fromDer(rval);
    if (rval !== null) rval = pki.privateKeyFromAsn1(rval);
    return rval;
};
/**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */ pki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {
    var j, l;
    if (typeof md === "undefined" || md === null) {
        if (!("sha1" in forge.md)) throw new Error('"sha1" hash algorithm unavailable.');
        md = forge.md.sha1.create();
    }
    var u = md.digestLength;
    var v = md.blockLength;
    var result = new forge.util.ByteBuffer();
    /* Convert password to Unicode byte buffer + trailing 0-byte. */ var passBuf = new forge.util.ByteBuffer();
    if (password !== null && password !== undefined) {
        for(l = 0; l < password.length; l++)passBuf.putInt16(password.charCodeAt(l));
        passBuf.putInt16(0);
    }
    /* Length of salt and password in BYTES. */ var p = passBuf.length();
    var s = salt.length();
    /* 1. Construct a string, D (the "diversifier"), by concatenating
        v copies of ID. */ var D = new forge.util.ByteBuffer();
    D.fillWithByte(id, v);
    /* 2. Concatenate copies of the salt together to create a string S of length
        v * ceil(s / v) bytes (the final copy of the salt may be trunacted
        to create S).
        Note that if the salt is the empty string, then so is S. */ var Slen = v * Math.ceil(s / v);
    var S = new forge.util.ByteBuffer();
    for(l = 0; l < Slen; l++)S.putByte(salt.at(l % s));
    /* 3. Concatenate copies of the password together to create a string P of
        length v * ceil(p / v) bytes (the final copy of the password may be
        truncated to create P).
        Note that if the password is the empty string, then so is P. */ var Plen = v * Math.ceil(p / v);
    var P = new forge.util.ByteBuffer();
    for(l = 0; l < Plen; l++)P.putByte(passBuf.at(l % p));
    /* 4. Set I=S||P to be the concatenation of S and P. */ var I = S;
    I.putBuffer(P);
    /* 5. Set c=ceil(n / u). */ var c = Math.ceil(n / u);
    /* 6. For i=1, 2, ..., c, do the following: */ for(var i = 1; i <= c; i++){
        /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */ var buf = new forge.util.ByteBuffer();
        buf.putBytes(D.bytes());
        buf.putBytes(I.bytes());
        for(var round = 0; round < iter; round++){
            md.start();
            md.update(buf.getBytes());
            buf = md.digest();
        }
        /* b) Concatenate copies of Ai to create a string B of length v bytes (the
          final copy of Ai may be truncated to create B). */ var B = new forge.util.ByteBuffer();
        for(l = 0; l < v; l++)B.putByte(buf.at(l % u));
        /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
          where k=ceil(s / v) + ceil(p / v), modify I by setting
          Ij=(Ij+B+1) mod 2v for each j.  */ var k = Math.ceil(s / v) + Math.ceil(p / v);
        var Inew = new forge.util.ByteBuffer();
        for(j = 0; j < k; j++){
            var chunk = new forge.util.ByteBuffer(I.getBytes(v));
            var x = 0x1ff;
            for(l = B.length() - 1; l >= 0; l--){
                x = x >> 8;
                x += B.at(l) + chunk.at(l);
                chunk.setAt(l, x & 0xff);
            }
            Inew.putBuffer(chunk);
        }
        I = Inew;
        /* Add Ai to A. */ result.putBuffer(buf);
    }
    result.truncate(result.length() - n);
    return result;
};
/**
 * Get new Forge cipher object instance.
 *
 * @param oid the OID (in string notation).
 * @param params the ASN.1 params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */ pki.pbe.getCipher = function(oid, params, password) {
    switch(oid){
        case pki.oids["pkcs5PBES2"]:
            return pki.pbe.getCipherForPBES2(oid, params, password);
        case pki.oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]:
        case pki.oids["pbewithSHAAnd40BitRC2-CBC"]:
            return pki.pbe.getCipherForPKCS12PBE(oid, params, password);
        default:
            var error = new Error("Cannot read encrypted PBE data block. Unsupported OID.");
            error.oid = oid;
            error.supportedOids = [
                "pkcs5PBES2",
                "pbeWithSHAAnd3-KeyTripleDES-CBC",
                "pbewithSHAAnd40BitRC2-CBC"
            ];
            throw error;
    }
};
/**
 * Get new Forge cipher object instance according to PBES2 params block.
 *
 * The returned cipher instance is already started using the IV
 * from PBES2 parameter block.
 *
 * @param oid the PKCS#5 PBKDF2 OID (in string notation).
 * @param params the ASN.1 PBES2-params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */ pki.pbe.getCipherForPBES2 = function(oid, params, password) {
    // get PBE params
    var capture = {};
    var errors = [];
    if (!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
        var error = new Error("Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.");
        error.errors = errors;
        throw error;
    }
    // check oids
    oid = asn1.derToOid(capture.kdfOid);
    if (oid !== pki.oids["pkcs5PBKDF2"]) {
        var error = new Error("Cannot read encrypted private key. Unsupported key derivation function OID.");
        error.oid = oid;
        error.supportedOids = [
            "pkcs5PBKDF2"
        ];
        throw error;
    }
    oid = asn1.derToOid(capture.encOid);
    if (oid !== pki.oids["aes128-CBC"] && oid !== pki.oids["aes192-CBC"] && oid !== pki.oids["aes256-CBC"] && oid !== pki.oids["des-EDE3-CBC"] && oid !== pki.oids["desCBC"]) {
        var error = new Error("Cannot read encrypted private key. Unsupported encryption scheme OID.");
        error.oid = oid;
        error.supportedOids = [
            "aes128-CBC",
            "aes192-CBC",
            "aes256-CBC",
            "des-EDE3-CBC",
            "desCBC"
        ];
        throw error;
    }
    // set PBE params
    var salt = capture.kdfSalt;
    var count = forge.util.createBuffer(capture.kdfIterationCount);
    count = count.getInt(count.length() << 3);
    var dkLen;
    var cipherFn;
    switch(pki.oids[oid]){
        case "aes128-CBC":
            dkLen = 16;
            cipherFn = forge.aes.createDecryptionCipher;
            break;
        case "aes192-CBC":
            dkLen = 24;
            cipherFn = forge.aes.createDecryptionCipher;
            break;
        case "aes256-CBC":
            dkLen = 32;
            cipherFn = forge.aes.createDecryptionCipher;
            break;
        case "des-EDE3-CBC":
            dkLen = 24;
            cipherFn = forge.des.createDecryptionCipher;
            break;
        case "desCBC":
            dkLen = 8;
            cipherFn = forge.des.createDecryptionCipher;
            break;
    }
    // get PRF message digest
    var md = prfOidToMessageDigest(capture.prfOid);
    // decrypt private key using pbe with chosen PRF and AES/DES
    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
    var iv = capture.encIv;
    var cipher = cipherFn(dk);
    cipher.start(iv);
    return cipher;
};
/**
 * Get new Forge cipher object instance for PKCS#12 PBE.
 *
 * The returned cipher instance is already started using the key & IV
 * derived from the provided password and PKCS#12 PBE salt.
 *
 * @param oid The PKCS#12 PBE OID (in string notation).
 * @param params The ASN.1 PKCS#12 PBE-params object.
 * @param password The password to decrypt with.
 *
 * @return the new cipher object instance.
 */ pki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {
    // get PBE params
    var capture = {};
    var errors = [];
    if (!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
        var error = new Error("Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.");
        error.errors = errors;
        throw error;
    }
    var salt = forge.util.createBuffer(capture.salt);
    var count = forge.util.createBuffer(capture.iterations);
    count = count.getInt(count.length() << 3);
    var dkLen, dIvLen, cipherFn;
    switch(oid){
        case pki.oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]:
            dkLen = 24;
            dIvLen = 8;
            cipherFn = forge.des.startDecrypting;
            break;
        case pki.oids["pbewithSHAAnd40BitRC2-CBC"]:
            dkLen = 5;
            dIvLen = 8;
            cipherFn = function(key, iv) {
                var cipher = forge.rc2.createDecryptionCipher(key, 40);
                cipher.start(iv, null);
                return cipher;
            };
            break;
        default:
            var error = new Error("Cannot read PKCS #12 PBE data block. Unsupported OID.");
            error.oid = oid;
            throw error;
    }
    // get PRF message digest
    var md = prfOidToMessageDigest(capture.prfOid);
    var key1 = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);
    md.start();
    var iv1 = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);
    return cipherFn(key1, iv1);
};
/**
 * OpenSSL's legacy key derivation function.
 *
 * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
 *
 * @param password the password to derive the key from.
 * @param salt the salt to use, null for none.
 * @param dkLen the number of bytes needed for the derived key.
 * @param [options] the options to use:
 *          [md] an optional message digest object to use.
 */ pki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {
    if (typeof md === "undefined" || md === null) {
        if (!("md5" in forge.md)) throw new Error('"md5" hash algorithm unavailable.');
        md = forge.md.md5.create();
    }
    if (salt === null) salt = "";
    var digests = [
        hash(md, password + salt)
    ];
    for(var length = 16, i = 1; length < dkLen; ++i, length += 16)digests.push(hash(md, digests[i - 1] + password + salt));
    return digests.join("").substr(0, dkLen);
};
function hash(md, bytes) {
    return md.start().update(bytes).digest().getBytes();
}
function prfOidToMessageDigest(prfOid) {
    // get PRF algorithm, default to SHA-1
    var prfAlgorithm;
    if (!prfOid) prfAlgorithm = "hmacWithSHA1";
    else {
        prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];
        if (!prfAlgorithm) {
            var error = new Error("Unsupported PRF OID.");
            error.oid = prfOid;
            error.supported = [
                "hmacWithSHA1",
                "hmacWithSHA224",
                "hmacWithSHA256",
                "hmacWithSHA384",
                "hmacWithSHA512"
            ];
            throw error;
        }
    }
    return prfAlgorithmToMessageDigest(prfAlgorithm);
}
function prfAlgorithmToMessageDigest(prfAlgorithm) {
    var factory = forge.md;
    switch(prfAlgorithm){
        case "hmacWithSHA224":
            factory = forge.md.sha512;
        case "hmacWithSHA1":
        case "hmacWithSHA256":
        case "hmacWithSHA384":
        case "hmacWithSHA512":
            prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();
            break;
        default:
            var error = new Error("Unsupported PRF algorithm.");
            error.algorithm = prfAlgorithm;
            error.supported = [
                "hmacWithSHA1",
                "hmacWithSHA224",
                "hmacWithSHA256",
                "hmacWithSHA384",
                "hmacWithSHA512"
            ];
            throw error;
    }
    if (!factory || !(prfAlgorithm in factory)) throw new Error("Unknown hash algorithm: " + prfAlgorithm);
    return factory[prfAlgorithm].create();
}
function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {
    var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // salt
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
        // iteration count
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())
    ]);
    // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm
    if (prfAlgorithm !== "hmacWithSHA1") params.value.push(// key length
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(dkLen.toString(16))), // AlgorithmIdentifier
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // algorithm
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),
        // parameters (null)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
    ]));
    return params;
}

},{"./forge":"9OMxz","./aes":"9Bdb3","./asn1":"G8i2L","./des":"iMVWl","./md":"lMdro","./oids":"4xWOI","./pbkdf2":"4oHZZ","./pem":"hMZVk","./random":"fOMS2","./rc2":"fmXo7","./rsa":"5XDhn","./util":"9XcEH"}],"9Bdb3":[function(require,module,exports) {
/**
 * Advanced Encryption Standard (AES) implementation.
 *
 * This implementation is based on the public domain library 'jscrypto' which
 * was written by:
 *
 * Emily Stark (estark@stanford.edu)
 * Mike Hamburg (mhamburg@stanford.edu)
 * Dan Boneh (dabo@cs.stanford.edu)
 *
 * Parts of this code are based on the OpenSSL implementation of AES:
 * http://www.openssl.org
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./cipher");
require("./cipherModes");
require("./util");
/* AES API */ module.exports = forge.aes = forge.aes || {};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ forge.aes.startEncrypting = function(key, iv, output, mode) {
    var cipher = _createCipher({
        key: key,
        output: output,
        decrypt: false,
        mode: mode
    });
    cipher.start(iv);
    return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ forge.aes.createEncryptionCipher = function(key, mode) {
    return _createCipher({
        key: key,
        output: null,
        decrypt: false,
        mode: mode
    });
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ forge.aes.startDecrypting = function(key, iv, output, mode) {
    var cipher = _createCipher({
        key: key,
        output: output,
        decrypt: true,
        mode: mode
    });
    cipher.start(iv);
    return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ forge.aes.createDecryptionCipher = function(key, mode) {
    return _createCipher({
        key: key,
        output: null,
        decrypt: true,
        mode: mode
    });
};
/**
 * Creates a new AES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the AES algorithm object.
 */ forge.aes.Algorithm = function(name, mode) {
    if (!init) initialize();
    var self = this;
    self.name = name;
    self.mode = new mode({
        blockSize: 16,
        cipher: {
            encrypt: function(inBlock, outBlock) {
                return _updateBlock(self._w, inBlock, outBlock, false);
            },
            decrypt: function(inBlock, outBlock) {
                return _updateBlock(self._w, inBlock, outBlock, true);
            }
        }
    });
    self._init = false;
};
/**
 * Initializes this AES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */ forge.aes.Algorithm.prototype.initialize = function(options) {
    if (this._init) return;
    var key = options.key;
    var tmp;
    /* Note: The key may be a string of bytes, an array of bytes, a byte
    buffer, or an array of 32-bit integers. If the key is in bytes, then
    it must be 16, 24, or 32 bytes in length. If it is in 32-bit
    integers, it must be 4, 6, or 8 integers long. */ if (typeof key === "string" && (key.length === 16 || key.length === 24 || key.length === 32)) // convert key string into byte buffer
    key = forge.util.createBuffer(key);
    else if (forge.util.isArray(key) && (key.length === 16 || key.length === 24 || key.length === 32)) {
        // convert key integer array into byte buffer
        tmp = key;
        key = forge.util.createBuffer();
        for(var i = 0; i < tmp.length; ++i)key.putByte(tmp[i]);
    }
    // convert key byte buffer into 32-bit integer array
    if (!forge.util.isArray(key)) {
        tmp = key;
        key = [];
        // key lengths of 16, 24, 32 bytes allowed
        var len = tmp.length();
        if (len === 16 || len === 24 || len === 32) {
            len = len >>> 2;
            for(var i = 0; i < len; ++i)key.push(tmp.getInt32());
        }
    }
    // key must be an array of 32-bit integers by now
    if (!forge.util.isArray(key) || !(key.length === 4 || key.length === 6 || key.length === 8)) throw new Error("Invalid key parameter.");
    // encryption operation is always used for these modes
    var mode = this.mode.name;
    var encryptOp = [
        "CFB",
        "OFB",
        "CTR",
        "GCM"
    ].indexOf(mode) !== -1;
    // do key expansion
    this._w = _expandKey(key, options.decrypt && !encryptOp);
    this._init = true;
};
/**
 * Expands a key. Typically only used for testing.
 *
 * @param key the symmetric key to expand, as an array of 32-bit words.
 * @param decrypt true to expand for decryption, false for encryption.
 *
 * @return the expanded key.
 */ forge.aes._expandKey = function(key, decrypt) {
    if (!init) initialize();
    return _expandKey(key, decrypt);
};
/**
 * Updates a single block. Typically only used for testing.
 *
 * @param w the expanded key to use.
 * @param input an array of block-size 32-bit words.
 * @param output an array of block-size 32-bit words.
 * @param decrypt true to decrypt, false to encrypt.
 */ forge.aes._updateBlock = _updateBlock;
/** Register AES algorithms **/ registerAlgorithm("AES-ECB", forge.cipher.modes.ecb);
registerAlgorithm("AES-CBC", forge.cipher.modes.cbc);
registerAlgorithm("AES-CFB", forge.cipher.modes.cfb);
registerAlgorithm("AES-OFB", forge.cipher.modes.ofb);
registerAlgorithm("AES-CTR", forge.cipher.modes.ctr);
registerAlgorithm("AES-GCM", forge.cipher.modes.gcm);
function registerAlgorithm(name, mode) {
    var factory = function() {
        return new forge.aes.Algorithm(name, mode);
    };
    forge.cipher.registerAlgorithm(name, factory);
}
/** AES implementation **/ var init = false; // not yet initialized
var Nb = 4; // number of words comprising the state (AES = 4)
var sbox; // non-linear substitution table used in key expansion
var isbox; // inversion of sbox
var rcon; // round constant word array
var mix; // mix-columns table
var imix; // inverse mix-columns table
/**
 * Performs initialization, ie: precomputes tables to optimize for speed.
 *
 * One way to understand how AES works is to imagine that 'addition' and
 * 'multiplication' are interfaces that require certain mathematical
 * properties to hold true (ie: they are associative) but they might have
 * different implementations and produce different kinds of results ...
 * provided that their mathematical properties remain true. AES defines
 * its own methods of addition and multiplication but keeps some important
 * properties the same, ie: associativity and distributivity. The
 * explanation below tries to shed some light on how AES defines addition
 * and multiplication of bytes and 32-bit words in order to perform its
 * encryption and decryption algorithms.
 *
 * The basics:
 *
 * The AES algorithm views bytes as binary representations of polynomials
 * that have either 1 or 0 as the coefficients. It defines the addition
 * or subtraction of two bytes as the XOR operation. It also defines the
 * multiplication of two bytes as a finite field referred to as GF(2^8)
 * (Note: 'GF' means "Galois Field" which is a field that contains a finite
 * number of elements so GF(2^8) has 256 elements).
 *
 * This means that any two bytes can be represented as binary polynomials;
 * when they multiplied together and modularly reduced by an irreducible
 * polynomial of the 8th degree, the results are the field GF(2^8). The
 * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
 * This multiplication is associative with 0x01 as the identity:
 *
 * (b * 0x01 = GF(b, 0x01) = b).
 *
 * The operation GF(b, 0x02) can be performed at the byte level by left
 * shifting b once and then XOR'ing it (to perform the modular reduction)
 * with 0x11b if b is >= 128. Repeated application of the multiplication
 * of 0x02 can be used to implement the multiplication of any two bytes.
 *
 * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
 * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
 * factors can each be multiplied by 0x57 and then added together. To do
 * the multiplication, values for 0x57 multiplied by each of these 3 factors
 * can be precomputed and stored in a table. To add them, the values from
 * the table are XOR'd together.
 *
 * AES also defines addition and multiplication of words, that is 4-byte
 * numbers represented as polynomials of 3 degrees where the coefficients
 * are the values of the bytes.
 *
 * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
 *
 * Addition is performed by XOR'ing like powers of x. Multiplication
 * is performed in two steps, the first is an algebriac expansion as
 * you would do normally (where addition is XOR). But the result is
 * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
 * next the result is modularly reduced by an AES-specific polynomial of
 * degree 4 which will always produce a polynomial of less than 4 degrees
 * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
 *
 * The modular product of two polynomials 'a' and 'b' is thus:
 *
 * d(x) = d3x^3 + d2x^2 + d1x + d0
 * with
 * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
 * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
 * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
 * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
 *
 * As a matrix:
 *
 * [d0] = [a0 a3 a2 a1][b0]
 * [d1]   [a1 a0 a3 a2][b1]
 * [d2]   [a2 a1 a0 a3][b2]
 * [d3]   [a3 a2 a1 a0][b3]
 *
 * Special polynomials defined by AES (0x02 == {02}):
 * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
 * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
 *
 * These polynomials are used in the MixColumns() and InverseMixColumns()
 * operations, respectively, to cause each element in the state to affect
 * the output (referred to as diffusing).
 *
 * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
 * polynomial x3.
 *
 * The ShiftRows() method modifies the last 3 rows in the state (where
 * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
 * The 1st byte in the second row is moved to the end of the row. The 1st
 * and 2nd bytes in the third row are moved to the end of the row. The 1st,
 * 2nd, and 3rd bytes are moved in the fourth row.
 *
 * More details on how AES arithmetic works:
 *
 * In the polynomial representation of binary numbers, XOR performs addition
 * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
 * corresponds with the multiplication of polynomials modulo an irreducible
 * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
 * polynomial 'a' with polynomial 'b' and then do a modular reduction by
 * an AES-specific irreducible polynomial of degree 8.
 *
 * A polynomial is irreducible if its only divisors are one and itself. For
 * the AES algorithm, this irreducible polynomial is:
 *
 * m(x) = x^8 + x^4 + x^3 + x + 1,
 *
 * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
 * 100011011 = 283 = 0x11b.
 *
 * For example, GF(0x57, 0x83) = 0xc1 because
 *
 * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
 * 0x85 = 131 = 10000101 = x^7 + x + 1
 *
 * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
 * =  x^13 + x^11 + x^9 + x^8 + x^7 +
 *    x^7 + x^5 + x^3 + x^2 + x +
 *    x^6 + x^4 + x^2 + x + 1
 * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
 *    y modulo (x^8 + x^4 + x^3 + x + 1)
 * =  x^7 + x^6 + 1.
 *
 * The modular reduction by m(x) guarantees the result will be a binary
 * polynomial of less than degree 8, so that it can fit in a byte.
 *
 * The operation to multiply a binary polynomial b with x (the polynomial
 * x in binary representation is 00000010) is:
 *
 * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
 *
 * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
 * most significant bit is 0 in b) then the result is already reduced. If
 * it is 1, then we can reduce it by subtracting m(x) via an XOR.
 *
 * It follows that multiplication by x (00000010 or 0x02) can be implemented
 * by performing a left shift followed by a conditional bitwise XOR with
 * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
 * higher powers of x can be implemented by repeated application of xtime().
 *
 * By adding intermediate results, multiplication by any constant can be
 * implemented. For instance:
 *
 * GF(0x57, 0x13) = 0xfe because:
 *
 * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
 *
 * Note: We XOR with 0x11b instead of 0x1b because in javascript our
 * datatype for b can be larger than 1 byte, so a left shift will not
 * automatically eliminate bits that overflow a byte ... by XOR'ing the
 * overflow bit with 1 (the extra one from 0x11b) we zero it out.
 *
 * GF(0x57, 0x02) = xtime(0x57) = 0xae
 * GF(0x57, 0x04) = xtime(0xae) = 0x47
 * GF(0x57, 0x08) = xtime(0x47) = 0x8e
 * GF(0x57, 0x10) = xtime(0x8e) = 0x07
 *
 * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
 *
 * And by the distributive property (since XOR is addition and GF() is
 * multiplication):
 *
 * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
 * = 0x57 ^ 0xae ^ 0x07
 * = 0xfe.
 */ function initialize() {
    init = true;
    /* Populate the Rcon table. These are the values given by
    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
    in the field of GF(2^8), where i starts at 1.

    rcon[0] = [0x00, 0x00, 0x00, 0x00]
    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
    ...
    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36

    We only store the first byte because it is the only one used.
  */ rcon = [
        0x00,
        0x01,
        0x02,
        0x04,
        0x08,
        0x10,
        0x20,
        0x40,
        0x80,
        0x1B,
        0x36
    ];
    // compute xtime table which maps i onto GF(i, 0x02)
    var xtime = new Array(256);
    for(var i = 0; i < 128; ++i){
        xtime[i] = i << 1;
        xtime[i + 128] = i + 128 << 1 ^ 0x11B;
    }
    // compute all other tables
    sbox = new Array(256);
    isbox = new Array(256);
    mix = new Array(4);
    imix = new Array(4);
    for(var i = 0; i < 4; ++i){
        mix[i] = new Array(256);
        imix[i] = new Array(256);
    }
    var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;
    for(var i = 0; i < 256; ++i){
        /* We need to generate the SubBytes() sbox and isbox tables so that
      we can perform byte substitutions. This requires us to traverse
      all of the elements in GF, find their multiplicative inverses,
      and apply to each the following affine transformation:

      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
            b(i + 7) mod 8 ^ ci
      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
      ith bit of a byte c with the value {63} or {01100011}.

      It is possible to traverse every possible value in a Galois field
      using what is referred to as a 'generator'. There are many
      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
      traverse GF we iterate 255 times, multiplying by our generator
      each time.

      On each iteration we can determine the multiplicative inverse for
      the current element.

      Suppose there is an element in GF 'e'. For a given generator 'g',
      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
      out that if use the inverse of a generator as another generator
      it will produce all of the corresponding multiplicative inverses
      at the same time. For this reason, we choose 5 as our inverse
      generator because it only requires 2 multiplies and 1 add and its
      inverse, 82, requires relatively few operations as well.

      In order to apply the affine transformation, the multiplicative
      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
      'x'. Then 's' is left shifted and the high bit of 's' is made the
      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
      with 's' and stored in 'x'. On each subsequent iteration the same
      operation is performed. When 4 iterations are complete, 'x' is
      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
      For example:

      s = 01000001
      x = 01000001

      iteration 1: s = 10000010, x ^= s
      iteration 2: s = 00000101, x ^= s
      iteration 3: s = 00001010, x ^= s
      iteration 4: s = 00010100, x ^= s
      x ^= 0x63

      This can be done with a loop where s = (s << 1) | (s >> 7). However,
      it can also be done by using a single 16-bit (in this case 32-bit)
      number 'sx'. Since XOR is an associative operation, we can set 'sx'
      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
      The most significant bits will flow into the high 8 bit positions
      and be correctly XOR'd with one another. All that remains will be
      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
      afterwards.

      At the same time we're populating sbox and isbox we can precompute
      the multiplication we'll need to do to do MixColumns() later.
    */ // apply affine transformation
        sx = ei ^ ei << 1 ^ ei << 2 ^ ei << 3 ^ ei << 4;
        sx = sx >> 8 ^ sx & 255 ^ 0x63;
        // update tables
        sbox[e] = sx;
        isbox[sx] = e;
        /* Mixing columns is done using matrix multiplication. The columns
      that are to be mixed are each a single word in the current state.
      The state has Nb columns (4 columns). Therefore each column is a
      4 byte word. So to mix the columns in a single column 'c' where
      its rows are r0, r1, r2, and r3, we use the following matrix
      multiplication:

      [2 3 1 1]*[r0,c]=[r'0,c]
      [1 2 3 1] [r1,c] [r'1,c]
      [1 1 2 3] [r2,c] [r'2,c]
      [3 1 1 2] [r3,c] [r'3,c]

      r0, r1, r2, and r3 are each 1 byte of one of the words in the
      state (a column). To do matrix multiplication for each mixed
      column c' we multiply the corresponding row from the left matrix
      with the corresponding column from the right matrix. In total, we
      get 4 equations:

      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c

      As usual, the multiplication is as previously defined and the
      addition is XOR. In order to optimize mixing columns we can store
      the multiplication results in tables. If you think of the whole
      column as a word (it might help to visualize by mentally rotating
      the equations above by counterclockwise 90 degrees) then you can
      see that it would be useful to map the multiplications performed on
      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
      respectively in the middle). This means that a table can be
      constructed that uses r0 as an index to the word. We can do the
      same with r1, r2, and r3, creating a total of 4 tables.

      To construct a full c', we can just look up each byte of c in
      their respective tables and XOR the results together.

      Also, to build each table we only have to calculate the word
      for 2,1,1,3 for every byte ... which we can do on each iteration
      of this loop since we will iterate over every byte. After we have
      calculated 2,1,1,3 we can get the results for the other tables
      by cycling the byte at the end to the beginning. For instance
      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
      by moving the right most byte to the left most position just like
      how you can imagine the 3 moved out of 2,1,1,3 and to the front
      to produce 3,2,1,1.

      There is another optimization in that the same multiples of
      the current element we need in order to advance our generator
      to the next iteration can be reused in performing the 2,1,1,3
      calculation. We also calculate the inverse mix column tables,
      with e,9,d,b being the inverse of 2,1,1,3.

      When we're done, and we need to actually mix columns, the first
      byte of each state word should be put through mix[0] (2,1,1,3),
      the second through mix[1] (3,2,1,1) and so forth. Then they should
      be XOR'd together to produce the fully mixed column.
    */ // calculate mix and imix table values
        sx2 = xtime[sx];
        e2 = xtime[e];
        e4 = xtime[e2];
        e8 = xtime[e4];
        me = sx2 << 24 ^ sx << 16 ^ sx << 8 ^ (sx ^ sx2); // 3
        ime = (e2 ^ e4 ^ e8) << 24 ^ (e ^ e8) << 16 ^ (e ^ e4 ^ e8) << 8 ^ (e ^ e2 ^ e8); // B (11)
        // produce each of the mix tables by rotating the 2,1,1,3 value
        for(var n = 0; n < 4; ++n){
            mix[n][e] = me;
            imix[n][sx] = ime;
            // cycle the right most byte to the left most position
            // ie: 2,1,1,3 becomes 3,2,1,1
            me = me << 24 | me >>> 8;
            ime = ime << 24 | ime >>> 8;
        }
        // get next element and inverse
        if (e === 0) // 1 is the inverse of 1
        e = ei = 1;
        else {
            // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
            // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
            e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
            ei ^= xtime[xtime[ei]];
        }
    }
}
/**
 * Generates a key schedule using the AES key expansion algorithm.
 *
 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
 * routine to generate a key schedule. The Key Expansion generates a total
 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
 * and each of the Nr rounds requires Nb words of key data. The resulting
 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
 * with i in the range 0 <= i < Nb(Nr + 1).
 *
 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
 * AES-128 (Nb=4, Nk=4, Nr=10)
 * AES-192 (Nb=4, Nk=6, Nr=12)
 * AES-256 (Nb=4, Nk=8, Nr=14)
 * Note: Nr=Nk+6.
 *
 * Nb is the number of columns (32-bit words) comprising the State (or
 * number of bytes in a block). For AES, Nb=4.
 *
 * @param key the key to schedule (as an array of 32-bit words).
 * @param decrypt true to modify the key schedule to decrypt, false not to.
 *
 * @return the generated key schedule.
 */ function _expandKey(key, decrypt) {
    // copy the key's words to initialize the key schedule
    var w = key.slice(0);
    /* RotWord() will rotate a word, moving the first byte to the last
    byte's position (shifting the other bytes left).

    We will be getting the value of Rcon at i / Nk. 'i' will iterate
    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
    increase by 1. We use a counter iNk to keep track of this.
   */ // go through the rounds expanding the key
    var temp, iNk = 1;
    var Nk = w.length;
    var Nr1 = Nk + 6 + 1;
    var end = Nb * Nr1;
    for(var i = Nk; i < end; ++i){
        temp = w[i - 1];
        if (i % Nk === 0) {
            // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
            temp = sbox[temp >>> 16 & 255] << 24 ^ sbox[temp >>> 8 & 255] << 16 ^ sbox[temp & 255] << 8 ^ sbox[temp >>> 24] ^ rcon[iNk] << 24;
            iNk++;
        } else if (Nk > 6 && i % Nk === 4) // temp = SubWord(temp)
        temp = sbox[temp >>> 24] << 24 ^ sbox[temp >>> 16 & 255] << 16 ^ sbox[temp >>> 8 & 255] << 8 ^ sbox[temp & 255];
        w[i] = w[i - Nk] ^ temp;
    }
    /* When we are updating a cipher block we always use the code path for
     encryption whether we are decrypting or not (to shorten code and
     simplify the generation of look up tables). However, because there
     are differences in the decryption algorithm, other than just swapping
     in different look up tables, we must transform our key schedule to
     account for these changes:

     1. The decryption algorithm gets its key rounds in reverse order.
     2. The decryption algorithm adds the round key before mixing columns
       instead of afterwards.

     We don't need to modify our key schedule to handle the first case,
     we can just traverse the key schedule in reverse order when decrypting.

     The second case requires a little work.

     The tables we built for performing rounds will take an input and then
     perform SubBytes() and MixColumns() or, for the decrypt version,
     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
     us to AddRoundKey() before InvMixColumns(). This means we'll need to
     apply some transformations to the round key to inverse-mix its columns
     so they'll be correct for moving AddRoundKey() to after the state has
     had its columns inverse-mixed.

     To inverse-mix the columns of the state when we're decrypting we use a
     lookup table that will apply InvSubBytes() and InvMixColumns() at the
     same time. However, the round key's bytes are not inverse-substituted
     in the decryption algorithm. To get around this problem, we can first
     substitute the bytes in the round key so that when we apply the
     transformation via the InvSubBytes()+InvMixColumns() table, it will
     undo our substitution leaving us with the original value that we
     want -- and then inverse-mix that value.

     This change will correctly alter our key schedule so that we can XOR
     each round key with our already transformed decryption state. This
     allows us to use the same code path as the encryption algorithm.

     We make one more change to the decryption key. Since the decryption
     algorithm runs in reverse from the encryption algorithm, we reverse
     the order of the round keys to avoid having to iterate over the key
     schedule backwards when running the encryption algorithm later in
     decryption mode. In addition to reversing the order of the round keys,
     we also swap each round key's 2nd and 4th rows. See the comments
     section where rounds are performed for more details about why this is
     done. These changes are done inline with the other substitution
     described above.
  */ if (decrypt) {
        var tmp;
        var m0 = imix[0];
        var m1 = imix[1];
        var m2 = imix[2];
        var m3 = imix[3];
        var wnew = w.slice(0);
        end = w.length;
        for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb){
            // do not sub the first or last round key (round keys are Nb
            // words) as no column mixing is performed before they are added,
            // but do change the key order
            if (i === 0 || i === end - Nb) {
                wnew[i] = w[wi];
                wnew[i + 1] = w[wi + 3];
                wnew[i + 2] = w[wi + 2];
                wnew[i + 3] = w[wi + 1];
            } else // substitute each round key byte because the inverse-mix
            // table will inverse-substitute it (effectively cancel the
            // substitution because round key bytes aren't sub'd in
            // decryption mode) and swap indexes 3 and 1
            for(var n = 0; n < Nb; ++n){
                tmp = w[wi + n];
                wnew[i + (3 & -n)] = m0[sbox[tmp >>> 24]] ^ m1[sbox[tmp >>> 16 & 255]] ^ m2[sbox[tmp >>> 8 & 255]] ^ m3[sbox[tmp & 255]];
            }
        }
        w = wnew;
    }
    return w;
}
/**
 * Updates a single block (16 bytes) using AES. The update will either
 * encrypt or decrypt the block.
 *
 * @param w the key schedule.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */ function _updateBlock(w, input, output, decrypt) {
    /*
  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[0, Nb-1])
    for round = 1 step 1 to Nr-1
      SubBytes(state)
      ShiftRows(state)
      MixColumns(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
    end for
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    out = state
  end

  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    for round = Nr-1 step -1 downto 1
      InvShiftRows(state)
      InvSubBytes(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
      InvMixColumns(state)
    end for
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
    out = state
  end
  */ // Encrypt: AddRoundKey(state, w[0, Nb-1])
    // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    var Nr = w.length / 4 - 1;
    var m0, m1, m2, m3, sub;
    if (decrypt) {
        m0 = imix[0];
        m1 = imix[1];
        m2 = imix[2];
        m3 = imix[3];
        sub = isbox;
    } else {
        m0 = mix[0];
        m1 = mix[1];
        m2 = mix[2];
        m3 = mix[3];
        sub = sbox;
    }
    var a, b, c, d, a2, b2, c2;
    a = input[0] ^ w[0];
    b = input[decrypt ? 3 : 1] ^ w[1];
    c = input[2] ^ w[2];
    d = input[decrypt ? 1 : 3] ^ w[3];
    var i = 3;
    /* In order to share code we follow the encryption algorithm when both
    encrypting and decrypting. To account for the changes required in the
    decryption algorithm, we use different lookup tables when decrypting
    and use a modified key schedule to account for the difference in the
    order of transformations applied when performing rounds. We also get
    key rounds in reverse order (relative to encryption). */ for(var round = 1; round < Nr; ++round){
        /* As described above, we'll be using table lookups to perform the
      column mixing. Each column is stored as a word in the state (the
      array 'input' has one column as a word at each index). In order to
      mix a column, we perform these transformations on each row in c,
      which is 1 byte in each word. The new column for c0 is c'0:

               m0      m1      m2      m3
      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0

      So using mix tables where c0 is a word with r0 being its upper
      8 bits and r3 being its lower 8 bits:

      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
      ...
      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]

      Therefore to mix the columns in each word in the state we
      do the following (& 255 omitted for brevity):
      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]

      However, before mixing, the algorithm requires us to perform
      ShiftRows(). The ShiftRows() transformation cyclically shifts the
      last 3 rows of the state over different offsets. The first row
      (r = 0) is not shifted.

      s'_r,c = s_r,(c + shift(r, Nb) mod Nb
      for 0 < r < 4 and 0 <= c < Nb and
      shift(1, 4) = 1
      shift(2, 4) = 2
      shift(3, 4) = 3.

      This causes the first byte in r = 1 to be moved to the end of
      the row, the first 2 bytes in r = 2 to be moved to the end of
      the row, the first 3 bytes in r = 3 to be moved to the end of
      the row:

      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]

      We can make these substitutions inline with our column mixing to
      generate an updated set of equations to produce each word in the
      state (note the columns have changed positions):

      c0 c1 c2 c3 => c0 c1 c2 c3
      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)

      Therefore:

      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3

      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0

      ... and so forth for c'2 and c'3. The important distinction is
      that the columns are cycling, with c0 being used with the m0
      map when calculating c0, but c1 being used with the m0 map when
      calculating c1 ... and so forth.

      When performing the inverse we transform the mirror image and
      skip the bottom row, instead of the top one, and move upwards:

      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
      c3 c2 c1 c0    c3 c2 c1 c0

      If you compare the resulting matrices for ShiftRows()+MixColumns()
      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
      different (in encrypt mode vs. decrypt mode). So in order to use
      the same code to handle both encryption and decryption, we will
      need to do some mapping.

      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
      a row number in the state, then the resulting matrix in encryption
      mode for applying the above transformations would be:

      r1: a b c d
      r2: b c d a
      r3: c d a b
      r4: d a b c

      If we did the same in decryption mode we would get:

      r1: a d c b
      r2: b a d c
      r3: c b a d
      r4: d c b a

      If instead we swap d and b (set b=c3 and d=c1), then we get:

      r1: a b c d
      r2: d a b c
      r3: c d a b
      r4: b c d a

      Now the 1st and 3rd rows are the same as the encryption matrix. All
      we need to do then to make the mapping exactly the same is to swap
      the 2nd and 4th rows when in decryption mode. To do this without
      having to do it on each iteration, we swapped the 2nd and 4th rows
      in the decryption key schedule. We also have to do the swap above
      when we first pull in the input and when we set the final output. */ a2 = m0[a >>> 24] ^ m1[b >>> 16 & 255] ^ m2[c >>> 8 & 255] ^ m3[d & 255] ^ w[++i];
        b2 = m0[b >>> 24] ^ m1[c >>> 16 & 255] ^ m2[d >>> 8 & 255] ^ m3[a & 255] ^ w[++i];
        c2 = m0[c >>> 24] ^ m1[d >>> 16 & 255] ^ m2[a >>> 8 & 255] ^ m3[b & 255] ^ w[++i];
        d = m0[d >>> 24] ^ m1[a >>> 16 & 255] ^ m2[b >>> 8 & 255] ^ m3[c & 255] ^ w[++i];
        a = a2;
        b = b2;
        c = c2;
    }
    /*
    Encrypt:
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

    Decrypt:
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
   */ // Note: rows are shifted inline
    output[0] = sub[a >>> 24] << 24 ^ sub[b >>> 16 & 255] << 16 ^ sub[c >>> 8 & 255] << 8 ^ sub[d & 255] ^ w[++i];
    output[decrypt ? 3 : 1] = sub[b >>> 24] << 24 ^ sub[c >>> 16 & 255] << 16 ^ sub[d >>> 8 & 255] << 8 ^ sub[a & 255] ^ w[++i];
    output[2] = sub[c >>> 24] << 24 ^ sub[d >>> 16 & 255] << 16 ^ sub[a >>> 8 & 255] << 8 ^ sub[b & 255] ^ w[++i];
    output[decrypt ? 1 : 3] = sub[d >>> 24] << 24 ^ sub[a >>> 16 & 255] << 16 ^ sub[b >>> 8 & 255] << 8 ^ sub[c & 255] ^ w[++i];
}
/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('AES-<mode>', key);
 * forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates a deprecated AES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key and iv may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param options the options to use.
 *          key the symmetric key to use.
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ function _createCipher(options1) {
    options1 = options1 || {};
    var mode = (options1.mode || "CBC").toUpperCase();
    var algorithm = "AES-" + mode;
    var cipher;
    if (options1.decrypt) cipher = forge.cipher.createDecipher(algorithm, options1.key);
    else cipher = forge.cipher.createCipher(algorithm, options1.key);
    // backwards compatible start API
    var start = cipher.start;
    cipher.start = function(iv, options) {
        // backwards compatibility: support second arg as output buffer
        var output = null;
        if (options instanceof forge.util.ByteBuffer) {
            output = options;
            options = {};
        }
        options = options || {};
        options.output = output;
        options.iv = iv;
        start.call(cipher, options);
    };
    return cipher;
}

},{"./forge":"9OMxz","./cipher":"fsZW2","./cipherModes":"1GUoG","./util":"9XcEH"}],"fsZW2":[function(require,module,exports) {
/**
 * Cipher base API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./util");
module.exports = forge.cipher = forge.cipher || {};
// registered algorithms
forge.cipher.algorithms = forge.cipher.algorithms || {};
/**
 * Creates a cipher object that can be used to encrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */ forge.cipher.createCipher = function(algorithm, key) {
    var api = algorithm;
    if (typeof api === "string") {
        api = forge.cipher.getAlgorithm(api);
        if (api) api = api();
    }
    if (!api) throw new Error("Unsupported algorithm: " + algorithm);
    // assume block cipher
    return new forge.cipher.BlockCipher({
        algorithm: api,
        key: key,
        decrypt: false
    });
};
/**
 * Creates a decipher object that can be used to decrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */ forge.cipher.createDecipher = function(algorithm, key) {
    var api = algorithm;
    if (typeof api === "string") {
        api = forge.cipher.getAlgorithm(api);
        if (api) api = api();
    }
    if (!api) throw new Error("Unsupported algorithm: " + algorithm);
    // assume block cipher
    return new forge.cipher.BlockCipher({
        algorithm: api,
        key: key,
        decrypt: true
    });
};
/**
 * Registers an algorithm by name. If the name was already registered, the
 * algorithm API object will be overwritten.
 *
 * @param name the name of the algorithm.
 * @param algorithm the algorithm API object.
 */ forge.cipher.registerAlgorithm = function(name, algorithm) {
    name = name.toUpperCase();
    forge.cipher.algorithms[name] = algorithm;
};
/**
 * Gets a registered algorithm by name.
 *
 * @param name the name of the algorithm.
 *
 * @return the algorithm, if found, null if not.
 */ forge.cipher.getAlgorithm = function(name) {
    name = name.toUpperCase();
    if (name in forge.cipher.algorithms) return forge.cipher.algorithms[name];
    return null;
};
var BlockCipher = forge.cipher.BlockCipher = function(options) {
    this.algorithm = options.algorithm;
    this.mode = this.algorithm.mode;
    this.blockSize = this.mode.blockSize;
    this._finish = false;
    this._input = null;
    this.output = null;
    this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
    this._decrypt = options.decrypt;
    this.algorithm.initialize(options);
};
/**
 * Starts or restarts the encryption or decryption process, whichever
 * was previously configured.
 *
 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
 * 32-bit integers, then it must be 4 integers long.
 *
 * Note: an IV is not required or used in ECB mode.
 *
 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
 * by NIST SP-800-38D but another length may be given.
 *
 * @param options the options to use:
 *          iv the initialization vector to use as a binary-encoded string of
 *            bytes, null to reuse the last ciphered block from a previous
 *            update() (this "residue" method is for legacy support only).
 *          additionalData additional authentication data as a binary-encoded
 *            string of bytes, for 'GCM' mode, (default: none).
 *          tagLength desired length of authentication tag, in bits, for
 *            'GCM' mode (0-128, default: 128).
 *          tag the authentication tag to check if decrypting, as a
 *             binary-encoded string of bytes.
 *          output the output the buffer to write to, null to create one.
 */ BlockCipher.prototype.start = function(options) {
    options = options || {};
    var opts = {};
    for(var key in options)opts[key] = options[key];
    opts.decrypt = this._decrypt;
    this._finish = false;
    this._input = forge.util.createBuffer();
    this.output = options.output || forge.util.createBuffer();
    this.mode.start(opts);
};
/**
 * Updates the next block according to the cipher mode.
 *
 * @param input the buffer to read from.
 */ BlockCipher.prototype.update = function(input) {
    if (input) // input given, so empty it into the input buffer
    this._input.putBuffer(input);
    // do cipher operation until it needs more input and not finished
    while(!this._op.call(this.mode, this._input, this.output, this._finish) && !this._finish);
    // free consumed memory from input buffer
    this._input.compact();
};
/**
 * Finishes encrypting or decrypting.
 *
 * @param pad a padding function to use in CBC mode, null for default,
 *          signature(blockSize, buffer, decrypt).
 *
 * @return true if successful, false on error.
 */ BlockCipher.prototype.finish = function(pad) {
    // backwards-compatibility w/deprecated padding API
    // Note: will overwrite padding functions even after another start() call
    if (pad && (this.mode.name === "ECB" || this.mode.name === "CBC")) {
        this.mode.pad = function(input) {
            return pad(this.blockSize, input, false);
        };
        this.mode.unpad = function(output) {
            return pad(this.blockSize, output, true);
        };
    }
    // build options for padding and afterFinish functions
    var options = {};
    options.decrypt = this._decrypt;
    // get # of bytes that won't fill a block
    options.overflow = this._input.length() % this.blockSize;
    if (!this._decrypt && this.mode.pad) {
        if (!this.mode.pad(this._input, options)) return false;
    }
    // do final update
    this._finish = true;
    this.update();
    if (this._decrypt && this.mode.unpad) {
        if (!this.mode.unpad(this.output, options)) return false;
    }
    if (this.mode.afterFinish) {
        if (!this.mode.afterFinish(this.output, options)) return false;
    }
    return true;
};

},{"./forge":"9OMxz","./util":"9XcEH"}],"1GUoG":[function(require,module,exports) {
/**
 * Supported cipher modes.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./util");
forge.cipher = forge.cipher || {};
// supported cipher modes
var modes = module.exports = forge.cipher.modes = forge.cipher.modes || {};
/** Electronic codebook (ECB) (Don't use this; it's not secure) **/ modes.ecb = function(options) {
    options = options || {};
    this.name = "ECB";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
};
modes.ecb.prototype.start = function(options) {};
modes.ecb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    if (input.length() < this.blockSize && !(finish && input.length() > 0)) return true;
    // get next block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = input.getInt32();
    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // write output
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i]);
};
modes.ecb.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    if (input.length() < this.blockSize && !(finish && input.length() > 0)) return true;
    // get next block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = input.getInt32();
    // decrypt block
    this.cipher.decrypt(this._inBlock, this._outBlock);
    // write output
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i]);
};
modes.ecb.prototype.pad = function(input, options) {
    // add PKCS#7 padding to block (each pad byte is the
    // value of the number of pad bytes)
    var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
    input.fillWithByte(padding, padding);
    return true;
};
modes.ecb.prototype.unpad = function(output, options) {
    // check for error: input data not a multiple of blockSize
    if (options.overflow > 0) return false;
    // ensure padding byte count is valid
    var len = output.length();
    var count = output.at(len - 1);
    if (count > this.blockSize << 2) return false;
    // trim off padding bytes
    output.truncate(count);
    return true;
};
/** Cipher-block Chaining (CBC) **/ modes.cbc = function(options) {
    options = options || {};
    this.name = "CBC";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
};
modes.cbc.prototype.start = function(options) {
    // Note: legacy support for using IV residue (has security flaws)
    // if IV is null, reuse block from previous processing
    if (options.iv === null) {
        // must have a previous block
        if (!this._prev) throw new Error("Invalid IV parameter.");
        this._iv = this._prev.slice(0);
    } else if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    else {
        // save IV as "previous" block
        this._iv = transformIV(options.iv, this.blockSize);
        this._prev = this._iv.slice(0);
    }
};
modes.cbc.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    if (input.length() < this.blockSize && !(finish && input.length() > 0)) return true;
    // get next block
    // CBC XOR's IV (or previous block) with plaintext
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = this._prev[i] ^ input.getInt32();
    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // write output, save previous block
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i]);
    this._prev = this._outBlock;
};
modes.cbc.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    if (input.length() < this.blockSize && !(finish && input.length() > 0)) return true;
    // get next block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = input.getInt32();
    // decrypt block
    this.cipher.decrypt(this._inBlock, this._outBlock);
    // write output, save previous ciphered block
    // CBC XOR's IV (or previous block) with ciphertext
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._prev[i] ^ this._outBlock[i]);
    this._prev = this._inBlock.slice(0);
};
modes.cbc.prototype.pad = function(input, options) {
    // add PKCS#7 padding to block (each pad byte is the
    // value of the number of pad bytes)
    var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
    input.fillWithByte(padding, padding);
    return true;
};
modes.cbc.prototype.unpad = function(output, options) {
    // check for error: input data not a multiple of blockSize
    if (options.overflow > 0) return false;
    // ensure padding byte count is valid
    var len = output.length();
    var count = output.at(len - 1);
    if (count > this.blockSize << 2) return false;
    // trim off padding bytes
    output.truncate(count);
    return true;
};
/** Cipher feedback (CFB) **/ modes.cfb = function(options) {
    options = options || {};
    this.name = "CFB";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialBlock = new Array(this._ints);
    this._partialOutput = forge.util.createBuffer();
    this._partialBytes = 0;
};
modes.cfb.prototype.start = function(options) {
    if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    // use IV as first input
    this._iv = transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
};
modes.cfb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if (inputLength === 0) return true;
    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        // XOR input with output, write input as output
        for(var i = 0; i < this._ints; ++i){
            this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
            output.putInt32(this._inBlock[i]);
        }
        return;
    }
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
    // XOR input with output, write input as partial output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i){
        this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
        this._partialOutput.putInt32(this._partialBlock[i]);
    }
    if (partialBytes > 0) // block still incomplete, restore input buffer
    input.read -= this.blockSize;
    else // block complete, update input block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = this._partialBlock[i];
    // skip any previous partial bytes
    if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
    if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
        this._partialBytes = partialBytes;
        return true;
    }
    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
};
modes.cfb.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    var inputLength = input.length();
    if (inputLength === 0) return true;
    // encrypt block (CFB always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        // XOR input with output, write input as output
        for(var i = 0; i < this._ints; ++i){
            this._inBlock[i] = input.getInt32();
            output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
        }
        return;
    }
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
    // XOR input with output, write input as partial output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i){
        this._partialBlock[i] = input.getInt32();
        this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
    }
    if (partialBytes > 0) // block still incomplete, restore input buffer
    input.read -= this.blockSize;
    else // block complete, update input block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = this._partialBlock[i];
    // skip any previous partial bytes
    if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
    if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
        this._partialBytes = partialBytes;
        return true;
    }
    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
};
/** Output feedback (OFB) **/ modes.ofb = function(options) {
    options = options || {};
    this.name = "OFB";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialOutput = forge.util.createBuffer();
    this._partialBytes = 0;
};
modes.ofb.prototype.start = function(options) {
    if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    // use IV as first input
    this._iv = transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
};
modes.ofb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if (input.length() === 0) return true;
    // encrypt block (OFB always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        // XOR input with output and update next input
        for(var i = 0; i < this._ints; ++i){
            output.putInt32(input.getInt32() ^ this._outBlock[i]);
            this._inBlock[i] = this._outBlock[i];
        }
        return;
    }
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
    // XOR input with output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i)this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    if (partialBytes > 0) // block still incomplete, restore input buffer
    input.read -= this.blockSize;
    else // block complete, update input block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = this._outBlock[i];
    // skip any previous partial bytes
    if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
    if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
        this._partialBytes = partialBytes;
        return true;
    }
    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
};
modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;
/** Counter (CTR) **/ modes.ctr = function(options) {
    options = options || {};
    this.name = "CTR";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialOutput = forge.util.createBuffer();
    this._partialBytes = 0;
};
modes.ctr.prototype.start = function(options) {
    if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    // use IV as first input
    this._iv = transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
};
modes.ctr.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if (inputLength === 0) return true;
    // encrypt block (CTR always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) // XOR input with output
    for(var i = 0; i < this._ints; ++i)output.putInt32(input.getInt32() ^ this._outBlock[i]);
    else {
        // handle partial block
        var partialBytes = (this.blockSize - inputLength) % this.blockSize;
        if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
        // XOR input with output
        this._partialOutput.clear();
        for(var i = 0; i < this._ints; ++i)this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
        if (partialBytes > 0) // block still incomplete, restore input buffer
        input.read -= this.blockSize;
        // skip any previous partial bytes
        if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
        if (partialBytes > 0 && !finish) {
            output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
            this._partialBytes = partialBytes;
            return true;
        }
        output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
        this._partialBytes = 0;
    }
    // block complete, increment counter (input block)
    inc32(this._inBlock);
};
modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;
/** Galois/Counter Mode (GCM) **/ modes.gcm = function(options) {
    options = options || {};
    this.name = "GCM";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
    this._partialOutput = forge.util.createBuffer();
    this._partialBytes = 0;
    // R is actually this value concatenated with 120 more zero bits, but
    // we only XOR against R so the other zeros have no effect -- we just
    // apply this value to the first integer in a block
    this._R = 0xE1000000;
};
modes.gcm.prototype.start = function(options) {
    if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    // ensure IV is a byte buffer
    var iv = forge.util.createBuffer(options.iv);
    // no ciphered data processed yet
    this._cipherLength = 0;
    // default additional data is none
    var additionalData;
    if ("additionalData" in options) additionalData = forge.util.createBuffer(options.additionalData);
    else additionalData = forge.util.createBuffer();
    // default tag length is 128 bits
    if ("tagLength" in options) this._tagLength = options.tagLength;
    else this._tagLength = 128;
    // if tag is given, ensure tag matches tag length
    this._tag = null;
    if (options.decrypt) {
        // save tag to check later
        this._tag = forge.util.createBuffer(options.tag).getBytes();
        if (this._tag.length !== this._tagLength / 8) throw new Error("Authentication tag does not match tag length.");
    }
    // create tmp storage for hash calculation
    this._hashBlock = new Array(this._ints);
    // no tag generated yet
    this.tag = null;
    // generate hash subkey
    // (apply block cipher to "zero" block)
    this._hashSubkey = new Array(this._ints);
    this.cipher.encrypt([
        0,
        0,
        0,
        0
    ], this._hashSubkey);
    // generate table M
    // use 4-bit tables (32 component decomposition of a 16 byte value)
    // 8-bit tables take more space and are known to have security
    // vulnerabilities (in native implementations)
    this.componentBits = 4;
    this._m = this.generateHashTable(this._hashSubkey, this.componentBits);
    // Note: support IV length different from 96 bits? (only supporting
    // 96 bits is recommended by NIST SP-800-38D)
    // generate J_0
    var ivLength = iv.length();
    if (ivLength === 12) // 96-bit IV
    this._j0 = [
        iv.getInt32(),
        iv.getInt32(),
        iv.getInt32(),
        1
    ];
    else {
        // IV is NOT 96-bits
        this._j0 = [
            0,
            0,
            0,
            0
        ];
        while(iv.length() > 0)this._j0 = this.ghash(this._hashSubkey, this._j0, [
            iv.getInt32(),
            iv.getInt32(),
            iv.getInt32(),
            iv.getInt32()
        ]);
        this._j0 = this.ghash(this._hashSubkey, this._j0, [
            0,
            0
        ].concat(from64To32(ivLength * 8)));
    }
    // generate ICB (initial counter block)
    this._inBlock = this._j0.slice(0);
    inc32(this._inBlock);
    this._partialBytes = 0;
    // consume authentication data
    additionalData = forge.util.createBuffer(additionalData);
    // save additional data length as a BE 64-bit number
    this._aDataLength = from64To32(additionalData.length() * 8);
    // pad additional data to 128 bit (16 byte) block size
    var overflow = additionalData.length() % this.blockSize;
    if (overflow) additionalData.fillWithByte(0, this.blockSize - overflow);
    this._s = [
        0,
        0,
        0,
        0
    ];
    while(additionalData.length() > 0)this._s = this.ghash(this._hashSubkey, this._s, [
        additionalData.getInt32(),
        additionalData.getInt32(),
        additionalData.getInt32(),
        additionalData.getInt32()
    ]);
};
modes.gcm.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if (inputLength === 0) return true;
    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        // XOR input with output
        for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i] ^= input.getInt32());
        this._cipherLength += this.blockSize;
    } else {
        // handle partial block
        var partialBytes = (this.blockSize - inputLength) % this.blockSize;
        if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
        // XOR input with output
        this._partialOutput.clear();
        for(var i = 0; i < this._ints; ++i)this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
        if (partialBytes <= 0 || finish) {
            // handle overflow prior to hashing
            if (finish) {
                // get block overflow
                var overflow = inputLength % this.blockSize;
                this._cipherLength += overflow;
                // truncate for hash function
                this._partialOutput.truncate(this.blockSize - overflow);
            } else this._cipherLength += this.blockSize;
            // get output block for hashing
            for(var i = 0; i < this._ints; ++i)this._outBlock[i] = this._partialOutput.getInt32();
            this._partialOutput.read -= this.blockSize;
        }
        // skip any previous partial bytes
        if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
        if (partialBytes > 0 && !finish) {
            // block still incomplete, restore input buffer, get partial output,
            // and return early
            input.read -= this.blockSize;
            output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
            this._partialBytes = partialBytes;
            return true;
        }
        output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
        this._partialBytes = 0;
    }
    // update hash block S
    this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);
    // increment counter (input block)
    inc32(this._inBlock);
};
modes.gcm.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    var inputLength = input.length();
    if (inputLength < this.blockSize && !(finish && inputLength > 0)) return true;
    // encrypt block (GCM always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // increment counter (input block)
    inc32(this._inBlock);
    // update hash block S
    this._hashBlock[0] = input.getInt32();
    this._hashBlock[1] = input.getInt32();
    this._hashBlock[2] = input.getInt32();
    this._hashBlock[3] = input.getInt32();
    this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);
    // XOR hash input with output
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
    // increment cipher data length
    if (inputLength < this.blockSize) this._cipherLength += inputLength % this.blockSize;
    else this._cipherLength += this.blockSize;
};
modes.gcm.prototype.afterFinish = function(output, options) {
    var rval = true;
    // handle overflow
    if (options.decrypt && options.overflow) output.truncate(this.blockSize - options.overflow);
    // handle authentication tag
    this.tag = forge.util.createBuffer();
    // concatenate additional data length with cipher length
    var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));
    // include lengths in hash
    this._s = this.ghash(this._hashSubkey, this._s, lengths);
    // do GCTR(J_0, S)
    var tag = [];
    this.cipher.encrypt(this._j0, tag);
    for(var i = 0; i < this._ints; ++i)this.tag.putInt32(this._s[i] ^ tag[i]);
    // trim tag to length
    this.tag.truncate(this.tag.length() % (this._tagLength / 8));
    // check authentication tag
    if (options.decrypt && this.tag.bytes() !== this._tag) rval = false;
    return rval;
};
/**
 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
 * field multiplication. The field, GF(2^128), is defined by the polynomial:
 *
 * x^128 + x^7 + x^2 + x + 1
 *
 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
 * the value of a coefficient is 1, a bit is set. The value R, is the
 * concatenation of this value and 120 zero bits, yielding a 128-bit value
 * which matches the block size.
 *
 * This function will multiply two elements (vectors of bytes), X and Y, in
 * the field GF(2^128). The result is initialized to zero. For each bit of
 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
 * by the current value of Y. For each bit, the value of Y will be raised by
 * a power of x (multiplied by the polynomial x). This can be achieved by
 * shifting Y once to the right. If the current value of Y, prior to being
 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
 * Otherwise, we must divide by R after shifting to find the remainder.
 *
 * @param x the first block to multiply by the second.
 * @param y the second block to multiply by the first.
 *
 * @return the block result of the multiplication.
 */ modes.gcm.prototype.multiply = function(x, y) {
    var z_i = [
        0,
        0,
        0,
        0
    ];
    var v_i = y.slice(0);
    // calculate Z_128 (block has 128 bits)
    for(var i = 0; i < 128; ++i){
        // if x_i is 0, Z_{i+1} = Z_i (unchanged)
        // else Z_{i+1} = Z_i ^ V_i
        // get x_i by finding 32-bit int position, then left shift 1 by remainder
        var x_i = x[i / 32 | 0] & 1 << 31 - i % 32;
        if (x_i) {
            z_i[0] ^= v_i[0];
            z_i[1] ^= v_i[1];
            z_i[2] ^= v_i[2];
            z_i[3] ^= v_i[3];
        }
        // if LSB(V_i) is 1, V_i = V_i >> 1
        // else V_i = (V_i >> 1) ^ R
        this.pow(v_i, v_i);
    }
    return z_i;
};
modes.gcm.prototype.pow = function(x, out) {
    // if LSB(x) is 1, x = x >>> 1
    // else x = (x >>> 1) ^ R
    var lsb = x[3] & 1;
    // always do x >>> 1:
    // starting with the rightmost integer, shift each integer to the right
    // one bit, pulling in the bit from the integer to the left as its top
    // most bit (do this for the last 3 integers)
    for(var i = 3; i > 0; --i)out[i] = x[i] >>> 1 | (x[i - 1] & 1) << 31;
    // shift the first integer normally
    out[0] = x[0] >>> 1;
    // if lsb was not set, then polynomial had a degree of 127 and doesn't
    // need to divided; otherwise, XOR with R to find the remainder; we only
    // need to XOR the first integer since R technically ends w/120 zero bits
    if (lsb) out[0] ^= this._R;
};
modes.gcm.prototype.tableMultiply = function(x) {
    // assumes 4-bit tables are used
    var z = [
        0,
        0,
        0,
        0
    ];
    for(var i = 0; i < 32; ++i){
        var idx = i / 8 | 0;
        var x_i = x[idx] >>> (7 - i % 8) * 4 & 0xF;
        var ah = this._m[i][x_i];
        z[0] ^= ah[0];
        z[1] ^= ah[1];
        z[2] ^= ah[2];
        z[3] ^= ah[3];
    }
    return z;
};
/**
 * A continuing version of the GHASH algorithm that operates on a single
 * block. The hash block, last hash value (Ym) and the new block to hash
 * are given.
 *
 * @param h the hash block.
 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
 * @param x the block to hash.
 *
 * @return the hashed value (Ym).
 */ modes.gcm.prototype.ghash = function(h, y, x) {
    y[0] ^= x[0];
    y[1] ^= x[1];
    y[2] ^= x[2];
    y[3] ^= x[3];
    return this.tableMultiply(y);
//return this.multiply(y, h);
};
/**
 * Precomputes a table for multiplying against the hash subkey. This
 * mechanism provides a substantial speed increase over multiplication
 * performed without a table. The table-based multiplication this table is
 * for solves X * H by multiplying each component of X by H and then
 * composing the results together using XOR.
 *
 * This function can be used to generate tables with different bit sizes
 * for the components, however, this implementation assumes there are
 * 32 components of X (which is a 16 byte vector), therefore each component
 * takes 4-bits (so the table is constructed with bits=4).
 *
 * @param h the hash subkey.
 * @param bits the bit size for a component.
 */ modes.gcm.prototype.generateHashTable = function(h, bits) {
    // TODO: There are further optimizations that would use only the
    // first table M_0 (or some variant) along with a remainder table;
    // this can be explored in the future
    var multiplier = 8 / bits;
    var perInt = 4 * multiplier;
    var size = 16 * multiplier;
    var m = new Array(size);
    for(var i = 0; i < size; ++i){
        var tmp = [
            0,
            0,
            0,
            0
        ];
        var idx = i / perInt | 0;
        var shft = (perInt - 1 - i % perInt) * bits;
        tmp[idx] = 1 << bits - 1 << shft;
        m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
    }
    return m;
};
/**
 * Generates a table for multiplying against the hash subkey for one
 * particular component (out of all possible component values).
 *
 * @param mid the pre-multiplied value for the middle key of the table.
 * @param bits the bit size for a component.
 */ modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
    // compute the table quickly by minimizing the number of
    // POW operations -- they only need to be performed for powers of 2,
    // all other entries can be composed from those powers using XOR
    var size = 1 << bits;
    var half = size >>> 1;
    var m = new Array(size);
    m[half] = mid.slice(0);
    var i = half >>> 1;
    while(i > 0){
        // raise m0[2 * i] and store in m0[i]
        this.pow(m[2 * i], m[i] = []);
        i >>= 1;
    }
    i = 2;
    while(i < half){
        for(var j = 1; j < i; ++j){
            var m_i = m[i];
            var m_j = m[j];
            m[i + j] = [
                m_i[0] ^ m_j[0],
                m_i[1] ^ m_j[1],
                m_i[2] ^ m_j[2],
                m_i[3] ^ m_j[3]
            ];
        }
        i *= 2;
    }
    m[0] = [
        0,
        0,
        0,
        0
    ];
    /* Note: We could avoid storing these by doing composition during multiply
  calculate top half using composition by speed is preferred. */ for(i = half + 1; i < size; ++i){
        var c = m[i ^ half];
        m[i] = [
            mid[0] ^ c[0],
            mid[1] ^ c[1],
            mid[2] ^ c[2],
            mid[3] ^ c[3]
        ];
    }
    return m;
};
/** Utility functions */ function transformIV(iv, blockSize) {
    if (typeof iv === "string") // convert iv string into byte buffer
    iv = forge.util.createBuffer(iv);
    if (forge.util.isArray(iv) && iv.length > 4) {
        // convert iv byte array into byte buffer
        var tmp = iv;
        iv = forge.util.createBuffer();
        for(var i = 0; i < tmp.length; ++i)iv.putByte(tmp[i]);
    }
    if (iv.length() < blockSize) throw new Error("Invalid IV length; got " + iv.length() + " bytes and expected " + blockSize + " bytes.");
    if (!forge.util.isArray(iv)) {
        // convert iv byte buffer into 32-bit integer array
        var ints = [];
        var blocks = blockSize / 4;
        for(var i = 0; i < blocks; ++i)ints.push(iv.getInt32());
        iv = ints;
    }
    return iv;
}
function inc32(block) {
    // increment last 32 bits of block only
    block[block.length - 1] = block[block.length - 1] + 1 & 0xFFFFFFFF;
}
function from64To32(num) {
    // convert 64-bit number to two BE Int32s
    return [
        num / 0x100000000 | 0,
        num & 0xFFFFFFFF
    ];
}

},{"./forge":"9OMxz","./util":"9XcEH"}],"iMVWl":[function(require,module,exports) {
/**
 * DES (Data Encryption Standard) implementation.
 *
 * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
 * It is based on the BSD-licensed implementation by Paul Tero:
 *
 * Paul Tero, July 2001
 * http://www.tero.co.uk/des/
 *
 * Optimised for performance with large blocks by
 * Michael Hayworth, November 2001
 * http://www.netdealing.com
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./cipher");
require("./cipherModes");
require("./util");
/* DES API */ module.exports = forge.des = forge.des || {};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */ forge.des.startEncrypting = function(key, iv, output, mode) {
    var cipher = _createCipher({
        key: key,
        output: output,
        decrypt: false,
        mode: mode || (iv === null ? "ECB" : "CBC")
    });
    cipher.start(iv);
    return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ forge.des.createEncryptionCipher = function(key, mode) {
    return _createCipher({
        key: key,
        output: null,
        decrypt: false,
        mode: mode
    });
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */ forge.des.startDecrypting = function(key, iv, output, mode) {
    var cipher = _createCipher({
        key: key,
        output: output,
        decrypt: true,
        mode: mode || (iv === null ? "ECB" : "CBC")
    });
    cipher.start(iv);
    return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ forge.des.createDecryptionCipher = function(key, mode) {
    return _createCipher({
        key: key,
        output: null,
        decrypt: true,
        mode: mode
    });
};
/**
 * Creates a new DES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the DES algorithm object.
 */ forge.des.Algorithm = function(name, mode) {
    var self = this;
    self.name = name;
    self.mode = new mode({
        blockSize: 8,
        cipher: {
            encrypt: function(inBlock, outBlock) {
                return _updateBlock(self._keys, inBlock, outBlock, false);
            },
            decrypt: function(inBlock, outBlock) {
                return _updateBlock(self._keys, inBlock, outBlock, true);
            }
        }
    });
    self._init = false;
};
/**
 * Initializes this DES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */ forge.des.Algorithm.prototype.initialize = function(options) {
    if (this._init) return;
    var key = forge.util.createBuffer(options.key);
    if (this.name.indexOf("3DES") === 0) {
        if (key.length() !== 24) throw new Error("Invalid Triple-DES key size: " + key.length() * 8);
    }
    // do key expansion to 16 or 48 subkeys (single or triple DES)
    this._keys = _createKeys(key);
    this._init = true;
};
/** Register DES algorithms **/ registerAlgorithm("DES-ECB", forge.cipher.modes.ecb);
registerAlgorithm("DES-CBC", forge.cipher.modes.cbc);
registerAlgorithm("DES-CFB", forge.cipher.modes.cfb);
registerAlgorithm("DES-OFB", forge.cipher.modes.ofb);
registerAlgorithm("DES-CTR", forge.cipher.modes.ctr);
registerAlgorithm("3DES-ECB", forge.cipher.modes.ecb);
registerAlgorithm("3DES-CBC", forge.cipher.modes.cbc);
registerAlgorithm("3DES-CFB", forge.cipher.modes.cfb);
registerAlgorithm("3DES-OFB", forge.cipher.modes.ofb);
registerAlgorithm("3DES-CTR", forge.cipher.modes.ctr);
function registerAlgorithm(name, mode) {
    var factory = function() {
        return new forge.des.Algorithm(name, mode);
    };
    forge.cipher.registerAlgorithm(name, factory);
}
/** DES implementation **/ var spfunction1 = [
    0x1010400,
    0,
    0x10000,
    0x1010404,
    0x1010004,
    0x10404,
    0x4,
    0x10000,
    0x400,
    0x1010400,
    0x1010404,
    0x400,
    0x1000404,
    0x1010004,
    0x1000000,
    0x4,
    0x404,
    0x1000400,
    0x1000400,
    0x10400,
    0x10400,
    0x1010000,
    0x1010000,
    0x1000404,
    0x10004,
    0x1000004,
    0x1000004,
    0x10004,
    0,
    0x404,
    0x10404,
    0x1000000,
    0x10000,
    0x1010404,
    0x4,
    0x1010000,
    0x1010400,
    0x1000000,
    0x1000000,
    0x400,
    0x1010004,
    0x10000,
    0x10400,
    0x1000004,
    0x400,
    0x4,
    0x1000404,
    0x10404,
    0x1010404,
    0x10004,
    0x1010000,
    0x1000404,
    0x1000004,
    0x404,
    0x10404,
    0x1010400,
    0x404,
    0x1000400,
    0x1000400,
    0,
    0x10004,
    0x10400,
    0,
    0x1010004
];
var spfunction2 = [
    -2146402272,
    -2147450880,
    0x8000,
    0x108020,
    0x100000,
    0x20,
    -2146435040,
    -2147450848,
    -2147483616,
    -2146402272,
    -2146402304,
    -2147483648,
    -2147450880,
    0x100000,
    0x20,
    -2146435040,
    0x108000,
    0x100020,
    -2147450848,
    0,
    -2147483648,
    0x8000,
    0x108020,
    -2146435072,
    0x100020,
    -2147483616,
    0,
    0x108000,
    0x8020,
    -2146402304,
    -2146435072,
    0x8020,
    0,
    0x108020,
    -2146435040,
    0x100000,
    -2147450848,
    -2146435072,
    -2146402304,
    0x8000,
    -2146435072,
    -2147450880,
    0x20,
    -2146402272,
    0x108020,
    0x20,
    0x8000,
    -2147483648,
    0x8020,
    -2146402304,
    0x100000,
    -2147483616,
    0x100020,
    -2147450848,
    -2147483616,
    0x100020,
    0x108000,
    0,
    -2147450880,
    0x8020,
    -2147483648,
    -2146435040,
    -2146402272,
    0x108000
];
var spfunction3 = [
    0x208,
    0x8020200,
    0,
    0x8020008,
    0x8000200,
    0,
    0x20208,
    0x8000200,
    0x20008,
    0x8000008,
    0x8000008,
    0x20000,
    0x8020208,
    0x20008,
    0x8020000,
    0x208,
    0x8000000,
    0x8,
    0x8020200,
    0x200,
    0x20200,
    0x8020000,
    0x8020008,
    0x20208,
    0x8000208,
    0x20200,
    0x20000,
    0x8000208,
    0x8,
    0x8020208,
    0x200,
    0x8000000,
    0x8020200,
    0x8000000,
    0x20008,
    0x208,
    0x20000,
    0x8020200,
    0x8000200,
    0,
    0x200,
    0x20008,
    0x8020208,
    0x8000200,
    0x8000008,
    0x200,
    0,
    0x8020008,
    0x8000208,
    0x20000,
    0x8000000,
    0x8020208,
    0x8,
    0x20208,
    0x20200,
    0x8000008,
    0x8020000,
    0x8000208,
    0x208,
    0x8020000,
    0x20208,
    0x8,
    0x8020008,
    0x20200
];
var spfunction4 = [
    0x802001,
    0x2081,
    0x2081,
    0x80,
    0x802080,
    0x800081,
    0x800001,
    0x2001,
    0,
    0x802000,
    0x802000,
    0x802081,
    0x81,
    0,
    0x800080,
    0x800001,
    0x1,
    0x2000,
    0x800000,
    0x802001,
    0x80,
    0x800000,
    0x2001,
    0x2080,
    0x800081,
    0x1,
    0x2080,
    0x800080,
    0x2000,
    0x802080,
    0x802081,
    0x81,
    0x800080,
    0x800001,
    0x802000,
    0x802081,
    0x81,
    0,
    0,
    0x802000,
    0x2080,
    0x800080,
    0x800081,
    0x1,
    0x802001,
    0x2081,
    0x2081,
    0x80,
    0x802081,
    0x81,
    0x1,
    0x2000,
    0x800001,
    0x2001,
    0x802080,
    0x800081,
    0x2001,
    0x2080,
    0x800000,
    0x802001,
    0x80,
    0x800000,
    0x2000,
    0x802080
];
var spfunction5 = [
    0x100,
    0x2080100,
    0x2080000,
    0x42000100,
    0x80000,
    0x100,
    0x40000000,
    0x2080000,
    0x40080100,
    0x80000,
    0x2000100,
    0x40080100,
    0x42000100,
    0x42080000,
    0x80100,
    0x40000000,
    0x2000000,
    0x40080000,
    0x40080000,
    0,
    0x40000100,
    0x42080100,
    0x42080100,
    0x2000100,
    0x42080000,
    0x40000100,
    0,
    0x42000000,
    0x2080100,
    0x2000000,
    0x42000000,
    0x80100,
    0x80000,
    0x42000100,
    0x100,
    0x2000000,
    0x40000000,
    0x2080000,
    0x42000100,
    0x40080100,
    0x2000100,
    0x40000000,
    0x42080000,
    0x2080100,
    0x40080100,
    0x100,
    0x2000000,
    0x42080000,
    0x42080100,
    0x80100,
    0x42000000,
    0x42080100,
    0x2080000,
    0,
    0x40080000,
    0x42000000,
    0x80100,
    0x2000100,
    0x40000100,
    0x80000,
    0,
    0x40080000,
    0x2080100,
    0x40000100
];
var spfunction6 = [
    0x20000010,
    0x20400000,
    0x4000,
    0x20404010,
    0x20400000,
    0x10,
    0x20404010,
    0x400000,
    0x20004000,
    0x404010,
    0x400000,
    0x20000010,
    0x400010,
    0x20004000,
    0x20000000,
    0x4010,
    0,
    0x400010,
    0x20004010,
    0x4000,
    0x404000,
    0x20004010,
    0x10,
    0x20400010,
    0x20400010,
    0,
    0x404010,
    0x20404000,
    0x4010,
    0x404000,
    0x20404000,
    0x20000000,
    0x20004000,
    0x10,
    0x20400010,
    0x404000,
    0x20404010,
    0x400000,
    0x4010,
    0x20000010,
    0x400000,
    0x20004000,
    0x20000000,
    0x4010,
    0x20000010,
    0x20404010,
    0x404000,
    0x20400000,
    0x404010,
    0x20404000,
    0,
    0x20400010,
    0x10,
    0x4000,
    0x20400000,
    0x404010,
    0x4000,
    0x400010,
    0x20004010,
    0,
    0x20404000,
    0x20000000,
    0x400010,
    0x20004010
];
var spfunction7 = [
    0x200000,
    0x4200002,
    0x4000802,
    0,
    0x800,
    0x4000802,
    0x200802,
    0x4200800,
    0x4200802,
    0x200000,
    0,
    0x4000002,
    0x2,
    0x4000000,
    0x4200002,
    0x802,
    0x4000800,
    0x200802,
    0x200002,
    0x4000800,
    0x4000002,
    0x4200000,
    0x4200800,
    0x200002,
    0x4200000,
    0x800,
    0x802,
    0x4200802,
    0x200800,
    0x2,
    0x4000000,
    0x200800,
    0x4000000,
    0x200800,
    0x200000,
    0x4000802,
    0x4000802,
    0x4200002,
    0x4200002,
    0x2,
    0x200002,
    0x4000000,
    0x4000800,
    0x200000,
    0x4200800,
    0x802,
    0x200802,
    0x4200800,
    0x802,
    0x4000002,
    0x4200802,
    0x4200000,
    0x200800,
    0,
    0x2,
    0x4200802,
    0,
    0x200802,
    0x4200000,
    0x800,
    0x4000002,
    0x4000800,
    0x800,
    0x200002
];
var spfunction8 = [
    0x10001040,
    0x1000,
    0x40000,
    0x10041040,
    0x10000000,
    0x10001040,
    0x40,
    0x10000000,
    0x40040,
    0x10040000,
    0x10041040,
    0x41000,
    0x10041000,
    0x41040,
    0x1000,
    0x40,
    0x10040000,
    0x10000040,
    0x10001000,
    0x1040,
    0x41000,
    0x40040,
    0x10040040,
    0x10041000,
    0x1040,
    0,
    0,
    0x10040040,
    0x10000040,
    0x10001000,
    0x41040,
    0x40000,
    0x41040,
    0x40000,
    0x10041000,
    0x1000,
    0x40,
    0x10040040,
    0x1000,
    0x41040,
    0x10001000,
    0x40,
    0x10000040,
    0x10040000,
    0x10040040,
    0x10000000,
    0x40000,
    0x10001040,
    0,
    0x10041040,
    0x40040,
    0x10000040,
    0x10040000,
    0x10001000,
    0x10001040,
    0,
    0x10041040,
    0x41000,
    0x41000,
    0x1040,
    0x1040,
    0x40040,
    0x10000000,
    0x10041000
];
/**
 * Create necessary sub keys.
 *
 * @param key the 64-bit or 192-bit key.
 *
 * @return the expanded keys.
 */ function _createKeys(key) {
    var pc2bytes0 = [
        0,
        0x4,
        0x20000000,
        0x20000004,
        0x10000,
        0x10004,
        0x20010000,
        0x20010004,
        0x200,
        0x204,
        0x20000200,
        0x20000204,
        0x10200,
        0x10204,
        0x20010200,
        0x20010204
    ], pc2bytes1 = [
        0,
        0x1,
        0x100000,
        0x100001,
        0x4000000,
        0x4000001,
        0x4100000,
        0x4100001,
        0x100,
        0x101,
        0x100100,
        0x100101,
        0x4000100,
        0x4000101,
        0x4100100,
        0x4100101
    ], pc2bytes2 = [
        0,
        0x8,
        0x800,
        0x808,
        0x1000000,
        0x1000008,
        0x1000800,
        0x1000808,
        0,
        0x8,
        0x800,
        0x808,
        0x1000000,
        0x1000008,
        0x1000800,
        0x1000808
    ], pc2bytes3 = [
        0,
        0x200000,
        0x8000000,
        0x8200000,
        0x2000,
        0x202000,
        0x8002000,
        0x8202000,
        0x20000,
        0x220000,
        0x8020000,
        0x8220000,
        0x22000,
        0x222000,
        0x8022000,
        0x8222000
    ], pc2bytes4 = [
        0,
        0x40000,
        0x10,
        0x40010,
        0,
        0x40000,
        0x10,
        0x40010,
        0x1000,
        0x41000,
        0x1010,
        0x41010,
        0x1000,
        0x41000,
        0x1010,
        0x41010
    ], pc2bytes5 = [
        0,
        0x400,
        0x20,
        0x420,
        0,
        0x400,
        0x20,
        0x420,
        0x2000000,
        0x2000400,
        0x2000020,
        0x2000420,
        0x2000000,
        0x2000400,
        0x2000020,
        0x2000420
    ], pc2bytes6 = [
        0,
        0x10000000,
        0x80000,
        0x10080000,
        0x2,
        0x10000002,
        0x80002,
        0x10080002,
        0,
        0x10000000,
        0x80000,
        0x10080000,
        0x2,
        0x10000002,
        0x80002,
        0x10080002
    ], pc2bytes7 = [
        0,
        0x10000,
        0x800,
        0x10800,
        0x20000000,
        0x20010000,
        0x20000800,
        0x20010800,
        0x20000,
        0x30000,
        0x20800,
        0x30800,
        0x20020000,
        0x20030000,
        0x20020800,
        0x20030800
    ], pc2bytes8 = [
        0,
        0x40000,
        0,
        0x40000,
        0x2,
        0x40002,
        0x2,
        0x40002,
        0x2000000,
        0x2040000,
        0x2000000,
        0x2040000,
        0x2000002,
        0x2040002,
        0x2000002,
        0x2040002
    ], pc2bytes9 = [
        0,
        0x10000000,
        0x8,
        0x10000008,
        0,
        0x10000000,
        0x8,
        0x10000008,
        0x400,
        0x10000400,
        0x408,
        0x10000408,
        0x400,
        0x10000400,
        0x408,
        0x10000408
    ], pc2bytes10 = [
        0,
        0x20,
        0,
        0x20,
        0x100000,
        0x100020,
        0x100000,
        0x100020,
        0x2000,
        0x2020,
        0x2000,
        0x2020,
        0x102000,
        0x102020,
        0x102000,
        0x102020
    ], pc2bytes11 = [
        0,
        0x1000000,
        0x200,
        0x1000200,
        0x200000,
        0x1200000,
        0x200200,
        0x1200200,
        0x4000000,
        0x5000000,
        0x4000200,
        0x5000200,
        0x4200000,
        0x5200000,
        0x4200200,
        0x5200200
    ], pc2bytes12 = [
        0,
        0x1000,
        0x8000000,
        0x8001000,
        0x80000,
        0x81000,
        0x8080000,
        0x8081000,
        0x10,
        0x1010,
        0x8000010,
        0x8001010,
        0x80010,
        0x81010,
        0x8080010,
        0x8081010
    ], pc2bytes13 = [
        0,
        0x4,
        0x100,
        0x104,
        0,
        0x4,
        0x100,
        0x104,
        0x1,
        0x5,
        0x101,
        0x105,
        0x1,
        0x5,
        0x101,
        0x105
    ];
    // how many iterations (1 for des, 3 for triple des)
    // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys
    var iterations = key.length() > 8 ? 3 : 1;
    // stores the return keys
    var keys = [];
    // now define the left shifts which need to be done
    var shifts = [
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        0
    ];
    var n = 0, tmp;
    for(var j = 0; j < iterations; j++){
        var left = key.getInt32();
        var right = key.getInt32();
        tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
        right ^= tmp;
        left ^= tmp << 4;
        tmp = (right >>> -16 ^ left) & 0x0000ffff;
        left ^= tmp;
        right ^= tmp << -16;
        tmp = (left >>> 2 ^ right) & 0x33333333;
        right ^= tmp;
        left ^= tmp << 2;
        tmp = (right >>> -16 ^ left) & 0x0000ffff;
        left ^= tmp;
        right ^= tmp << -16;
        tmp = (left >>> 1 ^ right) & 0x55555555;
        right ^= tmp;
        left ^= tmp << 1;
        tmp = (right >>> 8 ^ left) & 0x00ff00ff;
        left ^= tmp;
        right ^= tmp << 8;
        tmp = (left >>> 1 ^ right) & 0x55555555;
        right ^= tmp;
        left ^= tmp << 1;
        // right needs to be shifted and OR'd with last four bits of left
        tmp = left << 8 | right >>> 20 & 0x000000f0;
        // left needs to be put upside down
        left = right << 24 | right << 8 & 0xff0000 | right >>> 8 & 0xff00 | right >>> 24 & 0xf0;
        right = tmp;
        // now go through and perform these shifts on the left and right keys
        for(var i = 0; i < shifts.length; ++i){
            //shift the keys either one or two bits to the left
            if (shifts[i]) {
                left = left << 2 | left >>> 26;
                right = right << 2 | right >>> 26;
            } else {
                left = left << 1 | left >>> 27;
                right = right << 1 | right >>> 27;
            }
            left &= -15;
            right &= -15;
            // now apply PC-2, in such a way that E is easier when encrypting or
            // decrypting this conversion will look like PC-2 except only the last 6
            // bits of each byte are used rather than 48 consecutive bits and the
            // order of lines will be according to how the S selection functions will
            // be applied: S2, S4, S6, S8, S1, S3, S5, S7
            var lefttmp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 0xf] | pc2bytes2[left >>> 20 & 0xf] | pc2bytes3[left >>> 16 & 0xf] | pc2bytes4[left >>> 12 & 0xf] | pc2bytes5[left >>> 8 & 0xf] | pc2bytes6[left >>> 4 & 0xf];
            var righttmp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 0xf] | pc2bytes9[right >>> 20 & 0xf] | pc2bytes10[right >>> 16 & 0xf] | pc2bytes11[right >>> 12 & 0xf] | pc2bytes12[right >>> 8 & 0xf] | pc2bytes13[right >>> 4 & 0xf];
            tmp = (righttmp >>> 16 ^ lefttmp) & 0x0000ffff;
            keys[n++] = lefttmp ^ tmp;
            keys[n++] = righttmp ^ tmp << 16;
        }
    }
    return keys;
}
/**
 * Updates a single block (1 byte) using DES. The update will either
 * encrypt or decrypt the block.
 *
 * @param keys the expanded keys.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */ function _updateBlock(keys, input, output, decrypt) {
    // set up loops for single or triple DES
    var iterations = keys.length === 32 ? 3 : 9;
    var looping;
    if (iterations === 3) looping = decrypt ? [
        30,
        -2,
        -2
    ] : [
        0,
        32,
        2
    ];
    else looping = decrypt ? [
        94,
        62,
        -2,
        32,
        64,
        2,
        30,
        -2,
        -2
    ] : [
        0,
        32,
        2,
        62,
        30,
        -2,
        64,
        96,
        2
    ];
    var tmp;
    var left = input[0];
    var right = input[1];
    // first each 64 bit chunk of the message must be permuted according to IP
    tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
    right ^= tmp;
    left ^= tmp << 4;
    tmp = (left >>> 16 ^ right) & 0x0000ffff;
    right ^= tmp;
    left ^= tmp << 16;
    tmp = (right >>> 2 ^ left) & 0x33333333;
    left ^= tmp;
    right ^= tmp << 2;
    tmp = (right >>> 8 ^ left) & 0x00ff00ff;
    left ^= tmp;
    right ^= tmp << 8;
    tmp = (left >>> 1 ^ right) & 0x55555555;
    right ^= tmp;
    left ^= tmp << 1;
    // rotate left 1 bit
    left = left << 1 | left >>> 31;
    right = right << 1 | right >>> 31;
    for(var j = 0; j < iterations; j += 3){
        var endloop = looping[j + 1];
        var loopinc = looping[j + 2];
        // now go through and perform the encryption or decryption
        for(var i = looping[j]; i != endloop; i += loopinc){
            var right1 = right ^ keys[i];
            var right2 = (right >>> 4 | right << 28) ^ keys[i + 1];
            // passing these bytes through the S selection functions
            tmp = left;
            left = right;
            right = tmp ^ (spfunction2[right1 >>> 24 & 0x3f] | spfunction4[right1 >>> 16 & 0x3f] | spfunction6[right1 >>> 8 & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[right2 >>> 24 & 0x3f] | spfunction3[right2 >>> 16 & 0x3f] | spfunction5[right2 >>> 8 & 0x3f] | spfunction7[right2 & 0x3f]);
        }
        // unreverse left and right
        tmp = left;
        left = right;
        right = tmp;
    }
    // rotate right 1 bit
    left = left >>> 1 | left << 31;
    right = right >>> 1 | right << 31;
    // now perform IP-1, which is IP in the opposite direction
    tmp = (left >>> 1 ^ right) & 0x55555555;
    right ^= tmp;
    left ^= tmp << 1;
    tmp = (right >>> 8 ^ left) & 0x00ff00ff;
    left ^= tmp;
    right ^= tmp << 8;
    tmp = (right >>> 2 ^ left) & 0x33333333;
    left ^= tmp;
    right ^= tmp << 2;
    tmp = (left >>> 16 ^ right) & 0x0000ffff;
    right ^= tmp;
    left ^= tmp << 16;
    tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
    right ^= tmp;
    left ^= tmp << 4;
    output[0] = left;
    output[1] = right;
}
/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('DES-<mode>', key);
 * forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates a deprecated DES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param options the options to use.
 *          key the symmetric key to use (64 or 192 bits).
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ function _createCipher(options1) {
    options1 = options1 || {};
    var mode = (options1.mode || "CBC").toUpperCase();
    var algorithm = "DES-" + mode;
    var cipher;
    if (options1.decrypt) cipher = forge.cipher.createDecipher(algorithm, options1.key);
    else cipher = forge.cipher.createCipher(algorithm, options1.key);
    // backwards compatible start API
    var start = cipher.start;
    cipher.start = function(iv, options) {
        // backwards compatibility: support second arg as output buffer
        var output = null;
        if (options instanceof forge.util.ByteBuffer) {
            output = options;
            options = {};
        }
        options = options || {};
        options.output = output;
        options.iv = iv;
        start.call(cipher, options);
    };
    return cipher;
}

},{"./forge":"9OMxz","./cipher":"fsZW2","./cipherModes":"1GUoG","./util":"9XcEH"}],"lMdro":[function(require,module,exports) {
/**
 * Node.js module for Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */ var forge = require("./forge");
module.exports = forge.md = forge.md || {};
forge.md.algorithms = forge.md.algorithms || {};

},{"./forge":"9OMxz"}],"4oHZZ":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/**
 * Password-Based Key-Derivation Function #2 implementation.
 *
 * See RFC 2898 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./hmac");
require("./md");
require("./util");
var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};
var crypto;
if (forge.util.isNodejs && !forge.options.usePureJavaScript) crypto = require("crypto");
/**
 * Derives a key from a password.
 *
 * @param p the password as a binary-encoded string of bytes.
 * @param s the salt as a binary-encoded string of bytes.
 * @param c the iteration count, a positive integer.
 * @param dkLen the intended length, in bytes, of the derived key,
 *          (max: 2^32 - 1) * hash length of the PRF.
 * @param [md] the message digest (or algorithm identifier as a string) to use
 *          in the PRF, defaults to SHA-1.
 * @param [callback(err, key)] presence triggers asynchronous version, called
 *          once the operation completes.
 *
 * @return the derived key, as a binary-encoded string of bytes, for the
 *           synchronous version (if no callback is specified).
 */ module.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(p, s, c, dkLen, md, callback) {
    if (typeof md === "function") {
        callback = md;
        md = null;
    }
    // use native implementation if possible and not disabled, note that
    // some node versions only support SHA-1, others allow digest to be changed
    if (forge.util.isNodejs && !forge.options.usePureJavaScript && crypto.pbkdf2 && (md === null || typeof md !== "object") && (crypto.pbkdf2Sync.length > 4 || !md || md === "sha1")) {
        if (typeof md !== "string") // default prf to SHA-1
        md = "sha1";
        p = Buffer.from(p, "binary");
        s = Buffer.from(s, "binary");
        if (!callback) {
            if (crypto.pbkdf2Sync.length === 4) return crypto.pbkdf2Sync(p, s, c, dkLen).toString("binary");
            return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString("binary");
        }
        if (crypto.pbkdf2Sync.length === 4) return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {
            if (err) return callback(err);
            callback(null, key.toString("binary"));
        });
        return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {
            if (err) return callback(err);
            callback(null, key.toString("binary"));
        });
    }
    if (typeof md === "undefined" || md === null) // default prf to SHA-1
    md = "sha1";
    if (typeof md === "string") {
        if (!(md in forge.md.algorithms)) throw new Error("Unknown hash algorithm: " + md);
        md = forge.md[md].create();
    }
    var hLen = md.digestLength;
    /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
    stop. */ if (dkLen > 0xFFFFFFFF * hLen) {
        var err1 = new Error("Derived key is too long.");
        if (callback) return callback(err1);
        throw err1;
    }
    /* 2. Let len be the number of hLen-octet blocks in the derived key,
    rounding up, and let r be the number of octets in the last
    block:

    len = CEIL(dkLen / hLen),
    r = dkLen - (len - 1) * hLen. */ var len = Math.ceil(dkLen / hLen);
    var r = dkLen - (len - 1) * hLen;
    /* 3. For each block of the derived key apply the function F defined
    below to the password P, the salt S, the iteration count c, and
    the block index to compute the block:

    T_1 = F(P, S, c, 1),
    T_2 = F(P, S, c, 2),
    ...
    T_len = F(P, S, c, len),

    where the function F is defined as the exclusive-or sum of the
    first c iterates of the underlying pseudorandom function PRF
    applied to the password P and the concatenation of the salt S
    and the block index i:

    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c

    where

    u_1 = PRF(P, S || INT(i)),
    u_2 = PRF(P, u_1),
    ...
    u_c = PRF(P, u_{c-1}).

    Here, INT(i) is a four-octet encoding of the integer i, most
    significant octet first. */ var prf = forge.hmac.create();
    prf.start(md, p);
    var dk = "";
    var xor, u_c, u_c1;
    // sync version
    if (!callback) {
        for(var i = 1; i <= len; ++i){
            // PRF(P, S || INT(i)) (first iteration)
            prf.start(null, null);
            prf.update(s);
            prf.update(forge.util.int32ToBytes(i));
            xor = u_c1 = prf.digest().getBytes();
            // PRF(P, u_{c-1}) (other iterations)
            for(var j = 2; j <= c; ++j){
                prf.start(null, null);
                prf.update(u_c1);
                u_c = prf.digest().getBytes();
                // F(p, s, c, i)
                xor = forge.util.xorBytes(xor, u_c, hLen);
                u_c1 = u_c;
            }
            /* 4. Concatenate the blocks and extract the first dkLen octets to
        produce a derived key DK:

        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */ dk += i < len ? xor : xor.substr(0, r);
        }
        /* 5. Output the derived key DK. */ return dk;
    }
    // async version
    var i = 1, j;
    function outer() {
        if (i > len) // done
        return callback(null, dk);
        // PRF(P, S || INT(i)) (first iteration)
        prf.start(null, null);
        prf.update(s);
        prf.update(forge.util.int32ToBytes(i));
        xor = u_c1 = prf.digest().getBytes();
        // PRF(P, u_{c-1}) (other iterations)
        j = 2;
        inner();
    }
    function inner() {
        if (j <= c) {
            prf.start(null, null);
            prf.update(u_c1);
            u_c = prf.digest().getBytes();
            // F(p, s, c, i)
            xor = forge.util.xorBytes(xor, u_c, hLen);
            u_c1 = u_c;
            ++j;
            return forge.util.setImmediate(inner);
        }
        /* 4. Concatenate the blocks and extract the first dkLen octets to
      produce a derived key DK:

      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */ dk += i < len ? xor : xor.substr(0, r);
        ++i;
        outer();
    }
    outer();
};

},{"buffer":"jhUEF","./forge":"9OMxz","./hmac":"j8Jgt","./md":"lMdro","./util":"9XcEH","crypto":"jhUEF"}],"j8Jgt":[function(require,module,exports) {
/**
 * Hash-based Message Authentication Code implementation. Requires a message
 * digest object that can be obtained, for example, from forge.md.sha1 or
 * forge.md.md5.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
 */ var forge = require("./forge");
require("./md");
require("./util");
/* HMAC API */ var hmac = module.exports = forge.hmac = forge.hmac || {};
/**
 * Creates an HMAC object that uses the given message digest object.
 *
 * @return an HMAC object.
 */ hmac.create = function() {
    // the hmac key to use
    var _key = null;
    // the message digest to use
    var _md = null;
    // the inner padding
    var _ipadding = null;
    // the outer padding
    var _opadding = null;
    // hmac context
    var ctx = {};
    /**
   * Starts or restarts the HMAC with the given key and message digest.
   *
   * @param md the message digest to use, null to reuse the previous one,
   *           a string to use builtin 'sha1', 'md5', 'sha256'.
   * @param key the key to use as a string, array of bytes, byte buffer,
   *           or null to reuse the previous key.
   */ ctx.start = function(md, key) {
        if (md !== null) {
            if (typeof md === "string") {
                // create builtin message digest
                md = md.toLowerCase();
                if (md in forge.md.algorithms) _md = forge.md.algorithms[md].create();
                else throw new Error('Unknown hash algorithm "' + md + '"');
            } else // store message digest
            _md = md;
        }
        if (key === null) // reuse previous key
        key = _key;
        else {
            if (typeof key === "string") // convert string into byte buffer
            key = forge.util.createBuffer(key);
            else if (forge.util.isArray(key)) {
                // convert byte array into byte buffer
                var tmp = key;
                key = forge.util.createBuffer();
                for(var i = 0; i < tmp.length; ++i)key.putByte(tmp[i]);
            }
            // if key is longer than blocksize, hash it
            var keylen = key.length();
            if (keylen > _md.blockLength) {
                _md.start();
                _md.update(key.bytes());
                key = _md.digest();
            }
            // mix key into inner and outer padding
            // ipadding = [0x36 * blocksize] ^ key
            // opadding = [0x5C * blocksize] ^ key
            _ipadding = forge.util.createBuffer();
            _opadding = forge.util.createBuffer();
            keylen = key.length();
            for(var i = 0; i < keylen; ++i){
                var tmp = key.at(i);
                _ipadding.putByte(0x36 ^ tmp);
                _opadding.putByte(0x5C ^ tmp);
            }
            // if key is shorter than blocksize, add additional padding
            if (keylen < _md.blockLength) {
                var tmp = _md.blockLength - keylen;
                for(var i = 0; i < tmp; ++i){
                    _ipadding.putByte(0x36);
                    _opadding.putByte(0x5C);
                }
            }
            _key = key;
            _ipadding = _ipadding.bytes();
            _opadding = _opadding.bytes();
        }
        // digest is done like so: hash(opadding | hash(ipadding | message))
        // prepare to do inner hash
        // hash(ipadding | message)
        _md.start();
        _md.update(_ipadding);
    };
    /**
   * Updates the HMAC with the given message bytes.
   *
   * @param bytes the bytes to update with.
   */ ctx.update = function(bytes) {
        _md.update(bytes);
    };
    /**
   * Produces the Message Authentication Code (MAC).
   *
   * @return a byte buffer containing the digest value.
   */ ctx.getMac = function() {
        // digest is done like so: hash(opadding | hash(ipadding | message))
        // here we do the outer hashing
        var inner = _md.digest().bytes();
        _md.start();
        _md.update(_opadding);
        _md.update(inner);
        return _md.digest();
    };
    // alias for getMac
    ctx.digest = ctx.getMac;
    return ctx;
};

},{"./forge":"9OMxz","./md":"lMdro","./util":"9XcEH"}],"hMZVk":[function(require,module,exports) {
/**
 * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
 *
 * See: RFC 1421.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 *
 * A Forge PEM object has the following fields:
 *
 * type: identifies the type of message (eg: "RSA PRIVATE KEY").
 *
 * procType: identifies the type of processing performed on the message,
 *   it has two subfields: version and type, eg: 4,ENCRYPTED.
 *
 * contentDomain: identifies the type of content in the message, typically
 *   only uses the value: "RFC822".
 *
 * dekInfo: identifies the message encryption algorithm and mode and includes
 *   any parameters for the algorithm, it has two subfields: algorithm and
 *   parameters, eg: DES-CBC,F8143EDE5960C597.
 *
 * headers: contains all other PEM encapsulated headers -- where order is
 *   significant (for pairing data like recipient ID + key info).
 *
 * body: the binary-encoded body.
 */ var forge = require("./forge");
require("./util");
// shortcut for pem API
var pem = module.exports = forge.pem = forge.pem || {};
/**
 * Encodes (serializes) the given PEM object.
 *
 * @param msg the PEM message object to encode.
 * @param options the options to use:
 *          maxline the maximum characters per line for the body, (default: 64).
 *
 * @return the PEM-formatted string.
 */ pem.encode = function(msg, options) {
    options = options || {};
    var rval = "-----BEGIN " + msg.type + "-----\r\n";
    // encode special headers
    var header;
    if (msg.procType) {
        header = {
            name: "Proc-Type",
            values: [
                String(msg.procType.version),
                msg.procType.type
            ]
        };
        rval += foldHeader(header);
    }
    if (msg.contentDomain) {
        header = {
            name: "Content-Domain",
            values: [
                msg.contentDomain
            ]
        };
        rval += foldHeader(header);
    }
    if (msg.dekInfo) {
        header = {
            name: "DEK-Info",
            values: [
                msg.dekInfo.algorithm
            ]
        };
        if (msg.dekInfo.parameters) header.values.push(msg.dekInfo.parameters);
        rval += foldHeader(header);
    }
    if (msg.headers) // encode all other headers
    for(var i = 0; i < msg.headers.length; ++i)rval += foldHeader(msg.headers[i]);
    // terminate header
    if (msg.procType) rval += "\r\n";
    // add body
    rval += forge.util.encode64(msg.body, options.maxline || 64) + "\r\n";
    rval += "-----END " + msg.type + "-----\r\n";
    return rval;
};
/**
 * Decodes (deserializes) all PEM messages found in the given string.
 *
 * @param str the PEM-formatted string to decode.
 *
 * @return the PEM message objects in an array.
 */ pem.decode = function(str) {
    var rval = [];
    // split string into PEM messages (be lenient w/EOF on BEGIN line)
    var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
    var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
    var rCRLF = /\r?\n/;
    var match;
    while(true){
        match = rMessage.exec(str);
        if (!match) break;
        var msg = {
            type: match[1],
            procType: null,
            contentDomain: null,
            dekInfo: null,
            headers: [],
            body: forge.util.decode64(match[3])
        };
        rval.push(msg);
        // no headers
        if (!match[2]) continue;
        // parse headers
        var lines = match[2].split(rCRLF);
        var li = 0;
        while(match && li < lines.length){
            // get line, trim any rhs whitespace
            var line = lines[li].replace(/\s+$/, "");
            // RFC2822 unfold any following folded lines
            for(var nl = li + 1; nl < lines.length; ++nl){
                var next = lines[nl];
                if (!/\s/.test(next[0])) break;
                line += next;
                li = nl;
            }
            // parse header
            match = line.match(rHeader);
            if (match) {
                var header = {
                    name: match[1],
                    values: []
                };
                var values = match[2].split(",");
                for(var vi = 0; vi < values.length; ++vi)header.values.push(ltrim(values[vi]));
                // Proc-Type must be the first header
                if (!msg.procType) {
                    if (header.name !== "Proc-Type") throw new Error('Invalid PEM formatted message. The first encapsulated header must be "Proc-Type".');
                    else if (header.values.length !== 2) throw new Error('Invalid PEM formatted message. The "Proc-Type" header must have two subfields.');
                    msg.procType = {
                        version: values[0],
                        type: values[1]
                    };
                } else if (!msg.contentDomain && header.name === "Content-Domain") // special-case Content-Domain
                msg.contentDomain = values[0] || "";
                else if (!msg.dekInfo && header.name === "DEK-Info") {
                    // special-case DEK-Info
                    if (header.values.length === 0) throw new Error('Invalid PEM formatted message. The "DEK-Info" header must have at least one subfield.');
                    msg.dekInfo = {
                        algorithm: values[0],
                        parameters: values[1] || null
                    };
                } else msg.headers.push(header);
            }
            ++li;
        }
        if (msg.procType === "ENCRYPTED" && !msg.dekInfo) throw new Error('Invalid PEM formatted message. The "DEK-Info" header must be present if "Proc-Type" is "ENCRYPTED".');
    }
    if (rval.length === 0) throw new Error("Invalid PEM formatted message.");
    return rval;
};
function foldHeader(header) {
    var rval = header.name + ": ";
    // ensure values with CRLF are folded
    var values = [];
    var insertSpace = function(match, $1) {
        return " " + $1;
    };
    for(var i = 0; i < header.values.length; ++i)values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
    rval += values.join(",") + "\r\n";
    // do folding
    var length = 0;
    var candidate = -1;
    for(var i = 0; i < rval.length; ++i, ++length){
        if (length > 65 && candidate !== -1) {
            var insert = rval[candidate];
            if (insert === ",") {
                ++candidate;
                rval = rval.substr(0, candidate) + "\r\n " + rval.substr(candidate);
            } else rval = rval.substr(0, candidate) + "\r\n" + insert + rval.substr(candidate + 1);
            length = i - candidate - 1;
            candidate = -1;
            ++i;
        } else if (rval[i] === " " || rval[i] === "	" || rval[i] === ",") candidate = i;
    }
    return rval;
}
function ltrim(str) {
    return str.replace(/^\s+/, "");
}

},{"./forge":"9OMxz","./util":"9XcEH"}],"fOMS2":[function(require,module,exports) {
/**
 * An API for getting cryptographically-secure random bytes. The bytes are
 * generated using the Fortuna algorithm devised by Bruce Schneier and
 * Niels Ferguson.
 *
 * Getting strong random bytes is not yet easy to do in javascript. The only
 * truish random entropy that can be collected is from the mouse, keyboard, or
 * from timing with respect to page loads, etc. This generator makes a poor
 * attempt at providing random bytes when those sources haven't yet provided
 * enough entropy to initially seed or to reseed the PRNG.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./aes");
require("./sha256");
require("./prng");
require("./util");
(function() {
    // forge.random already defined
    if (forge.random && forge.random.getBytes) {
        module.exports = forge.random;
        return;
    }
    (function(jQuery) {
        // the default prng plugin, uses AES-128
        var prng_aes = {};
        var _prng_aes_output = new Array(4);
        var _prng_aes_buffer = forge.util.createBuffer();
        prng_aes.formatKey = function(key) {
            // convert the key into 32-bit integers
            var tmp = forge.util.createBuffer(key);
            key = new Array(4);
            key[0] = tmp.getInt32();
            key[1] = tmp.getInt32();
            key[2] = tmp.getInt32();
            key[3] = tmp.getInt32();
            // return the expanded key
            return forge.aes._expandKey(key, false);
        };
        prng_aes.formatSeed = function(seed) {
            // convert seed into 32-bit integers
            var tmp = forge.util.createBuffer(seed);
            seed = new Array(4);
            seed[0] = tmp.getInt32();
            seed[1] = tmp.getInt32();
            seed[2] = tmp.getInt32();
            seed[3] = tmp.getInt32();
            return seed;
        };
        prng_aes.cipher = function(key, seed) {
            forge.aes._updateBlock(key, seed, _prng_aes_output, false);
            _prng_aes_buffer.putInt32(_prng_aes_output[0]);
            _prng_aes_buffer.putInt32(_prng_aes_output[1]);
            _prng_aes_buffer.putInt32(_prng_aes_output[2]);
            _prng_aes_buffer.putInt32(_prng_aes_output[3]);
            return _prng_aes_buffer.getBytes();
        };
        prng_aes.increment = function(seed) {
            // FIXME: do we care about carry or signed issues?
            ++seed[3];
            return seed;
        };
        prng_aes.md = forge.md.sha256;
        /**
 * Creates a new PRNG.
 */ function spawnPrng() {
            var ctx = forge.prng.create(prng_aes);
            /**
   * Gets random bytes. If a native secure crypto API is unavailable, this
   * method tries to make the bytes more unpredictable by drawing from data that
   * can be collected from the user of the browser, eg: mouse movement.
   *
   * If a callback is given, this method will be called asynchronously.
   *
   * @param count the number of random bytes to get.
   * @param [callback(err, bytes)] called once the operation completes.
   *
   * @return the random bytes in a string.
   */ ctx.getBytes = function(count, callback) {
                return ctx.generate(count, callback);
            };
            /**
   * Gets random bytes asynchronously. If a native secure crypto API is
   * unavailable, this method tries to make the bytes more unpredictable by
   * drawing from data that can be collected from the user of the browser,
   * eg: mouse movement.
   *
   * @param count the number of random bytes to get.
   *
   * @return the random bytes in a string.
   */ ctx.getBytesSync = function(count) {
                return ctx.generate(count);
            };
            return ctx;
        }
        // create default prng context
        var _ctx = spawnPrng();
        // add other sources of entropy only if window.crypto.getRandomValues is not
        // available -- otherwise this source will be automatically used by the prng
        var getRandomValues = null;
        var globalScope = forge.util.globalScope;
        var _crypto = globalScope.crypto || globalScope.msCrypto;
        if (_crypto && _crypto.getRandomValues) getRandomValues = function(arr) {
            return _crypto.getRandomValues(arr);
        };
        if (forge.options.usePureJavaScript || !forge.util.isNodejs && !getRandomValues) {
            typeof window === "undefined" || window.document;
            // get load time entropy
            _ctx.collectInt(+new Date(), 32);
            // add some entropy from navigator object
            if (typeof navigator !== "undefined") {
                var _navBytes = "";
                for(var key1 in navigator)try {
                    if (typeof navigator[key1] == "string") _navBytes += navigator[key1];
                } catch (e) {
                /* Some navigator keys might not be accessible, e.g. the geolocation
          attribute throws an exception if touched in Mozilla chrome://
          context.

          Silently ignore this and just don't use this as a source of
          entropy. */ }
                _ctx.collect(_navBytes);
                _navBytes = null;
            }
            // add mouse and keyboard collectors if jquery is available
            if (jQuery) {
                // set up mouse entropy capture
                jQuery().mousemove(function(e) {
                    // add mouse coords
                    _ctx.collectInt(e.clientX, 16);
                    _ctx.collectInt(e.clientY, 16);
                });
                // set up keyboard entropy capture
                jQuery().keypress(function(e) {
                    _ctx.collectInt(e.charCode, 8);
                });
            }
        }
        /* Random API */ if (!forge.random) forge.random = _ctx;
        else // extend forge.random with _ctx
        for(var key1 in _ctx)forge.random[key1] = _ctx[key1];
        // expose spawn PRNG
        forge.random.createInstance = spawnPrng;
        module.exports = forge.random;
    })(typeof jQuery !== "undefined" ? jQuery : null);
})();

},{"./forge":"9OMxz","./aes":"9Bdb3","./sha256":"3rnQi","./prng":"3ZYMe","./util":"9XcEH"}],"3rnQi":[function(require,module,exports) {
/**
 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
 *
 * See FIPS 180-2 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./md");
require("./util");
var sha256 = module.exports = forge.sha256 = forge.sha256 || {};
forge.md.sha256 = forge.md.algorithms.sha256 = sha256;
/**
 * Creates a SHA-256 message digest object.
 *
 * @return a message digest object.
 */ sha256.create = function() {
    // do initialization as necessary
    if (!_initialized) _init();
    // SHA-256 state contains eight 32-bit integers
    var _state = null;
    // input buffer
    var _input = forge.util.createBuffer();
    // used for word storage
    var _w = new Array(64);
    // message digest object
    var md = {
        algorithm: "sha256",
        blockLength: 64,
        digestLength: 32,
        // 56-bit length of message so far (does not including padding)
        messageLength: 0,
        // true message length
        fullMessageLength: null,
        // size of message length in bytes
        messageLengthSize: 8
    };
    /**
   * Starts the digest.
   *
   * @return this digest object.
   */ md.start = function() {
        // up to 56-bit message length for convenience
        md.messageLength = 0;
        // full message length (set md.messageLength64 for backwards-compatibility)
        md.fullMessageLength = md.messageLength64 = [];
        var int32s = md.messageLengthSize / 4;
        for(var i = 0; i < int32s; ++i)md.fullMessageLength.push(0);
        _input = forge.util.createBuffer();
        _state = {
            h0: 0x6A09E667,
            h1: 0xBB67AE85,
            h2: 0x3C6EF372,
            h3: 0xA54FF53A,
            h4: 0x510E527F,
            h5: 0x9B05688C,
            h6: 0x1F83D9AB,
            h7: 0x5BE0CD19
        };
        return md;
    };
    // start digest automatically for first time
    md.start();
    /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */ md.update = function(msg, encoding) {
        if (encoding === "utf8") msg = forge.util.encodeUtf8(msg);
        // update message length
        var len = msg.length;
        md.messageLength += len;
        len = [
            len / 0x100000000 >>> 0,
            len >>> 0
        ];
        for(var i = md.fullMessageLength.length - 1; i >= 0; --i){
            md.fullMessageLength[i] += len[1];
            len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
            md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
            len[0] = len[1] / 0x100000000 >>> 0;
        }
        // add bytes to input buffer
        _input.putBytes(msg);
        // process bytes
        _update(_state, _w, _input);
        // compact input buffer every 2K or if empty
        if (_input.read > 2048 || _input.length() === 0) _input.compact();
        return md;
    };
    /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */ md.digest = function() {
        /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-256 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */ /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */ var finalBlock = forge.util.createBuffer();
        finalBlock.putBytes(_input.bytes());
        // compute remaining size to be digested (include message length size)
        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;
        // add padding for overflow blockSize - overflow
        // _padding starts with 1 byte with first bit is set (byte value 128), then
        // there may be up to (blockSize - 1) other pad bytes
        var overflow = remaining & md.blockLength - 1;
        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));
        // serialize message length in bits in big-endian order; since length
        // is stored in bytes we multiply by 8 and add carry from next int
        var next, carry;
        var bits = md.fullMessageLength[0] * 8;
        for(var i = 0; i < md.fullMessageLength.length - 1; ++i){
            next = md.fullMessageLength[i + 1] * 8;
            carry = next / 0x100000000 >>> 0;
            bits += carry;
            finalBlock.putInt32(bits >>> 0);
            bits = next >>> 0;
        }
        finalBlock.putInt32(bits);
        var s2 = {
            h0: _state.h0,
            h1: _state.h1,
            h2: _state.h2,
            h3: _state.h3,
            h4: _state.h4,
            h5: _state.h5,
            h6: _state.h6,
            h7: _state.h7
        };
        _update(s2, _w, finalBlock);
        var rval = forge.util.createBuffer();
        rval.putInt32(s2.h0);
        rval.putInt32(s2.h1);
        rval.putInt32(s2.h2);
        rval.putInt32(s2.h3);
        rval.putInt32(s2.h4);
        rval.putInt32(s2.h5);
        rval.putInt32(s2.h6);
        rval.putInt32(s2.h7);
        return rval;
    };
    return md;
};
// sha-256 padding bytes not initialized yet
var _padding = null;
var _initialized = false;
// table of constants
var _k = null;
/**
 * Initializes the constant tables.
 */ function _init() {
    // create padding
    _padding = String.fromCharCode(128);
    _padding += forge.util.fillString(String.fromCharCode(0x00), 64);
    // create K table for SHA-256
    _k = [
        0x428a2f98,
        0x71374491,
        0xb5c0fbcf,
        0xe9b5dba5,
        0x3956c25b,
        0x59f111f1,
        0x923f82a4,
        0xab1c5ed5,
        0xd807aa98,
        0x12835b01,
        0x243185be,
        0x550c7dc3,
        0x72be5d74,
        0x80deb1fe,
        0x9bdc06a7,
        0xc19bf174,
        0xe49b69c1,
        0xefbe4786,
        0x0fc19dc6,
        0x240ca1cc,
        0x2de92c6f,
        0x4a7484aa,
        0x5cb0a9dc,
        0x76f988da,
        0x983e5152,
        0xa831c66d,
        0xb00327c8,
        0xbf597fc7,
        0xc6e00bf3,
        0xd5a79147,
        0x06ca6351,
        0x14292967,
        0x27b70a85,
        0x2e1b2138,
        0x4d2c6dfc,
        0x53380d13,
        0x650a7354,
        0x766a0abb,
        0x81c2c92e,
        0x92722c85,
        0xa2bfe8a1,
        0xa81a664b,
        0xc24b8b70,
        0xc76c51a3,
        0xd192e819,
        0xd6990624,
        0xf40e3585,
        0x106aa070,
        0x19a4c116,
        0x1e376c08,
        0x2748774c,
        0x34b0bcb5,
        0x391c0cb3,
        0x4ed8aa4a,
        0x5b9cca4f,
        0x682e6ff3,
        0x748f82ee,
        0x78a5636f,
        0x84c87814,
        0x8cc70208,
        0x90befffa,
        0xa4506ceb,
        0xbef9a3f7,
        0xc67178f2
    ];
    // now initialized
    _initialized = true;
}
/**
 * Updates a SHA-256 state with the given byte buffer.
 *
 * @param s the SHA-256 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */ function _update(s, w, bytes) {
    // consume 512 bit (64 byte) chunks
    var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
    var len = bytes.length();
    while(len >= 64){
        // the w array will be populated with sixteen 32-bit big-endian words
        // and then extended into 64 32-bit words according to SHA-256
        for(i = 0; i < 16; ++i)w[i] = bytes.getInt32();
        for(; i < 64; ++i){
            // XOR word 2 words ago rot right 17, rot right 19, shft right 10
            t1 = w[i - 2];
            t1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;
            // XOR word 15 words ago rot right 7, rot right 18, shft right 3
            t2 = w[i - 15];
            t2 = (t2 >>> 7 | t2 << 25) ^ (t2 >>> 18 | t2 << 14) ^ t2 >>> 3;
            // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
            w[i] = t1 + w[i - 7] + t2 + w[i - 16] | 0;
        }
        // initialize hash value for this chunk
        a = s.h0;
        b = s.h1;
        c = s.h2;
        d = s.h3;
        e = s.h4;
        f = s.h5;
        g = s.h6;
        h = s.h7;
        // round function
        for(i = 0; i < 64; ++i){
            // Sum1(e)
            s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
            // Ch(e, f, g) (optimized the same way as SHA-1)
            ch = g ^ e & (f ^ g);
            // Sum0(a)
            s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
            // Maj(a, b, c) (optimized the same way as SHA-1)
            maj = a & b | c & (a ^ b);
            // main algorithm
            t1 = h + s1 + ch + _k[i] + w[i];
            t2 = s0 + maj;
            h = g;
            g = f;
            f = e;
            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
            // can't truncate with `| 0`
            e = d + t1 >>> 0;
            d = c;
            c = b;
            b = a;
            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
            // can't truncate with `| 0`
            a = t1 + t2 >>> 0;
        }
        // update hash state
        s.h0 = s.h0 + a | 0;
        s.h1 = s.h1 + b | 0;
        s.h2 = s.h2 + c | 0;
        s.h3 = s.h3 + d | 0;
        s.h4 = s.h4 + e | 0;
        s.h5 = s.h5 + f | 0;
        s.h6 = s.h6 + g | 0;
        s.h7 = s.h7 + h | 0;
        len -= 64;
    }
}

},{"./forge":"9OMxz","./md":"lMdro","./util":"9XcEH"}],"3ZYMe":[function(require,module,exports) {
var process = require("process");
/**
 * A javascript implementation of a cryptographically-secure
 * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed
 * here though the use of SHA-256 is not enforced; when generating an
 * a PRNG context, the hashing algorithm and block cipher used for
 * the generator are specified via a plugin.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./util");
var _crypto = null;
if (forge.util.isNodejs && !forge.options.usePureJavaScript && !process.versions["node-webkit"]) _crypto = require("crypto");
/* PRNG API */ var prng = module.exports = forge.prng = forge.prng || {};
/**
 * Creates a new PRNG context.
 *
 * A PRNG plugin must be passed in that will provide:
 *
 * 1. A function that initializes the key and seed of a PRNG context. It
 *   will be given a 16 byte key and a 16 byte seed. Any key expansion
 *   or transformation of the seed from a byte string into an array of
 *   integers (or similar) should be performed.
 * 2. The cryptographic function used by the generator. It takes a key and
 *   a seed.
 * 3. A seed increment function. It takes the seed and returns seed + 1.
 * 4. An api to create a message digest.
 *
 * For an example, see random.js.
 *
 * @param plugin the PRNG plugin to use.
 */ prng.create = function(plugin) {
    var ctx = {
        plugin: plugin,
        key: null,
        seed: null,
        time: null,
        // number of reseeds so far
        reseeds: 0,
        // amount of data generated so far
        generated: 0,
        // no initial key bytes
        keyBytes: ""
    };
    // create 32 entropy pools (each is a message digest)
    var md1 = plugin.md;
    var pools = new Array(32);
    for(var i1 = 0; i1 < 32; ++i1)pools[i1] = md1.create();
    ctx.pools = pools;
    // entropy pools are written to cyclically, starting at index 0
    ctx.pool = 0;
    /**
   * Generates random bytes. The bytes may be generated synchronously or
   * asynchronously. Web workers must use the asynchronous interface or
   * else the behavior is undefined.
   *
   * @param count the number of random bytes to generate.
   * @param [callback(err, bytes)] called once the operation completes.
   *
   * @return count random bytes as a string.
   */ ctx.generate = function(count, callback) {
        // do synchronously
        if (!callback) return ctx.generateSync(count);
        // simple generator using counter-based CBC
        var cipher = ctx.plugin.cipher;
        var increment = ctx.plugin.increment;
        var formatKey = ctx.plugin.formatKey;
        var formatSeed = ctx.plugin.formatSeed;
        var b = forge.util.createBuffer();
        // paranoid deviation from Fortuna:
        // reset key for every request to protect previously
        // generated random bytes should the key be discovered;
        // there is no 100ms based reseeding because of this
        // forced reseed for every `generate` call
        ctx.key = null;
        generate();
        function generate(err) {
            if (err) return callback(err);
            // sufficient bytes generated
            if (b.length() >= count) return callback(null, b.getBytes(count));
            // if amount of data generated is greater than 1 MiB, trigger reseed
            if (ctx.generated > 0xfffff) ctx.key = null;
            if (ctx.key === null) // prevent stack overflow
            return forge.util.nextTick(function() {
                _reseed(generate);
            });
            // generate the random bytes
            var bytes = cipher(ctx.key, ctx.seed);
            ctx.generated += bytes.length;
            b.putBytes(bytes);
            // generate bytes for a new key and seed
            ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
            ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
            forge.util.setImmediate(generate);
        }
    };
    /**
   * Generates random bytes synchronously.
   *
   * @param count the number of random bytes to generate.
   *
   * @return count random bytes as a string.
   */ ctx.generateSync = function(count) {
        // simple generator using counter-based CBC
        var cipher = ctx.plugin.cipher;
        var increment = ctx.plugin.increment;
        var formatKey = ctx.plugin.formatKey;
        var formatSeed = ctx.plugin.formatSeed;
        // paranoid deviation from Fortuna:
        // reset key for every request to protect previously
        // generated random bytes should the key be discovered;
        // there is no 100ms based reseeding because of this
        // forced reseed for every `generateSync` call
        ctx.key = null;
        var b = forge.util.createBuffer();
        while(b.length() < count){
            // if amount of data generated is greater than 1 MiB, trigger reseed
            if (ctx.generated > 0xfffff) ctx.key = null;
            if (ctx.key === null) _reseedSync();
            // generate the random bytes
            var bytes = cipher(ctx.key, ctx.seed);
            ctx.generated += bytes.length;
            b.putBytes(bytes);
            // generate bytes for a new key and seed
            ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
            ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
        }
        return b.getBytes(count);
    };
    /**
   * Private function that asynchronously reseeds a generator.
   *
   * @param callback(err) called once the operation completes.
   */ function _reseed(callback) {
        if (ctx.pools[0].messageLength >= 32) {
            _seed();
            return callback();
        }
        // not enough seed data...
        var needed = 32 - ctx.pools[0].messageLength << 5;
        ctx.seedFile(needed, function(err, bytes) {
            if (err) return callback(err);
            ctx.collect(bytes);
            _seed();
            callback();
        });
    }
    /**
   * Private function that synchronously reseeds a generator.
   */ function _reseedSync() {
        if (ctx.pools[0].messageLength >= 32) return _seed();
        // not enough seed data...
        var needed = 32 - ctx.pools[0].messageLength << 5;
        ctx.collect(ctx.seedFileSync(needed));
        _seed();
    }
    /**
   * Private function that seeds a generator once enough bytes are available.
   */ function _seed() {
        // update reseed count
        ctx.reseeds = ctx.reseeds === 0xffffffff ? 0 : ctx.reseeds + 1;
        // goal is to update `key` via:
        // key = hash(key + s)
        //   where 's' is all collected entropy from selected pools, then...
        // create a plugin-based message digest
        var md = ctx.plugin.md.create();
        // consume current key bytes
        md.update(ctx.keyBytes);
        // digest the entropy of pools whose index k meet the
        // condition 'n mod 2^k == 0' where n is the number of reseeds
        var _2powK = 1;
        for(var k = 0; k < 32; ++k){
            if (ctx.reseeds % _2powK === 0) {
                md.update(ctx.pools[k].digest().getBytes());
                ctx.pools[k].start();
            }
            _2powK = _2powK << 1;
        }
        // get digest for key bytes
        ctx.keyBytes = md.digest().getBytes();
        // paranoid deviation from Fortuna:
        // update `seed` via `seed = hash(key)`
        // instead of initializing to zero once and only
        // ever incrementing it
        md.start();
        md.update(ctx.keyBytes);
        var seedBytes = md.digest().getBytes();
        // update state
        ctx.key = ctx.plugin.formatKey(ctx.keyBytes);
        ctx.seed = ctx.plugin.formatSeed(seedBytes);
        ctx.generated = 0;
    }
    /**
   * The built-in default seedFile. This seedFile is used when entropy
   * is needed immediately.
   *
   * @param needed the number of bytes that are needed.
   *
   * @return the random bytes.
   */ function defaultSeedFile(needed) {
        // use window.crypto.getRandomValues strong source of entropy if available
        var getRandomValues = null;
        var globalScope = forge.util.globalScope;
        var _crypto1 = globalScope.crypto || globalScope.msCrypto;
        if (_crypto1 && _crypto1.getRandomValues) getRandomValues = function(arr) {
            return _crypto1.getRandomValues(arr);
        };
        var b = forge.util.createBuffer();
        if (getRandomValues) while(b.length() < needed){
            // max byte length is 65536 before QuotaExceededError is thrown
            // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
            var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
            var entropy = new Uint32Array(Math.floor(count));
            try {
                getRandomValues(entropy);
                for(var i = 0; i < entropy.length; ++i)b.putInt32(entropy[i]);
            } catch (e) {
                /* only ignore QuotaExceededError */ if (!(typeof QuotaExceededError !== "undefined" && e instanceof QuotaExceededError)) throw e;
            }
        }
        // be sad and add some weak random data
        if (b.length() < needed) {
            /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
      implemented with David G. Carta's optimization: with 32 bit math
      and without division (Public Domain). */ var hi, lo, next;
            var seed = Math.floor(Math.random() * 0x010000);
            while(b.length() < needed){
                lo = 16807 * (seed & 0xFFFF);
                hi = 16807 * (seed >> 16);
                lo += (hi & 0x7FFF) << 16;
                lo += hi >> 15;
                lo = (lo & 0x7FFFFFFF) + (lo >> 31);
                seed = lo & 0xFFFFFFFF;
                // consume lower 3 bytes of seed
                for(var i = 0; i < 3; ++i){
                    // throw in more pseudo random
                    next = seed >>> (i << 3);
                    next ^= Math.floor(Math.random() * 0x0100);
                    b.putByte(String.fromCharCode(next & 0xFF));
                }
            }
        }
        return b.getBytes(needed);
    }
    // initialize seed file APIs
    if (_crypto) {
        // use nodejs async API
        ctx.seedFile = function(needed, callback) {
            _crypto.randomBytes(needed, function(err, bytes) {
                if (err) return callback(err);
                callback(null, bytes.toString());
            });
        };
        // use nodejs sync API
        ctx.seedFileSync = function(needed) {
            return _crypto.randomBytes(needed).toString();
        };
    } else {
        ctx.seedFile = function(needed, callback) {
            try {
                callback(null, defaultSeedFile(needed));
            } catch (e) {
                callback(e);
            }
        };
        ctx.seedFileSync = defaultSeedFile;
    }
    /**
   * Adds entropy to a prng ctx's accumulator.
   *
   * @param bytes the bytes of entropy as a string.
   */ ctx.collect = function(bytes) {
        // iterate over pools distributing entropy cyclically
        var count = bytes.length;
        for(var i = 0; i < count; ++i){
            ctx.pools[ctx.pool].update(bytes.substr(i, 1));
            ctx.pool = ctx.pool === 31 ? 0 : ctx.pool + 1;
        }
    };
    /**
   * Collects an integer of n bits.
   *
   * @param i the integer entropy.
   * @param n the number of bits in the integer.
   */ ctx.collectInt = function(i, n) {
        var bytes = "";
        for(var x = 0; x < n; x += 8)bytes += String.fromCharCode(i >> x & 0xFF);
        ctx.collect(bytes);
    };
    /**
   * Registers a Web Worker to receive immediate entropy from the main thread.
   * This method is required until Web Workers can access the native crypto
   * API. This method should be called twice for each created worker, once in
   * the main thread, and once in the worker itself.
   *
   * @param worker the worker to register.
   */ ctx.registerWorker = function(worker) {
        // worker receives random bytes
        if (worker === self) ctx.seedFile = function(needed, callback) {
            function listener(e) {
                var data = e.data;
                if (data.forge && data.forge.prng) {
                    self.removeEventListener("message", listener);
                    callback(data.forge.prng.err, data.forge.prng.bytes);
                }
            }
            self.addEventListener("message", listener);
            self.postMessage({
                forge: {
                    prng: {
                        needed: needed
                    }
                }
            });
        };
        else {
            // main thread sends random bytes upon request
            var listener1 = function(e) {
                var data = e.data;
                if (data.forge && data.forge.prng) ctx.seedFile(data.forge.prng.needed, function(err, bytes) {
                    worker.postMessage({
                        forge: {
                            prng: {
                                err: err,
                                bytes: bytes
                            }
                        }
                    });
                });
            };
            // TODO: do we need to remove the event listener when the worker dies?
            worker.addEventListener("message", listener1);
        }
    };
    return ctx;
};

},{"process":"jhUEF","./forge":"9OMxz","./util":"9XcEH","crypto":"jhUEF"}],"fmXo7":[function(require,module,exports) {
/**
 * RC2 implementation.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * Information on the RC2 cipher is available from RFC #2268,
 * http://www.ietf.org/rfc/rfc2268.txt
 */ var forge = require("./forge");
require("./util");
var piTable = [
    0xd9,
    0x78,
    0xf9,
    0xc4,
    0x19,
    0xdd,
    0xb5,
    0xed,
    0x28,
    0xe9,
    0xfd,
    0x79,
    0x4a,
    0xa0,
    0xd8,
    0x9d,
    0xc6,
    0x7e,
    0x37,
    0x83,
    0x2b,
    0x76,
    0x53,
    0x8e,
    0x62,
    0x4c,
    0x64,
    0x88,
    0x44,
    0x8b,
    0xfb,
    0xa2,
    0x17,
    0x9a,
    0x59,
    0xf5,
    0x87,
    0xb3,
    0x4f,
    0x13,
    0x61,
    0x45,
    0x6d,
    0x8d,
    0x09,
    0x81,
    0x7d,
    0x32,
    0xbd,
    0x8f,
    0x40,
    0xeb,
    0x86,
    0xb7,
    0x7b,
    0x0b,
    0xf0,
    0x95,
    0x21,
    0x22,
    0x5c,
    0x6b,
    0x4e,
    0x82,
    0x54,
    0xd6,
    0x65,
    0x93,
    0xce,
    0x60,
    0xb2,
    0x1c,
    0x73,
    0x56,
    0xc0,
    0x14,
    0xa7,
    0x8c,
    0xf1,
    0xdc,
    0x12,
    0x75,
    0xca,
    0x1f,
    0x3b,
    0xbe,
    0xe4,
    0xd1,
    0x42,
    0x3d,
    0xd4,
    0x30,
    0xa3,
    0x3c,
    0xb6,
    0x26,
    0x6f,
    0xbf,
    0x0e,
    0xda,
    0x46,
    0x69,
    0x07,
    0x57,
    0x27,
    0xf2,
    0x1d,
    0x9b,
    0xbc,
    0x94,
    0x43,
    0x03,
    0xf8,
    0x11,
    0xc7,
    0xf6,
    0x90,
    0xef,
    0x3e,
    0xe7,
    0x06,
    0xc3,
    0xd5,
    0x2f,
    0xc8,
    0x66,
    0x1e,
    0xd7,
    0x08,
    0xe8,
    0xea,
    0xde,
    0x80,
    0x52,
    0xee,
    0xf7,
    0x84,
    0xaa,
    0x72,
    0xac,
    0x35,
    0x4d,
    0x6a,
    0x2a,
    0x96,
    0x1a,
    0xd2,
    0x71,
    0x5a,
    0x15,
    0x49,
    0x74,
    0x4b,
    0x9f,
    0xd0,
    0x5e,
    0x04,
    0x18,
    0xa4,
    0xec,
    0xc2,
    0xe0,
    0x41,
    0x6e,
    0x0f,
    0x51,
    0xcb,
    0xcc,
    0x24,
    0x91,
    0xaf,
    0x50,
    0xa1,
    0xf4,
    0x70,
    0x39,
    0x99,
    0x7c,
    0x3a,
    0x85,
    0x23,
    0xb8,
    0xb4,
    0x7a,
    0xfc,
    0x02,
    0x36,
    0x5b,
    0x25,
    0x55,
    0x97,
    0x31,
    0x2d,
    0x5d,
    0xfa,
    0x98,
    0xe3,
    0x8a,
    0x92,
    0xae,
    0x05,
    0xdf,
    0x29,
    0x10,
    0x67,
    0x6c,
    0xba,
    0xc9,
    0xd3,
    0x00,
    0xe6,
    0xcf,
    0xe1,
    0x9e,
    0xa8,
    0x2c,
    0x63,
    0x16,
    0x01,
    0x3f,
    0x58,
    0xe2,
    0x89,
    0xa9,
    0x0d,
    0x38,
    0x34,
    0x1b,
    0xab,
    0x33,
    0xff,
    0xb0,
    0xbb,
    0x48,
    0x0c,
    0x5f,
    0xb9,
    0xb1,
    0xcd,
    0x2e,
    0xc5,
    0xf3,
    0xdb,
    0x47,
    0xe5,
    0xa5,
    0x9c,
    0x77,
    0x0a,
    0xa6,
    0x20,
    0x68,
    0xfe,
    0x7f,
    0xc1,
    0xad
];
var s = [
    1,
    2,
    3,
    5
];
/**
 * Rotate a word left by given number of bits.
 *
 * Bits that are shifted out on the left are put back in on the right
 * hand side.
 *
 * @param word The word to shift left.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */ var rol = function(word, bits) {
    return word << bits & 0xffff | (word & 0xffff) >> 16 - bits;
};
/**
 * Rotate a word right by given number of bits.
 *
 * Bits that are shifted out on the right are put back in on the left
 * hand side.
 *
 * @param word The word to shift right.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */ var ror = function(word, bits) {
    return (word & 0xffff) >> bits | word << 16 - bits & 0xffff;
};
/* RC2 API */ module.exports = forge.rc2 = forge.rc2 || {};
/**
 * Perform RC2 key expansion as per RFC #2268, section 2.
 *
 * @param key variable-length user key (between 1 and 128 bytes)
 * @param effKeyBits number of effective key bits (default: 128)
 * @return the expanded RC2 key (ByteBuffer of 128 bytes)
 */ forge.rc2.expandKey = function(key, effKeyBits) {
    if (typeof key === "string") key = forge.util.createBuffer(key);
    effKeyBits = effKeyBits || 128;
    /* introduce variables that match the names used in RFC #2268 */ var L = key;
    var T = key.length();
    var T1 = effKeyBits;
    var T8 = Math.ceil(T1 / 8);
    var TM = 0xff >> (T1 & 0x07);
    var i;
    for(i = T; i < 128; i++)L.putByte(piTable[L.at(i - 1) + L.at(i - T) & 0xff]);
    L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);
    for(i = 127 - T8; i >= 0; i--)L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
    return L;
};
/**
 * Creates a RC2 cipher object.
 *
 * @param key the symmetric key to use (as base for key generation).
 * @param bits the number of effective key bits.
 * @param encrypt false for decryption, true for encryption.
 *
 * @return the cipher.
 */ var createCipher = function(key, bits, encrypt) {
    var _finish = false, _input = null, _output = null, _iv = null;
    var mixRound, mashRound;
    var i, j, K = [];
    /* Expand key and fill into K[] Array */ key = forge.rc2.expandKey(key, bits);
    for(i = 0; i < 64; i++)K.push(key.getInt16Le());
    if (encrypt) {
        /**
     * Perform one mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */ mixRound = function(R) {
            for(i = 0; i < 4; i++){
                R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
                R[i] = rol(R[i], s[i]);
                j++;
            }
        };
        /**
     * Perform one mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */ mashRound = function(R) {
            for(i = 0; i < 4; i++)R[i] += K[R[(i + 3) % 4] & 63];
        };
    } else {
        /**
     * Perform one r-mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */ mixRound = function(R) {
            for(i = 3; i >= 0; i--){
                R[i] = ror(R[i], s[i]);
                R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
                j--;
            }
        };
        /**
     * Perform one r-mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */ mashRound = function(R) {
            for(i = 3; i >= 0; i--)R[i] -= K[R[(i + 3) % 4] & 63];
        };
    }
    /**
   * Run the specified cipher execution plan.
   *
   * This function takes four words from the input buffer, applies the IV on
   * it (if requested) and runs the provided execution plan.
   *
   * The plan must be put together in form of a array of arrays.  Where the
   * outer one is simply a list of steps to perform and the inner one needs
   * to have two elements: the first one telling how many rounds to perform,
   * the second one telling what to do (i.e. the function to call).
   *
   * @param {Array} plan The plan to execute.
   */ var runPlan = function(plan) {
        var R = [];
        /* Get data from input buffer and fill the four words into R */ for(i = 0; i < 4; i++){
            var val = _input.getInt16Le();
            if (_iv !== null) {
                if (encrypt) /* We're encrypting, apply the IV first. */ val ^= _iv.getInt16Le();
                else /* We're decryption, keep cipher text for next block. */ _iv.putInt16Le(val);
            }
            R.push(val & 0xffff);
        }
        /* Reset global "j" variable as per spec. */ j = encrypt ? 0 : 63;
        /* Run execution plan. */ for(var ptr = 0; ptr < plan.length; ptr++)for(var ctr = 0; ctr < plan[ptr][0]; ctr++)plan[ptr][1](R);
        /* Write back result to output buffer. */ for(i = 0; i < 4; i++){
            if (_iv !== null) {
                if (encrypt) /* We're encrypting in CBC-mode, feed back encrypted bytes into
             IV buffer to carry it forward to next block. */ _iv.putInt16Le(R[i]);
                else R[i] ^= _iv.getInt16Le();
            }
            _output.putInt16Le(R[i]);
        }
    };
    /* Create cipher object */ var cipher = null;
    cipher = {
        /**
     * Starts or restarts the encryption or decryption process, whichever
     * was previously configured.
     *
     * To use the cipher in CBC mode, iv may be given either as a string
     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
     *
     * @param iv the initialization vector to use, null for ECB mode.
     * @param output the output the buffer to write to, null to create one.
     */ start: function(iv, output) {
            if (iv) /* CBC mode */ {
                if (typeof iv === "string") iv = forge.util.createBuffer(iv);
            }
            _finish = false;
            _input = forge.util.createBuffer();
            _output = output || new forge.util.createBuffer();
            _iv = iv;
            cipher.output = _output;
        },
        /**
     * Updates the next block.
     *
     * @param input the buffer to read from.
     */ update: function(input) {
            if (!_finish) // not finishing, so fill the input buffer with more input
            _input.putBuffer(input);
            while(_input.length() >= 8)runPlan([
                [
                    5,
                    mixRound
                ],
                [
                    1,
                    mashRound
                ],
                [
                    6,
                    mixRound
                ],
                [
                    1,
                    mashRound
                ],
                [
                    5,
                    mixRound
                ]
            ]);
        },
        /**
     * Finishes encrypting or decrypting.
     *
     * @param pad a padding function to use, null for PKCS#7 padding,
     *           signature(blockSize, buffer, decrypt).
     *
     * @return true if successful, false on error.
     */ finish: function(pad) {
            var rval = true;
            if (encrypt) {
                if (pad) rval = pad(8, _input, !encrypt);
                else {
                    // add PKCS#7 padding to block (each pad byte is the
                    // value of the number of pad bytes)
                    var padding = _input.length() === 8 ? 8 : 8 - _input.length();
                    _input.fillWithByte(padding, padding);
                }
            }
            if (rval) {
                // do final update
                _finish = true;
                cipher.update();
            }
            if (!encrypt) {
                // check for error: input data not a multiple of block size
                rval = _input.length() === 0;
                if (rval) {
                    if (pad) rval = pad(8, _output, !encrypt);
                    else {
                        // ensure padding byte count is valid
                        var len = _output.length();
                        var count = _output.at(len - 1);
                        if (count > len) rval = false;
                        else // trim off padding bytes
                        _output.truncate(count);
                    }
                }
            }
            return rval;
        }
    };
    return cipher;
};
/**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */ forge.rc2.startEncrypting = function(key, iv, output) {
    var cipher = forge.rc2.createEncryptionCipher(key, 128);
    cipher.start(iv, output);
    return cipher;
};
/**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start encrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */ forge.rc2.createEncryptionCipher = function(key, bits) {
    return createCipher(key, bits, true);
};
/**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */ forge.rc2.startDecrypting = function(key, iv, output) {
    var cipher = forge.rc2.createDecryptionCipher(key, 128);
    cipher.start(iv, output);
    return cipher;
};
/**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start decrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */ forge.rc2.createDecryptionCipher = function(key, bits) {
    return createCipher(key, bits, false);
};

},{"./forge":"9OMxz","./util":"9XcEH"}],"5XDhn":[function(require,module,exports) {
/**
 * Javascript implementation of basic RSA algorithms.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The only algorithm currently supported for PKI is RSA.
 *
 * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
 * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
 * and a subjectPublicKey of type bit string.
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of RSA, there aren't any.
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm AlgorithmIdentifier,
 *   subjectPublicKey BIT STRING
 * }
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * For an RSA public key, the subjectPublicKey is:
 *
 * RSAPublicKey ::= SEQUENCE {
 *   modulus            INTEGER,    -- n
 *   publicExponent     INTEGER     -- e
 * }
 *
 * PrivateKeyInfo ::= SEQUENCE {
 *   version                   Version,
 *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
 *   privateKey                PrivateKey,
 *   attributes           [0]  IMPLICIT Attributes OPTIONAL
 * }
 *
 * Version ::= INTEGER
 * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
 * PrivateKey ::= OCTET STRING
 * Attributes ::= SET OF Attribute
 *
 * An RSA private key as the following structure:
 *
 * RSAPrivateKey ::= SEQUENCE {
 *   version Version,
 *   modulus INTEGER, -- n
 *   publicExponent INTEGER, -- e
 *   privateExponent INTEGER, -- d
 *   prime1 INTEGER, -- p
 *   prime2 INTEGER, -- q
 *   exponent1 INTEGER, -- d mod (p-1)
 *   exponent2 INTEGER, -- d mod (q-1)
 *   coefficient INTEGER -- (inverse of q) mod p
 * }
 *
 * Version ::= INTEGER
 *
 * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
 */ var forge = require("./forge");
require("./asn1");
require("./jsbn");
require("./oids");
require("./pkcs1");
require("./prime");
require("./random");
require("./util");
if (typeof BigInteger === "undefined") var BigInteger = forge.jsbn.BigInteger;
var _crypto = forge.util.isNodejs ? require("crypto") : null;
// shortcut for asn.1 API
var asn1 = forge.asn1;
// shortcut for util API
var util = forge.util;
/*
 * RSA encryption and decryption, see RFC 2313.
 */ forge.pki = forge.pki || {};
module.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};
var pki = forge.pki;
// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
var GCD_30_DELTA = [
    6,
    4,
    2,
    4,
    2,
    4,
    6,
    2
];
// validator for a PrivateKeyInfo structure
var privateKeyValidator = {
    // PrivateKeyInfo
    name: "PrivateKeyInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            // Version (INTEGER)
            name: "PrivateKeyInfo.version",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyVersion"
        },
        {
            // privateKeyAlgorithm
            name: "PrivateKeyInfo.privateKeyAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "AlgorithmIdentifier.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "privateKeyOid"
                }
            ]
        },
        {
            // PrivateKey
            name: "PrivateKeyInfo",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OCTETSTRING,
            constructed: false,
            capture: "privateKey"
        }
    ]
};
// validator for an RSA private key
var rsaPrivateKeyValidator = {
    // RSAPrivateKey
    name: "RSAPrivateKey",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            // Version (INTEGER)
            name: "RSAPrivateKey.version",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyVersion"
        },
        {
            // modulus (n)
            name: "RSAPrivateKey.modulus",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyModulus"
        },
        {
            // publicExponent (e)
            name: "RSAPrivateKey.publicExponent",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyPublicExponent"
        },
        {
            // privateExponent (d)
            name: "RSAPrivateKey.privateExponent",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyPrivateExponent"
        },
        {
            // prime1 (p)
            name: "RSAPrivateKey.prime1",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyPrime1"
        },
        {
            // prime2 (q)
            name: "RSAPrivateKey.prime2",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyPrime2"
        },
        {
            // exponent1 (d mod (p-1))
            name: "RSAPrivateKey.exponent1",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyExponent1"
        },
        {
            // exponent2 (d mod (q-1))
            name: "RSAPrivateKey.exponent2",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyExponent2"
        },
        {
            // coefficient ((inverse of q) mod p)
            name: "RSAPrivateKey.coefficient",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyCoefficient"
        }
    ]
};
// validator for an RSA public key
var rsaPublicKeyValidator = {
    // RSAPublicKey
    name: "RSAPublicKey",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            // modulus (n)
            name: "RSAPublicKey.modulus",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "publicKeyModulus"
        },
        {
            // publicExponent (e)
            name: "RSAPublicKey.exponent",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "publicKeyExponent"
        }
    ]
};
// validator for an SubjectPublicKeyInfo structure
// Note: Currently only works with an RSA public key
var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {
    name: "SubjectPublicKeyInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: "subjectPublicKeyInfo",
    value: [
        {
            name: "SubjectPublicKeyInfo.AlgorithmIdentifier",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "AlgorithmIdentifier.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "publicKeyOid"
                }
            ]
        },
        {
            // subjectPublicKey
            name: "SubjectPublicKeyInfo.subjectPublicKey",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.BITSTRING,
            constructed: false,
            value: [
                {
                    // RSAPublicKey
                    name: "SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    optional: true,
                    captureAsn1: "rsaPublicKey"
                }
            ]
        }
    ]
};
/**
 * Wrap digest in DigestInfo object.
 *
 * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 * Digest ::= OCTET STRING
 *
 * @param md the message digest object with the hash to sign.
 *
 * @return the encoded message (ready for RSA encrytion)
 */ var emsaPkcs1v15encode = function(md) {
    // get the oid for the algorithm
    var oid;
    if (md.algorithm in pki.oids) oid = pki.oids[md.algorithm];
    else {
        var error = new Error("Unknown message digest algorithm.");
        error.algorithm = md.algorithm;
        throw error;
    }
    var oidBytes = asn1.oidToDer(oid).getBytes();
    // create the digest info
    var digestInfo = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var digestAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));
    digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ""));
    var digest = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, md.digest().getBytes());
    digestInfo.value.push(digestAlgorithm);
    digestInfo.value.push(digest);
    // encode digest info
    return asn1.toDer(digestInfo).getBytes();
};
/**
 * Performs x^c mod n (RSA encryption or decryption operation).
 *
 * @param x the number to raise and mod.
 * @param key the key to use.
 * @param pub true if the key is public, false if private.
 *
 * @return the result of x^c mod n.
 */ var _modPow = function(x, key, pub) {
    if (pub) return x.modPow(key.e, key.n);
    if (!key.p || !key.q) // allow calculation without CRT params (slow)
    return x.modPow(key.d, key.n);
    // pre-compute dP, dQ, and qInv if necessary
    if (!key.dP) key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));
    if (!key.dQ) key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));
    if (!key.qInv) key.qInv = key.q.modInverse(key.p);
    /* Chinese remainder theorem (CRT) states:

    Suppose n1, n2, ..., nk are positive integers which are pairwise
    coprime (n1 and n2 have no common factors other than 1). For any
    integers x1, x2, ..., xk there exists an integer x solving the
    system of simultaneous congruences (where ~= means modularly
    congruent so a ~= b mod n means a mod n = b mod n):

    x ~= x1 mod n1
    x ~= x2 mod n2
    ...
    x ~= xk mod nk

    This system of congruences has a single simultaneous solution x
    between 0 and n - 1. Furthermore, each xk solution and x itself
    is congruent modulo the product n = n1*n2*...*nk.
    So x1 mod n = x2 mod n = xk mod n = x mod n.

    The single simultaneous solution x can be solved with the following
    equation:

    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.

    Where x is less than n, xi = x mod ni.

    For RSA we are only concerned with k = 2. The modulus n = pq, where
    p and q are coprime. The RSA decryption algorithm is:

    y = x^d mod n

    Given the above:

    x1 = x^d mod p
    r1 = n/p = q
    s1 = q^-1 mod p
    x2 = x^d mod q
    r2 = n/q = p
    s2 = p^-1 mod q

    So y = (x1r1s1 + x2r2s2) mod n
         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n

    According to Fermat's Little Theorem, if the modulus P is prime,
    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
    Since A is not divisible by P it follows that if:
    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:

    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
    to calculate). In order to calculate x^d mod p more quickly the
    exponent d mod (p - 1) is stored in the RSA private key (the same
    is done for x^d mod q). These values are referred to as dP and dQ
    respectively. Therefore we now have:

    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n

    Since we'll be reducing x^dP by modulo p (same for q) we can also
    reduce x by p (and q respectively) before hand. Therefore, let

    xp = ((x mod p)^dP mod p), and
    xq = ((x mod q)^dQ mod q), yielding:

    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n

    This can be further reduced to a simple algorithm that only
    requires 1 inverse (the q inverse is used) to be used and stored.
    The algorithm is called Garner's algorithm. If qInv is the
    inverse of q, we simply calculate:

    y = (qInv*(xp - xq) mod p) * q + xq

    However, there are two further complications. First, we need to
    ensure that xp > xq to prevent signed BigIntegers from being used
    so we add p until this is true (since we will be mod'ing with
    p anyway). Then, there is a known timing attack on algorithms
    using the CRT. To mitigate this risk, "cryptographic blinding"
    should be used. This requires simply generating a random number r
    between 0 and n-1 and its inverse and multiplying x by r^e before
    calculating y and then multiplying y by r^-1 afterwards. Note that
    r must be coprime with n (gcd(r, n) === 1) in order to have an
    inverse.
  */ // cryptographic blinding
    var r;
    do r = new BigInteger(forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)), 16);
    while (r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));
    x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);
    // calculate xp and xq
    var xp = x.mod(key.p).modPow(key.dP, key.p);
    var xq = x.mod(key.q).modPow(key.dQ, key.q);
    // xp must be larger than xq to avoid signed bit usage
    while(xp.compareTo(xq) < 0)xp = xp.add(key.p);
    // do last step
    var y = xp.subtract(xq).multiply(key.qInv).mod(key.p).multiply(key.q).add(xq);
    // remove effect of random for cryptographic blinding
    y = y.multiply(r.modInverse(key.n)).mod(key.n);
    return y;
};
/**
 * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
 * 'encrypt' on a public key object instead.
 *
 * Performs RSA encryption.
 *
 * The parameter bt controls whether to put padding bytes before the
 * message passed in. Set bt to either true or false to disable padding
 * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
 * signaling whether the encryption operation is a public key operation
 * (i.e. encrypting data) or not, i.e. private key operation (data signing).
 *
 * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
 * (for signing) or 0x02 (for encryption). The key operation mode (private
 * or public) is derived from this flag in that case).
 *
 * @param m the message to encrypt as a byte string.
 * @param key the RSA key to use.
 * @param bt for PKCS#1 v1.5 padding, the block type to use
 *   (0x01 for private key, 0x02 for public),
 *   to disable padding: true = public key, false = private key.
 *
 * @return the encrypted bytes as a string.
 */ pki.rsa.encrypt = function(m, key, bt) {
    var pub = bt;
    var eb;
    // get the length of the modulus in bytes
    var k = Math.ceil(key.n.bitLength() / 8);
    if (bt !== false && bt !== true) {
        // legacy, default to PKCS#1 v1.5 padding
        pub = bt === 0x02;
        eb = _encodePkcs1_v1_5(m, key, bt);
    } else {
        eb = forge.util.createBuffer();
        eb.putBytes(m);
    }
    // load encryption block as big integer 'x'
    // FIXME: hex conversion inefficient, get BigInteger w/byte strings
    var x = new BigInteger(eb.toHex(), 16);
    // do RSA encryption
    var y = _modPow(x, key, pub);
    // convert y into the encrypted data byte string, if y is shorter in
    // bytes than k, then prepend zero bytes to fill up ed
    // FIXME: hex conversion inefficient, get BigInteger w/byte strings
    var yhex = y.toString(16);
    var ed = forge.util.createBuffer();
    var zeros = k - Math.ceil(yhex.length / 2);
    while(zeros > 0){
        ed.putByte(0x00);
        --zeros;
    }
    ed.putBytes(forge.util.hexToBytes(yhex));
    return ed.getBytes();
};
/**
 * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
 * 'verify' on a public key object instead.
 *
 * Performs RSA decryption.
 *
 * The parameter ml controls whether to apply PKCS#1 v1.5 padding
 * or not.  Set ml = false to disable padding removal completely
 * (in order to handle e.g. EMSA-PSS later on) and simply pass back
 * the RSA encryption block.
 *
 * @param ed the encrypted data to decrypt in as a byte string.
 * @param key the RSA key to use.
 * @param pub true for a public key operation, false for private.
 * @param ml the message length, if known, false to disable padding.
 *
 * @return the decrypted message as a byte string.
 */ pki.rsa.decrypt = function(ed, key, pub, ml) {
    // get the length of the modulus in bytes
    var k = Math.ceil(key.n.bitLength() / 8);
    // error if the length of the encrypted data ED is not k
    if (ed.length !== k) {
        var error = new Error("Encrypted message length is invalid.");
        error.length = ed.length;
        error.expected = k;
        throw error;
    }
    // convert encrypted data into a big integer
    // FIXME: hex conversion inefficient, get BigInteger w/byte strings
    var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);
    // y must be less than the modulus or it wasn't the result of
    // a previous mod operation (encryption) using that modulus
    if (y.compareTo(key.n) >= 0) throw new Error("Encrypted message is invalid.");
    // do RSA decryption
    var x = _modPow(y, key, pub);
    // create the encryption block, if x is shorter in bytes than k, then
    // prepend zero bytes to fill up eb
    // FIXME: hex conversion inefficient, get BigInteger w/byte strings
    var xhex = x.toString(16);
    var eb = forge.util.createBuffer();
    var zeros = k - Math.ceil(xhex.length / 2);
    while(zeros > 0){
        eb.putByte(0x00);
        --zeros;
    }
    eb.putBytes(forge.util.hexToBytes(xhex));
    if (ml !== false) // legacy, default to PKCS#1 v1.5 padding
    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
    // return message
    return eb.getBytes();
};
/**
 * Creates an RSA key-pair generation state object. It is used to allow
 * key-generation to be performed in steps. It also allows for a UI to
 * display progress updates.
 *
 * @param bits the size for the private key in bits, defaults to 2048.
 * @param e the public exponent to use, defaults to 65537 (0x10001).
 * @param [options] the options to use.
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 *
 * @return the state object to use to generate the key-pair.
 */ pki.rsa.createKeyPairGenerationState = function(bits, e, options) {
    // TODO: migrate step-based prime generation code to forge.prime
    // set default bits
    if (typeof bits === "string") bits = parseInt(bits, 10);
    bits = bits || 2048;
    // create prng with api that matches BigInteger secure random
    options = options || {};
    var prng = options.prng || forge.random;
    var rng = {
        // x is an array to fill with bytes
        nextBytes: function(x) {
            var b = prng.getBytesSync(x.length);
            for(var i = 0; i < x.length; ++i)x[i] = b.charCodeAt(i);
        }
    };
    var algorithm = options.algorithm || "PRIMEINC";
    // create PRIMEINC algorithm state
    var rval;
    if (algorithm === "PRIMEINC") {
        rval = {
            algorithm: algorithm,
            state: 0,
            bits: bits,
            rng: rng,
            eInt: e || 65537,
            e: new BigInteger(null),
            p: null,
            q: null,
            qBits: bits >> 1,
            pBits: bits - (bits >> 1),
            pqState: 0,
            num: null,
            keys: null
        };
        rval.e.fromInt(rval.eInt);
    } else throw new Error("Invalid key generation algorithm: " + algorithm);
    return rval;
};
/**
 * Attempts to runs the key-generation algorithm for at most n seconds
 * (approximately) using the given state. When key-generation has completed,
 * the keys will be stored in state.keys.
 *
 * To use this function to update a UI while generating a key or to prevent
 * causing browser lockups/warnings, set "n" to a value other than 0. A
 * simple pattern for generating a key and showing a progress indicator is:
 *
 * var state = pki.rsa.createKeyPairGenerationState(2048);
 * var step = function() {
 *   // step key-generation, run algorithm for 100 ms, repeat
 *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
 *     setTimeout(step, 1);
 *   } else {
 *     // key-generation complete
 *     // TODO: turn off progress indicator here
 *     // TODO: use the generated key-pair in "state.keys"
 *   }
 * };
 * // TODO: turn on progress indicator here
 * setTimeout(step, 0);
 *
 * @param state the state to use.
 * @param n the maximum number of milliseconds to run the algorithm for, 0
 *          to run the algorithm to completion.
 *
 * @return true if the key-generation completed, false if not.
 */ pki.rsa.stepKeyPairGenerationState = function(state, n) {
    // set default algorithm if not set
    if (!("algorithm" in state)) state.algorithm = "PRIMEINC";
    // TODO: migrate step-based prime generation code to forge.prime
    // TODO: abstract as PRIMEINC algorithm
    // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
    // with some minor optimizations and designed to run in steps
    // local state vars
    var THIRTY = new BigInteger(null);
    THIRTY.fromInt(30);
    var deltaIdx = 0;
    var op_or = function(x, y) {
        return x | y;
    };
    // keep stepping until time limit is reached or done
    var t1 = +new Date();
    var t2;
    var total = 0;
    while(state.keys === null && (n <= 0 || total < n)){
        // generate p or q
        if (state.state === 0) {
            /* Note: All primes are of the form:

        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i

        When we generate a random number, we always align it at 30k + 1. Each
        time the number is determined not to be prime we add to get to the
        next 'i', eg: if the number was at 30k + 1 we add 6. */ var bits = state.p === null ? state.pBits : state.qBits;
            var bits1 = bits - 1;
            // get a random number
            if (state.pqState === 0) {
                state.num = new BigInteger(bits, state.rng);
                // force MSB set
                if (!state.num.testBit(bits1)) state.num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, state.num);
                // align number on 30k+1 boundary
                state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
                deltaIdx = 0;
                ++state.pqState;
            } else if (state.pqState === 1) {
                // try to make the number a prime
                if (state.num.bitLength() > bits) // overflow, try again
                state.pqState = 0;
                else if (state.num.isProbablePrime(_getMillerRabinTests(state.num.bitLength()))) ++state.pqState;
                else // get next potential prime
                state.num.dAddOffset(GCD_30_DELTA[(deltaIdx++) % 8], 0);
            } else if (state.pqState === 2) // ensure number is coprime with e
            state.pqState = state.num.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) === 0 ? 3 : 0;
            else if (state.pqState === 3) {
                // store p or q
                state.pqState = 0;
                if (state.p === null) state.p = state.num;
                else state.q = state.num;
                // advance state if both p and q are ready
                if (state.p !== null && state.q !== null) ++state.state;
                state.num = null;
            }
        } else if (state.state === 1) {
            // ensure p is larger than q (swap them if not)
            if (state.p.compareTo(state.q) < 0) {
                state.num = state.p;
                state.p = state.q;
                state.q = state.num;
            }
            ++state.state;
        } else if (state.state === 2) {
            // compute phi: (p - 1)(q - 1) (Euler's totient function)
            state.p1 = state.p.subtract(BigInteger.ONE);
            state.q1 = state.q.subtract(BigInteger.ONE);
            state.phi = state.p1.multiply(state.q1);
            ++state.state;
        } else if (state.state === 3) {
            // ensure e and phi are coprime
            if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) // phi and e are coprime, advance
            ++state.state;
            else {
                // phi and e aren't coprime, so generate a new p and q
                state.p = null;
                state.q = null;
                state.state = 0;
            }
        } else if (state.state === 4) {
            // create n, ensure n is has the right number of bits
            state.n = state.p.multiply(state.q);
            // ensure n is right number of bits
            if (state.n.bitLength() === state.bits) // success, advance
            ++state.state;
            else {
                // failed, get new q
                state.q = null;
                state.state = 0;
            }
        } else if (state.state === 5) {
            // set keys
            var d = state.e.modInverse(state.phi);
            state.keys = {
                privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),
                publicKey: pki.rsa.setPublicKey(state.n, state.e)
            };
        }
        // update timing
        t2 = +new Date();
        total += t2 - t1;
        t1 = t2;
    }
    return state.keys !== null;
};
/**
 * Generates an RSA public-private key pair in a single call.
 *
 * To generate a key-pair in steps (to allow for progress updates and to
 * prevent blocking or warnings in slow browsers) then use the key-pair
 * generation state functions.
 *
 * To generate a key-pair asynchronously (either through web-workers, if
 * available, or by breaking up the work on the main thread), pass a
 * callback function.
 *
 * @param [bits] the size for the private key in bits, defaults to 2048.
 * @param [e] the public exponent to use, defaults to 65537.
 * @param [options] options for key-pair generation, if given then 'bits'
 *            and 'e' must *not* be given:
 *          bits the size for the private key in bits, (default: 2048).
 *          e the public exponent to use, (default: 65537 (0x10001)).
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync". Disables use of native APIs.
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 * @param [callback(err, keypair)] called once the operation completes.
 *
 * @return an object with privateKey and publicKey properties.
 */ pki.rsa.generateKeyPair = function(bits, e1, options, callback) {
    // (bits), (options), (callback)
    if (arguments.length === 1) {
        if (typeof bits === "object") {
            options = bits;
            bits = undefined;
        } else if (typeof bits === "function") {
            callback = bits;
            bits = undefined;
        }
    } else if (arguments.length === 2) {
        // (bits, e), (bits, options), (bits, callback), (options, callback)
        if (typeof bits === "number") {
            if (typeof e1 === "function") {
                callback = e1;
                e1 = undefined;
            } else if (typeof e1 !== "number") {
                options = e1;
                e1 = undefined;
            }
        } else {
            options = bits;
            callback = e1;
            bits = undefined;
            e1 = undefined;
        }
    } else if (arguments.length === 3) {
        // (bits, e, options), (bits, e, callback), (bits, options, callback)
        if (typeof e1 === "number") {
            if (typeof options === "function") {
                callback = options;
                options = undefined;
            }
        } else {
            callback = options;
            options = e1;
            e1 = undefined;
        }
    }
    options = options || {};
    if (bits === undefined) bits = options.bits || 2048;
    if (e1 === undefined) e1 = options.e || 0x10001;
    // use native code if permitted, available, and parameters are acceptable
    if (!forge.options.usePureJavaScript && !options.prng && bits >= 256 && bits <= 16384 && (e1 === 0x10001 || e1 === 3)) {
        if (callback) {
            // try native async
            if (_detectNodeCrypto("generateKeyPair")) return _crypto.generateKeyPair("rsa", {
                modulusLength: bits,
                publicExponent: e1,
                publicKeyEncoding: {
                    type: "spki",
                    format: "pem"
                },
                privateKeyEncoding: {
                    type: "pkcs8",
                    format: "pem"
                }
            }, function(err, pub, priv) {
                if (err) return callback(err);
                callback(null, {
                    privateKey: pki.privateKeyFromPem(priv),
                    publicKey: pki.publicKeyFromPem(pub)
                });
            });
            if (_detectSubtleCrypto("generateKey") && _detectSubtleCrypto("exportKey")) // use standard native generateKey
            return util.globalScope.crypto.subtle.generateKey({
                name: "RSASSA-PKCS1-v1_5",
                modulusLength: bits,
                publicExponent: _intToUint8Array(e1),
                hash: {
                    name: "SHA-256"
                }
            }, true, [
                "sign",
                "verify"
            ]).then(function(pair) {
                return util.globalScope.crypto.subtle.exportKey("pkcs8", pair.privateKey);
            // avoiding catch(function(err) {...}) to support IE <= 8
            }).then(undefined, function(err) {
                callback(err);
            }).then(function(pkcs8) {
                if (pkcs8) {
                    var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));
                    callback(null, {
                        privateKey: privateKey,
                        publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
                    });
                }
            });
            if (_detectSubtleMsCrypto("generateKey") && _detectSubtleMsCrypto("exportKey")) {
                var genOp = util.globalScope.msCrypto.subtle.generateKey({
                    name: "RSASSA-PKCS1-v1_5",
                    modulusLength: bits,
                    publicExponent: _intToUint8Array(e1),
                    hash: {
                        name: "SHA-256"
                    }
                }, true, [
                    "sign",
                    "verify"
                ]);
                genOp.oncomplete = function(e2) {
                    var pair = e2.target.result;
                    var exportOp = util.globalScope.msCrypto.subtle.exportKey("pkcs8", pair.privateKey);
                    exportOp.oncomplete = function(e) {
                        var pkcs8 = e.target.result;
                        var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));
                        callback(null, {
                            privateKey: privateKey,
                            publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
                        });
                    };
                    exportOp.onerror = function(err) {
                        callback(err);
                    };
                };
                genOp.onerror = function(err) {
                    callback(err);
                };
                return;
            }
        } else // try native sync
        if (_detectNodeCrypto("generateKeyPairSync")) {
            var keypair = _crypto.generateKeyPairSync("rsa", {
                modulusLength: bits,
                publicExponent: e1,
                publicKeyEncoding: {
                    type: "spki",
                    format: "pem"
                },
                privateKeyEncoding: {
                    type: "pkcs8",
                    format: "pem"
                }
            });
            return {
                privateKey: pki.privateKeyFromPem(keypair.privateKey),
                publicKey: pki.publicKeyFromPem(keypair.publicKey)
            };
        }
    }
    // use JavaScript implementation
    var state = pki.rsa.createKeyPairGenerationState(bits, e1, options);
    if (!callback) {
        pki.rsa.stepKeyPairGenerationState(state, 0);
        return state.keys;
    }
    _generateKeyPair(state, options, callback);
};
/**
 * Sets an RSA public key from BigIntegers modulus and exponent.
 *
 * @param n the modulus.
 * @param e the exponent.
 *
 * @return the public key.
 */ pki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e3) {
    var key1 = {
        n: n,
        e: e3
    };
    /**
   * Encrypts the given data with this public key. Newer applications
   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
   * legacy applications.
   *
   * @param data the byte string to encrypt.
   * @param scheme the encryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA encryption,
   *          an object with an 'encode' property set to a function
   *          with the signature 'function(data, key)' that returns
   *          a binary-encoded string representing the encoded data.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the encrypted byte string.
   */ key1.encrypt = function(data, scheme, schemeOptions) {
        if (typeof scheme === "string") scheme = scheme.toUpperCase();
        else if (scheme === undefined) scheme = "RSAES-PKCS1-V1_5";
        if (scheme === "RSAES-PKCS1-V1_5") scheme = {
            encode: function(m, key, pub) {
                return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
            }
        };
        else if (scheme === "RSA-OAEP" || scheme === "RSAES-OAEP") scheme = {
            encode: function(m, key) {
                return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
            }
        };
        else if ([
            "RAW",
            "NONE",
            "NULL",
            null
        ].indexOf(scheme) !== -1) scheme = {
            encode: function(e) {
                return e;
            }
        };
        else if (typeof scheme === "string") throw new Error('Unsupported encryption scheme: "' + scheme + '".');
        // do scheme-based encoding then rsa encryption
        var e4 = scheme.encode(data, key1, true);
        return pki.rsa.encrypt(e4, key1, true);
    };
    /**
   * Verifies the given signature against the given digest.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
   * signature is an OCTET STRING that holds a DigestInfo.
   *
   * DigestInfo ::= SEQUENCE {
   *   digestAlgorithm DigestAlgorithmIdentifier,
   *   digest Digest
   * }
   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
   * Digest ::= OCTET STRING
   *
   * To perform PSS signature verification, provide an instance
   * of Forge PSS object as the scheme parameter.
   *
   * @param digest the message digest hash to compare against the signature,
   *          as a binary-encoded string.
   * @param signature the signature to verify, as a binary-encoded string.
   * @param scheme signature verification scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be expected, but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return true if the signature was verified, false if not.
   */ key1.verify = function(digest1, signature, scheme) {
        if (typeof scheme === "string") scheme = scheme.toUpperCase();
        else if (scheme === undefined) scheme = "RSASSA-PKCS1-V1_5";
        if (scheme === "RSASSA-PKCS1-V1_5") scheme = {
            verify: function(digest, d) {
                // remove padding
                d = _decodePkcs1_v1_5(d, key1, true);
                // d is ASN.1 BER-encoded DigestInfo
                var obj = asn1.fromDer(d);
                // compare the given digest to the decrypted one
                return digest === obj.value[1].value;
            }
        };
        else if (scheme === "NONE" || scheme === "NULL" || scheme === null) scheme = {
            verify: function(digest, d) {
                // remove padding
                d = _decodePkcs1_v1_5(d, key1, true);
                return digest === d;
            }
        };
        // do rsa decryption w/o any decoding, then verify -- which does decoding
        var d1 = pki.rsa.decrypt(signature, key1, true, false);
        return scheme.verify(digest1, d1, key1.n.bitLength());
    };
    return key1;
};
/**
 * Sets an RSA private key from BigIntegers modulus, exponent, primes,
 * prime exponents, and modular multiplicative inverse.
 *
 * @param n the modulus.
 * @param e the public exponent.
 * @param d the private exponent ((inverse of e) mod n).
 * @param p the first prime.
 * @param q the second prime.
 * @param dP exponent1 (d mod (p-1)).
 * @param dQ exponent2 (d mod (q-1)).
 * @param qInv ((inverse of q) mod p)
 *
 * @return the private key.
 */ pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(n, e, d2, p, q, dP, dQ, qInv) {
    var key2 = {
        n: n,
        e: e,
        d: d2,
        p: p,
        q: q,
        dP: dP,
        dQ: dQ,
        qInv: qInv
    };
    /**
   * Decrypts the given data with this private key. The decryption scheme
   * must match the one used to encrypt the data.
   *
   * @param data the byte string to decrypt.
   * @param scheme the decryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA decryption.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the decrypted byte string.
   */ key2.decrypt = function(data, scheme, schemeOptions) {
        if (typeof scheme === "string") scheme = scheme.toUpperCase();
        else if (scheme === undefined) scheme = "RSAES-PKCS1-V1_5";
        // do rsa decryption w/o any decoding
        var d3 = pki.rsa.decrypt(data, key2, false, false);
        if (scheme === "RSAES-PKCS1-V1_5") scheme = {
            decode: _decodePkcs1_v1_5
        };
        else if (scheme === "RSA-OAEP" || scheme === "RSAES-OAEP") scheme = {
            decode: function(d, key) {
                return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
            }
        };
        else if ([
            "RAW",
            "NONE",
            "NULL",
            null
        ].indexOf(scheme) !== -1) scheme = {
            decode: function(d) {
                return d;
            }
        };
        else throw new Error('Unsupported encryption scheme: "' + scheme + '".');
        // decode according to scheme
        return scheme.decode(d3, key2, false);
    };
    /**
   * Signs the given digest, producing a signature.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
   * an instance of Forge PSS object as the scheme parameter.
   *
   * @param md the message digest object with the hash to sign.
   * @param scheme the signature scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be used but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return the signature as a byte string.
   */ key2.sign = function(md, scheme) {
        /* Note: The internal implementation of RSA operations is being
      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
      code like the use of an encoding block identifier 'bt' will eventually
      be removed. */ // private key operation
        var bt = false;
        if (typeof scheme === "string") scheme = scheme.toUpperCase();
        if (scheme === undefined || scheme === "RSASSA-PKCS1-V1_5") {
            scheme = {
                encode: emsaPkcs1v15encode
            };
            bt = 0x01;
        } else if (scheme === "NONE" || scheme === "NULL" || scheme === null) {
            scheme = {
                encode: function() {
                    return md;
                }
            };
            bt = 0x01;
        }
        // encode and then encrypt
        var d = scheme.encode(md, key2.n.bitLength());
        return pki.rsa.encrypt(d, key2, bt);
    };
    return key2;
};
/**
 * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
 *
 * @param rsaKey the ASN.1 RSAPrivateKey.
 *
 * @return the ASN.1 PrivateKeyInfo.
 */ pki.wrapRsaPrivateKey = function(rsaKey) {
    // PrivateKeyInfo
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version (0)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()),
        // privateKeyAlgorithm
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
        ]),
        // PrivateKey
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(rsaKey).getBytes())
    ]);
};
/**
 * Converts a private key from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
 *          RSAPrivateKey or an RSAPrivateKey.
 *
 * @return the private key.
 */ pki.privateKeyFromAsn1 = function(obj) {
    // get PrivateKeyInfo
    var capture = {};
    var errors = [];
    if (asn1.validate(obj, privateKeyValidator, capture, errors)) obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));
    // get RSAPrivateKey
    capture = {};
    errors = [];
    if (!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
        var error = new Error("Cannot read private key. ASN.1 object does not contain an RSAPrivateKey.");
        error.errors = errors;
        throw error;
    }
    // Note: Version is currently ignored.
    // capture.privateKeyVersion
    // FIXME: inefficient, get a BigInteger that uses byte strings
    var n, e, d, p, q, dP, dQ, qInv;
    n = forge.util.createBuffer(capture.privateKeyModulus).toHex();
    e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();
    d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
    p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();
    q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();
    dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();
    dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();
    qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();
    // set private key
    return pki.setRsaPrivateKey(new BigInteger(n, 16), new BigInteger(e, 16), new BigInteger(d, 16), new BigInteger(p, 16), new BigInteger(q, 16), new BigInteger(dP, 16), new BigInteger(dQ, 16), new BigInteger(qInv, 16));
};
/**
 * Converts a private key to an ASN.1 RSAPrivateKey.
 *
 * @param key the private key.
 *
 * @return the ASN.1 representation of an RSAPrivateKey.
 */ pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {
    // RSAPrivateKey
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version (0 = only 2 primes, 1 multiple primes)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()),
        // modulus (n)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)),
        // publicExponent (e)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e)),
        // privateExponent (d)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.d)),
        // privateKeyPrime1 (p)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.p)),
        // privateKeyPrime2 (q)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.q)),
        // privateKeyExponent1 (dP)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dP)),
        // privateKeyExponent2 (dQ)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dQ)),
        // coefficient (qInv)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.qInv))
    ]);
};
/**
 * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @return the public key.
 */ pki.publicKeyFromAsn1 = function(obj) {
    // get SubjectPublicKeyInfo
    var capture = {};
    var errors = [];
    if (asn1.validate(obj, publicKeyValidator, capture, errors)) {
        // get oid
        var oid = asn1.derToOid(capture.publicKeyOid);
        if (oid !== pki.oids.rsaEncryption) {
            var error = new Error("Cannot read public key. Unknown OID.");
            error.oid = oid;
            throw error;
        }
        obj = capture.rsaPublicKey;
    }
    // get RSA params
    errors = [];
    if (!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
        var error = new Error("Cannot read public key. ASN.1 object does not contain an RSAPublicKey.");
        error.errors = errors;
        throw error;
    }
    // FIXME: inefficient, get a BigInteger that uses byte strings
    var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();
    var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();
    // set public key
    return pki.setRsaPublicKey(new BigInteger(n, 16), new BigInteger(e, 16));
};
/**
 * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a SubjectPublicKeyInfo.
 */ pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {
    // SubjectPublicKeyInfo
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // AlgorithmIdentifier
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // algorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),
            // parameters (null)
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
        ]),
        // subjectPublicKey
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [
            pki.publicKeyToRSAPublicKey(key)
        ])
    ]);
};
/**
 * Converts a public key to an ASN.1 RSAPublicKey.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a RSAPublicKey.
 */ pki.publicKeyToRSAPublicKey = function(key) {
    // RSAPublicKey
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // modulus (n)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)),
        // publicExponent (e)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e))
    ]);
};
/**
 * Encodes a message using PKCS#1 v1.5 padding.
 *
 * @param m the message to encode.
 * @param key the RSA key to use.
 * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
 *          (for encryption).
 *
 * @return the padded byte buffer.
 */ function _encodePkcs1_v1_5(m, key, bt) {
    var eb = forge.util.createBuffer();
    // get the length of the modulus in bytes
    var k = Math.ceil(key.n.bitLength() / 8);
    /* use PKCS#1 v1.5 padding */ if (m.length > k - 11) {
        var error = new Error("Message is too long for PKCS#1 v1.5 padding.");
        error.length = m.length;
        error.max = k - 11;
        throw error;
    }
    /* A block type BT, a padding string PS, and the data D shall be
    formatted into an octet string EB, the encryption block:

    EB = 00 || BT || PS || 00 || D

    The block type BT shall be a single octet indicating the structure of
    the encryption block. For this version of the document it shall have
    value 00, 01, or 02. For a private-key operation, the block type
    shall be 00 or 01. For a public-key operation, it shall be 02.

    The padding string PS shall consist of k-3-||D|| octets. For block
    type 00, the octets shall have value 00; for block type 01, they
    shall have value FF; and for block type 02, they shall be
    pseudorandomly generated and nonzero. This makes the length of the
    encryption block EB equal to k. */ // build the encryption block
    eb.putByte(0x00);
    eb.putByte(bt);
    // create the padding
    var padNum = k - 3 - m.length;
    var padByte;
    // private key op
    if (bt === 0x00 || bt === 0x01) {
        padByte = bt === 0x00 ? 0x00 : 0xFF;
        for(var i = 0; i < padNum; ++i)eb.putByte(padByte);
    } else // public key op
    // pad with random non-zero values
    while(padNum > 0){
        var numZeros = 0;
        var padBytes = forge.random.getBytes(padNum);
        for(var i = 0; i < padNum; ++i){
            padByte = padBytes.charCodeAt(i);
            if (padByte === 0) ++numZeros;
            else eb.putByte(padByte);
        }
        padNum = numZeros;
    }
    // zero followed by message
    eb.putByte(0x00);
    eb.putBytes(m);
    return eb;
}
/**
 * Decodes a message using PKCS#1 v1.5 padding.
 *
 * @param em the message to decode.
 * @param key the RSA key to use.
 * @param pub true if the key is a public key, false if it is private.
 * @param ml the message length, if specified.
 *
 * @return the decoded bytes.
 */ function _decodePkcs1_v1_5(em, key, pub, ml) {
    // get the length of the modulus in bytes
    var k = Math.ceil(key.n.bitLength() / 8);
    /* It is an error if any of the following conditions occurs:

    1. The encryption block EB cannot be parsed unambiguously.
    2. The padding string PS consists of fewer than eight octets
      or is inconsisent with the block type BT.
    3. The decryption process is a public-key operation and the block
      type BT is not 00 or 01, or the decryption process is a
      private-key operation and the block type is not 02.
   */ // parse the encryption block
    var eb = forge.util.createBuffer(em);
    var first = eb.getByte();
    var bt = eb.getByte();
    if (first !== 0x00 || pub && bt !== 0x00 && bt !== 0x01 || !pub && bt != 0x02 || pub && bt === 0x00 && typeof ml === "undefined") throw new Error("Encryption block is invalid.");
    var padNum = 0;
    if (bt === 0x00) {
        // check all padding bytes for 0x00
        padNum = k - 3 - ml;
        for(var i = 0; i < padNum; ++i){
            if (eb.getByte() !== 0x00) throw new Error("Encryption block is invalid.");
        }
    } else if (bt === 0x01) {
        // find the first byte that isn't 0xFF, should be after all padding
        padNum = 0;
        while(eb.length() > 1){
            if (eb.getByte() !== 0xFF) {
                --eb.read;
                break;
            }
            ++padNum;
        }
    } else if (bt === 0x02) {
        // look for 0x00 byte
        padNum = 0;
        while(eb.length() > 1){
            if (eb.getByte() === 0x00) {
                --eb.read;
                break;
            }
            ++padNum;
        }
    }
    // zero must be 0x00 and padNum must be (k - 3 - message length)
    var zero = eb.getByte();
    if (zero !== 0x00 || padNum !== k - 3 - eb.length()) throw new Error("Encryption block is invalid.");
    return eb.getBytes();
}
/**
 * Runs the key-generation algorithm asynchronously, either in the background
 * via Web Workers, or using the main thread and setImmediate.
 *
 * @param state the key-pair generation state.
 * @param [options] options for key-pair generation:
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2, -1 to use estimated cores minus one).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 * @param callback(err, keypair) called once the operation completes.
 */ function _generateKeyPair(state, options, callback1) {
    if (typeof options === "function") {
        callback1 = options;
        options = {};
    }
    options = options || {};
    var opts = {
        algorithm: {
            name: options.algorithm || "PRIMEINC",
            options: {
                workers: options.workers || 2,
                workLoad: options.workLoad || 100,
                workerScript: options.workerScript
            }
        }
    };
    if ("prng" in options) opts.prng = options.prng;
    generate();
    function generate() {
        // find p and then q (done in series to simplify)
        getPrime(state.pBits, function(err, num) {
            if (err) return callback1(err);
            state.p = num;
            if (state.q !== null) return finish(err, state.q);
            getPrime(state.qBits, finish);
        });
    }
    function getPrime(bits, callback) {
        forge.prime.generateProbablePrime(bits, opts, callback);
    }
    function finish(err, num) {
        if (err) return callback1(err);
        // set q
        state.q = num;
        // ensure p is larger than q (swap them if not)
        if (state.p.compareTo(state.q) < 0) {
            var tmp = state.p;
            state.p = state.q;
            state.q = tmp;
        }
        // ensure p is coprime with e
        if (state.p.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
            state.p = null;
            generate();
            return;
        }
        // ensure q is coprime with e
        if (state.q.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
            state.q = null;
            getPrime(state.qBits, finish);
            return;
        }
        // compute phi: (p - 1)(q - 1) (Euler's totient function)
        state.p1 = state.p.subtract(BigInteger.ONE);
        state.q1 = state.q.subtract(BigInteger.ONE);
        state.phi = state.p1.multiply(state.q1);
        // ensure e and phi are coprime
        if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
            // phi and e aren't coprime, so generate a new p and q
            state.p = state.q = null;
            generate();
            return;
        }
        // create n, ensure n is has the right number of bits
        state.n = state.p.multiply(state.q);
        if (state.n.bitLength() !== state.bits) {
            // failed, get new q
            state.q = null;
            getPrime(state.qBits, finish);
            return;
        }
        // set keys
        var d = state.e.modInverse(state.phi);
        state.keys = {
            privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),
            publicKey: pki.rsa.setPublicKey(state.n, state.e)
        };
        callback1(null, state.keys);
    }
}
/**
 * Converts a positive BigInteger into 2's-complement big-endian bytes.
 *
 * @param b the big integer to convert.
 *
 * @return the bytes.
 */ function _bnToBytes(b) {
    // prepend 0x00 if first byte >= 0x80
    var hex = b.toString(16);
    if (hex[0] >= "8") hex = "00" + hex;
    var bytes = forge.util.hexToBytes(hex);
    // ensure integer is minimally-encoded
    if (bytes.length > 1 && (bytes.charCodeAt(0) === 0 && (bytes.charCodeAt(1) & 0x80) === 0 || bytes.charCodeAt(0) === 0xFF && (bytes.charCodeAt(1) & 0x80) === 0x80)) return bytes.substr(1);
    return bytes;
}
/**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */ function _getMillerRabinTests(bits) {
    if (bits <= 100) return 27;
    if (bits <= 150) return 18;
    if (bits <= 200) return 15;
    if (bits <= 250) return 12;
    if (bits <= 300) return 9;
    if (bits <= 350) return 8;
    if (bits <= 400) return 7;
    if (bits <= 500) return 6;
    if (bits <= 600) return 5;
    if (bits <= 800) return 4;
    if (bits <= 1250) return 3;
    return 2;
}
/**
 * Performs feature detection on the Node crypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */ function _detectNodeCrypto(fn) {
    return forge.util.isNodejs && typeof _crypto[fn] === "function";
}
/**
 * Performs feature detection on the SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */ function _detectSubtleCrypto(fn) {
    return typeof util.globalScope !== "undefined" && typeof util.globalScope.crypto === "object" && typeof util.globalScope.crypto.subtle === "object" && typeof util.globalScope.crypto.subtle[fn] === "function";
}
/**
 * Performs feature detection on the deprecated Microsoft Internet Explorer
 * outdated SubtleCrypto interface. This function should only be used after
 * checking for the modern, standard SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */ function _detectSubtleMsCrypto(fn) {
    return typeof util.globalScope !== "undefined" && typeof util.globalScope.msCrypto === "object" && typeof util.globalScope.msCrypto.subtle === "object" && typeof util.globalScope.msCrypto.subtle[fn] === "function";
}
function _intToUint8Array(x) {
    var bytes = forge.util.hexToBytes(x.toString(16));
    var buffer = new Uint8Array(bytes.length);
    for(var i = 0; i < bytes.length; ++i)buffer[i] = bytes.charCodeAt(i);
    return buffer;
}
function _privateKeyFromJwk(jwk) {
    if (jwk.kty !== "RSA") throw new Error('Unsupported key algorithm "' + jwk.kty + '"; algorithm must be "RSA".');
    return pki.setRsaPrivateKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e), _base64ToBigInt(jwk.d), _base64ToBigInt(jwk.p), _base64ToBigInt(jwk.q), _base64ToBigInt(jwk.dp), _base64ToBigInt(jwk.dq), _base64ToBigInt(jwk.qi));
}
function _publicKeyFromJwk(jwk) {
    if (jwk.kty !== "RSA") throw new Error('Key algorithm must be "RSA".');
    return pki.setRsaPublicKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e));
}
function _base64ToBigInt(b64) {
    return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);
}

},{"./forge":"9OMxz","./asn1":"G8i2L","./jsbn":"5Wfp8","./oids":"4xWOI","./pkcs1":"lLiO7","./prime":"dx0Os","./random":"fOMS2","./util":"9XcEH","crypto":"jhUEF"}],"5Wfp8":[function(require,module,exports) {
// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.
// Basic JavaScript BN library - subset useful for RSA encryption.
/*
Licensing (LICENSE)
-------------------

This software is covered under the following copyright:
*/ /*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */ /*
Address all questions regarding this license to:

  Tom Wu
  tjw@cs.Stanford.EDU
*/ var forge = require("./forge");
module.exports = forge.jsbn = forge.jsbn || {};
// Bits per digit
var dbits;
// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = (canary & 0xffffff) == 0xefcafe;
// (public) Constructor
function BigInteger(a, b, c) {
    this.data = [];
    if (a != null) {
        if ("number" == typeof a) this.fromNumber(a, b, c);
        else if (b == null && "string" != typeof a) this.fromString(a, 256);
        else this.fromString(a, b);
    }
}
forge.jsbn.BigInteger = BigInteger;
// return new, unset BigInteger
function nbi() {
    return new BigInteger(null);
}
// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.
// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
    while(--n >= 0){
        var v = x * this.data[i++] + w.data[j] + c;
        c = Math.floor(v / 0x4000000);
        w.data[j++] = v & 0x3ffffff;
    }
    return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
    var xl = x & 0x7fff, xh = x >> 15;
    while(--n >= 0){
        var l = this.data[i] & 0x7fff;
        var h = this.data[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w.data[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w.data[j++] = l & 0x3fffffff;
    }
    return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff, xh = x >> 14;
    while(--n >= 0){
        var l = this.data[i] & 0x3fff;
        var h = this.data[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w.data[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w.data[j++] = l & 0xfffffff;
    }
    return c;
}
// node.js (no browser)
if (typeof navigator === "undefined") {
    BigInteger.prototype.am = am3;
    dbits = 28;
} else if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
    BigInteger.prototype.am = am2;
    dbits = 30;
} else if (j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;
    dbits = 26;
} else {
    BigInteger.prototype.am = am3;
    dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv)BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
function int2char(n) {
    return BI_RM.charAt(n);
}
function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return c == null ? -1 : c;
}
// (protected) copy this to r
function bnpCopyTo(r) {
    for(var i = this.t - 1; i >= 0; --i)r.data[i] = this.data[i];
    r.t = this.t;
    r.s = this.s;
}
// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
    this.t = 1;
    this.s = x < 0 ? -1 : 0;
    if (x > 0) this.data[0] = x;
    else if (x < -1) this.data[0] = x + this.DV;
    else this.t = 0;
}
// return bigint initialized to value
function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
}
// (protected) set from string and radix
function bnpFromString(s, b) {
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 256) k = 8; // byte array
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else {
        this.fromRadix(s, b);
        return;
    }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0){
        var x = k == 8 ? s[i] & 0xff : intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) == "-") mi = true;
            continue;
        }
        mi = false;
        if (sh == 0) this.data[this.t++] = x;
        else if (sh + k > this.DB) {
            this.data[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
            this.data[this.t++] = x >> this.DB - sh;
        } else this.data[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
    }
    if (k == 8 && (s[0] & 0x80) != 0) {
        this.s = -1;
        if (sh > 0) this.data[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
    }
    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
}
// (protected) clamp off excess high words
function bnpClamp() {
    var c = this.s & this.DM;
    while(this.t > 0 && this.data[this.t - 1] == c)--this.t;
}
// (public) return string representation in given radix
function bnToString(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
    var p = this.DB - i * this.DB % k;
    if (i-- > 0) {
        if (p < this.DB && (d = this.data[i] >> p) > 0) {
            m = true;
            r = int2char(d);
        }
        while(i >= 0){
            if (p < k) {
                d = (this.data[i] & (1 << p) - 1) << k - p;
                d |= this.data[--i] >> (p += this.DB - k);
            } else {
                d = this.data[i] >> (p -= k) & km;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if (d > 0) m = true;
            if (m) r += int2char(d);
        }
    }
    return m ? r : "0";
}
// (public) -this
function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
}
// (public) |this|
function bnAbs() {
    return this.s < 0 ? this.negate() : this;
}
// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0) return this.s < 0 ? -r : r;
    while(--i >= 0)if ((r = this.data[i] - a.data[i]) != 0) return r;
    return 0;
}
// returns bit length of the integer x
function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
    }
    if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
    }
    if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
    }
    if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
    }
    if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
    }
    return r;
}
// (public) return the number of bits in "this"
function bnBitLength() {
    if (this.t <= 0) return 0;
    return this.DB * (this.t - 1) + nbits(this.data[this.t - 1] ^ this.s & this.DM);
}
// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
    var i;
    for(i = this.t - 1; i >= 0; --i)r.data[i + n] = this.data[i];
    for(i = n - 1; i >= 0; --i)r.data[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
}
// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
    for(var i = n; i < this.t; ++i)r.data[i - n] = this.data[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
}
// (protected) r = this << n
function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
    for(i = this.t - 1; i >= 0; --i){
        r.data[i + ds + 1] = this.data[i] >> cbs | c;
        c = (this.data[i] & bm) << bs;
    }
    for(i = ds - 1; i >= 0; --i)r.data[i] = 0;
    r.data[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
}
// (protected) r = this >> n
function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
        r.t = 0;
        return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r.data[0] = this.data[ds] >> bs;
    for(var i = ds + 1; i < this.t; ++i){
        r.data[i - ds - 1] |= (this.data[i] & bm) << cbs;
        r.data[i - ds] = this.data[i] >> bs;
    }
    if (bs > 0) r.data[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
}
// (protected) r = this - a
function bnpSubTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while(i < m){
        c += this.data[i] - a.data[i];
        r.data[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while(i < this.t){
            c += this.data[i];
            r.data[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while(i < a.t){
            c -= a.data[i];
            r.data[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c < -1) r.data[i++] = this.DV + c;
    else if (c > 0) r.data[i++] = c;
    r.t = i;
    r.clamp();
}
// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while(--i >= 0)r.data[i] = 0;
    for(i = 0; i < y.t; ++i)r.data[i + x.t] = x.am(0, y.data[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
}
// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;
    while(--i >= 0)r.data[i] = 0;
    for(i = 0; i < x.t - 1; ++i){
        var c = x.am(i, x.data[i], r, 2 * i, 0, 1);
        if ((r.data[i + x.t] += x.am(i + 1, 2 * x.data[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
            r.data[i + x.t] -= x.DV;
            r.data[i + x.t + 1] = 1;
        }
    }
    if (r.t > 0) r.data[r.t - 1] += x.am(i, x.data[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
}
// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0) return;
    var pt = this.abs();
    if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
    }
    if (r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB - nbits(pm.data[pm.t - 1]); // normalize modulus
    if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
    } else {
        pm.copyTo(y);
        pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y.data[ys - 1];
    if (y0 == 0) return;
    var yt = y0 * (1 << this.F1) + (ys > 1 ? y.data[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
    var i = r.t, j = i - ys, t = q == null ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
        r.data[r.t++] = 1;
        r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y); // "negative" y so we can replace sub with am later
    while(y.t < ys)y.data[y.t++] = 0;
    while(--j >= 0){
        // Estimate quotient digit
        var qd = r.data[--i] == y0 ? this.DM : Math.floor(r.data[i] * d1 + (r.data[i - 1] + e) * d2);
        if ((r.data[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
            y.dlShiftTo(j, t);
            r.subTo(t, r);
            while(r.data[i] < --qd)r.subTo(t, r);
        }
    }
    if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms) BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
    if (ts < 0) BigInteger.ZERO.subTo(r, r);
}
// (public) this mod a
function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
}
// Modular reduction using "classic" algorithm
function Classic(m) {
    this.m = m;
}
function cConvert(x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
}
function cRevert(x) {
    return x;
}
function cReduce(x) {
    x.divRemTo(this.m, null, x);
}
function cMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
function cSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;
// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
    if (this.t < 1) return 0;
    var x = this.data[0];
    if ((x & 1) == 0) return 0;
    var y = x & 3; // y == 1/x mod 2^2
    y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4
    y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8
    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return y > 0 ? this.DV - y : -y;
}
// Montgomery reduction
function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << m.DB - 15) - 1;
    this.mt2 = 2 * m.t;
}
// xR mod m
function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
}
// x/R mod m
function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
}
// x = x/R mod m (HAC 14.32)
function montReduce(x) {
    while(x.t <= this.mt2)x.data[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i){
        // faster way of calculating u0 = x.data[i]*mp mod DV
        var j = x.data[i] & 0x7fff;
        var u0 = j * this.mpl + ((j * this.mph + (x.data[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x.data[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        // propagate carry
        while(x.data[j] >= x.DV){
            x.data[j] -= x.DV;
            x.data[++j]++;
        }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
}
// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
// (protected) true iff this is even
function bnpIsEven() {
    return (this.t > 0 ? this.data[0] & 1 : this.s) == 0;
}
// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e, z) {
    if (e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
    g.copyTo(r);
    while(--i >= 0){
        z.sqrTo(r, r2);
        if ((e & 1 << i) > 0) z.mulTo(r2, g, r);
        else {
            var t = r;
            r = r2;
            r2 = t;
        }
    }
    return z.revert(r);
}
// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e, m) {
    var z;
    if (e < 256 || m.isEven()) z = new Classic(m);
    else z = new Montgomery(m);
    return this.exp(e, z);
}
// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;
// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;
// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);
// jsbn2 lib
//Copyright (c) 2005-2009  Tom Wu
//All Rights Reserved.
//See "LICENSE" for details (See jsbn.js for LICENSE).
//Extended JavaScript BN functions, required for RSA private ops.
//Version 1.1: new BigInteger("0", 10) returns "proper" zero
//(public)
function bnClone() {
    var r = nbi();
    this.copyTo(r);
    return r;
}
//(public) return value as integer
function bnIntValue() {
    if (this.s < 0) {
        if (this.t == 1) return this.data[0] - this.DV;
        else if (this.t == 0) return -1;
    } else if (this.t == 1) return this.data[0];
    else if (this.t == 0) return 0;
    // assumes 16 < DB < 32
    return (this.data[1] & (1 << 32 - this.DB) - 1) << this.DB | this.data[0];
}
//(public) return value as byte
function bnByteValue() {
    return this.t == 0 ? this.s : this.data[0] << 24 >> 24;
}
//(public) return value as short (assumes DB>=16)
function bnShortValue() {
    return this.t == 0 ? this.s : this.data[0] << 16 >> 16;
}
//(protected) return x s.t. r^x < DV
function bnpChunkSize(r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r));
}
//(public) 0 if this == 0, 1 if this > 0
function bnSigNum() {
    if (this.s < 0) return -1;
    else if (this.t <= 0 || this.t == 1 && this.data[0] <= 0) return 0;
    else return 1;
}
//(protected) convert to radix string
function bnpToRadix(b) {
    if (b == null) b = 10;
    if (this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b, cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d, y, z);
    while(y.signum() > 0){
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
    }
    return z.intValue().toString(b) + r;
}
//(protected) convert from radix string
function bnpFromRadix(s, b) {
    this.fromInt(0);
    if (b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i){
        var x = intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
            continue;
        }
        w = b * w + x;
        if (++j >= cs) {
            this.dMultiply(d);
            this.dAddOffset(w, 0);
            j = 0;
            w = 0;
        }
    }
    if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
    }
    if (mi) BigInteger.ZERO.subTo(this, this);
}
//(protected) alternate constructor
function bnpFromNumber(a, b, c) {
    if ("number" == typeof b) {
        // new BigInteger(int,int,RNG)
        if (a < 2) this.fromInt(1);
        else {
            this.fromNumber(a, c);
            if (!this.testBit(a - 1)) this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
            if (this.isEven()) this.dAddOffset(1, 0); // force odd
            while(!this.isProbablePrime(b)){
                this.dAddOffset(2, 0);
                if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
            }
        }
    } else {
        // new BigInteger(int,RNG)
        var x = new Array(), t = a & 7;
        x.length = (a >> 3) + 1;
        b.nextBytes(x);
        if (t > 0) x[0] &= (1 << t) - 1;
        else x[0] = 0;
        this.fromString(x, 256);
    }
}
//(public) convert to bigendian byte array
function bnToByteArray() {
    var i = this.t, r = new Array();
    r[0] = this.s;
    var p = this.DB - i * this.DB % 8, d, k = 0;
    if (i-- > 0) {
        if (p < this.DB && (d = this.data[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;
        while(i >= 0){
            if (p < 8) {
                d = (this.data[i] & (1 << p) - 1) << 8 - p;
                d |= this.data[--i] >> (p += this.DB - 8);
            } else {
                d = this.data[i] >> (p -= 8) & 0xff;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if ((d & 0x80) != 0) d |= -256;
            if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
            if (k > 0 || d != this.s) r[k++] = d;
        }
    }
    return r;
}
function bnEquals(a) {
    return this.compareTo(a) == 0;
}
function bnMin(a) {
    return this.compareTo(a) < 0 ? this : a;
}
function bnMax(a) {
    return this.compareTo(a) > 0 ? this : a;
}
//(protected) r = this op a (bitwise)
function bnpBitwiseTo(a, op, r) {
    var i, f, m = Math.min(a.t, this.t);
    for(i = 0; i < m; ++i)r.data[i] = op(this.data[i], a.data[i]);
    if (a.t < this.t) {
        f = a.s & this.DM;
        for(i = m; i < this.t; ++i)r.data[i] = op(this.data[i], f);
        r.t = this.t;
    } else {
        f = this.s & this.DM;
        for(i = m; i < a.t; ++i)r.data[i] = op(f, a.data[i]);
        r.t = a.t;
    }
    r.s = op(this.s, a.s);
    r.clamp();
}
//(public) this & a
function op_and(x, y) {
    return x & y;
}
function bnAnd(a) {
    var r = nbi();
    this.bitwiseTo(a, op_and, r);
    return r;
}
//(public) this | a
function op_or(x, y) {
    return x | y;
}
function bnOr(a) {
    var r = nbi();
    this.bitwiseTo(a, op_or, r);
    return r;
}
//(public) this ^ a
function op_xor(x, y) {
    return x ^ y;
}
function bnXor(a) {
    var r = nbi();
    this.bitwiseTo(a, op_xor, r);
    return r;
}
//(public) this & ~a
function op_andnot(x, y) {
    return x & ~y;
}
function bnAndNot(a) {
    var r = nbi();
    this.bitwiseTo(a, op_andnot, r);
    return r;
}
//(public) ~this
function bnNot() {
    var r = nbi();
    for(var i = 0; i < this.t; ++i)r.data[i] = this.DM & ~this.data[i];
    r.t = this.t;
    r.s = ~this.s;
    return r;
}
//(public) this << n
function bnShiftLeft(n) {
    var r = nbi();
    if (n < 0) this.rShiftTo(-n, r);
    else this.lShiftTo(n, r);
    return r;
}
//(public) this >> n
function bnShiftRight(n) {
    var r = nbi();
    if (n < 0) this.lShiftTo(-n, r);
    else this.rShiftTo(n, r);
    return r;
}
//return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
    if (x == 0) return -1;
    var r = 0;
    if ((x & 0xffff) == 0) {
        x >>= 16;
        r += 16;
    }
    if ((x & 0xff) == 0) {
        x >>= 8;
        r += 8;
    }
    if ((x & 0xf) == 0) {
        x >>= 4;
        r += 4;
    }
    if ((x & 3) == 0) {
        x >>= 2;
        r += 2;
    }
    if ((x & 1) == 0) ++r;
    return r;
}
//(public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
    for(var i = 0; i < this.t; ++i)if (this.data[i] != 0) return i * this.DB + lbit(this.data[i]);
    if (this.s < 0) return this.t * this.DB;
    return -1;
}
//return number of 1 bits in x
function cbit(x) {
    var r = 0;
    while(x != 0){
        x &= x - 1;
        ++r;
    }
    return r;
}
//(public) return number of set bits
function bnBitCount() {
    var r = 0, x = this.s & this.DM;
    for(var i = 0; i < this.t; ++i)r += cbit(this.data[i] ^ x);
    return r;
}
//(public) true iff nth bit is set
function bnTestBit(n) {
    var j = Math.floor(n / this.DB);
    if (j >= this.t) return this.s != 0;
    return (this.data[j] & 1 << n % this.DB) != 0;
}
//(protected) this op (1<<n)
function bnpChangeBit(n, op) {
    var r = BigInteger.ONE.shiftLeft(n);
    this.bitwiseTo(r, op, r);
    return r;
}
//(public) this | (1<<n)
function bnSetBit(n) {
    return this.changeBit(n, op_or);
}
//(public) this & ~(1<<n)
function bnClearBit(n) {
    return this.changeBit(n, op_andnot);
}
//(public) this ^ (1<<n)
function bnFlipBit(n) {
    return this.changeBit(n, op_xor);
}
//(protected) r = this + a
function bnpAddTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while(i < m){
        c += this.data[i] + a.data[i];
        r.data[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c += a.s;
        while(i < this.t){
            c += this.data[i];
            r.data[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while(i < a.t){
            c += a.data[i];
            r.data[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c > 0) r.data[i++] = c;
    else if (c < -1) r.data[i++] = this.DV + c;
    r.t = i;
    r.clamp();
}
//(public) this + a
function bnAdd(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
}
//(public) this - a
function bnSubtract(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
}
//(public) this * a
function bnMultiply(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
}
//(public) this / a
function bnDivide(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
}
//(public) this % a
function bnRemainder(a) {
    var r = nbi();
    this.divRemTo(a, null, r);
    return r;
}
//(public) [this/a,this%a]
function bnDivideAndRemainder(a) {
    var q = nbi(), r = nbi();
    this.divRemTo(a, q, r);
    return new Array(q, r);
}
//(protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
    this.data[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
    ++this.t;
    this.clamp();
}
//(protected) this += n << w words, this >= 0
function bnpDAddOffset(n, w) {
    if (n == 0) return;
    while(this.t <= w)this.data[this.t++] = 0;
    this.data[w] += n;
    while(this.data[w] >= this.DV){
        this.data[w] -= this.DV;
        if (++w >= this.t) this.data[this.t++] = 0;
        ++this.data[w];
    }
}
//A "null" reducer
function NullExp() {}
function nNop(x) {
    return x;
}
function nMulTo(x, y, r) {
    x.multiplyTo(y, r);
}
function nSqrTo(x, r) {
    x.squareTo(r);
}
NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo;
//(public) this^e
function bnPow(e) {
    return this.exp(e, new NullExp());
}
//(protected) r = lower n words of "this * a", a.t <= n
//"this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a, n, r) {
    var i = Math.min(this.t + a.t, n);
    r.s = 0; // assumes a,this >= 0
    r.t = i;
    while(i > 0)r.data[--i] = 0;
    var j;
    for(j = r.t - this.t; i < j; ++i)r.data[i + this.t] = this.am(0, a.data[i], r, i, 0, this.t);
    for(j = Math.min(a.t, n); i < j; ++i)this.am(0, a.data[i], r, i, 0, n - i);
    r.clamp();
}
//(protected) r = "this * a" without lower n words, n > 0
//"this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a, n, r) {
    --n;
    var i = r.t = this.t + a.t - n;
    r.s = 0; // assumes a,this >= 0
    while(--i >= 0)r.data[i] = 0;
    for(i = Math.max(n - this.t, 0); i < a.t; ++i)r.data[this.t + i - n] = this.am(n - i, a.data[i], r, 0, 0, this.t + i - n);
    r.clamp();
    r.drShiftTo(1, r);
}
//Barrett modular reduction
function Barrett(m) {
    // setup Barrett
    this.r2 = nbi();
    this.q3 = nbi();
    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
    this.mu = this.r2.divide(m);
    this.m = m;
}
function barrettConvert(x) {
    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
    else if (x.compareTo(this.m) < 0) return x;
    else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
    }
}
function barrettRevert(x) {
    return x;
}
//x = x mod m (HAC 14.42)
function barrettReduce(x) {
    x.drShiftTo(this.m.t - 1, this.r2);
    if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
    }
    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
    while(x.compareTo(this.r2) < 0)x.dAddOffset(1, this.m.t + 1);
    x.subTo(this.r2, x);
    while(x.compareTo(this.m) >= 0)x.subTo(this.m, x);
}
//r = x^2 mod m; x != r
function barrettSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
//r = x*y mod m; x,y != r
function barrettMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo;
//(public) this^e % m (HAC 14.85)
function bnModPow(e, m) {
    var i = e.bitLength(), k, r = nbv(1), z;
    if (i <= 0) return r;
    else if (i < 18) k = 1;
    else if (i < 48) k = 3;
    else if (i < 144) k = 4;
    else if (i < 768) k = 5;
    else k = 6;
    if (i < 8) z = new Classic(m);
    else if (m.isEven()) z = new Barrett(m);
    else z = new Montgomery(m);
    // precomputation
    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while(n <= km){
            g[n] = nbi();
            z.mulTo(g2, g[n - 2], g[n]);
            n += 2;
        }
    }
    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
    i = nbits(e.data[j]) - 1;
    while(j >= 0){
        if (i >= k1) w = e.data[j] >> i - k1 & km;
        else {
            w = (e.data[j] & (1 << i + 1) - 1) << k1 - i;
            if (j > 0) w |= e.data[j - 1] >> this.DB + i - k1;
        }
        n = k;
        while((w & 1) == 0){
            w >>= 1;
            --n;
        }
        if ((i -= n) < 0) {
            i += this.DB;
            --j;
        }
        if (is1) {
            g[w].copyTo(r);
            is1 = false;
        } else {
            while(n > 1){
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
            }
            if (n > 0) z.sqrTo(r, r2);
            else {
                t = r;
                r = r2;
                r2 = t;
            }
            z.mulTo(r2, g[w], r);
        }
        while(j >= 0 && (e.data[j] & 1 << i) == 0){
            z.sqrTo(r, r2);
            t = r;
            r = r2;
            r2 = t;
            if (--i < 0) {
                i = this.DB - 1;
                --j;
            }
        }
    }
    return z.revert(r);
}
//(public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
    var x = this.s < 0 ? this.negate() : this.clone();
    var y = a.s < 0 ? a.negate() : a.clone();
    if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
    }
    var i = x.getLowestSetBit(), g = y.getLowestSetBit();
    if (g < 0) return x;
    if (i < g) g = i;
    if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
    }
    while(x.signum() > 0){
        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
            x.subTo(y, x);
            x.rShiftTo(1, x);
        } else {
            y.subTo(x, y);
            y.rShiftTo(1, y);
        }
    }
    if (g > 0) y.lShiftTo(g, y);
    return y;
}
//(protected) this % n, n < 2^26
function bnpModInt(n) {
    if (n <= 0) return 0;
    var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;
    if (this.t > 0) {
        if (d == 0) r = this.data[0] % n;
        else for(var i = this.t - 1; i >= 0; --i)r = (d * r + this.data[i]) % n;
    }
    return r;
}
//(public) 1/this % m (HAC 14.61)
function bnModInverse(m) {
    var ac = m.isEven();
    if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
    var u = m.clone(), v = this.clone();
    var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
    while(u.signum() != 0){
        while(u.isEven()){
            u.rShiftTo(1, u);
            if (ac) {
                if (!a.isEven() || !b.isEven()) {
                    a.addTo(this, a);
                    b.subTo(m, b);
                }
                a.rShiftTo(1, a);
            } else if (!b.isEven()) b.subTo(m, b);
            b.rShiftTo(1, b);
        }
        while(v.isEven()){
            v.rShiftTo(1, v);
            if (ac) {
                if (!c.isEven() || !d.isEven()) {
                    c.addTo(this, c);
                    d.subTo(m, d);
                }
                c.rShiftTo(1, c);
            } else if (!d.isEven()) d.subTo(m, d);
            d.rShiftTo(1, d);
        }
        if (u.compareTo(v) >= 0) {
            u.subTo(v, u);
            if (ac) a.subTo(c, a);
            b.subTo(d, b);
        } else {
            v.subTo(u, v);
            if (ac) c.subTo(a, c);
            d.subTo(b, d);
        }
    }
    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
    if (d.compareTo(m) >= 0) return d.subtract(m);
    if (d.signum() < 0) d.addTo(m, d);
    else return d;
    if (d.signum() < 0) return d.add(m);
    else return d;
}
var lowprimes = [
    2,
    3,
    5,
    7,
    11,
    13,
    17,
    19,
    23,
    29,
    31,
    37,
    41,
    43,
    47,
    53,
    59,
    61,
    67,
    71,
    73,
    79,
    83,
    89,
    97,
    101,
    103,
    107,
    109,
    113,
    127,
    131,
    137,
    139,
    149,
    151,
    157,
    163,
    167,
    173,
    179,
    181,
    191,
    193,
    197,
    199,
    211,
    223,
    227,
    229,
    233,
    239,
    241,
    251,
    257,
    263,
    269,
    271,
    277,
    281,
    283,
    293,
    307,
    311,
    313,
    317,
    331,
    337,
    347,
    349,
    353,
    359,
    367,
    373,
    379,
    383,
    389,
    397,
    401,
    409,
    419,
    421,
    431,
    433,
    439,
    443,
    449,
    457,
    461,
    463,
    467,
    479,
    487,
    491,
    499,
    503,
    509
];
var lplim = 67108864 / lowprimes[lowprimes.length - 1];
//(public) test primality with certainty >= 1-.5^t
function bnIsProbablePrime(t) {
    var i, x = this.abs();
    if (x.t == 1 && x.data[0] <= lowprimes[lowprimes.length - 1]) {
        for(i = 0; i < lowprimes.length; ++i)if (x.data[0] == lowprimes[i]) return true;
        return false;
    }
    if (x.isEven()) return false;
    i = 1;
    while(i < lowprimes.length){
        var m = lowprimes[i], j = i + 1;
        while(j < lowprimes.length && m < lplim)m *= lowprimes[j++];
        m = x.modInt(m);
        while(i < j)if (m % lowprimes[i++] == 0) return false;
    }
    return x.millerRabin(t);
}
//(protected) true if probably prime (HAC 4.24, Miller-Rabin)
function bnpMillerRabin(t) {
    var n1 = this.subtract(BigInteger.ONE);
    var k = n1.getLowestSetBit();
    if (k <= 0) return false;
    var r = n1.shiftRight(k);
    var prng = bnGetPrng();
    var a;
    for(var i = 0; i < t; ++i){
        // select witness 'a' at random from between 1 and n1
        do a = new BigInteger(this.bitLength(), prng);
        while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
            var j = 1;
            while((j++) < k && y.compareTo(n1) != 0){
                y = y.modPowInt(2, this);
                if (y.compareTo(BigInteger.ONE) == 0) return false;
            }
            if (y.compareTo(n1) != 0) return false;
        }
    }
    return true;
}
// get pseudo random number generator
function bnGetPrng() {
    // create prng with api that matches BigInteger secure random
    return {
        // x is an array to fill with bytes
        nextBytes: function(x) {
            for(var i = 0; i < x.length; ++i)x[i] = Math.floor(Math.random() * 0x0100);
        }
    };
}
//protected
BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.fromNumber = bnpFromNumber;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.changeBit = bnpChangeBit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
BigInteger.prototype.modInt = bnpModInt;
BigInteger.prototype.millerRabin = bnpMillerRabin;
//public
BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.byteValue = bnByteValue;
BigInteger.prototype.shortValue = bnShortValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.andNot = bnAndNot;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.shiftLeft = bnShiftLeft;
BigInteger.prototype.shiftRight = bnShiftRight;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.bitCount = bnBitCount;
BigInteger.prototype.testBit = bnTestBit;
BigInteger.prototype.setBit = bnSetBit;
BigInteger.prototype.clearBit = bnClearBit;
BigInteger.prototype.flipBit = bnFlipBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.modInverse = bnModInverse;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.prototype.isProbablePrime = bnIsProbablePrime; //BigInteger interfaces not implemented in jsbn:
 //BigInteger(int signum, byte[] magnitude)
 //double doubleValue()
 //float floatValue()
 //int hashCode()
 //long longValue()
 //static BigInteger valueOf(long val)

},{"./forge":"9OMxz"}],"lLiO7":[function(require,module,exports) {
/**
 * Partial implementation of PKCS#1 v2.2: RSA-OEAP
 *
 * Modified but based on the following MIT and BSD licensed code:
 *
 * https://github.com/kjur/jsjws/blob/master/rsa.js:
 *
 * The 'jsjws'(JSON Web Signature JavaScript Library) License
 *
 * Copyright (c) 2012 Kenji Urushima
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
 *
 * RSAES-OAEP.js
 * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
 * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
 * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
 * Contact: ellis@nukinetics.com
 * Distributed under the BSD License.
 *
 * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
 *
 * @author Evan Jones (http://evanjones.ca/)
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./util");
require("./random");
require("./sha1");
// shortcut for PKCS#1 API
var pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};
/**
 * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
 * and seed.
 *
 * This method does not perform RSA encryption, it only encodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param message the message to encode.
 * @param options the options to use:
 *          label an optional label to use.
 *          seed the seed to use.
 *          md the message digest object to use, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the encoded message bytes.
 */ pkcs1.encode_rsa_oaep = function(key, message, options) {
    // parse arguments
    var label;
    var seed;
    var md;
    var mgf1Md;
    // legacy args (label, seed, md)
    if (typeof options === "string") {
        label = options;
        seed = arguments[3] || undefined;
        md = arguments[4] || undefined;
    } else if (options) {
        label = options.label || undefined;
        seed = options.seed || undefined;
        md = options.md || undefined;
        if (options.mgf1 && options.mgf1.md) mgf1Md = options.mgf1.md;
    }
    // default OAEP to SHA-1 message digest
    if (!md) md = forge.md.sha1.create();
    else md.start();
    // default MGF-1 to same as OAEP
    if (!mgf1Md) mgf1Md = md;
    // compute length in bytes and check output
    var keyLength = Math.ceil(key.n.bitLength() / 8);
    var maxLength = keyLength - 2 * md.digestLength - 2;
    if (message.length > maxLength) {
        var error = new Error("RSAES-OAEP input message length is too long.");
        error.length = message.length;
        error.maxLength = maxLength;
        throw error;
    }
    if (!label) label = "";
    md.update(label, "raw");
    var lHash = md.digest();
    var PS = "";
    var PS_length = maxLength - message.length;
    for(var i = 0; i < PS_length; i++)PS += "\0";
    var DB = lHash.getBytes() + PS + "\x01" + message;
    if (!seed) seed = forge.random.getBytes(md.digestLength);
    else if (seed.length !== md.digestLength) {
        var error = new Error("Invalid RSAES-OAEP seed. The seed length must match the digest length.");
        error.seedLength = seed.length;
        error.digestLength = md.digestLength;
        throw error;
    }
    var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
    var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);
    var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
    var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);
    // return encoded message
    return "\0" + maskedSeed + maskedDB;
};
/**
 * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
 * label (L).
 *
 * This method does not perform RSA decryption, it only decodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param em the encoded message to decode.
 * @param options the options to use:
 *          label an optional label to use.
 *          md the message digest object to use for OAEP, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the decoded message bytes.
 */ pkcs1.decode_rsa_oaep = function(key, em, options) {
    // parse args
    var label;
    var md;
    var mgf1Md;
    // legacy args
    if (typeof options === "string") {
        label = options;
        md = arguments[3] || undefined;
    } else if (options) {
        label = options.label || undefined;
        md = options.md || undefined;
        if (options.mgf1 && options.mgf1.md) mgf1Md = options.mgf1.md;
    }
    // compute length in bytes
    var keyLength = Math.ceil(key.n.bitLength() / 8);
    if (em.length !== keyLength) {
        var error = new Error("RSAES-OAEP encoded message length is invalid.");
        error.length = em.length;
        error.expectedLength = keyLength;
        throw error;
    }
    // default OAEP to SHA-1 message digest
    if (md === undefined) md = forge.md.sha1.create();
    else md.start();
    // default MGF-1 to same as OAEP
    if (!mgf1Md) mgf1Md = md;
    if (keyLength < 2 * md.digestLength + 2) throw new Error("RSAES-OAEP key is too short for the hash function.");
    if (!label) label = "";
    md.update(label, "raw");
    var lHash = md.digest().getBytes();
    // split the message into its parts
    var y = em.charAt(0);
    var maskedSeed = em.substring(1, md.digestLength + 1);
    var maskedDB = em.substring(1 + md.digestLength);
    var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
    var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);
    var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
    var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);
    var lHashPrime = db.substring(0, md.digestLength);
    // constant time check that all values match what is expected
    var error = y !== "\0";
    // constant time check lHash vs lHashPrime
    for(var i = 0; i < md.digestLength; ++i)error |= lHash.charAt(i) !== lHashPrime.charAt(i);
    // "constant time" find the 0x1 byte separating the padding (zeros) from the
    // message
    // TODO: It must be possible to do this in a better/smarter way?
    var in_ps = 1;
    var index = md.digestLength;
    for(var j = md.digestLength; j < db.length; j++){
        var code = db.charCodeAt(j);
        var is_0 = code & 0x1 ^ 0x1;
        // non-zero if not 0 or 1 in the ps section
        var error_mask = in_ps ? 0xfffe : 0x0000;
        error |= code & error_mask;
        // latch in_ps to zero after we find 0x1
        in_ps = in_ps & is_0;
        index += in_ps;
    }
    if (error || db.charCodeAt(index) !== 0x1) throw new Error("Invalid RSAES-OAEP padding.");
    return db.substring(index + 1);
};
function rsa_mgf1(seed, maskLength, hash) {
    // default to SHA-1 message digest
    if (!hash) hash = forge.md.sha1.create();
    var t = "";
    var count = Math.ceil(maskLength / hash.digestLength);
    for(var i = 0; i < count; ++i){
        var c = String.fromCharCode(i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF);
        hash.start();
        hash.update(seed + c);
        t += hash.digest().getBytes();
    }
    return t.substring(0, maskLength);
}

},{"./forge":"9OMxz","./util":"9XcEH","./random":"fOMS2","./sha1":"b9ORs"}],"b9ORs":[function(require,module,exports) {
/**
 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./md");
require("./util");
var sha1 = module.exports = forge.sha1 = forge.sha1 || {};
forge.md.sha1 = forge.md.algorithms.sha1 = sha1;
/**
 * Creates a SHA-1 message digest object.
 *
 * @return a message digest object.
 */ sha1.create = function() {
    // do initialization as necessary
    if (!_initialized) _init();
    // SHA-1 state contains five 32-bit integers
    var _state = null;
    // input buffer
    var _input = forge.util.createBuffer();
    // used for word storage
    var _w = new Array(80);
    // message digest object
    var md = {
        algorithm: "sha1",
        blockLength: 64,
        digestLength: 20,
        // 56-bit length of message so far (does not including padding)
        messageLength: 0,
        // true message length
        fullMessageLength: null,
        // size of message length in bytes
        messageLengthSize: 8
    };
    /**
   * Starts the digest.
   *
   * @return this digest object.
   */ md.start = function() {
        // up to 56-bit message length for convenience
        md.messageLength = 0;
        // full message length (set md.messageLength64 for backwards-compatibility)
        md.fullMessageLength = md.messageLength64 = [];
        var int32s = md.messageLengthSize / 4;
        for(var i = 0; i < int32s; ++i)md.fullMessageLength.push(0);
        _input = forge.util.createBuffer();
        _state = {
            h0: 0x67452301,
            h1: 0xEFCDAB89,
            h2: 0x98BADCFE,
            h3: 0x10325476,
            h4: 0xC3D2E1F0
        };
        return md;
    };
    // start digest automatically for first time
    md.start();
    /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */ md.update = function(msg, encoding) {
        if (encoding === "utf8") msg = forge.util.encodeUtf8(msg);
        // update message length
        var len = msg.length;
        md.messageLength += len;
        len = [
            len / 0x100000000 >>> 0,
            len >>> 0
        ];
        for(var i = md.fullMessageLength.length - 1; i >= 0; --i){
            md.fullMessageLength[i] += len[1];
            len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
            md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
            len[0] = len[1] / 0x100000000 >>> 0;
        }
        // add bytes to input buffer
        _input.putBytes(msg);
        // process bytes
        _update(_state, _w, _input);
        // compact input buffer every 2K or if empty
        if (_input.read > 2048 || _input.length() === 0) _input.compact();
        return md;
    };
    /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */ md.digest = function() {
        /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-1 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */ /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */ var finalBlock = forge.util.createBuffer();
        finalBlock.putBytes(_input.bytes());
        // compute remaining size to be digested (include message length size)
        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;
        // add padding for overflow blockSize - overflow
        // _padding starts with 1 byte with first bit is set (byte value 128), then
        // there may be up to (blockSize - 1) other pad bytes
        var overflow = remaining & md.blockLength - 1;
        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));
        // serialize message length in bits in big-endian order; since length
        // is stored in bytes we multiply by 8 and add carry from next int
        var next, carry;
        var bits = md.fullMessageLength[0] * 8;
        for(var i = 0; i < md.fullMessageLength.length - 1; ++i){
            next = md.fullMessageLength[i + 1] * 8;
            carry = next / 0x100000000 >>> 0;
            bits += carry;
            finalBlock.putInt32(bits >>> 0);
            bits = next >>> 0;
        }
        finalBlock.putInt32(bits);
        var s2 = {
            h0: _state.h0,
            h1: _state.h1,
            h2: _state.h2,
            h3: _state.h3,
            h4: _state.h4
        };
        _update(s2, _w, finalBlock);
        var rval = forge.util.createBuffer();
        rval.putInt32(s2.h0);
        rval.putInt32(s2.h1);
        rval.putInt32(s2.h2);
        rval.putInt32(s2.h3);
        rval.putInt32(s2.h4);
        return rval;
    };
    return md;
};
// sha-1 padding bytes not initialized yet
var _padding = null;
var _initialized = false;
/**
 * Initializes the constant tables.
 */ function _init() {
    // create padding
    _padding = String.fromCharCode(128);
    _padding += forge.util.fillString(String.fromCharCode(0x00), 64);
    // now initialized
    _initialized = true;
}
/**
 * Updates a SHA-1 state with the given byte buffer.
 *
 * @param s the SHA-1 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */ function _update(s, w, bytes) {
    // consume 512 bit (64 byte) chunks
    var t, a, b, c, d, e, f, i;
    var len = bytes.length();
    while(len >= 64){
        // the w array will be populated with sixteen 32-bit big-endian words
        // and then extended into 80 32-bit words according to SHA-1 algorithm
        // and for 32-79 using Max Locktyukhin's optimization
        // initialize hash value for this chunk
        a = s.h0;
        b = s.h1;
        c = s.h2;
        d = s.h3;
        e = s.h4;
        // round 1
        for(i = 0; i < 16; ++i){
            t = bytes.getInt32();
            w[i] = t;
            f = d ^ b & (c ^ d);
            t = (a << 5 | a >>> 27) + f + e + 0x5A827999 + t;
            e = d;
            d = c;
            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
            c = (b << 30 | b >>> 2) >>> 0;
            b = a;
            a = t;
        }
        for(; i < 20; ++i){
            t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
            t = t << 1 | t >>> 31;
            w[i] = t;
            f = d ^ b & (c ^ d);
            t = (a << 5 | a >>> 27) + f + e + 0x5A827999 + t;
            e = d;
            d = c;
            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
            c = (b << 30 | b >>> 2) >>> 0;
            b = a;
            a = t;
        }
        // round 2
        for(; i < 32; ++i){
            t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
            t = t << 1 | t >>> 31;
            w[i] = t;
            f = b ^ c ^ d;
            t = (a << 5 | a >>> 27) + f + e + 0x6ED9EBA1 + t;
            e = d;
            d = c;
            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
            c = (b << 30 | b >>> 2) >>> 0;
            b = a;
            a = t;
        }
        for(; i < 40; ++i){
            t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
            t = t << 2 | t >>> 30;
            w[i] = t;
            f = b ^ c ^ d;
            t = (a << 5 | a >>> 27) + f + e + 0x6ED9EBA1 + t;
            e = d;
            d = c;
            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
            c = (b << 30 | b >>> 2) >>> 0;
            b = a;
            a = t;
        }
        // round 3
        for(; i < 60; ++i){
            t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
            t = t << 2 | t >>> 30;
            w[i] = t;
            f = b & c | d & (b ^ c);
            t = (a << 5 | a >>> 27) + f + e + 0x8F1BBCDC + t;
            e = d;
            d = c;
            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
            c = (b << 30 | b >>> 2) >>> 0;
            b = a;
            a = t;
        }
        // round 4
        for(; i < 80; ++i){
            t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
            t = t << 2 | t >>> 30;
            w[i] = t;
            f = b ^ c ^ d;
            t = (a << 5 | a >>> 27) + f + e + 0xCA62C1D6 + t;
            e = d;
            d = c;
            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
            c = (b << 30 | b >>> 2) >>> 0;
            b = a;
            a = t;
        }
        // update hash state
        s.h0 = s.h0 + a | 0;
        s.h1 = s.h1 + b | 0;
        s.h2 = s.h2 + c | 0;
        s.h3 = s.h3 + d | 0;
        s.h4 = s.h4 + e | 0;
        len -= 64;
    }
}

},{"./forge":"9OMxz","./md":"lMdro","./util":"9XcEH"}],"dx0Os":[function(require,module,exports) {
/**
 * Prime number generation API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./util");
require("./jsbn");
require("./random");
(function() {
    // forge.prime already defined
    if (forge.prime) {
        module.exports = forge.prime;
        return;
    }
    /* PRIME API */ var prime = module.exports = forge.prime = forge.prime || {};
    var BigInteger = forge.jsbn.BigInteger;
    // primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
    var GCD_30_DELTA = [
        6,
        4,
        2,
        4,
        2,
        4,
        6,
        2
    ];
    var THIRTY = new BigInteger(null);
    THIRTY.fromInt(30);
    var op_or = function(x, y) {
        return x | y;
    };
    /**
 * Generates a random probable prime with the given number of bits.
 *
 * Alternative algorithms can be specified by name as a string or as an
 * object with custom options like so:
 *
 * {
 *   name: 'PRIMEINC',
 *   options: {
 *     maxBlockTime: <the maximum amount of time to block the main
 *       thread before allowing I/O other JS to run>,
 *     millerRabinTests: <the number of miller-rabin tests to run>,
 *     workerScript: <the worker script URL>,
 *     workers: <the number of web workers (if supported) to use,
 *       -1 to use estimated cores minus one>.
 *     workLoad: the size of the work load, ie: number of possible prime
 *       numbers for each web worker to check per work assignment,
 *       (default: 100).
 *   }
 * }
 *
 * @param bits the number of bits for the prime number.
 * @param options the options to use.
 *          [algorithm] the algorithm to use (default: 'PRIMEINC').
 *          [prng] a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *
 * @return callback(err, num) called once the operation completes.
 */ prime.generateProbablePrime = function(bits, options, callback) {
        if (typeof options === "function") {
            callback = options;
            options = {};
        }
        options = options || {};
        // default to PRIMEINC algorithm
        var algorithm = options.algorithm || "PRIMEINC";
        if (typeof algorithm === "string") algorithm = {
            name: algorithm
        };
        algorithm.options = algorithm.options || {};
        // create prng with api that matches BigInteger secure random
        var prng = options.prng || forge.random;
        var rng = {
            // x is an array to fill with bytes
            nextBytes: function(x) {
                var b = prng.getBytesSync(x.length);
                for(var i = 0; i < x.length; ++i)x[i] = b.charCodeAt(i);
            }
        };
        if (algorithm.name === "PRIMEINC") return primeincFindPrime(bits, rng, algorithm.options, callback);
        throw new Error("Invalid prime generation algorithm: " + algorithm.name);
    };
    function primeincFindPrime(bits, rng, options, callback) {
        if ("workers" in options) return primeincFindPrimeWithWorkers(bits, rng, options, callback);
        return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
    }
    function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
        // initialize random number
        var num = generateRandom(bits, rng);
        /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
  number we are given is always aligned at 30k + 1. Each time the number is
  determined not to be prime we add to get to the next 'i', eg: if the number
  was at 30k + 1 we add 6. */ var deltaIdx = 0;
        // get required number of MR tests
        var mrTests = getMillerRabinTests(num.bitLength());
        if ("millerRabinTests" in options) mrTests = options.millerRabinTests;
        // find prime nearest to 'num' for maxBlockTime ms
        // 10 ms gives 5ms of leeway for other calculations before dropping
        // below 60fps (1000/60 == 16.67), but in reality, the number will
        // likely be higher due to an 'atomic' big int modPow
        var maxBlockTime = 10;
        if ("maxBlockTime" in options) maxBlockTime = options.maxBlockTime;
        _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
    }
    function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {
        var start = +new Date();
        do {
            // overflow, regenerate random number
            if (num.bitLength() > bits) num = generateRandom(bits, rng);
            // do primality test
            if (num.isProbablePrime(mrTests)) return callback(null, num);
            // get next potential prime
            num.dAddOffset(GCD_30_DELTA[(deltaIdx++) % 8], 0);
        }while (maxBlockTime < 0 || +new Date() - start < maxBlockTime);
        // keep trying later
        forge.util.setImmediate(function() {
            _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
        });
    }
    // NOTE: This algorithm is indeterminate in nature because workers
    // run in parallel looking at different segments of numbers. Even if this
    // algorithm is run twice with the same input from a predictable RNG, it
    // may produce different outputs.
    function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
        // web workers unavailable
        if (typeof Worker === "undefined") return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
        // initialize random number
        var num = generateRandom(bits, rng);
        // use web workers to generate keys
        var numWorkers = options.workers;
        var workLoad = options.workLoad || 100;
        var range = workLoad * 30 / 8;
        var workerScript = options.workerScript || "forge/prime.worker.js";
        if (numWorkers === -1) return forge.util.estimateCores(function(err, cores) {
            if (err) // default to 2
            cores = 2;
            numWorkers = cores - 1;
            generate();
        });
        generate();
        function generate() {
            // require at least 1 worker
            numWorkers = Math.max(1, numWorkers);
            // TODO: consider optimizing by starting workers outside getPrime() ...
            // note that in order to clean up they will have to be made internally
            // asynchronous which may actually be slower
            // start workers immediately
            var workers = [];
            for(var i1 = 0; i1 < numWorkers; ++i1)// FIXME: fix path or use blob URLs
            workers[i1] = new Worker(workerScript);
            var running = numWorkers;
            // listen for requests from workers and assign ranges to find prime
            for(var i1 = 0; i1 < numWorkers; ++i1)workers[i1].addEventListener("message", workerMessage);
            /* Note: The distribution of random numbers is unknown. Therefore, each
    web worker is continuously allocated a range of numbers to check for a
    random number until one is found.

    Every 30 numbers will be checked just 8 times, because prime numbers
    have the form:

    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)

    Therefore, if we want a web worker to run N checks before asking for
    a new range of numbers, each range must contain N*30/8 numbers.

    For 100 checks (workLoad), this is a range of 375. */ var found = false;
            function workerMessage(e) {
                // ignore message, prime already found
                if (found) return;
                --running;
                var data = e.data;
                if (data.found) {
                    // terminate all workers
                    for(var i = 0; i < workers.length; ++i)workers[i].terminate();
                    found = true;
                    return callback(null, new BigInteger(data.prime, 16));
                }
                // overflow, regenerate random number
                if (num.bitLength() > bits) num = generateRandom(bits, rng);
                // assign new range to check
                var hex = num.toString(16);
                // start prime search
                e.target.postMessage({
                    hex: hex,
                    workLoad: workLoad
                });
                num.dAddOffset(range, 0);
            }
        }
    }
    /**
 * Generates a random number using the given number of bits and RNG.
 *
 * @param bits the number of bits for the number.
 * @param rng the random number generator to use.
 *
 * @return the random number.
 */ function generateRandom(bits, rng) {
        var num = new BigInteger(bits, rng);
        // force MSB set
        var bits1 = bits - 1;
        if (!num.testBit(bits1)) num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
        // align number on 30k+1 boundary
        num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
        return num;
    }
    /**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */ function getMillerRabinTests(bits) {
        if (bits <= 100) return 27;
        if (bits <= 150) return 18;
        if (bits <= 200) return 15;
        if (bits <= 250) return 12;
        if (bits <= 300) return 9;
        if (bits <= 350) return 8;
        if (bits <= 400) return 7;
        if (bits <= 500) return 6;
        if (bits <= 600) return 5;
        if (bits <= 800) return 4;
        if (bits <= 1250) return 3;
        return 2;
    }
})();

},{"./forge":"9OMxz","./util":"9XcEH","./jsbn":"5Wfp8","./random":"fOMS2"}],"chiVn":[function(require,module,exports) {
"use strict";
const { base64  } = require("multiformats/bases/base64");
const ciphers = require("../ciphers/aes-gcm");
module.exports = {
    /**
   * Attempts to decrypt a base64 encoded PrivateKey string
   * with the given password. The privateKey must have been exported
   * using the same password and underlying cipher (aes-gcm)
   *
   * @param {string} privateKey - A base64 encoded encrypted key
   * @param {string} password
   * @returns {Promise<Uint8Array>} The private key protobuf
   */ import: async function(privateKey, password) {
        const encryptedKey = base64.decode(privateKey);
        const cipher = ciphers.create();
        return await cipher.decrypt(encryptedKey, password);
    }
};

},{"multiformats/bases/base64":"3gCnk","../ciphers/aes-gcm":"53Tna"}],"53Tna":[function(require,module,exports) {
"use strict";
const { concat  } = require("uint8arrays/concat");
const { fromString  } = require("uint8arrays/from-string");
const webcrypto = require("../webcrypto");
// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples
/**
 *
 * @param {object} [options]
 * @param {string} [options.algorithm=AES-GCM]
 * @param {number} [options.nonceLength=12]
 * @param {number} [options.keyLength=16]
 * @param {string} [options.digest=sha256]
 * @param {number} [options.saltLength=16]
 * @param {number} [options.iterations=32767]
 * @returns {*}
 */ function create({ algorithm ="AES-GCM" , nonceLength =12 , keyLength =16 , digest ="SHA-256" , saltLength =16 , iterations =32767  } = {}) {
    const crypto = webcrypto.get();
    keyLength *= 8 // Browser crypto uses bits instead of bytes
    ;
    /**
   * Uses the provided password to derive a pbkdf2 key. The key
   * will then be used to encrypt the data.
   *
   * @param {Uint8Array} data - The data to decrypt
   * @param {string} password - A plain password
   * @returns {Promise<Uint8Array>}
   */ async function encrypt(data, password) {
        const salt = crypto.getRandomValues(new Uint8Array(saltLength));
        const nonce = crypto.getRandomValues(new Uint8Array(nonceLength));
        const aesGcm = {
            name: algorithm,
            iv: nonce
        };
        // Derive a key using PBKDF2.
        const deriveParams = {
            name: "PBKDF2",
            salt,
            iterations,
            hash: {
                name: digest
            }
        };
        const rawKey = await crypto.subtle.importKey("raw", fromString(password), {
            name: "PBKDF2"
        }, false, [
            "deriveKey",
            "deriveBits"
        ]);
        const cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, {
            name: algorithm,
            length: keyLength
        }, true, [
            "encrypt"
        ]);
        // Encrypt the string.
        const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data);
        return concat([
            salt,
            aesGcm.iv,
            new Uint8Array(ciphertext)
        ]);
    }
    /**
   * Uses the provided password to derive a pbkdf2 key. The key
   * will then be used to decrypt the data. The options used to create
   * this decryption cipher must be the same as those used to create
   * the encryption cipher.
   *
   * @param {Uint8Array} data - The data to decrypt
   * @param {string} password - A plain password
   * @returns {Promise<Uint8Array>}
   */ async function decrypt(data, password) {
        const salt = data.slice(0, saltLength);
        const nonce = data.slice(saltLength, saltLength + nonceLength);
        const ciphertext = data.slice(saltLength + nonceLength);
        const aesGcm = {
            name: algorithm,
            iv: nonce
        };
        // Derive the key using PBKDF2.
        const deriveParams = {
            name: "PBKDF2",
            salt,
            iterations,
            hash: {
                name: digest
            }
        };
        const rawKey = await crypto.subtle.importKey("raw", fromString(password), {
            name: "PBKDF2"
        }, false, [
            "deriveKey",
            "deriveBits"
        ]);
        const cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, {
            name: algorithm,
            length: keyLength
        }, true, [
            "decrypt"
        ]);
        // Decrypt the string.
        const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);
        return new Uint8Array(plaintext);
    }
    return {
        encrypt,
        decrypt
    };
}
module.exports = {
    create
};

},{"uint8arrays/concat":"gqJ9u","uint8arrays/from-string":"7qjkp","../webcrypto":"atXO3"}],"gqJ9u":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function concat(arrays, length) {
    if (!length) length = arrays.reduce((acc, curr)=>acc + curr.length, 0);
    const output = new Uint8Array(length);
    let offset = 0;
    for (const arr of arrays){
        output.set(arr, offset);
        offset += arr.length;
    }
    return output;
}
exports.concat = concat;

},{}],"atXO3":[function(require,module,exports) {
/* eslint-env browser */ "use strict";
// Check native crypto exists and is enabled (In insecure context `self.crypto`
// exists but `self.crypto.subtle` does not).
exports.get = (win = globalThis)=>{
    const nativeCrypto = win.crypto;
    if (!nativeCrypto || !nativeCrypto.subtle) throw Object.assign(new Error("Missing Web Crypto API. The most likely cause of this error is that this page is being accessed from an insecure context (i.e. not HTTPS). For more information and possible resolutions see https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api"), {
        code: "ERR_MISSING_WEB_CRYPTO"
    });
    return nativeCrypto;
};

},{}],"cYLUT":[function(require,module,exports) {
"use strict";
const { sha256  } = require("multiformats/hashes/sha2");
const errcode = require("err-code");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
require("node-forge/lib/sha512");
const forge = require("node-forge/lib/forge");
const crypto = require("./rsa");
const pbm = require("./keys");
const exporter = require("./exporter");
class RsaPublicKey {
    constructor(key){
        this._key = key;
    }
    async verify(data, sig) {
        return crypto.hashAndVerify(this._key, sig, data);
    }
    marshal() {
        return crypto.utils.jwkToPkix(this._key);
    }
    get bytes() {
        return pbm.PublicKey.encode({
            Type: pbm.KeyType.RSA,
            Data: this.marshal()
        }).finish();
    }
    encrypt(bytes) {
        return crypto.encrypt(this._key, bytes);
    }
    equals(key) {
        return uint8ArrayEquals(this.bytes, key.bytes);
    }
    async hash() {
        const { bytes  } = await sha256.digest(this.bytes);
        return bytes;
    }
}
class RsaPrivateKey {
    // key       - Object of the jwk format
    // publicKey - Uint8Array of the spki format
    constructor(key, publicKey){
        this._key = key;
        this._publicKey = publicKey;
    }
    genSecret() {
        return crypto.getRandomValues(16);
    }
    async sign(message) {
        return crypto.hashAndSign(this._key, message);
    }
    get public() {
        if (!this._publicKey) throw errcode(new Error("public key not provided"), "ERR_PUBKEY_NOT_PROVIDED");
        return new RsaPublicKey(this._publicKey);
    }
    decrypt(bytes) {
        return crypto.decrypt(this._key, bytes);
    }
    marshal() {
        return crypto.utils.jwkToPkcs1(this._key);
    }
    get bytes() {
        return pbm.PrivateKey.encode({
            Type: pbm.KeyType.RSA,
            Data: this.marshal()
        }).finish();
    }
    equals(key) {
        return uint8ArrayEquals(this.bytes, key.bytes);
    }
    async hash() {
        const { bytes  } = await sha256.digest(this.bytes);
        return bytes;
    }
    /**
   * Gets the ID of the key.
   *
   * The key id is the base58 encoding of the SHA-256 multihash of its public key.
   * The public key is a protobuf encoding containing a type and the DER encoding
   * of the PKCS SubjectPublicKeyInfo.
   *
   * @returns {Promise<string>}
   */ async id() {
        const hash = await this.public.hash();
        return uint8ArrayToString(hash, "base58btc");
    }
    /**
   * Exports the key into a password protected PEM format
   *
   * @param {string} password - The password to read the encrypted PEM
   * @param {string} [format=pkcs-8] - The format in which to export as
   */ async export(password, format = "pkcs-8") {
        if (format === "pkcs-8") {
            const buffer = new forge.util.ByteBuffer(this.marshal());
            const asn1 = forge.asn1.fromDer(buffer);
            const privateKey = forge.pki.privateKeyFromAsn1(asn1);
            const options = {
                algorithm: "aes256",
                count: 10000,
                saltSize: 16,
                prfAlgorithm: "sha512"
            };
            return forge.pki.encryptRsaPrivateKey(privateKey, password, options);
        } else if (format === "libp2p-key") return exporter.export(this.bytes, password);
        else throw errcode(new Error(`export format '${format}' is not supported`), "ERR_INVALID_EXPORT_FORMAT");
    }
}
async function unmarshalRsaPrivateKey(bytes) {
    const jwk = crypto.utils.pkcs1ToJwk(bytes);
    const keys = await crypto.unmarshalPrivateKey(jwk);
    return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}
function unmarshalRsaPublicKey(bytes) {
    const jwk = crypto.utils.pkixToJwk(bytes);
    return new RsaPublicKey(jwk);
}
async function fromJwk(jwk) {
    const keys = await crypto.unmarshalPrivateKey(jwk);
    return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}
async function generateKeyPair(bits) {
    const keys = await crypto.generateKey(bits);
    return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}
module.exports = {
    RsaPublicKey,
    RsaPrivateKey,
    unmarshalRsaPublicKey,
    unmarshalRsaPrivateKey,
    generateKeyPair,
    fromJwk
};

},{"multiformats/hashes/sha2":"7U0mx","err-code":"dUrrM","uint8arrays/equals":"iZMnE","uint8arrays/to-string":"w8mvE","node-forge/lib/sha512":"ATXY0","node-forge/lib/forge":"9OMxz","./rsa":"7xlVT","./keys":"7wzSQ","./exporter":"37CKu"}],"ATXY0":[function(require,module,exports) {
/**
 * Secure Hash Algorithm with a 1024-bit block size implementation.
 *
 * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For
 * SHA-256 (block size 512 bits), see sha256.js.
 *
 * See FIPS 180-4 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014-2015 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./md");
require("./util");
var sha512 = module.exports = forge.sha512 = forge.sha512 || {};
// SHA-512
forge.md.sha512 = forge.md.algorithms.sha512 = sha512;
// SHA-384
var sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};
sha384.create = function() {
    return sha512.create("SHA-384");
};
forge.md.sha384 = forge.md.algorithms.sha384 = sha384;
// SHA-512/256
forge.sha512.sha256 = forge.sha512.sha256 || {
    create: function() {
        return sha512.create("SHA-512/256");
    }
};
forge.md["sha512/256"] = forge.md.algorithms["sha512/256"] = forge.sha512.sha256;
// SHA-512/224
forge.sha512.sha224 = forge.sha512.sha224 || {
    create: function() {
        return sha512.create("SHA-512/224");
    }
};
forge.md["sha512/224"] = forge.md.algorithms["sha512/224"] = forge.sha512.sha224;
/**
 * Creates a SHA-2 message digest object.
 *
 * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,
 *          SHA-512/256).
 *
 * @return a message digest object.
 */ sha512.create = function(algorithm) {
    // do initialization as necessary
    if (!_initialized) _init();
    if (typeof algorithm === "undefined") algorithm = "SHA-512";
    if (!(algorithm in _states)) throw new Error("Invalid SHA-512 algorithm: " + algorithm);
    // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)
    var _state = _states[algorithm];
    var _h = null;
    // input buffer
    var _input = forge.util.createBuffer();
    // used for 64-bit word storage
    var _w = new Array(80);
    for(var wi = 0; wi < 80; ++wi)_w[wi] = new Array(2);
    // determine digest length by algorithm name (default)
    var digestLength = 64;
    switch(algorithm){
        case "SHA-384":
            digestLength = 48;
            break;
        case "SHA-512/256":
            digestLength = 32;
            break;
        case "SHA-512/224":
            digestLength = 28;
            break;
    }
    // message digest object
    var md = {
        // SHA-512 => sha512
        algorithm: algorithm.replace("-", "").toLowerCase(),
        blockLength: 128,
        digestLength: digestLength,
        // 56-bit length of message so far (does not including padding)
        messageLength: 0,
        // true message length
        fullMessageLength: null,
        // size of message length in bytes
        messageLengthSize: 16
    };
    /**
   * Starts the digest.
   *
   * @return this digest object.
   */ md.start = function() {
        // up to 56-bit message length for convenience
        md.messageLength = 0;
        // full message length (set md.messageLength128 for backwards-compatibility)
        md.fullMessageLength = md.messageLength128 = [];
        var int32s = md.messageLengthSize / 4;
        for(var i = 0; i < int32s; ++i)md.fullMessageLength.push(0);
        _input = forge.util.createBuffer();
        _h = new Array(_state.length);
        for(var i = 0; i < _state.length; ++i)_h[i] = _state[i].slice(0);
        return md;
    };
    // start digest automatically for first time
    md.start();
    /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */ md.update = function(msg, encoding) {
        if (encoding === "utf8") msg = forge.util.encodeUtf8(msg);
        // update message length
        var len = msg.length;
        md.messageLength += len;
        len = [
            len / 0x100000000 >>> 0,
            len >>> 0
        ];
        for(var i = md.fullMessageLength.length - 1; i >= 0; --i){
            md.fullMessageLength[i] += len[1];
            len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
            md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
            len[0] = len[1] / 0x100000000 >>> 0;
        }
        // add bytes to input buffer
        _input.putBytes(msg);
        // process bytes
        _update(_h, _w, _input);
        // compact input buffer every 2K or if empty
        if (_input.read > 2048 || _input.length() === 0) _input.compact();
        return md;
    };
    /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */ md.digest = function() {
        /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-512 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */ /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 896 mod 1024. In other words,
    the data to be digested must be a multiple of 1024 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 16 bytes (128
    bits), that means that the last segment of the data must have 112 bytes
    (896 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 896 mod 1024 because
    1024 - 128 = 896.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 896 mod 1024, then 1024 padding bits must be added. */ var finalBlock = forge.util.createBuffer();
        finalBlock.putBytes(_input.bytes());
        // compute remaining size to be digested (include message length size)
        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;
        // add padding for overflow blockSize - overflow
        // _padding starts with 1 byte with first bit is set (byte value 128), then
        // there may be up to (blockSize - 1) other pad bytes
        var overflow = remaining & md.blockLength - 1;
        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));
        // serialize message length in bits in big-endian order; since length
        // is stored in bytes we multiply by 8 and add carry from next int
        var next, carry;
        var bits = md.fullMessageLength[0] * 8;
        for(var i = 0; i < md.fullMessageLength.length - 1; ++i){
            next = md.fullMessageLength[i + 1] * 8;
            carry = next / 0x100000000 >>> 0;
            bits += carry;
            finalBlock.putInt32(bits >>> 0);
            bits = next >>> 0;
        }
        finalBlock.putInt32(bits);
        var h = new Array(_h.length);
        for(var i = 0; i < _h.length; ++i)h[i] = _h[i].slice(0);
        _update(h, _w, finalBlock);
        var rval = forge.util.createBuffer();
        var hlen;
        if (algorithm === "SHA-512") hlen = h.length;
        else if (algorithm === "SHA-384") hlen = h.length - 2;
        else hlen = h.length - 4;
        for(var i = 0; i < hlen; ++i){
            rval.putInt32(h[i][0]);
            if (i !== hlen - 1 || algorithm !== "SHA-512/224") rval.putInt32(h[i][1]);
        }
        return rval;
    };
    return md;
};
// sha-512 padding bytes not initialized yet
var _padding = null;
var _initialized = false;
// table of constants
var _k = null;
// initial hash states
var _states = null;
/**
 * Initializes the constant tables.
 */ function _init() {
    // create padding
    _padding = String.fromCharCode(128);
    _padding += forge.util.fillString(String.fromCharCode(0x00), 128);
    // create K table for SHA-512
    _k = [
        [
            0x428a2f98,
            0xd728ae22
        ],
        [
            0x71374491,
            0x23ef65cd
        ],
        [
            0xb5c0fbcf,
            0xec4d3b2f
        ],
        [
            0xe9b5dba5,
            0x8189dbbc
        ],
        [
            0x3956c25b,
            0xf348b538
        ],
        [
            0x59f111f1,
            0xb605d019
        ],
        [
            0x923f82a4,
            0xaf194f9b
        ],
        [
            0xab1c5ed5,
            0xda6d8118
        ],
        [
            0xd807aa98,
            0xa3030242
        ],
        [
            0x12835b01,
            0x45706fbe
        ],
        [
            0x243185be,
            0x4ee4b28c
        ],
        [
            0x550c7dc3,
            0xd5ffb4e2
        ],
        [
            0x72be5d74,
            0xf27b896f
        ],
        [
            0x80deb1fe,
            0x3b1696b1
        ],
        [
            0x9bdc06a7,
            0x25c71235
        ],
        [
            0xc19bf174,
            0xcf692694
        ],
        [
            0xe49b69c1,
            0x9ef14ad2
        ],
        [
            0xefbe4786,
            0x384f25e3
        ],
        [
            0x0fc19dc6,
            0x8b8cd5b5
        ],
        [
            0x240ca1cc,
            0x77ac9c65
        ],
        [
            0x2de92c6f,
            0x592b0275
        ],
        [
            0x4a7484aa,
            0x6ea6e483
        ],
        [
            0x5cb0a9dc,
            0xbd41fbd4
        ],
        [
            0x76f988da,
            0x831153b5
        ],
        [
            0x983e5152,
            0xee66dfab
        ],
        [
            0xa831c66d,
            0x2db43210
        ],
        [
            0xb00327c8,
            0x98fb213f
        ],
        [
            0xbf597fc7,
            0xbeef0ee4
        ],
        [
            0xc6e00bf3,
            0x3da88fc2
        ],
        [
            0xd5a79147,
            0x930aa725
        ],
        [
            0x06ca6351,
            0xe003826f
        ],
        [
            0x14292967,
            0x0a0e6e70
        ],
        [
            0x27b70a85,
            0x46d22ffc
        ],
        [
            0x2e1b2138,
            0x5c26c926
        ],
        [
            0x4d2c6dfc,
            0x5ac42aed
        ],
        [
            0x53380d13,
            0x9d95b3df
        ],
        [
            0x650a7354,
            0x8baf63de
        ],
        [
            0x766a0abb,
            0x3c77b2a8
        ],
        [
            0x81c2c92e,
            0x47edaee6
        ],
        [
            0x92722c85,
            0x1482353b
        ],
        [
            0xa2bfe8a1,
            0x4cf10364
        ],
        [
            0xa81a664b,
            0xbc423001
        ],
        [
            0xc24b8b70,
            0xd0f89791
        ],
        [
            0xc76c51a3,
            0x0654be30
        ],
        [
            0xd192e819,
            0xd6ef5218
        ],
        [
            0xd6990624,
            0x5565a910
        ],
        [
            0xf40e3585,
            0x5771202a
        ],
        [
            0x106aa070,
            0x32bbd1b8
        ],
        [
            0x19a4c116,
            0xb8d2d0c8
        ],
        [
            0x1e376c08,
            0x5141ab53
        ],
        [
            0x2748774c,
            0xdf8eeb99
        ],
        [
            0x34b0bcb5,
            0xe19b48a8
        ],
        [
            0x391c0cb3,
            0xc5c95a63
        ],
        [
            0x4ed8aa4a,
            0xe3418acb
        ],
        [
            0x5b9cca4f,
            0x7763e373
        ],
        [
            0x682e6ff3,
            0xd6b2b8a3
        ],
        [
            0x748f82ee,
            0x5defb2fc
        ],
        [
            0x78a5636f,
            0x43172f60
        ],
        [
            0x84c87814,
            0xa1f0ab72
        ],
        [
            0x8cc70208,
            0x1a6439ec
        ],
        [
            0x90befffa,
            0x23631e28
        ],
        [
            0xa4506ceb,
            0xde82bde9
        ],
        [
            0xbef9a3f7,
            0xb2c67915
        ],
        [
            0xc67178f2,
            0xe372532b
        ],
        [
            0xca273ece,
            0xea26619c
        ],
        [
            0xd186b8c7,
            0x21c0c207
        ],
        [
            0xeada7dd6,
            0xcde0eb1e
        ],
        [
            0xf57d4f7f,
            0xee6ed178
        ],
        [
            0x06f067aa,
            0x72176fba
        ],
        [
            0x0a637dc5,
            0xa2c898a6
        ],
        [
            0x113f9804,
            0xbef90dae
        ],
        [
            0x1b710b35,
            0x131c471b
        ],
        [
            0x28db77f5,
            0x23047d84
        ],
        [
            0x32caab7b,
            0x40c72493
        ],
        [
            0x3c9ebe0a,
            0x15c9bebc
        ],
        [
            0x431d67c4,
            0x9c100d4c
        ],
        [
            0x4cc5d4be,
            0xcb3e42b6
        ],
        [
            0x597f299c,
            0xfc657e2a
        ],
        [
            0x5fcb6fab,
            0x3ad6faec
        ],
        [
            0x6c44198c,
            0x4a475817
        ]
    ];
    // initial hash states
    _states = {};
    _states["SHA-512"] = [
        [
            0x6a09e667,
            0xf3bcc908
        ],
        [
            0xbb67ae85,
            0x84caa73b
        ],
        [
            0x3c6ef372,
            0xfe94f82b
        ],
        [
            0xa54ff53a,
            0x5f1d36f1
        ],
        [
            0x510e527f,
            0xade682d1
        ],
        [
            0x9b05688c,
            0x2b3e6c1f
        ],
        [
            0x1f83d9ab,
            0xfb41bd6b
        ],
        [
            0x5be0cd19,
            0x137e2179
        ]
    ];
    _states["SHA-384"] = [
        [
            0xcbbb9d5d,
            0xc1059ed8
        ],
        [
            0x629a292a,
            0x367cd507
        ],
        [
            0x9159015a,
            0x3070dd17
        ],
        [
            0x152fecd8,
            0xf70e5939
        ],
        [
            0x67332667,
            0xffc00b31
        ],
        [
            0x8eb44a87,
            0x68581511
        ],
        [
            0xdb0c2e0d,
            0x64f98fa7
        ],
        [
            0x47b5481d,
            0xbefa4fa4
        ]
    ];
    _states["SHA-512/256"] = [
        [
            0x22312194,
            0xFC2BF72C
        ],
        [
            0x9F555FA3,
            0xC84C64C2
        ],
        [
            0x2393B86B,
            0x6F53B151
        ],
        [
            0x96387719,
            0x5940EABD
        ],
        [
            0x96283EE2,
            0xA88EFFE3
        ],
        [
            0xBE5E1E25,
            0x53863992
        ],
        [
            0x2B0199FC,
            0x2C85B8AA
        ],
        [
            0x0EB72DDC,
            0x81C52CA2
        ]
    ];
    _states["SHA-512/224"] = [
        [
            0x8C3D37C8,
            0x19544DA2
        ],
        [
            0x73E19966,
            0x89DCD4D6
        ],
        [
            0x1DFAB7AE,
            0x32FF9C82
        ],
        [
            0x679DD514,
            0x582F9FCF
        ],
        [
            0x0F6D2B69,
            0x7BD44DA8
        ],
        [
            0x77E36F73,
            0x04C48942
        ],
        [
            0x3F9D85A8,
            0x6A1D36C8
        ],
        [
            0x1112E6AD,
            0x91D692A1
        ]
    ];
    // now initialized
    _initialized = true;
}
/**
 * Updates a SHA-512 state with the given byte buffer.
 *
 * @param s the SHA-512 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */ function _update(s, w, bytes) {
    // consume 512 bit (128 byte) chunks
    var t1_hi, t1_lo;
    var t2_hi, t2_lo;
    var s0_hi, s0_lo;
    var s1_hi, s1_lo;
    var ch_hi, ch_lo;
    var maj_hi, maj_lo;
    var a_hi, a_lo;
    var b_hi, b_lo;
    var c_hi, c_lo;
    var d_hi, d_lo;
    var e_hi, e_lo;
    var f_hi, f_lo;
    var g_hi, g_lo;
    var h_hi, h_lo;
    var i, hi, lo, w2, w7, w15, w16;
    var len = bytes.length();
    while(len >= 128){
        // the w array will be populated with sixteen 64-bit big-endian words
        // and then extended into 64 64-bit words according to SHA-512
        for(i = 0; i < 16; ++i){
            w[i][0] = bytes.getInt32() >>> 0;
            w[i][1] = bytes.getInt32() >>> 0;
        }
        for(; i < 80; ++i){
            // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)
            w2 = w[i - 2];
            hi = w2[0];
            lo = w2[1];
            // high bits
            t1_hi = ((hi >>> 19 | lo << 13) ^ (lo >>> 29 | hi << 3) ^ hi >>> 6) >>> 0; // SHR 6
            // low bits
            t1_lo = ((hi << 13 | lo >>> 19) ^ (lo << 3 | hi >>> 29) ^ (hi << 26 | lo >>> 6)) >>> 0; // SHR 6
            // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)
            w15 = w[i - 15];
            hi = w15[0];
            lo = w15[1];
            // high bits
            t2_hi = ((hi >>> 1 | lo << 31) ^ (hi >>> 8 | lo << 24) ^ hi >>> 7) >>> 0; // SHR 7
            // low bits
            t2_lo = ((hi << 31 | lo >>> 1) ^ (hi << 24 | lo >>> 8) ^ (hi << 25 | lo >>> 7)) >>> 0; // SHR 7
            // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)
            w7 = w[i - 7];
            w16 = w[i - 16];
            lo = t1_lo + w7[1] + t2_lo + w16[1];
            w[i][0] = t1_hi + w7[0] + t2_hi + w16[0] + (lo / 0x100000000 >>> 0) >>> 0;
            w[i][1] = lo >>> 0;
        }
        // initialize hash value for this chunk
        a_hi = s[0][0];
        a_lo = s[0][1];
        b_hi = s[1][0];
        b_lo = s[1][1];
        c_hi = s[2][0];
        c_lo = s[2][1];
        d_hi = s[3][0];
        d_lo = s[3][1];
        e_hi = s[4][0];
        e_lo = s[4][1];
        f_hi = s[5][0];
        f_lo = s[5][1];
        g_hi = s[6][0];
        g_lo = s[6][1];
        h_hi = s[7][0];
        h_lo = s[7][1];
        // round function
        for(i = 0; i < 80; ++i){
            // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)
            s1_hi = ((e_hi >>> 14 | e_lo << 18) ^ (e_hi >>> 18 | e_lo << 14) ^ (e_lo >>> 9 | e_hi << 23)) >>> 0; // ROTR 41/(swap + ROTR 9)
            s1_lo = ((e_hi << 18 | e_lo >>> 14) ^ (e_hi << 14 | e_lo >>> 18) ^ (e_lo << 23 | e_hi >>> 9)) >>> 0; // ROTR 41/(swap + ROTR 9)
            // Ch(e, f, g) (optimized the same way as SHA-1)
            ch_hi = (g_hi ^ e_hi & (f_hi ^ g_hi)) >>> 0;
            ch_lo = (g_lo ^ e_lo & (f_lo ^ g_lo)) >>> 0;
            // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)
            s0_hi = ((a_hi >>> 28 | a_lo << 4) ^ (a_lo >>> 2 | a_hi << 30) ^ (a_lo >>> 7 | a_hi << 25)) >>> 0; // ROTR 39/(swap + ROTR 7)
            s0_lo = ((a_hi << 4 | a_lo >>> 28) ^ (a_lo << 30 | a_hi >>> 2) ^ (a_lo << 25 | a_hi >>> 7)) >>> 0; // ROTR 39/(swap + ROTR 7)
            // Maj(a, b, c) (optimized the same way as SHA-1)
            maj_hi = (a_hi & b_hi | c_hi & (a_hi ^ b_hi)) >>> 0;
            maj_lo = (a_lo & b_lo | c_lo & (a_lo ^ b_lo)) >>> 0;
            // main algorithm
            // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)
            lo = h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1];
            t1_hi = h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] + (lo / 0x100000000 >>> 0) >>> 0;
            t1_lo = lo >>> 0;
            // t2 = s0 + maj modulo 2^64 (carry lo overflow)
            lo = s0_lo + maj_lo;
            t2_hi = s0_hi + maj_hi + (lo / 0x100000000 >>> 0) >>> 0;
            t2_lo = lo >>> 0;
            h_hi = g_hi;
            h_lo = g_lo;
            g_hi = f_hi;
            g_lo = f_lo;
            f_hi = e_hi;
            f_lo = e_lo;
            // e = (d + t1) modulo 2^64 (carry lo overflow)
            lo = d_lo + t1_lo;
            e_hi = d_hi + t1_hi + (lo / 0x100000000 >>> 0) >>> 0;
            e_lo = lo >>> 0;
            d_hi = c_hi;
            d_lo = c_lo;
            c_hi = b_hi;
            c_lo = b_lo;
            b_hi = a_hi;
            b_lo = a_lo;
            // a = (t1 + t2) modulo 2^64 (carry lo overflow)
            lo = t1_lo + t2_lo;
            a_hi = t1_hi + t2_hi + (lo / 0x100000000 >>> 0) >>> 0;
            a_lo = lo >>> 0;
        }
        // update hash state (additional modulo 2^64)
        lo = s[0][1] + a_lo;
        s[0][0] = s[0][0] + a_hi + (lo / 0x100000000 >>> 0) >>> 0;
        s[0][1] = lo >>> 0;
        lo = s[1][1] + b_lo;
        s[1][0] = s[1][0] + b_hi + (lo / 0x100000000 >>> 0) >>> 0;
        s[1][1] = lo >>> 0;
        lo = s[2][1] + c_lo;
        s[2][0] = s[2][0] + c_hi + (lo / 0x100000000 >>> 0) >>> 0;
        s[2][1] = lo >>> 0;
        lo = s[3][1] + d_lo;
        s[3][0] = s[3][0] + d_hi + (lo / 0x100000000 >>> 0) >>> 0;
        s[3][1] = lo >>> 0;
        lo = s[4][1] + e_lo;
        s[4][0] = s[4][0] + e_hi + (lo / 0x100000000 >>> 0) >>> 0;
        s[4][1] = lo >>> 0;
        lo = s[5][1] + f_lo;
        s[5][0] = s[5][0] + f_hi + (lo / 0x100000000 >>> 0) >>> 0;
        s[5][1] = lo >>> 0;
        lo = s[6][1] + g_lo;
        s[6][0] = s[6][0] + g_hi + (lo / 0x100000000 >>> 0) >>> 0;
        s[6][1] = lo >>> 0;
        lo = s[7][1] + h_lo;
        s[7][0] = s[7][0] + h_hi + (lo / 0x100000000 >>> 0) >>> 0;
        s[7][1] = lo >>> 0;
        len -= 128;
    }
}

},{"./forge":"9OMxz","./md":"lMdro","./util":"9XcEH"}],"7xlVT":[function(require,module,exports) {
"use strict";
const webcrypto = require("../webcrypto");
const randomBytes = require("../random-bytes");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
exports.utils = require("./rsa-utils");
exports.generateKey = async function(bits) {
    const pair = await webcrypto.get().subtle.generateKey({
        name: "RSASSA-PKCS1-v1_5",
        modulusLength: bits,
        publicExponent: new Uint8Array([
            0x01,
            0x00,
            0x01
        ]),
        hash: {
            name: "SHA-256"
        }
    }, true, [
        "sign",
        "verify"
    ]);
    const keys = await exportKey(pair);
    return {
        privateKey: keys[0],
        publicKey: keys[1]
    };
};
// Takes a jwk key
exports.unmarshalPrivateKey = async function(key) {
    const privateKey = await webcrypto.get().subtle.importKey("jwk", key, {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        }
    }, true, [
        "sign"
    ]);
    const pair = [
        privateKey,
        await derivePublicFromPrivate(key)
    ];
    const keys = await exportKey({
        privateKey: pair[0],
        publicKey: pair[1]
    });
    return {
        privateKey: keys[0],
        publicKey: keys[1]
    };
};
exports.getRandomValues = randomBytes;
exports.hashAndSign = async function(key, msg) {
    const privateKey = await webcrypto.get().subtle.importKey("jwk", key, {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        }
    }, false, [
        "sign"
    ]);
    const sig = await webcrypto.get().subtle.sign({
        name: "RSASSA-PKCS1-v1_5"
    }, privateKey, Uint8Array.from(msg));
    return new Uint8Array(sig, sig.byteOffset, sig.byteLength);
};
exports.hashAndVerify = async function(key, sig, msg) {
    const publicKey = await webcrypto.get().subtle.importKey("jwk", key, {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        }
    }, false, [
        "verify"
    ]);
    return webcrypto.get().subtle.verify({
        name: "RSASSA-PKCS1-v1_5"
    }, publicKey, sig, msg);
};
function exportKey(pair) {
    return Promise.all([
        webcrypto.get().subtle.exportKey("jwk", pair.privateKey),
        webcrypto.get().subtle.exportKey("jwk", pair.publicKey)
    ]);
}
function derivePublicFromPrivate(jwKey) {
    return webcrypto.get().subtle.importKey("jwk", {
        kty: jwKey.kty,
        n: jwKey.n,
        e: jwKey.e
    }, {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        }
    }, true, [
        "verify"
    ]);
}
/*

RSA encryption/decryption for the browser with webcrypto workarround
"bloody dark magic. webcrypto's why."

Explanation:
  - Convert JWK to nodeForge
  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a "binary-string backed buffer", so let's make our Uint8Array a binary string
  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array

*/ const { jwk2pub , jwk2priv  } = require("./jwk2pem");
function convertKey(key, pub, msg, handle) {
    const fkey = pub ? jwk2pub(key) : jwk2priv(key);
    const fmsg = uint8ArrayToString(Uint8Array.from(msg), "ascii");
    const fomsg = handle(fmsg, fkey);
    return uint8ArrayFromString(fomsg, "ascii");
}
exports.encrypt = function(key1, msg1) {
    return convertKey(key1, true, msg1, (msg, key)=>key.encrypt(msg));
};
exports.decrypt = function(key2, msg2) {
    return convertKey(key2, false, msg2, (msg, key)=>key.decrypt(msg));
};

},{"../webcrypto":"atXO3","../random-bytes":"hLp1E","uint8arrays/to-string":"w8mvE","uint8arrays/from-string":"7qjkp","./rsa-utils":"29t3O","./jwk2pem":"fxK1Y"}],"hLp1E":[function(require,module,exports) {
"use strict";
const randomBytes = require("iso-random-stream/src/random");
const errcode = require("err-code");
module.exports = function(length) {
    if (isNaN(length) || length <= 0) throw errcode(new Error("random bytes length must be a Number bigger than 0"), "ERR_INVALID_LENGTH");
    return randomBytes(length);
};

},{"iso-random-stream/src/random":"36xDc","err-code":"dUrrM"}],"36xDc":[function(require,module,exports) {
"use strict";
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
const MAX_BYTES = 65536;
/**
 * @param {number} size
 */ function randomBytes(size) {
    const bytes = new Uint8Array(size);
    let generated = 0;
    if (size > 0) {
        // getRandomValues fails on IE if size == 0
        if (size > MAX_BYTES) {
            while(generated < size)if (generated + MAX_BYTES > size) {
                crypto.getRandomValues(bytes.subarray(generated, generated + (size - generated)));
                generated += size - generated;
            } else {
                crypto.getRandomValues(bytes.subarray(generated, generated + MAX_BYTES));
                generated += MAX_BYTES;
            }
        } else crypto.getRandomValues(bytes);
    }
    return bytes;
}
module.exports = randomBytes;

},{}],"29t3O":[function(require,module,exports) {
"use strict";
require("node-forge/lib/asn1");
require("node-forge/lib/rsa");
const forge = require("node-forge/lib/forge");
const { bigIntegerToUintBase64url , base64urlToBigInteger  } = require("./../util");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
// Convert a PKCS#1 in ASN1 DER format to a JWK key
exports.pkcs1ToJwk = function(bytes) {
    const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, "ascii"));
    const privateKey = forge.pki.privateKeyFromAsn1(asn1);
    // https://tools.ietf.org/html/rfc7518#section-6.3.1
    return {
        kty: "RSA",
        n: bigIntegerToUintBase64url(privateKey.n),
        e: bigIntegerToUintBase64url(privateKey.e),
        d: bigIntegerToUintBase64url(privateKey.d),
        p: bigIntegerToUintBase64url(privateKey.p),
        q: bigIntegerToUintBase64url(privateKey.q),
        dp: bigIntegerToUintBase64url(privateKey.dP),
        dq: bigIntegerToUintBase64url(privateKey.dQ),
        qi: bigIntegerToUintBase64url(privateKey.qInv),
        alg: "RS256",
        kid: "2011-04-29"
    };
};
// Convert a JWK key into PKCS#1 in ASN1 DER format
exports.jwkToPkcs1 = function(jwk) {
    const asn1 = forge.pki.privateKeyToAsn1({
        n: base64urlToBigInteger(jwk.n),
        e: base64urlToBigInteger(jwk.e),
        d: base64urlToBigInteger(jwk.d),
        p: base64urlToBigInteger(jwk.p),
        q: base64urlToBigInteger(jwk.q),
        dP: base64urlToBigInteger(jwk.dp),
        dQ: base64urlToBigInteger(jwk.dq),
        qInv: base64urlToBigInteger(jwk.qi)
    });
    return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), "ascii");
};
// Convert a PKCIX in ASN1 DER format to a JWK key
exports.pkixToJwk = function(bytes) {
    const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, "ascii"));
    const publicKey = forge.pki.publicKeyFromAsn1(asn1);
    return {
        kty: "RSA",
        n: bigIntegerToUintBase64url(publicKey.n),
        e: bigIntegerToUintBase64url(publicKey.e),
        alg: "RS256",
        kid: "2011-04-29"
    };
};
// Convert a JWK key to PKCIX in ASN1 DER format
exports.jwkToPkix = function(jwk) {
    const asn1 = forge.pki.publicKeyToAsn1({
        n: base64urlToBigInteger(jwk.n),
        e: base64urlToBigInteger(jwk.e)
    });
    return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), "ascii");
};

},{"node-forge/lib/asn1":"G8i2L","node-forge/lib/rsa":"5XDhn","node-forge/lib/forge":"9OMxz","./../util":"YKjR6","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE"}],"YKjR6":[function(require,module,exports) {
"use strict";
require("node-forge/lib/util");
require("node-forge/lib/jsbn");
const forge = require("node-forge/lib/forge");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
exports.bigIntegerToUintBase64url = (num, len)=>{
    // Call `.abs()` to convert to unsigned
    let buf = Uint8Array.from(num.abs().toByteArray()) // toByteArray converts to big endian
    ;
    // toByteArray() gives us back a signed array, which will include a leading 0
    // byte if the most significant bit of the number is 1:
    // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer
    // Our number will always be positive so we should remove the leading padding.
    buf = buf[0] === 0 ? buf.slice(1) : buf;
    if (len != null) {
        if (buf.length > len) throw new Error("byte array longer than desired length");
        buf = uint8ArrayConcat([
            new Uint8Array(len - buf.length),
            buf
        ]);
    }
    return uint8ArrayToString(buf, "base64url");
};
// Convert a base64url encoded string to a BigInteger
exports.base64urlToBigInteger = (str)=>{
    const buf = exports.base64urlToBuffer(str);
    return new forge.jsbn.BigInteger(uint8ArrayToString(buf, "base16"), 16);
};
exports.base64urlToBuffer = (str, len)=>{
    let buf = uint8ArrayFromString(str, "base64urlpad");
    if (len != null) {
        if (buf.length > len) throw new Error("byte array longer than desired length");
        buf = uint8ArrayConcat([
            new Uint8Array(len - buf.length),
            buf
        ]);
    }
    return buf;
};

},{"node-forge/lib/util":"9XcEH","node-forge/lib/jsbn":"5Wfp8","node-forge/lib/forge":"9OMxz","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE","uint8arrays/concat":"gqJ9u"}],"fxK1Y":[function(require,module,exports) {
"use strict";
require("node-forge/lib/rsa");
const forge = require("node-forge/lib/forge");
const { base64urlToBigInteger  } = require("../util");
function convert(key, types) {
    return types.map((t)=>base64urlToBigInteger(key[t]));
}
function jwk2priv(key) {
    return forge.pki.setRsaPrivateKey(...convert(key, [
        "n",
        "e",
        "d",
        "p",
        "q",
        "dp",
        "dq",
        "qi"
    ]));
}
function jwk2pub(key) {
    return forge.pki.setRsaPublicKey(...convert(key, [
        "n",
        "e"
    ]));
}
module.exports = {
    jwk2pub,
    jwk2priv
};

},{"node-forge/lib/rsa":"5XDhn","node-forge/lib/forge":"9OMxz","../util":"YKjR6"}],"37CKu":[function(require,module,exports) {
"use strict";
const { base64  } = require("multiformats/bases/base64");
const ciphers = require("../ciphers/aes-gcm");
module.exports = {
    /**
   * Exports the given PrivateKey as a base64 encoded string.
   * The PrivateKey is encrypted via a password derived PBKDF2 key
   * leveraging the aes-gcm cipher algorithm.
   *
   * @param {Uint8Array} privateKey - The PrivateKey protobuf
   * @param {string} password
   * @returns {Promise<string>} A base64 encoded string
   */ export: async function(privateKey, password) {
        const cipher = ciphers.create();
        const encryptedKey = await cipher.encrypt(privateKey, password);
        return base64.encode(encryptedKey);
    }
};

},{"multiformats/bases/base64":"3gCnk","../ciphers/aes-gcm":"53Tna"}],"bmWj6":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { sha256  } = require("multiformats/hashes/sha2");
const { base58btc  } = require("multiformats/bases/base58");
const { identity  } = require("multiformats/hashes/identity");
const crypto = require("./ed25519");
const pbm = require("./keys");
const exporter = require("./exporter");
class Ed25519PublicKey {
    constructor(key){
        this._key = ensureKey(key, crypto.publicKeyLength);
    }
    async verify(data, sig) {
        return crypto.hashAndVerify(this._key, sig, data);
    }
    marshal() {
        return this._key;
    }
    get bytes() {
        return pbm.PublicKey.encode({
            Type: pbm.KeyType.Ed25519,
            Data: this.marshal()
        }).finish();
    }
    equals(key) {
        return uint8ArrayEquals(this.bytes, key.bytes);
    }
    async hash() {
        const { bytes  } = await sha256.digest(this.bytes);
        return bytes;
    }
}
class Ed25519PrivateKey {
    // key       - 64 byte Uint8Array containing private key
    // publicKey - 32 byte Uint8Array containing public key
    constructor(key, publicKey){
        this._key = ensureKey(key, crypto.privateKeyLength);
        this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);
    }
    async sign(message) {
        return crypto.hashAndSign(this._key, message);
    }
    get public() {
        return new Ed25519PublicKey(this._publicKey);
    }
    marshal() {
        return this._key;
    }
    get bytes() {
        return pbm.PrivateKey.encode({
            Type: pbm.KeyType.Ed25519,
            Data: this.marshal()
        }).finish();
    }
    equals(key) {
        return uint8ArrayEquals(this.bytes, key.bytes);
    }
    async hash() {
        const { bytes  } = await sha256.digest(this.bytes);
        return bytes;
    }
    /**
   * Gets the ID of the key.
   *
   * The key id is the base58 encoding of the identity multihash containing its public key.
   * The public key is a protobuf encoding containing a type and the DER encoding
   * of the PKCS SubjectPublicKeyInfo.
   *
   * @returns {Promise<string>}
   */ async id() {
        const encoding = await identity.digest(this.public.bytes);
        return base58btc.encode(encoding.bytes).substring(1);
    }
    /**
   * Exports the key into a password protected `format`
   *
   * @param {string} password - The password to encrypt the key
   * @param {string} [format=libp2p-key] - The format in which to export as
   * @returns {Promise<Uint8Array>} The encrypted private key
   */ async export(password, format = "libp2p-key") {
        if (format === "libp2p-key") return exporter.export(this.bytes, password);
        else throw errcode(new Error(`export format '${format}' is not supported`), "ERR_INVALID_EXPORT_FORMAT");
    }
}
function unmarshalEd25519PrivateKey(bytes) {
    // Try the old, redundant public key version
    if (bytes.length > crypto.privateKeyLength) {
        bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);
        const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength);
        const publicKeyBytes = bytes.slice(crypto.privateKeyLength, bytes.length);
        return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);
    }
    bytes = ensureKey(bytes, crypto.privateKeyLength);
    const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength);
    const publicKeyBytes = bytes.slice(crypto.publicKeyLength);
    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);
}
function unmarshalEd25519PublicKey(bytes) {
    bytes = ensureKey(bytes, crypto.publicKeyLength);
    return new Ed25519PublicKey(bytes);
}
async function generateKeyPair() {
    const { privateKey , publicKey  } = await crypto.generateKey();
    return new Ed25519PrivateKey(privateKey, publicKey);
}
async function generateKeyPairFromSeed(seed) {
    const { privateKey , publicKey  } = await crypto.generateKeyFromSeed(seed);
    return new Ed25519PrivateKey(privateKey, publicKey);
}
function ensureKey(key, length) {
    key = Uint8Array.from(key || []);
    if (key.length !== length) throw errcode(new Error(`Key must be a Uint8Array of length ${length}, got ${key.length}`), "ERR_INVALID_KEY_TYPE");
    return key;
}
module.exports = {
    Ed25519PublicKey,
    Ed25519PrivateKey,
    unmarshalEd25519PrivateKey,
    unmarshalEd25519PublicKey,
    generateKeyPair,
    generateKeyPairFromSeed
};

},{"err-code":"dUrrM","uint8arrays/equals":"iZMnE","multiformats/hashes/sha2":"7U0mx","multiformats/bases/base58":"9KkrI","multiformats/hashes/identity":"bj4ky","./ed25519":"fWF6Q","./keys":"7wzSQ","./exporter":"37CKu"}],"fWF6Q":[function(require,module,exports) {
"use strict";
const ed = require("noble-ed25519");
const PUBLIC_KEY_BYTE_LENGTH = 32;
const PRIVATE_KEY_BYTE_LENGTH = 64 // private key is actually 32 bytes but for historical reasons we concat private and public keys
;
const KEYS_BYTE_LENGTH = 32;
exports.publicKeyLength = PUBLIC_KEY_BYTE_LENGTH;
exports.privateKeyLength = PRIVATE_KEY_BYTE_LENGTH;
exports.generateKey = async function() {
    // the actual private key (32 bytes)
    const privateKeyRaw = ed.utils.randomPrivateKey();
    const publicKey = await ed.getPublicKey(privateKeyRaw);
    // concatenated the public key to the private key
    const privateKey = concatKeys(privateKeyRaw, publicKey);
    return {
        privateKey,
        publicKey
    };
};
/**
 * Generate keypair from a seed
 *
 * @param {Uint8Array} seed - seed should be a 32 byte uint8array
 * @returns
 */ exports.generateKeyFromSeed = async function(seed) {
    if (seed.length !== KEYS_BYTE_LENGTH) throw new TypeError('"seed" must be 32 bytes in length.');
    else if (!(seed instanceof Uint8Array)) throw new TypeError('"seed" must be a node.js Buffer, or Uint8Array.');
    // based on node forges algorithm, the seed is used directly as private key
    const privateKeyRaw = seed;
    const publicKey = await ed.getPublicKey(privateKeyRaw);
    const privateKey = concatKeys(privateKeyRaw, publicKey);
    return {
        privateKey,
        publicKey
    };
};
exports.hashAndSign = function(privateKey, msg) {
    const privateKeyRaw = privateKey.slice(0, KEYS_BYTE_LENGTH);
    return ed.sign(msg, privateKeyRaw);
};
exports.hashAndVerify = function(publicKey, sig, msg) {
    return ed.verify(sig, msg, publicKey);
};
function concatKeys(privateKeyRaw, publicKey) {
    const privateKey = new Uint8Array(exports.privateKeyLength);
    for(let i = 0; i < KEYS_BYTE_LENGTH; i++){
        privateKey[i] = privateKeyRaw[i];
        privateKey[KEYS_BYTE_LENGTH + i] = publicKey[i];
    }
    return privateKey;
}

},{"noble-ed25519":"am3p8"}],"am3p8":[function(require,module,exports) {
"use strict";
/*! noble-ed25519 - MIT License (c) Paul Miller (paulmillr.com) */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.utils = exports.verify = exports.sign = exports.getPublicKey = exports.SignResult = exports.Signature = exports.Point = exports.ExtendedPoint = exports.CURVE = void 0;
const CURVE = {
    a: -1n,
    d: 37095705934669439343138083508754565189542113879843219016388785533085940283555n,
    P: 2n ** 255n - 19n,
    n: 2n ** 252n + 27742317777372353535851937790883648493n,
    h: 8n,
    Gx: 15112221349535400772501151409588531511454012693041857206046113283949847762202n,
    Gy: 46316835694926478169428394003475163141307993866256225615783033603165251855960n
};
exports.CURVE = CURVE;
const B32 = 32;
const SQRT_M1 = 19681161376707505956807079304988542015446066515923890162744021073123829784752n;
const SQRT_AD_MINUS_ONE = 25063068953384623474111414158702152701244531502492656460079210482610430750235n;
const INVSQRT_A_MINUS_D = 54469307008909316920995813868745141605393597292927456921205312896311721017578n;
const ONE_MINUS_D_SQ = 1159843021668779879193775521855586647937357759715417654439879720876111806838n;
const D_MINUS_ONE_SQ = 40440834346308536858101042469323190826248399146238708352240133220865137265952n;
class ExtendedPoint {
    constructor(x, y, z, t){
        this.x = x;
        this.y = y;
        this.z = z;
        this.t = t;
    }
    static fromAffine(p) {
        if (!(p instanceof Point)) throw new TypeError("ExtendedPoint#fromAffine: expected Point");
        if (p.equals(Point.ZERO)) return ExtendedPoint.ZERO;
        return new ExtendedPoint(p.x, p.y, 1n, mod(p.x * p.y));
    }
    static toAffineBatch(points) {
        const toInv = invertBatch(points.map((p)=>p.z));
        return points.map((p, i)=>p.toAffine(toInv[i]));
    }
    static normalizeZ(points) {
        return this.toAffineBatch(points).map(this.fromAffine);
    }
    static fromRistrettoHash(hash) {
        const r1 = bytes255ToNumberLE(hash.slice(0, B32));
        const R1 = this.calcElligatorRistrettoMap(r1);
        const r2 = bytes255ToNumberLE(hash.slice(B32, B32 * 2));
        const R2 = this.calcElligatorRistrettoMap(r2);
        return R1.add(R2);
    }
    static calcElligatorRistrettoMap(r0) {
        const { d  } = CURVE;
        const r = mod(SQRT_M1 * r0 * r0);
        const Ns = mod((r + 1n) * ONE_MINUS_D_SQ);
        let c = -1n;
        const D = mod((c - d * r) * mod(r + d));
        let { isValid: Ns_D_is_sq , value: s  } = uvRatio(Ns, D);
        let s_ = mod(s * r0);
        if (!edIsNegative(s_)) s_ = mod(-s_);
        if (!Ns_D_is_sq) s = s_;
        if (!Ns_D_is_sq) c = r;
        const Nt = mod(c * (r - 1n) * D_MINUS_ONE_SQ - D);
        const s2 = s * s;
        const W0 = mod((s + s) * D);
        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);
        const W2 = mod(1n - s2);
        const W3 = mod(1n + s2);
        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));
    }
    static fromRistrettoBytes(bytes) {
        const { a , d  } = CURVE;
        const emsg = "ExtendedPoint.fromRistrettoBytes: Cannot convert bytes to Ristretto Point";
        const s = bytes255ToNumberLE(bytes);
        if (!equalBytes(numberToBytesPadded(s, B32), bytes) || edIsNegative(s)) throw new Error(emsg);
        const s2 = mod(s * s);
        const u1 = mod(1n + a * s2);
        const u2 = mod(1n - a * s2);
        const u1_2 = mod(u1 * u1);
        const u2_2 = mod(u2 * u2);
        const v = mod(a * d * u1_2 - u2_2);
        const { isValid , value: I  } = invertSqrt(mod(v * u2_2));
        const Dx = mod(I * u2);
        const Dy = mod(I * Dx * v);
        let x = mod((s + s) * Dx);
        if (edIsNegative(x)) x = mod(-x);
        const y = mod(u1 * Dy);
        const t = mod(x * y);
        if (!isValid || edIsNegative(t) || y === 0n) throw new Error(emsg);
        return new ExtendedPoint(x, y, 1n, t);
    }
    toRistrettoBytes() {
        let { x , y , z , t  } = this;
        const u1 = mod((z + y) * (z - y));
        const u2 = mod(x * y);
        const { value: invsqrt  } = invertSqrt(mod(u1 * u2 ** 2n));
        const D1 = mod(invsqrt * u1);
        const D2 = mod(invsqrt * u2);
        const zInv = mod(D1 * D2 * t);
        let D;
        if (edIsNegative(t * zInv)) {
            [x, y] = [
                mod(y * SQRT_M1),
                mod(x * SQRT_M1)
            ];
            D = mod(D1 * INVSQRT_A_MINUS_D);
        } else D = D2;
        if (edIsNegative(x * zInv)) y = mod(-y);
        let s = mod((z - y) * D);
        if (edIsNegative(s)) s = mod(-s);
        return numberToBytesPadded(s, B32);
    }
    equals(other) {
        const a = this;
        const b = other;
        const [T1, T2, Z1, Z2] = [
            a.t,
            b.t,
            a.z,
            b.z
        ];
        return mod(T1 * Z2) === mod(T2 * Z1);
    }
    negate() {
        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));
    }
    double() {
        const X1 = this.x;
        const Y1 = this.y;
        const Z1 = this.z;
        const { a  } = CURVE;
        const A = mod(X1 ** 2n);
        const B = mod(Y1 ** 2n);
        const C = mod(2n * Z1 ** 2n);
        const D = mod(a * A);
        const E = mod((X1 + Y1) ** 2n - A - B);
        const G = mod(D + B);
        const F = mod(G - C);
        const H = mod(D - B);
        const X3 = mod(E * F);
        const Y3 = mod(G * H);
        const T3 = mod(E * H);
        const Z3 = mod(F * G);
        return new ExtendedPoint(X3, Y3, Z3, T3);
    }
    add(other) {
        const X1 = this.x;
        const Y1 = this.y;
        const Z1 = this.z;
        const T1 = this.t;
        const X2 = other.x;
        const Y2 = other.y;
        const Z2 = other.z;
        const T2 = other.t;
        const A = mod((Y1 - X1) * (Y2 + X2));
        const B = mod((Y1 + X1) * (Y2 - X2));
        const F = mod(B - A);
        if (F === 0n) return this.double();
        const C = mod(Z1 * 2n * T2);
        const D = mod(T1 * 2n * Z2);
        const E = mod(D + C);
        const G = mod(B + A);
        const H = mod(D - C);
        const X3 = mod(E * F);
        const Y3 = mod(G * H);
        const T3 = mod(E * H);
        const Z3 = mod(F * G);
        return new ExtendedPoint(X3, Y3, Z3, T3);
    }
    subtract(other) {
        return this.add(other.negate());
    }
    multiplyUnsafe(scalar) {
        if (!isValidScalar(scalar)) throw new TypeError("Point#multiply: expected number or bigint");
        let n = mod(BigInt(scalar), CURVE.n);
        if (n === 1n) return this;
        let p = ExtendedPoint.ZERO;
        let d = this;
        while(n > 0n){
            if (n & 1n) p = p.add(d);
            d = d.double();
            n >>= 1n;
        }
        return p;
    }
    precomputeWindow(W) {
        const windows = 256 / W + 1;
        let points = [];
        let p = this;
        let base = p;
        for(let window = 0; window < windows; window++){
            base = p;
            points.push(base);
            for(let i = 1; i < 2 ** (W - 1); i++){
                base = base.add(p);
                points.push(base);
            }
            p = base.double();
        }
        return points;
    }
    wNAF(n, affinePoint) {
        if (!affinePoint && this.equals(ExtendedPoint.BASE)) affinePoint = Point.BASE;
        const W = affinePoint && affinePoint._WINDOW_SIZE || 1;
        if (256 % W) throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
        if (!precomputes) {
            precomputes = this.precomputeWindow(W);
            if (affinePoint && W !== 1) {
                precomputes = ExtendedPoint.normalizeZ(precomputes);
                pointPrecomputes.set(affinePoint, precomputes);
            }
        }
        let p = ExtendedPoint.ZERO;
        let f = ExtendedPoint.ZERO;
        const windows = 256 / W + 1;
        const windowSize = 2 ** (W - 1);
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for(let window = 0; window < windows; window++){
            const offset = window * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
                wbits -= maxNumber;
                n += 1n;
            }
            if (wbits === 0) f = f.add(window % 2 ? precomputes[offset].negate() : precomputes[offset]);
            else {
                const cached = precomputes[offset + Math.abs(wbits) - 1];
                p = p.add(wbits < 0 ? cached.negate() : cached);
            }
        }
        return [
            p,
            f
        ];
    }
    multiply(scalar, affinePoint) {
        if (!isValidScalar(scalar)) throw new TypeError("Point#multiply: expected number or bigint");
        const n = mod(BigInt(scalar), CURVE.n);
        return ExtendedPoint.normalizeZ(this.wNAF(n, affinePoint))[0];
    }
    toAffine(invZ = invert(this.z)) {
        const x = mod(this.x * invZ);
        const y = mod(this.y * invZ);
        return new Point(x, y);
    }
}
exports.ExtendedPoint = ExtendedPoint;
ExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, 1n, mod(CURVE.Gx * CURVE.Gy));
ExtendedPoint.ZERO = new ExtendedPoint(0n, 1n, 1n, 0n);
const pointPrecomputes = new WeakMap();
class Point {
    constructor(x, y){
        this.x = x;
        this.y = y;
    }
    _setWindowSize(windowSize) {
        this._WINDOW_SIZE = windowSize;
        pointPrecomputes.delete(this);
    }
    static fromHex(hash) {
        const { d , P  } = CURVE;
        const bytes = hash instanceof Uint8Array ? hash : hexToBytes(hash);
        if (bytes.length !== 32) throw new Error("Point.fromHex: expected 32 bytes");
        const last = bytes[31];
        const normedLast = last & -129;
        const isLastByteOdd = (last & 0x80) !== 0;
        const normed = Uint8Array.from(Array.from(bytes.slice(0, 31)).concat(normedLast));
        const y = bytesToNumberLE(normed);
        if (y >= P) throw new Error("Point.fromHex expects hex <= Fp");
        const y2 = mod(y * y);
        const u = mod(y2 - 1n);
        const v = mod(d * y2 + 1n);
        let { isValid , value: x  } = uvRatio(u, v);
        if (!isValid) throw new Error("Point.fromHex: invalid y coordinate");
        const isXOdd = (x & 1n) === 1n;
        if (isLastByteOdd !== isXOdd) x = mod(-x);
        return new Point(x, y);
    }
    static async fromPrivateKey(privateKey) {
        const privBytes = await exports.utils.sha512(normalizePrivateKey(privateKey));
        return Point.BASE.multiply(encodePrivate(privBytes));
    }
    toRawBytes() {
        const hex = numberToHex(this.y);
        const u8 = new Uint8Array(B32);
        for(let i = hex.length - 2, j = 0; j < B32 && i >= 0; i -= 2, j++)u8[j] = Number.parseInt(hex[i] + hex[i + 1], 16);
        const mask = this.x & 1n ? 0x80 : 0;
        u8[B32 - 1] |= mask;
        return u8;
    }
    toHex() {
        return bytesToHex(this.toRawBytes());
    }
    toX25519() {
        return mod((1n + this.y) * invert(1n - this.y));
    }
    equals(other) {
        return this.x === other.x && this.y === other.y;
    }
    negate() {
        return new Point(mod(-this.x), this.y);
    }
    add(other) {
        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();
    }
    subtract(other) {
        return this.add(other.negate());
    }
    multiply(scalar) {
        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();
    }
}
exports.Point = Point;
Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
Point.ZERO = new Point(0n, 1n);
class Signature {
    constructor(r, s){
        this.r = r;
        this.s = s;
    }
    static fromHex(hex) {
        hex = ensureBytes(hex);
        const r = Point.fromHex(hex.slice(0, 32));
        const s = bytesToNumberLE(hex.slice(32));
        if (!isWithinCurveOrder(s)) throw new Error("Signature.fromHex expects s <= CURVE.n");
        return new Signature(r, s);
    }
    toRawBytes() {
        const numberBytes = hexToBytes(numberToHex(this.s)).reverse();
        const sBytes = new Uint8Array(B32);
        sBytes.set(numberBytes);
        const res = new Uint8Array(B32 * 2);
        res.set(this.r.toRawBytes());
        res.set(sBytes, 32);
        return res;
    }
    toHex() {
        return bytesToHex(this.toRawBytes());
    }
}
exports.Signature = Signature;
exports.SignResult = Signature;
function concatBytes(...arrays) {
    if (arrays.length === 1) return arrays[0];
    const length = arrays.reduce((a, arr)=>a + arr.length, 0);
    const result = new Uint8Array(length);
    for(let i = 0, pad = 0; i < arrays.length; i++){
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function bytesToHex(uint8a) {
    let hex = "";
    for(let i = 0; i < uint8a.length; i++)hex += uint8a[i].toString(16).padStart(2, "0");
    return hex;
}
function hexToBytes(hex) {
    if (typeof hex !== "string") throw new TypeError("hexToBytes: expected string, got " + typeof hex);
    if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex");
    const array = new Uint8Array(hex.length / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        array[i] = Number.parseInt(hex.slice(j, j + 2), 16);
    }
    return array;
}
function numberToHex(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
function numberToBytesPadded(num, length = B32) {
    const hex = numberToHex(num).padStart(length * 2, "0");
    return hexToBytes(hex).reverse();
}
function edIsNegative(num) {
    return (mod(num) & 1n) === 1n;
}
function isValidScalar(num) {
    if (typeof num === "bigint" && num > 0n) return true;
    if (typeof num === "number" && num > 0 && Number.isSafeInteger(num)) return true;
    return false;
}
function bytesToNumberLE(uint8a) {
    let value = 0n;
    for(let i = 0; i < uint8a.length; i++)value += BigInt(uint8a[i]) << 8n * BigInt(i);
    return value;
}
function bytes255ToNumberLE(bytes) {
    return mod(bytesToNumberLE(bytes) & 2n ** 255n - 1n);
}
function mod(a, b = CURVE.P) {
    const res = a % b;
    return res >= 0n ? res : b + res;
}
function invert(number, modulo = CURVE.P) {
    if (number === 0n || modulo <= 0n) throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    let a = mod(number, modulo);
    let b = modulo;
    let [x, y, u, v] = [
        0n,
        1n,
        1n,
        0n
    ];
    while(a !== 0n){
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        [b, a] = [
            a,
            r
        ];
        [x, y] = [
            u,
            v
        ];
        [u, v] = [
            m,
            n
        ];
    }
    const gcd = b;
    if (gcd !== 1n) throw new Error("invert: does not exist");
    return mod(x, modulo);
}
function invertBatch(nums, n = CURVE.P) {
    const len = nums.length;
    const scratch = new Array(len);
    let acc = 1n;
    for(let i = 0; i < len; i++){
        if (nums[i] === 0n) continue;
        scratch[i] = acc;
        acc = mod(acc * nums[i], n);
    }
    acc = invert(acc, n);
    for(let i1 = len - 1; i1 >= 0; i1--){
        if (nums[i1] === 0n) continue;
        let tmp = mod(acc * nums[i1], n);
        nums[i1] = mod(acc * scratch[i1], n);
        acc = tmp;
    }
    return nums;
}
function pow2(x, power) {
    const { P  } = CURVE;
    let res = x;
    while(power-- > 0n){
        res *= res;
        res %= P;
    }
    return res;
}
function pow_2_252_3(x) {
    const { P  } = CURVE;
    const x2 = x * x % P;
    const b2 = x2 * x % P;
    const b4 = pow2(b2, 2n) * b2 % P;
    const b5 = pow2(b4, 1n) * x % P;
    const b10 = pow2(b5, 5n) * b5 % P;
    const b20 = pow2(b10, 10n) * b10 % P;
    const b40 = pow2(b20, 20n) * b20 % P;
    const b80 = pow2(b40, 40n) * b40 % P;
    const b160 = pow2(b80, 80n) * b80 % P;
    const b240 = pow2(b160, 80n) * b80 % P;
    const b250 = pow2(b240, 10n) * b10 % P;
    const pow_p_5_8 = pow2(b250, 2n) * x % P;
    return pow_p_5_8;
}
function uvRatio(u, v) {
    const v3 = mod(v * v * v);
    const v7 = mod(v3 * v3 * v);
    let x = mod(u * v3 * pow_2_252_3(u * v7));
    const vx2 = mod(v * x * x);
    const root1 = x;
    const root2 = mod(x * SQRT_M1);
    const useRoot1 = vx2 === u;
    const useRoot2 = vx2 === mod(-u);
    const noRoot = vx2 === mod(-u * SQRT_M1);
    if (useRoot1) x = root1;
    if (useRoot2 || noRoot) x = root2;
    if (edIsNegative(x)) x = mod(-x);
    return {
        isValid: useRoot1 || useRoot2,
        value: x
    };
}
function invertSqrt(number) {
    return uvRatio(1n, number);
}
async function sha512ToNumberLE(...args) {
    const messageArray = concatBytes(...args);
    const hash = await exports.utils.sha512(messageArray);
    const value = bytesToNumberLE(hash);
    return mod(value, CURVE.n);
}
function keyPrefix(privateBytes) {
    return privateBytes.slice(B32);
}
function encodePrivate(privateBytes) {
    const last = B32 - 1;
    const head = privateBytes.slice(0, B32);
    head[0] &= 248;
    head[last] &= 127;
    head[last] |= 64;
    return mod(bytesToNumberLE(head), CURVE.n);
}
function equalBytes(b1, b2) {
    if (b1.length !== b2.length) return false;
    for(let i = 0; i < b1.length; i++){
        if (b1[i] !== b2[i]) return false;
    }
    return true;
}
function ensureBytes(hash) {
    return hash instanceof Uint8Array ? hash : hexToBytes(hash);
}
function isWithinCurveOrder(num) {
    return 0 < num && num < CURVE.n;
}
function normalizePrivateKey(key) {
    let num;
    if (typeof key === "bigint" || typeof key === "number" && Number.isSafeInteger(key)) {
        num = BigInt(key);
        if (num < 0n || num > 2n ** 256n) throw new Error("Expected 32 bytes of private key");
        key = num.toString(16).padStart(B32 * 2, "0");
    }
    if (typeof key === "string") {
        if (key.length !== 64) throw new Error("Expected 32 bytes of private key");
        return hexToBytes(key);
    } else if (key instanceof Uint8Array) {
        if (key.length !== 32) throw new Error("Expected 32 bytes of private key");
        return key;
    } else throw new TypeError("Expected valid private key");
}
async function getPublicKey(privateKey) {
    const key = await Point.fromPrivateKey(privateKey);
    return typeof privateKey === "string" ? key.toHex() : key.toRawBytes();
}
exports.getPublicKey = getPublicKey;
async function sign(hash, privateKey) {
    const privBytes = await exports.utils.sha512(normalizePrivateKey(privateKey));
    const p = encodePrivate(privBytes);
    const P = Point.BASE.multiply(p);
    const msg = ensureBytes(hash);
    const r = await sha512ToNumberLE(keyPrefix(privBytes), msg);
    const R = Point.BASE.multiply(r);
    const h = await sha512ToNumberLE(R.toRawBytes(), P.toRawBytes(), msg);
    const S = mod(r + h * p, CURVE.n);
    const sig = new Signature(R, S);
    return typeof hash === "string" ? sig.toHex() : sig.toRawBytes();
}
exports.sign = sign;
async function verify(signature, hash, publicKey) {
    hash = ensureBytes(hash);
    if (!(publicKey instanceof Point)) publicKey = Point.fromHex(publicKey);
    if (!(signature instanceof Signature)) signature = Signature.fromHex(signature);
    const hs = await sha512ToNumberLE(signature.r.toRawBytes(), publicKey.toRawBytes(), hash);
    const Ph = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(hs);
    const Gs = ExtendedPoint.BASE.multiply(signature.s);
    const RPh = ExtendedPoint.fromAffine(signature.r).add(Ph);
    return RPh.subtract(Gs).multiplyUnsafe(8n).equals(ExtendedPoint.ZERO);
}
exports.verify = verify;
Point.BASE._setWindowSize(8);
const crypto = (()=>{
    const webCrypto = typeof self === "object" && "crypto" in self ? self.crypto : undefined;
    const nodeRequire = typeof module.require === "function" && module.require.bind(module);
    return {
        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : undefined,
        web: webCrypto
    };
})();
exports.utils = {
    TORSION_SUBGROUP: [
        "0100000000000000000000000000000000000000000000000000000000000000",
        "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a",
        "0000000000000000000000000000000000000000000000000000000000000080",
        "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05",
        "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f",
        "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85",
        "0000000000000000000000000000000000000000000000000000000000000000",
        "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa", 
    ],
    randomBytes: (bytesLength = 32)=>{
        if (crypto.web) return crypto.web.getRandomValues(new Uint8Array(bytesLength));
        else if (crypto.node) {
            const { randomBytes  } = crypto.node;
            return new Uint8Array(randomBytes(bytesLength).buffer);
        } else throw new Error("The environment doesn't have randomBytes function");
    },
    randomPrivateKey: ()=>{
        let i = 1024;
        while(i--){
            const b32 = exports.utils.randomBytes(32);
            const num = bytesToNumberLE(b32);
            if (num > 1n && num < CURVE.n) return b32;
        }
        throw new Error("Valid private key was not found in 1024 iterations. PRNG is broken");
    },
    sha512: async (message)=>{
        if (crypto.web) {
            const buffer = await crypto.web.subtle.digest("SHA-512", message.buffer);
            return new Uint8Array(buffer);
        } else if (crypto.node) return Uint8Array.from(crypto.node.createHash("sha512").update(message).digest());
        else throw new Error("The environment doesn't have sha512 function");
    },
    precompute (windowSize = 8, point = Point.BASE) {
        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);
        cached._setWindowSize(windowSize);
        cached.multiply(1n);
        return cached;
    }
};

},{}],"2agOQ":[function(require,module,exports) {
"use strict";
const { sha256  } = require("multiformats/hashes/sha2");
const errcode = require("err-code");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const exporter = require("./exporter");
module.exports = (keysProtobuf, randomBytes, crypto)=>{
    crypto = crypto || require("./secp256k1")();
    class Secp256k1PublicKey {
        constructor(key){
            crypto.validatePublicKey(key);
            this._key = key;
        }
        verify(data, sig) {
            return crypto.hashAndVerify(this._key, sig, data);
        }
        marshal() {
            return crypto.compressPublicKey(this._key);
        }
        get bytes() {
            return keysProtobuf.PublicKey.encode({
                Type: keysProtobuf.KeyType.Secp256k1,
                Data: this.marshal()
            }).finish();
        }
        equals(key) {
            return uint8ArrayEquals(this.bytes, key.bytes);
        }
        async hash() {
            const { bytes  } = await sha256.digest(this.bytes);
            return bytes;
        }
    }
    class Secp256k1PrivateKey {
        constructor(key, publicKey){
            this._key = key;
            this._publicKey = publicKey || crypto.computePublicKey(key);
            crypto.validatePrivateKey(this._key);
            crypto.validatePublicKey(this._publicKey);
        }
        sign(message) {
            return crypto.hashAndSign(this._key, message);
        }
        get public() {
            return new Secp256k1PublicKey(this._publicKey);
        }
        marshal() {
            return this._key;
        }
        get bytes() {
            return keysProtobuf.PrivateKey.encode({
                Type: keysProtobuf.KeyType.Secp256k1,
                Data: this.marshal()
            }).finish();
        }
        equals(key) {
            return uint8ArrayEquals(this.bytes, key.bytes);
        }
        async hash() {
            const { bytes  } = await sha256.digest(this.bytes);
            return bytes;
        }
        /**
     * Gets the ID of the key.
     *
     * The key id is the base58 encoding of the SHA-256 multihash of its public key.
     * The public key is a protobuf encoding containing a type and the DER encoding
     * of the PKCS SubjectPublicKeyInfo.
     *
     * @returns {Promise<string>}
     */ async id() {
            const hash = await this.public.hash();
            return uint8ArrayToString(hash, "base58btc");
        }
        /**
     * Exports the key into a password protected `format`
     *
     * @param {string} password - The password to encrypt the key
     * @param {string} [format=libp2p-key] - The format in which to export as
     * @returns {Promise<string>} The encrypted private key
     */ async export(password, format = "libp2p-key") {
            if (format === "libp2p-key") return exporter.export(this.bytes, password);
            else throw errcode(new Error(`export format '${format}' is not supported`), "ERR_INVALID_EXPORT_FORMAT");
        }
    }
    function unmarshalSecp256k1PrivateKey(bytes) {
        return new Secp256k1PrivateKey(bytes);
    }
    function unmarshalSecp256k1PublicKey(bytes) {
        return new Secp256k1PublicKey(bytes);
    }
    async function generateKeyPair() {
        const privateKeyBytes = await crypto.generateKey();
        return new Secp256k1PrivateKey(privateKeyBytes);
    }
    return {
        Secp256k1PublicKey,
        Secp256k1PrivateKey,
        unmarshalSecp256k1PrivateKey,
        unmarshalSecp256k1PublicKey,
        generateKeyPair
    };
};

},{"multiformats/hashes/sha2":"7U0mx","err-code":"dUrrM","uint8arrays/equals":"iZMnE","uint8arrays/to-string":"w8mvE","./exporter":"37CKu","./secp256k1":"gQLGh"}],"gQLGh":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const secp = require("noble-secp256k1");
const { sha256  } = require("multiformats/hashes/sha2");
module.exports = ()=>{
    const privateKeyLength = 32;
    function generateKey() {
        return secp.utils.randomPrivateKey();
    }
    /**
   * Hash and sign message with private key
   *
   * @param {number | bigint | (string | Uint8Array)} key
   * @param {Uint8Array} msg
   */ async function hashAndSign(key, msg) {
        const { digest  } = await sha256.digest(msg);
        try {
            return await secp.sign(digest, key);
        } catch (err) {
            throw errcode(err, "ERR_INVALID_INPUT");
        }
    }
    /**
   * Hash message and verify signature with public key
   *
   * @param {secp.Point | (string | Uint8Array)} key
   * @param {(string | Uint8Array) | secp.Signature} sig
   * @param {Uint8Array} msg
   */ async function hashAndVerify(key, sig, msg) {
        try {
            const { digest  } = await sha256.digest(msg);
            return secp.verify(sig, digest, key);
        } catch (err) {
            throw errcode(err, "ERR_INVALID_INPUT");
        }
    }
    function compressPublicKey(key) {
        const point = secp.Point.fromHex(key).toRawBytes(true);
        return point;
    }
    function decompressPublicKey(key) {
        const point = secp.Point.fromHex(key).toRawBytes(false);
        return point;
    }
    function validatePrivateKey(key) {
        try {
            secp.getPublicKey(key, true);
        } catch (err) {
            throw errcode(err, "ERR_INVALID_PRIVATE_KEY");
        }
    }
    function validatePublicKey(key) {
        try {
            secp.Point.fromHex(key);
        } catch (err) {
            throw errcode(err, "ERR_INVALID_PUBLIC_KEY");
        }
    }
    function computePublicKey(privateKey) {
        try {
            return secp.getPublicKey(privateKey, true);
        } catch (err) {
            throw errcode(err, "ERR_INVALID_PRIVATE_KEY");
        }
    }
    return {
        generateKey,
        privateKeyLength,
        hashAndSign,
        hashAndVerify,
        compressPublicKey,
        decompressPublicKey,
        validatePrivateKey,
        validatePublicKey,
        computePublicKey
    };
};

},{"err-code":"dUrrM","noble-secp256k1":"gl8Ra","multiformats/hashes/sha2":"7U0mx"}],"gl8Ra":[function(require,module,exports) {
"use strict";
/*! noble-secp256k1 - MIT License (c) Paul Miller (paulmillr.com) */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.SignResult = exports.Signature = exports.Point = exports.CURVE = void 0;
const CURVE = {
    a: 0n,
    b: 7n,
    P: 2n ** 256n - 2n ** 32n - 977n,
    n: 2n ** 256n - 432420386565659656852420866394968145599n,
    h: 1n,
    Gx: 55066263022277343669578718895168534326250603453777594175500187360389116729240n,
    Gy: 32670510020758816978083085130507043184471273380659243275938904335757337482424n,
    beta: 0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501een
};
exports.CURVE = CURVE;
function weistrass(x) {
    const { a , b  } = CURVE;
    return mod(x ** 3n + a * x + b);
}
const USE_ENDOMORPHISM = CURVE.a === 0n;
class JacobianPoint {
    constructor(x, y, z){
        this.x = x;
        this.y = y;
        this.z = z;
    }
    static fromAffine(p) {
        if (!(p instanceof Point)) throw new TypeError("JacobianPoint#fromAffine: expected Point");
        return new JacobianPoint(p.x, p.y, 1n);
    }
    static toAffineBatch(points) {
        const toInv = invertBatch(points.map((p)=>p.z));
        return points.map((p, i)=>p.toAffine(toInv[i]));
    }
    static normalizeZ(points) {
        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
    }
    equals(other) {
        const a = this;
        const b = other;
        const az2 = mod(a.z * a.z);
        const az3 = mod(a.z * az2);
        const bz2 = mod(b.z * b.z);
        const bz3 = mod(b.z * bz2);
        return mod(a.x * bz2) === mod(az2 * b.x) && mod(a.y * bz3) === mod(az3 * b.y);
    }
    negate() {
        return new JacobianPoint(this.x, mod(-this.y), this.z);
    }
    double() {
        const X1 = this.x;
        const Y1 = this.y;
        const Z1 = this.z;
        const A = mod(X1 ** 2n);
        const B = mod(Y1 ** 2n);
        const C = mod(B ** 2n);
        const D = mod(2n * (mod(mod((X1 + B) ** 2n)) - A - C));
        const E = mod(3n * A);
        const F = mod(E ** 2n);
        const X3 = mod(F - 2n * D);
        const Y3 = mod(E * (D - X3) - 8n * C);
        const Z3 = mod(2n * Y1 * Z1);
        return new JacobianPoint(X3, Y3, Z3);
    }
    add(other) {
        if (!(other instanceof JacobianPoint)) throw new TypeError("JacobianPoint#add: expected JacobianPoint");
        const X1 = this.x;
        const Y1 = this.y;
        const Z1 = this.z;
        const X2 = other.x;
        const Y2 = other.y;
        const Z2 = other.z;
        if (X2 === 0n || Y2 === 0n) return this;
        if (X1 === 0n || Y1 === 0n) return other;
        const Z1Z1 = mod(Z1 ** 2n);
        const Z2Z2 = mod(Z2 ** 2n);
        const U1 = mod(X1 * Z2Z2);
        const U2 = mod(X2 * Z1Z1);
        const S1 = mod(Y1 * Z2 * Z2Z2);
        const S2 = mod(mod(Y2 * Z1) * Z1Z1);
        const H = mod(U2 - U1);
        const r = mod(S2 - S1);
        if (H === 0n) {
            if (r === 0n) return this.double();
            else return JacobianPoint.ZERO;
        }
        const HH = mod(H ** 2n);
        const HHH = mod(H * HH);
        const V = mod(U1 * HH);
        const X3 = mod(r ** 2n - HHH - 2n * V);
        const Y3 = mod(r * (V - X3) - S1 * HHH);
        const Z3 = mod(Z1 * Z2 * H);
        return new JacobianPoint(X3, Y3, Z3);
    }
    subtract(other) {
        return this.add(other.negate());
    }
    multiplyUnsafe(scalar) {
        if (!isValidScalar(scalar)) throw new TypeError("Point#multiply: expected valid scalar");
        let n = mod(BigInt(scalar), CURVE.n);
        if (!USE_ENDOMORPHISM) {
            let p = JacobianPoint.ZERO;
            let d = this;
            while(n > 0n){
                if (n & 1n) p = p.add(d);
                d = d.double();
                n >>= 1n;
            }
            return p;
        }
        let [k1neg, k1, k2neg, k2] = splitScalarEndo(n);
        let k1p = JacobianPoint.ZERO;
        let k2p = JacobianPoint.ZERO;
        let d = this;
        while(k1 > 0n || k2 > 0n){
            if (k1 & 1n) k1p = k1p.add(d);
            if (k2 & 1n) k2p = k2p.add(d);
            d = d.double();
            k1 >>= 1n;
            k2 >>= 1n;
        }
        if (k1neg) k1p = k1p.negate();
        if (k2neg) k2p = k2p.negate();
        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
        return k1p.add(k2p);
    }
    precomputeWindow(W) {
        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
        let points = [];
        let p = this;
        let base = p;
        for(let window = 0; window < windows; window++){
            base = p;
            points.push(base);
            for(let i = 1; i < 2 ** (W - 1); i++){
                base = base.add(p);
                points.push(base);
            }
            p = base.double();
        }
        return points;
    }
    wNAF(n, affinePoint) {
        if (!affinePoint && this.equals(JacobianPoint.BASE)) affinePoint = Point.BASE;
        const W = affinePoint && affinePoint._WINDOW_SIZE || 1;
        if (256 % W) throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
        if (!precomputes) {
            precomputes = this.precomputeWindow(W);
            if (affinePoint && W !== 1) {
                precomputes = JacobianPoint.normalizeZ(precomputes);
                pointPrecomputes.set(affinePoint, precomputes);
            }
        }
        let p = JacobianPoint.ZERO;
        let f = JacobianPoint.ZERO;
        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
        const windowSize = 2 ** (W - 1);
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for(let window = 0; window < windows; window++){
            const offset = window * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
                wbits -= maxNumber;
                n += 1n;
            }
            if (wbits === 0) f = f.add(window % 2 ? precomputes[offset].negate() : precomputes[offset]);
            else {
                const cached = precomputes[offset + Math.abs(wbits) - 1];
                p = p.add(wbits < 0 ? cached.negate() : cached);
            }
        }
        return [
            p,
            f
        ];
    }
    multiply(scalar, affinePoint) {
        if (!isValidScalar(scalar)) throw new TypeError("Point#multiply: expected valid scalar");
        let n = mod(BigInt(scalar), CURVE.n);
        let point;
        let fake;
        if (USE_ENDOMORPHISM) {
            const [k1neg, k1, k2neg, k2] = splitScalarEndo(n);
            let k1p, k2p, f1p, f2p;
            [k1p, f1p] = this.wNAF(k1, affinePoint);
            [k2p, f2p] = this.wNAF(k2, affinePoint);
            if (k1neg) k1p = k1p.negate();
            if (k2neg) k2p = k2p.negate();
            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
            [point, fake] = [
                k1p.add(k2p),
                f1p.add(f2p)
            ];
        } else [point, fake] = this.wNAF(n, affinePoint);
        return JacobianPoint.normalizeZ([
            point,
            fake
        ])[0];
    }
    toAffine(invZ = invert(this.z)) {
        const invZ2 = invZ ** 2n;
        const x = mod(this.x * invZ2);
        const y = mod(this.y * invZ2 * invZ);
        return new Point(x, y);
    }
}
JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, 1n);
JacobianPoint.ZERO = new JacobianPoint(0n, 1n, 0n);
const pointPrecomputes = new WeakMap();
class Point {
    constructor(x, y){
        this.x = x;
        this.y = y;
    }
    _setWindowSize(windowSize) {
        this._WINDOW_SIZE = windowSize;
        pointPrecomputes.delete(this);
    }
    static fromCompressedHex(bytes) {
        const isShort = bytes.length === 32;
        const x = bytesToNumber(isShort ? bytes : bytes.slice(1));
        const y2 = weistrass(x);
        let y = sqrtMod(y2);
        const isYOdd = (y & 1n) === 1n;
        if (isShort) {
            if (isYOdd) y = mod(-y);
        } else {
            const isFirstByteOdd = (bytes[0] & 1) === 1;
            if (isFirstByteOdd !== isYOdd) y = mod(-y);
        }
        const point = new Point(x, y);
        point.assertValidity();
        return point;
    }
    static fromUncompressedHex(bytes) {
        const x = bytesToNumber(bytes.slice(1, 33));
        const y = bytesToNumber(bytes.slice(33));
        const point = new Point(x, y);
        point.assertValidity();
        return point;
    }
    static fromHex(hex) {
        const bytes = ensureBytes(hex);
        const header = bytes[0];
        if (bytes.length === 32 || bytes.length === 33 && (header === 0x02 || header === 0x03)) return this.fromCompressedHex(bytes);
        if (bytes.length === 65 && header === 0x04) return this.fromUncompressedHex(bytes);
        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${bytes.length}`);
    }
    static fromPrivateKey(privateKey) {
        return Point.BASE.multiply(normalizePrivateKey(privateKey));
    }
    static fromSignature(msgHash, signature, recovery) {
        let h = msgHash instanceof Uint8Array ? bytesToNumber(msgHash) : hexToNumber(msgHash);
        const sig = normalizeSignature(signature);
        const { r , s  } = sig;
        if (recovery !== 0 && recovery !== 1) throw new Error("Cannot recover signature: invalid yParity bit");
        const prefix = 2 + (recovery & 1);
        const P_ = Point.fromHex(`0${prefix}${pad64(r)}`);
        const sP = JacobianPoint.fromAffine(P_).multiplyUnsafe(s);
        const hG = JacobianPoint.BASE.multiply(h);
        const rinv = invert(r, CURVE.n);
        const Q = sP.subtract(hG).multiplyUnsafe(rinv);
        const point = Q.toAffine();
        point.assertValidity();
        return point;
    }
    toRawBytes(isCompressed = false) {
        return hexToBytes(this.toHex(isCompressed));
    }
    toHex(isCompressed = false) {
        const x = pad64(this.x);
        if (isCompressed) return `${this.y & 1n ? "03" : "02"}${x}`;
        else return `04${x}${pad64(this.y)}`;
    }
    toHexX() {
        return this.toHex(true).slice(2);
    }
    toRawX() {
        return this.toRawBytes(true).slice(1);
    }
    assertValidity() {
        const msg = "Point is not on elliptic curve";
        const { P  } = CURVE;
        const { x , y  } = this;
        if (x === 0n || y === 0n || x >= P || y >= P) throw new Error(msg);
        const left = mod(y * y);
        const right = weistrass(x);
        if ((left - right) % P !== 0n) throw new Error(msg);
    }
    equals(other) {
        return this.x === other.x && this.y === other.y;
    }
    negate() {
        return new Point(this.x, mod(-this.y));
    }
    double() {
        return JacobianPoint.fromAffine(this).double().toAffine();
    }
    add(other) {
        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
    }
    subtract(other) {
        return this.add(other.negate());
    }
    multiply(scalar) {
        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
    }
}
exports.Point = Point;
Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
Point.ZERO = new Point(0n, 0n);
function sliceDer(s) {
    return Number.parseInt(s[0], 16) >= 8 ? "00" + s : s;
}
class Signature {
    constructor(r, s){
        this.r = r;
        this.s = s;
    }
    static fromCompact(hex) {
        if (typeof hex !== "string" && !(hex instanceof Uint8Array)) throw new TypeError(`Signature.fromCompact: Expected string or Uint8Array`);
        const str = hex instanceof Uint8Array ? bytesToHex(hex) : hex;
        if (str.length !== 128) throw new Error("Signature.fromCompact: Expected 64-byte hex");
        const sig = new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
        sig.assertValidity();
        return sig;
    }
    static fromDER(hex) {
        const fn = "Signature.fromDER";
        if (typeof hex !== "string" && !(hex instanceof Uint8Array)) throw new TypeError(`${fn}: Expected string or Uint8Array`);
        const str = hex instanceof Uint8Array ? bytesToHex(hex) : hex;
        const length = parseByte(str.slice(2, 4));
        if (str.slice(0, 2) !== "30" || length !== str.length - 4 || str.slice(4, 6) !== "02") throw new Error(`${fn}: Invalid signature ${str}`);
        const rLen = parseByte(str.slice(6, 8));
        const rEnd = 8 + rLen;
        const rr = str.slice(8, rEnd);
        if (rr.startsWith("00") && parseByte(rr.slice(2, 4)) <= 0x7f) throw new Error(`${fn}: Invalid r with trailing length`);
        const r = hexToNumber(rr);
        const separator = str.slice(rEnd, rEnd + 2);
        if (separator !== "02") throw new Error(`${fn}: Invalid r-s separator`);
        const sLen = parseByte(str.slice(rEnd + 2, rEnd + 4));
        const diff = length - sLen - rLen - 10;
        if (diff > 0 || diff === -4) throw new Error(`${fn}: Invalid total length`);
        if (sLen > length - rLen - 4) throw new Error(`${fn}: Invalid s`);
        const sStart = rEnd + 4;
        const ss = str.slice(sStart, sStart + sLen);
        if (ss.startsWith("00") && parseByte(ss.slice(2, 4)) <= 0x7f) throw new Error(`${fn}: Invalid s with trailing length`);
        const s = hexToNumber(ss);
        const sig = new Signature(r, s);
        sig.assertValidity();
        return sig;
    }
    static fromHex(hex) {
        return this.fromDER(hex);
    }
    assertValidity() {
        const { r , s  } = this;
        if (!isWithinCurveOrder(r)) throw new Error("Invalid Signature: r must be 0 < r < n");
        if (!isWithinCurveOrder(s)) throw new Error("Invalid Signature: s must be 0 < s < n");
    }
    toDERRawBytes(isCompressed = false) {
        return hexToBytes(this.toDERHex(isCompressed));
    }
    toDERHex(isCompressed = false) {
        const sHex = sliceDer(numberToHex(this.s));
        if (isCompressed) return sHex;
        const rHex = sliceDer(numberToHex(this.r));
        const rLen = numberToHex(rHex.length / 2);
        const sLen = numberToHex(sHex.length / 2);
        const length = numberToHex(rHex.length / 2 + sHex.length / 2 + 4);
        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
    }
    toRawBytes() {
        return this.toDERRawBytes();
    }
    toHex() {
        return this.toDERHex();
    }
    toCompactRawBytes() {
        return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
        return pad64(this.r) + pad64(this.s);
    }
}
exports.Signature = Signature;
exports.SignResult = Signature;
function concatBytes(...arrays) {
    if (arrays.length === 1) return arrays[0];
    const length = arrays.reduce((a, arr)=>a + arr.length, 0);
    const result = new Uint8Array(length);
    for(let i = 0, pad = 0; i < arrays.length; i++){
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function bytesToHex(uint8a) {
    let hex = "";
    for(let i = 0; i < uint8a.length; i++)hex += uint8a[i].toString(16).padStart(2, "0");
    return hex;
}
function pad64(num) {
    return num.toString(16).padStart(64, "0");
}
function pad32b(num) {
    return hexToBytes(pad64(num));
}
function numberToHex(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
    if (typeof hex !== "string") throw new TypeError("hexToNumber: expected string, got " + typeof hex);
    return BigInt(`0x${hex}`);
}
function hexToBytes(hex) {
    if (typeof hex !== "string") throw new TypeError("hexToBytes: expected string, got " + typeof hex);
    if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex");
    const array = new Uint8Array(hex.length / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        array[i] = Number.parseInt(hex.slice(j, j + 2), 16);
    }
    return array;
}
function ensureBytes(hex) {
    return hex instanceof Uint8Array ? hex : hexToBytes(hex);
}
function bytesToNumber(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
function parseByte(str) {
    return Number.parseInt(str, 16) * 2;
}
function isValidScalar(num) {
    if (typeof num === "bigint" && num > 0n) return true;
    if (typeof num === "number" && num > 0 && Number.isSafeInteger(num)) return true;
    return false;
}
function mod(a, b = CURVE.P) {
    const result = a % b;
    return result >= 0 ? result : b + result;
}
function pow2(x, power) {
    const { P  } = CURVE;
    let res = x;
    while(power-- > 0n){
        res *= res;
        res %= P;
    }
    return res;
}
function sqrtMod(x) {
    const { P  } = CURVE;
    const b2 = x * x * x % P;
    const b3 = b2 * b2 * x % P;
    const b6 = pow2(b3, 3n) * b3 % P;
    const b9 = pow2(b6, 3n) * b3 % P;
    const b11 = pow2(b9, 2n) * b2 % P;
    const b22 = pow2(b11, 11n) * b11 % P;
    const b44 = pow2(b22, 22n) * b22 % P;
    const b88 = pow2(b44, 44n) * b44 % P;
    const b176 = pow2(b88, 88n) * b88 % P;
    const b220 = pow2(b176, 44n) * b44 % P;
    const b223 = pow2(b220, 3n) * b3 % P;
    const t1 = pow2(b223, 23n) * b22 % P;
    const t2 = pow2(t1, 6n) * b2 % P;
    return pow2(t2, 2n);
}
function invert(number, modulo = CURVE.P) {
    if (number === 0n || modulo <= 0n) throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    let a = mod(number, modulo);
    let b = modulo;
    let [x, y, u, v] = [
        0n,
        1n,
        1n,
        0n
    ];
    while(a !== 0n){
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        [b, a] = [
            a,
            r
        ];
        [x, y] = [
            u,
            v
        ];
        [u, v] = [
            m,
            n
        ];
    }
    const gcd = b;
    if (gcd !== 1n) throw new Error("invert: does not exist");
    return mod(x, modulo);
}
function invertBatch(nums, n = CURVE.P) {
    const len = nums.length;
    const scratch = new Array(len);
    let acc = 1n;
    for(let i = 0; i < len; i++){
        if (nums[i] === 0n) continue;
        scratch[i] = acc;
        acc = mod(acc * nums[i], n);
    }
    acc = invert(acc, n);
    for(let i1 = len - 1; i1 >= 0; i1--){
        if (nums[i1] === 0n) continue;
        const tmp = mod(acc * nums[i1], n);
        nums[i1] = mod(acc * scratch[i1], n);
        acc = tmp;
    }
    return nums;
}
const divNearest = (a, b)=>(a + b / 2n) / b;
const POW_2_128 = 2n ** 128n;
function splitScalarEndo(k) {
    const { n  } = CURVE;
    const a1 = 0x3086d221a7d46bcde86c90e49284eb15n;
    const b1 = -0xe4437ed6010e88286f547fa90abfe4c3n;
    const a2 = 0x114ca50f7a8e2f3f657c1108d9d44cfd8n;
    const b2 = a1;
    const c1 = divNearest(b2 * k, n);
    const c2 = divNearest(-b1 * k, n);
    let k1 = mod(k - c1 * a1 - c2 * a2, n);
    let k2 = mod(-c1 * b1 - c2 * b2, n);
    const k1neg = k1 > POW_2_128;
    const k2neg = k2 > POW_2_128;
    if (k1neg) k1 = n - k1;
    if (k2neg) k2 = n - k2;
    if (k1 > POW_2_128 || k2 > POW_2_128) throw new Error("splitScalarEndo: Endomorphism failed");
    return [
        k1neg,
        k1,
        k2neg,
        k2
    ];
}
function truncateHash(hash) {
    if (typeof hash !== "string") hash = bytesToHex(hash);
    let msg = hexToNumber(hash || "0");
    const byteLength = hash.length / 2;
    const delta = byteLength * 8 - 256;
    if (delta > 0) msg = msg >> BigInt(delta);
    if (msg >= CURVE.n) msg -= CURVE.n;
    return msg;
}
function _abc6979(msgHash, privateKey) {
    if (msgHash == null) throw new Error(`sign: expected valid msgHash, not "${msgHash}"`);
    const num = typeof msgHash === "string" ? hexToNumber(msgHash) : bytesToNumber(msgHash);
    const h1 = pad32b(num);
    const h1n = bytesToNumber(h1);
    const x = pad32b(privateKey);
    let v = new Uint8Array(32).fill(1);
    let k = new Uint8Array(32).fill(0);
    const b0 = Uint8Array.from([
        0x00
    ]);
    const b1 = Uint8Array.from([
        0x01
    ]);
    return [
        h1,
        h1n,
        x,
        v,
        k,
        b0,
        b1
    ];
}
async function getQRSrfc6979(msgHash, privateKey) {
    const privKey = normalizePrivateKey(privateKey);
    let [h1, h1n, x, v, k, b0, b1] = _abc6979(msgHash, privKey);
    const hmac = exports.utils.hmacSha256;
    k = await hmac(k, v, b0, x, h1);
    v = await hmac(k, v);
    k = await hmac(k, v, b1, x, h1);
    v = await hmac(k, v);
    for(let i = 0; i < 1000; i++){
        v = await hmac(k, v);
        let qrs = calcQRSFromK(v, h1n, privKey);
        if (qrs) return qrs;
        k = await hmac(k, v, b0);
        v = await hmac(k, v);
    }
    throw new TypeError("secp256k1: Tried 1,000 k values for sign(), all were invalid");
}
function getQRSrfc6979Sync(msgHash, privateKey) {
    const privKey = normalizePrivateKey(privateKey);
    let [h1, h1n, x, v, k, b0, b1] = _abc6979(msgHash, privKey);
    const hmac = exports.utils.hmacSha256Sync;
    if (!hmac) throw new Error("utils.hmacSha256Sync is undefined, you need to set it");
    k = hmac(k, v, b0, x, h1);
    if (k instanceof Promise) throw new Error("To use sync sign(), ensure utils.hmacSha256 is sync");
    v = hmac(k, v);
    k = hmac(k, v, b1, x, h1);
    v = hmac(k, v);
    for(let i = 0; i < 1000; i++){
        v = hmac(k, v);
        let qrs = calcQRSFromK(v, h1n, privKey);
        if (qrs) return qrs;
        k = hmac(k, v, b0);
        v = hmac(k, v);
    }
    throw new TypeError("secp256k1: Tried 1,000 k values for sign(), all were invalid");
}
function isWithinCurveOrder(num) {
    return 0 < num && num < CURVE.n;
}
function calcQRSFromK(v, msg, priv) {
    const k = bytesToNumber(v);
    if (!isWithinCurveOrder(k)) return;
    const max = CURVE.n;
    const q = Point.BASE.multiply(k);
    const r = mod(q.x, max);
    const s = mod(invert(k, max) * (msg + r * priv), max);
    if (r === 0n || s === 0n) return;
    return [
        q,
        r,
        s
    ];
}
function normalizePrivateKey(key) {
    let num;
    if (typeof key === "bigint") num = key;
    else if (typeof key === "number" && Number.isSafeInteger(key) && key > 0) num = BigInt(key);
    else if (typeof key === "string") {
        if (key.length !== 64) throw new Error("Expected 32 bytes of private key");
        num = hexToNumber(key);
    } else if (key instanceof Uint8Array) {
        if (key.length !== 32) throw new Error("Expected 32 bytes of private key");
        num = bytesToNumber(key);
    } else throw new TypeError("Expected valid private key");
    if (!isWithinCurveOrder(num)) throw new Error("Expected private key: 0 < key < n");
    return num;
}
function normalizePublicKey(publicKey) {
    if (publicKey instanceof Point) {
        publicKey.assertValidity();
        return publicKey;
    } else return Point.fromHex(publicKey);
}
function normalizeSignature(signature) {
    if (signature instanceof Signature) {
        signature.assertValidity();
        return signature;
    } else return Signature.fromDER(signature);
}
function getPublicKey(privateKey, isCompressed = false) {
    const point = Point.fromPrivateKey(privateKey);
    if (typeof privateKey === "string") return point.toHex(isCompressed);
    return point.toRawBytes(isCompressed);
}
exports.getPublicKey = getPublicKey;
function recoverPublicKey(msgHash, signature, recovery) {
    const point = Point.fromSignature(msgHash, signature, recovery);
    return typeof msgHash === "string" ? point.toHex() : point.toRawBytes();
}
exports.recoverPublicKey = recoverPublicKey;
function isPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr) return len === 33 || len === 65;
    if (str) return len === 66 || len === 130;
    if (item instanceof Point) return true;
    return false;
}
function getSharedSecret(privateA, publicB, isCompressed = false) {
    if (isPub(privateA)) throw new TypeError("getSharedSecret: first arg must be private key");
    if (!isPub(publicB)) throw new TypeError("getSharedSecret: second arg must be public key");
    const b = normalizePublicKey(publicB);
    b.assertValidity();
    const shared = b.multiply(normalizePrivateKey(privateA));
    return typeof privateA === "string" ? shared.toHex(isCompressed) : shared.toRawBytes(isCompressed);
}
exports.getSharedSecret = getSharedSecret;
function QRSToSig(qrs, opts, str = false) {
    const [q, r, s] = qrs;
    let { canonical , der , recovered  } = opts;
    let recovery = (q.x === r ? 0 : 2) | Number(q.y & 1n);
    let adjustedS = s;
    const HIGH_NUMBER = CURVE.n >> 1n;
    if (s > HIGH_NUMBER && canonical) {
        adjustedS = CURVE.n - s;
        recovery ^= 1;
    }
    const sig = new Signature(r, adjustedS);
    sig.assertValidity();
    const hex = der === false ? sig.toCompactHex() : sig.toDERHex();
    const hashed = str ? hex : hexToBytes(hex);
    return recovered ? [
        hashed,
        recovery
    ] : hashed;
}
async function sign(msgHash, privKey, opts = {}) {
    return QRSToSig(await getQRSrfc6979(msgHash, privKey), opts, typeof msgHash === "string");
}
exports.sign = sign;
function signSync(msgHash, privKey, opts = {}) {
    return QRSToSig(getQRSrfc6979Sync(msgHash, privKey), opts, typeof msgHash === "string");
}
exports.signSync = signSync;
function verify(signature, msgHash, publicKey) {
    const { n  } = CURVE;
    let sig;
    try {
        sig = normalizeSignature(signature);
    } catch (error) {
        return false;
    }
    const { r , s  } = sig;
    const h = truncateHash(msgHash);
    if (h === 0n) return false;
    const pubKey = JacobianPoint.fromAffine(normalizePublicKey(publicKey));
    const s1 = invert(s, n);
    const u1 = mod(h * s1, n);
    const u2 = mod(r * s1, n);
    const Ghs1 = JacobianPoint.BASE.multiply(u1);
    const Prs1 = pubKey.multiplyUnsafe(u2);
    const R = Ghs1.add(Prs1).toAffine();
    const v = mod(R.x, n);
    return v === r;
}
exports.verify = verify;
async function taggedHash(tag, ...messages) {
    const tagB = new Uint8Array(tag.split("").map((c)=>c.charCodeAt(0)));
    const tagH = await exports.utils.sha256(tagB);
    const h = await exports.utils.sha256(concatBytes(tagH, tagH, ...messages));
    return bytesToNumber(h);
}
async function createChallenge(x, P, message) {
    const rx = pad32b(x);
    const t = await taggedHash("BIP0340/challenge", rx, P.toRawX(), message);
    return mod(t, CURVE.n);
}
function hasEvenY(point) {
    return mod(point.y, 2n) === 0n;
}
class SchnorrSignature {
    constructor(r, s){
        this.r = r;
        this.s = s;
        if (r <= 0n || s <= 0n || r >= CURVE.P || s >= CURVE.n) throw new Error("Invalid signature");
    }
    static fromHex(hex) {
        const bytes = ensureBytes(hex);
        if (bytes.length !== 64) throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);
        const r = bytesToNumber(bytes.slice(0, 32));
        const s = bytesToNumber(bytes.slice(32));
        return new SchnorrSignature(r, s);
    }
    toHex() {
        return pad64(this.r) + pad64(this.s);
    }
    toRawBytes() {
        return hexToBytes(this.toHex());
    }
}
function schnorrGetPublicKey(privateKey) {
    const P = Point.fromPrivateKey(privateKey);
    return typeof privateKey === "string" ? P.toHexX() : P.toRawX();
}
async function schnorrSign(msgHash, privateKey, auxRand = exports.utils.randomBytes()) {
    if (msgHash == null) throw new TypeError(`sign: Expected valid message, not "${msgHash}"`);
    if (!privateKey) privateKey = 0n;
    const { n  } = CURVE;
    const m = ensureBytes(msgHash);
    const d0 = normalizePrivateKey(privateKey);
    const rand = ensureBytes(auxRand);
    if (rand.length !== 32) throw new TypeError("sign: Expected 32 bytes of aux randomness");
    const P = Point.fromPrivateKey(d0);
    const d = hasEvenY(P) ? d0 : n - d0;
    const t0h = await taggedHash("BIP0340/aux", rand);
    const t = d ^ t0h;
    const k0h = await taggedHash("BIP0340/nonce", pad32b(t), P.toRawX(), m);
    const k0 = mod(k0h, n);
    if (k0 === 0n) throw new Error("sign: Creation of signature failed. k is zero");
    const R = Point.fromPrivateKey(k0);
    const k = hasEvenY(R) ? k0 : n - k0;
    const e = await createChallenge(R.x, P, m);
    const sig = new SchnorrSignature(R.x, mod(k + e * d, n));
    const isValid = await schnorrVerify(sig.toRawBytes(), m, P.toRawX());
    if (!isValid) throw new Error("sign: Invalid signature produced");
    return typeof msgHash === "string" ? sig.toHex() : sig.toRawBytes();
}
async function schnorrVerify(signature, msgHash, publicKey) {
    const sig = signature instanceof SchnorrSignature ? signature : SchnorrSignature.fromHex(signature);
    const m = typeof msgHash === "string" ? hexToBytes(msgHash) : msgHash;
    const P = normalizePublicKey(publicKey);
    const e = await createChallenge(sig.r, P, m);
    const sG = Point.fromPrivateKey(sig.s);
    const eP = P.multiply(e);
    const R = sG.subtract(eP);
    if (R.equals(Point.BASE) || !hasEvenY(R) || R.x !== sig.r) return false;
    return true;
}
exports.schnorr = {
    Signature: SchnorrSignature,
    getPublicKey: schnorrGetPublicKey,
    sign: schnorrSign,
    verify: schnorrVerify
};
Point.BASE._setWindowSize(8);
const crypto = (()=>{
    const webCrypto = typeof self === "object" && "crypto" in self ? self.crypto : undefined;
    const nodeRequire = true;
    return {
        node: nodeRequire && !webCrypto ? require("crypto") : undefined,
        web: webCrypto
    };
})();
exports.utils = {
    isValidPrivateKey (privateKey) {
        try {
            normalizePrivateKey(privateKey);
            return true;
        } catch (error) {
            return false;
        }
    },
    randomBytes: (bytesLength = 32)=>{
        if (crypto.web) return crypto.web.getRandomValues(new Uint8Array(bytesLength));
        else if (crypto.node) {
            const { randomBytes  } = crypto.node;
            return new Uint8Array(randomBytes(bytesLength).buffer);
        } else throw new Error("The environment doesn't have randomBytes function");
    },
    randomPrivateKey: ()=>{
        let i = 8;
        while(i--){
            const b32 = exports.utils.randomBytes(32);
            const num = bytesToNumber(b32);
            if (isWithinCurveOrder(num) && num !== 1n) return b32;
        }
        throw new Error("Valid private key was not found in 8 iterations. PRNG is broken");
    },
    sha256: async (message)=>{
        if (crypto.web) {
            const buffer = await crypto.web.subtle.digest("SHA-256", message.buffer);
            return new Uint8Array(buffer);
        } else if (crypto.node) {
            const { createHash  } = crypto.node;
            return Uint8Array.from(createHash("sha256").update(message).digest());
        } else throw new Error("The environment doesn't have sha256 function");
    },
    hmacSha256: async (key, ...messages)=>{
        if (crypto.web) {
            const ckey = await crypto.web.subtle.importKey("raw", key, {
                name: "HMAC",
                hash: {
                    name: "SHA-256"
                }
            }, false, [
                "sign"
            ]);
            const message = concatBytes(...messages);
            const buffer = await crypto.web.subtle.sign("HMAC", ckey, message);
            return new Uint8Array(buffer);
        } else if (crypto.node) {
            const { createHmac  } = crypto.node;
            const hash = createHmac("sha256", key);
            for (let message of messages)hash.update(message);
            return Uint8Array.from(hash.digest());
        } else throw new Error("The environment doesn't have hmac-sha256 function");
    },
    sha256Sync: undefined,
    hmacSha256Sync: undefined,
    precompute (windowSize = 8, point = Point.BASE) {
        const cached = point === Point.BASE ? point : new Point(point.x, point.y);
        cached._setWindowSize(windowSize);
        cached.multiply(3n);
        return cached;
    }
};

},{"crypto":"jhUEF"}],"97lWA":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const hmac = require("../hmac");
const cipherMap = {
    "AES-128": {
        ivSize: 16,
        keySize: 16
    },
    "AES-256": {
        ivSize: 16,
        keySize: 32
    },
    Blowfish: {
        ivSize: 8,
        cipherKeySize: 32
    }
};
// Generates a set of keys for each party by stretching the shared key.
// (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)
module.exports = async (cipherType, hash, secret)=>{
    const cipher = cipherMap[cipherType];
    if (!cipher) {
        const allowed = Object.keys(cipherMap).join(" / ");
        throw errcode(new Error(`unknown cipher type '${cipherType}'. Must be ${allowed}`), "ERR_INVALID_CIPHER_TYPE");
    }
    if (!hash) throw errcode(new Error("missing hash type"), "ERR_MISSING_HASH_TYPE");
    const cipherKeySize = cipher.keySize;
    const ivSize = cipher.ivSize;
    const hmacKeySize = 20;
    const seed = uint8ArrayFromString("key expansion");
    const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize);
    const m = await hmac.create(hash, secret);
    let a = await m.digest(seed);
    const result = [];
    let j = 0;
    while(j < resultLength){
        const b = await m.digest(uint8ArrayConcat([
            a,
            seed
        ]));
        let todo = b.length;
        if (j + todo > resultLength) todo = resultLength - j;
        result.push(b);
        j += todo;
        a = await m.digest(a);
    }
    const half = resultLength / 2;
    const resultBuffer = uint8ArrayConcat(result);
    const r1 = resultBuffer.slice(0, half);
    const r2 = resultBuffer.slice(half, resultLength);
    const createKey = (res)=>({
            iv: res.slice(0, ivSize),
            cipherKey: res.slice(ivSize, ivSize + cipherKeySize),
            macKey: res.slice(ivSize + cipherKeySize)
        });
    return {
        k1: createKey(r1),
        k2: createKey(r2)
    };
};

},{"err-code":"dUrrM","uint8arrays/concat":"gqJ9u","uint8arrays/from-string":"7qjkp","../hmac":"bhfI3"}],"bhfI3":[function(require,module,exports) {
"use strict";
const webcrypto = require("../webcrypto");
const lengths = require("./lengths");
const hashTypes = {
    SHA1: "SHA-1",
    SHA256: "SHA-256",
    SHA512: "SHA-512"
};
const sign = async (key, data)=>{
    const buf = await webcrypto.get().subtle.sign({
        name: "HMAC"
    }, key, data);
    return new Uint8Array(buf, buf.byteOffset, buf.byteLength);
};
exports.create = async function(hashType, secret) {
    const hash = hashTypes[hashType];
    const key = await webcrypto.get().subtle.importKey("raw", secret, {
        name: "HMAC",
        hash: {
            name: hash
        }
    }, false, [
        "sign"
    ]);
    return {
        async digest (data) {
            return sign(key, data);
        },
        length: lengths[hashType]
    };
};

},{"../webcrypto":"atXO3","./lengths":"hMAjU"}],"hMAjU":[function(require,module,exports) {
"use strict";
module.exports = {
    SHA1: 20,
    SHA256: 32,
    SHA512: 64
};

},{}],"99rTS":[function(require,module,exports) {
"use strict";
const ecdh = require("./ecdh");
// Generates an ephemeral public key and returns a function that will compute
// the shared secret key.
//
// Focuses only on ECDH now, but can be made more general in the future.
module.exports = async (curve)=>ecdh.generateEphmeralKeyPair(curve) // eslint-disable-line require-await
;

},{"./ecdh":"baeB6"}],"baeB6":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const webcrypto = require("../webcrypto");
const { base64urlToBuffer  } = require("../util");
const validateCurveType = require("./validate-curve-type");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const bits = {
    "P-256": 256,
    "P-384": 384,
    "P-521": 521
};
exports.generateEphmeralKeyPair = async function(curve) {
    validateCurveType(Object.keys(bits), curve);
    const pair = await webcrypto.get().subtle.generateKey({
        name: "ECDH",
        namedCurve: curve
    }, true, [
        "deriveBits"
    ]);
    // forcePrivate is used for testing only
    const genSharedKey = async (theirPub, forcePrivate)=>{
        let privateKey;
        if (forcePrivate) privateKey = await webcrypto.get().subtle.importKey("jwk", unmarshalPrivateKey(curve, forcePrivate), {
            name: "ECDH",
            namedCurve: curve
        }, false, [
            "deriveBits"
        ]);
        else privateKey = pair.privateKey;
        const keys = [
            await webcrypto.get().subtle.importKey("jwk", unmarshalPublicKey(curve, theirPub), {
                name: "ECDH",
                namedCurve: curve
            }, false, []),
            privateKey
        ];
        const buffer = await webcrypto.get().subtle.deriveBits({
            name: "ECDH",
            namedCurve: curve,
            public: keys[0]
        }, keys[1], bits[curve]);
        return new Uint8Array(buffer, buffer.byteOffset, buffer.byteLength);
    };
    const publicKey = await webcrypto.get().subtle.exportKey("jwk", pair.publicKey);
    return {
        key: marshalPublicKey(publicKey),
        genSharedKey
    };
};
const curveLengths = {
    "P-256": 32,
    "P-384": 48,
    "P-521": 66
};
// Marshal converts a jwk encodec ECDH public key into the
// form specified in section 4.3.6 of ANSI X9.62. (This is the format
// go-ipfs uses)
function marshalPublicKey(jwk) {
    const byteLen = curveLengths[jwk.crv];
    return uint8ArrayConcat([
        Uint8Array.from([
            4
        ]),
        base64urlToBuffer(jwk.x, byteLen),
        base64urlToBuffer(jwk.y, byteLen)
    ], 1 + byteLen * 2);
}
// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key
function unmarshalPublicKey(curve, key) {
    const byteLen = curveLengths[curve];
    if (uint8ArrayEquals(!key.slice(0, 1), Uint8Array.from([
        4
    ]))) throw errcode(new Error("Cannot unmarshal public key - invalid key format"), "ERR_INVALID_KEY_FORMAT");
    return {
        kty: "EC",
        crv: curve,
        x: uint8ArrayToString(key.slice(1, byteLen + 1), "base64url"),
        y: uint8ArrayToString(key.slice(1 + byteLen), "base64url"),
        ext: true
    };
}
const unmarshalPrivateKey = (curve, key)=>({
        ...unmarshalPublicKey(curve, key.public),
        d: uint8ArrayToString(key.private, "base64url")
    });

},{"err-code":"dUrrM","../webcrypto":"atXO3","../util":"YKjR6","./validate-curve-type":"kekU5","uint8arrays/to-string":"w8mvE","uint8arrays/concat":"gqJ9u","uint8arrays/equals":"iZMnE"}],"kekU5":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
module.exports = function(curveTypes, type) {
    if (!curveTypes.includes(type)) {
        const names = curveTypes.join(" / ");
        throw errcode(new Error(`Unknown curve: ${type}. Must be ${names}`), "ERR_INVALID_CURVE");
    }
};

},{"err-code":"dUrrM"}],"50lkq":[function(require,module,exports) {
"use strict";
function withIs(Class, { className , symbolName  }) {
    const symbol = Symbol.for(symbolName);
    const ClassIsWrapper = {
        // The code below assigns the class wrapper to an object to trick
        // JavaScript engines to show the name of the extended class when
        // logging an instances.
        // We are assigning an anonymous class (class wrapper) to the object
        // with key `className` to keep the correct name.
        // If this is not supported it falls back to logging `ClassIsWrapper`.
        [className]: class extends Class {
            constructor(...args){
                super(...args);
                Object.defineProperty(this, symbol, {
                    value: true
                });
            }
            get [Symbol.toStringTag]() {
                return className;
            }
        }
    }[className];
    ClassIsWrapper[`is${className}`] = (obj)=>!!(obj && obj[symbol]);
    return ClassIsWrapper;
}
function withIsProto(Class, { className , symbolName , withoutNew  }) {
    const symbol = Symbol.for(symbolName);
    /* eslint-disable object-shorthand */ const ClassIsWrapper = {
        [className]: function(...args) {
            if (withoutNew && !(this instanceof ClassIsWrapper)) return new ClassIsWrapper(...args);
            const _this = Class.call(this, ...args) || this;
            if (_this && !_this[symbol]) Object.defineProperty(_this, symbol, {
                value: true
            });
            return _this;
        }
    }[className];
    /* eslint-enable object-shorthand */ ClassIsWrapper.prototype = Object.create(Class.prototype);
    ClassIsWrapper.prototype.constructor = ClassIsWrapper;
    Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {
        get () {
            return className;
        }
    });
    ClassIsWrapper[`is${className}`] = (obj)=>!!(obj && obj[symbol]);
    return ClassIsWrapper;
}
module.exports = withIs;
module.exports.proto = withIsProto;

},{}],"cvXS0":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-peer-id"] || ($protobuf.roots["libp2p-peer-id"] = {});
$root.PeerIdProto = function() {
    /**
     * Properties of a PeerIdProto.
     * @exports IPeerIdProto
     * @interface IPeerIdProto
     * @property {Uint8Array} id PeerIdProto id
     * @property {Uint8Array|null} [pubKey] PeerIdProto pubKey
     * @property {Uint8Array|null} [privKey] PeerIdProto privKey
     */ /**
     * Constructs a new PeerIdProto.
     * @exports PeerIdProto
     * @classdesc Represents a PeerIdProto.
     * @implements IPeerIdProto
     * @constructor
     * @param {IPeerIdProto=} [p] Properties to set
     */ function PeerIdProto(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * PeerIdProto id.
     * @member {Uint8Array} id
     * @memberof PeerIdProto
     * @instance
     */ PeerIdProto.prototype.id = $util.newBuffer([]);
    /**
     * PeerIdProto pubKey.
     * @member {Uint8Array} pubKey
     * @memberof PeerIdProto
     * @instance
     */ PeerIdProto.prototype.pubKey = $util.newBuffer([]);
    /**
     * PeerIdProto privKey.
     * @member {Uint8Array} privKey
     * @memberof PeerIdProto
     * @instance
     */ PeerIdProto.prototype.privKey = $util.newBuffer([]);
    /**
     * Encodes the specified PeerIdProto message. Does not implicitly {@link PeerIdProto.verify|verify} messages.
     * @function encode
     * @memberof PeerIdProto
     * @static
     * @param {IPeerIdProto} m PeerIdProto message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ PeerIdProto.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        w.uint32(10).bytes(m.id);
        if (m.pubKey != null && Object.hasOwnProperty.call(m, "pubKey")) w.uint32(18).bytes(m.pubKey);
        if (m.privKey != null && Object.hasOwnProperty.call(m, "privKey")) w.uint32(26).bytes(m.privKey);
        return w;
    };
    /**
     * Decodes a PeerIdProto message from the specified reader or buffer.
     * @function decode
     * @memberof PeerIdProto
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {PeerIdProto} PeerIdProto
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ PeerIdProto.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerIdProto();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.id = r.bytes();
                    break;
                case 2:
                    m.pubKey = r.bytes();
                    break;
                case 3:
                    m.privKey = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        if (!m.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
            instance: m
        });
        return m;
    };
    /**
     * Creates a PeerIdProto message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PeerIdProto
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {PeerIdProto} PeerIdProto
     */ PeerIdProto.fromObject = function fromObject(d) {
        if (d instanceof $root.PeerIdProto) return d;
        var m = new $root.PeerIdProto();
        if (d.id != null) {
            if (typeof d.id === "string") $util.base64.decode(d.id, m.id = $util.newBuffer($util.base64.length(d.id)), 0);
            else if (d.id.length) m.id = d.id;
        }
        if (d.pubKey != null) {
            if (typeof d.pubKey === "string") $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);
            else if (d.pubKey.length) m.pubKey = d.pubKey;
        }
        if (d.privKey != null) {
            if (typeof d.privKey === "string") $util.base64.decode(d.privKey, m.privKey = $util.newBuffer($util.base64.length(d.privKey)), 0);
            else if (d.privKey.length) m.privKey = d.privKey;
        }
        return m;
    };
    /**
     * Creates a plain object from a PeerIdProto message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PeerIdProto
     * @static
     * @param {PeerIdProto} m PeerIdProto
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ PeerIdProto.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            if (o.bytes === String) d.id = "";
            else {
                d.id = [];
                if (o.bytes !== Array) d.id = $util.newBuffer(d.id);
            }
            if (o.bytes === String) d.pubKey = "";
            else {
                d.pubKey = [];
                if (o.bytes !== Array) d.pubKey = $util.newBuffer(d.pubKey);
            }
            if (o.bytes === String) d.privKey = "";
            else {
                d.privKey = [];
                if (o.bytes !== Array) d.privKey = $util.newBuffer(d.privKey);
            }
        }
        if (m.id != null && m.hasOwnProperty("id")) d.id = o.bytes === String ? $util.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;
        if (m.pubKey != null && m.hasOwnProperty("pubKey")) d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;
        if (m.privKey != null && m.hasOwnProperty("privKey")) d.privKey = o.bytes === String ? $util.base64.encode(m.privKey, 0, m.privKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.privKey) : m.privKey;
        return d;
    };
    /**
     * Converts this PeerIdProto to JSON.
     * @function toJSON
     * @memberof PeerIdProto
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ PeerIdProto.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PeerIdProto;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"2j2Zi":[function(require,module,exports) {
"use strict";
class TimeoutError extends Error {
    constructor(message){
        super(message);
        this.name = "TimeoutError";
    }
}
const pTimeout = (promise, milliseconds, fallback, options)=>{
    let timer;
    const cancelablePromise = new Promise((resolve, reject)=>{
        if (typeof milliseconds !== "number" || milliseconds < 0) throw new TypeError("Expected `milliseconds` to be a positive number");
        if (milliseconds === Infinity) {
            resolve(promise);
            return;
        }
        options = {
            customTimers: {
                setTimeout,
                clearTimeout
            },
            ...options
        };
        timer = options.customTimers.setTimeout.call(undefined, ()=>{
            if (typeof fallback === "function") {
                try {
                    resolve(fallback());
                } catch (error) {
                    reject(error);
                }
                return;
            }
            const message = typeof fallback === "string" ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
            const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);
            if (typeof promise.cancel === "function") promise.cancel();
            reject(timeoutError);
        }, milliseconds);
        (async ()=>{
            try {
                resolve(await promise);
            } catch (error) {
                reject(error);
            } finally{
                options.customTimers.clearTimeout.call(undefined, timer);
            }
        })();
    });
    cancelablePromise.clear = ()=>{
        clearTimeout(timer);
        timer = undefined;
    };
    return cancelablePromise;
};
module.exports = pTimeout;
// TODO: Remove this for the next major release
module.exports.default = pTimeout;
module.exports.TimeoutError = TimeoutError;

},{}],"ghCGZ":[function(require,module,exports) {
"use strict";
// MaxRecordAge specifies the maximum time that any node will hold onto a record
// from the time its received. This does not apply to any other forms of validity that
// the record may contain.
// For example, a record may contain an ipns entry with an EOL saying its valid
// until the year 2020 (a great time in the future). For that record to stick around
// it must be rebroadcasted more frequently than once every 'MaxRecordAge'
const second = exports.second = 1000;
const minute = exports.minute = 60 * second;
const hour = exports.hour = 60 * minute;
exports.MAX_RECORD_AGE = 36 * hour;
exports.PROTOCOL_DHT = "/kad/1.0.0";
exports.PROVIDERS_KEY_PREFIX = "/providers/";
exports.PROVIDERS_LRU_CACHE_SIZE = 256;
exports.PROVIDERS_VALIDITY = 24 * hour;
exports.PROVIDERS_CLEANUP_INTERVAL = hour;
exports.READ_MESSAGE_TIMEOUT = 10 * second;
// The number of records that will be retrieved on a call to getMany()
exports.GET_MANY_RECORD_COUNT = 16;
// K is the maximum number of requests to perform before returning failure
exports.K = 20;
// Alpha is the concurrency for asynchronous requests
exports.ALPHA = 3;
exports.defaultRandomWalk = {
    enabled: true,
    queriesPerPeriod: 1,
    interval: 5 * minute,
    timeout: 10 * second,
    delay: 10 * second
};

},{}],"dkOsM":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const { pipe  } = require("it-pipe");
const lp = require("it-length-prefixed");
const pTimeout = require("p-timeout");
const { consume  } = require("streaming-iterables");
const first = require("it-first");
const MulticodecTopology = require("libp2p-interfaces/src/topology/multicodec-topology");
const rpc = require("./rpc");
const c = require("./constants");
const Message = require("./message");
const utils = require("./utils");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 */ /**
 * Handle network operations for the dht
 */ class Network {
    /**
   * Create a new network
   *
   * @param {import('./index')} dht
   */ constructor(dht){
        this.dht = dht;
        this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT;
        this._log = utils.logger(this.dht.peerId, "net");
        this._rpc = rpc(this.dht);
        this._onPeerConnected = this._onPeerConnected.bind(this);
        this._running = false;
    }
    /**
   * Start the network
   */ start() {
        if (this._running) return;
        if (!this.dht.isStarted) throw errcode(new Error("Can not start network"), "ERR_CANNOT_START_NETWORK");
        this._running = true;
        // Only respond to queries when not in client mode
        if (this.dht._clientMode === false) // Incoming streams
        this.dht.registrar.handle(this.dht.protocol, this._rpc);
        // register protocol with topology
        const topology = new MulticodecTopology({
            multicodecs: [
                this.dht.protocol
            ],
            handlers: {
                onConnect: this._onPeerConnected,
                onDisconnect: ()=>{}
            }
        });
        this._registrarId = this.dht.registrar.register(topology);
    }
    /**
   * Stop all network activity
   */ stop() {
        if (!this.dht.isStarted && !this.isStarted) return;
        this._running = false;
        // unregister protocol and handlers
        if (this._registrarId) this.dht.registrar.unregister(this._registrarId);
    }
    /**
   * Is the network online?
   *
   * @type {boolean}
   */ get isStarted() {
        return this._running;
    }
    /**
   * Are all network components there?
   *
   * @type {boolean}
   */ get isConnected() {
        // TODO add a way to check if switch has started or not
        return this.dht.isStarted && this.isStarted;
    }
    /**
   * Registrar notifies a connection successfully with dht protocol.
   *
   * @param {PeerId} peerId - remote peer id
   */ async _onPeerConnected(peerId) {
        await this.dht._add(peerId);
        this._log("added to the routing table: %s", peerId.toB58String());
    }
    /**
   * Send a request and record RTT for latency measurements.
   *
   * @async
   * @param {PeerId} to - The peer that should receive a message
   * @param {Message} msg - The message to send.
   */ async sendRequest(to, msg) {
        // TODO: record latency
        if (!this.isConnected) throw errcode(new Error("Network is offline"), "ERR_NETWORK_OFFLINE");
        const id = to.toB58String();
        this._log("sending to: %s", id);
        let conn = this.dht.registrar.connectionManager.get(to);
        if (!conn) conn = await this.dht.dialer.connectToPeer(to);
        const { stream  } = await conn.newStream(this.dht.protocol);
        return this._writeReadMessage(stream, msg.serialize());
    }
    /**
   * Sends a message without expecting an answer.
   *
   * @param {PeerId} to
   * @param {Message} msg
   */ async sendMessage(to, msg) {
        if (!this.isConnected) throw errcode(new Error("Network is offline"), "ERR_NETWORK_OFFLINE");
        const id = to.toB58String();
        this._log("sending to: %s", id);
        let conn = this.dht.registrar.connectionManager.get(to);
        if (!conn) conn = await this.dht.dialer.connectToPeer(to);
        const { stream  } = await conn.newStream(this.dht.protocol);
        return this._writeMessage(stream, msg.serialize());
    }
    /**
   * Write a message and read its response.
   * If no response is received after the specified timeout
   * this will error out.
   *
   * @param {MuxedStream} stream - the stream to use
   * @param {Uint8Array} msg - the message to send
   */ async _writeReadMessage(stream, msg) {
        return pTimeout(writeReadMessage(stream, msg), this.readMessageTimeout);
    }
    /**
   * Write a message to the given stream.
   *
   * @param {MuxedStream} stream - the stream to use
   * @param {Uint8Array} msg - the message to send
   */ _writeMessage(stream, msg) {
        return pipe([
            msg
        ], lp.encode(), stream, consume);
    }
}
/**
 * @param {MuxedStream} stream
 * @param {Uint8Array} msg
 */ async function writeReadMessage(stream, msg) {
    const res = await pipe([
        msg
    ], lp.encode(), stream, lp.decode(), /**
     * @param {AsyncIterable<Uint8Array>} source
     */ async (source)=>{
        const buf = await first(source);
        if (buf) return buf.slice();
    });
    if (res.length === 0) throw errcode(new Error("No message received"), "ERR_NO_MESSAGE_RECEIVED");
    return Message.deserialize(res);
}
module.exports = Network;

},{"err-code":"dUrrM","it-pipe":"jkWle","it-length-prefixed":"31lGp","p-timeout":"2j2Zi","streaming-iterables":"lbfQq","it-first":"kZCg9","libp2p-interfaces/src/topology/multicodec-topology":"6i7EG","./rpc":"apBen","./constants":"ghCGZ","./message":"6c5Nm","./utils":"1wrtw"}],"jkWle":[function(require,module,exports) {
const rawPipe = (...fns)=>{
    let res;
    while(fns.length)res = fns.shift()(res);
    return res;
};
const isIterable = (obj)=>obj && (typeof obj[Symbol.asyncIterator] === "function" || typeof obj[Symbol.iterator] === "function" || typeof obj.next === "function" // Probably, right?
    );
const isDuplex = (obj)=>obj && typeof obj.sink === "function" && isIterable(obj.source);
const duplexPipelineFn = (duplex)=>(source)=>{
        duplex.sink(source) // TODO: error on sink side is unhandled rejection - this is the same as pull streams
        ;
        return duplex.source;
    };
const pipe = (...fns)=>{
    // Duplex at start: wrap in function and return duplex source
    if (isDuplex(fns[0])) {
        const duplex = fns[0];
        fns[0] = ()=>duplex.source;
    // Iterable at start: wrap in function
    } else if (isIterable(fns[0])) {
        const source = fns[0];
        fns[0] = ()=>source;
    }
    if (fns.length > 1) // Duplex at end: use duplex sink
    {
        if (isDuplex(fns[fns.length - 1])) fns[fns.length - 1] = fns[fns.length - 1].sink;
    }
    if (fns.length > 2) {
        // Duplex in the middle, consume source with duplex sink and return duplex source
        for(let i = 1; i < fns.length - 1; i++)if (isDuplex(fns[i])) fns[i] = duplexPipelineFn(fns[i]);
    }
    return rawPipe(...fns);
};
module.exports = pipe;
module.exports.pipe = pipe;
module.exports.rawPipe = rawPipe;
module.exports.isIterable = isIterable;
module.exports.isDuplex = isDuplex;

},{}],"31lGp":[function(require,module,exports) {
"use strict";
/**
 * @typedef {import('./types').EncoderOptions} EncoderOptions
 * @typedef {import('./types').DecoderOptions} DecoderOptions
 */ exports.encode = require("./encode");
exports.decode = require("./decode");
exports.varintEncode = require("./varint-encode");
exports.varintDecode = require("./varint-decode");
exports.int32BEEncode = require("./int32BE-encode");
exports.int32BEDecode = require("./int32BE-decode");

},{"./encode":"hPFoL","./decode":"7V2Ck","./varint-encode":"fAyQ1","./varint-decode":"90zdq","./int32BE-encode":"lB3B7","./int32BE-decode":"5OPC4"}],"hPFoL":[function(require,module,exports) {
"use strict";
const { Buffer  } = require("buffer");
// @ts-ignore
const BufferList = require("bl/BufferList");
const varintEncode = require("./varint-encode");
const MIN_POOL_SIZE = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length
;
const DEFAULT_POOL_SIZE = 10240;
/**
 * @param {import('./types').EncoderOptions} [options]
 */ function encode(options) {
    options = options || {};
    const poolSize = Math.max(options.poolSize || DEFAULT_POOL_SIZE, options.minPoolSize || MIN_POOL_SIZE);
    const encodeLength = options.lengthEncoder || varintEncode;
    /**
   * @param {AsyncIterable<BufferList>} source
   */ const encoder = async function*(source) {
        let pool = Buffer.alloc(poolSize);
        let poolOffset = 0;
        for await (const chunk of source){
            encodeLength(chunk.length, pool, poolOffset);
            const encodedLength = pool.slice(poolOffset, poolOffset + encodeLength.bytes);
            poolOffset += encodeLength.bytes;
            if (pool.length - poolOffset < MIN_POOL_SIZE) {
                pool = Buffer.alloc(poolSize);
                poolOffset = 0;
            }
            yield new BufferList().append(encodedLength).append(chunk);
        // yield Buffer.concat([encodedLength, chunk])
        }
    };
    return encoder;
}
/**
 * @param {BufferList | Buffer} chunk
 * @param {import('./types').EncoderOptions} [options]
 */ encode.single = (chunk, options)=>{
    options = options || {};
    const encodeLength = options.lengthEncoder || varintEncode;
    return new BufferList([
        encodeLength(chunk.length),
        chunk.slice()
    ]);
};
module.exports = encode;
module.exports.MIN_POOL_SIZE = MIN_POOL_SIZE;
module.exports.DEFAULT_POOL_SIZE = DEFAULT_POOL_SIZE;

},{"buffer":"fCgem","bl/BufferList":"cf0Az","./varint-encode":"fAyQ1"}],"cf0Az":[function(require,module,exports) {
"use strict";
const { Buffer  } = require("buffer");
const symbol = Symbol.for("BufferList");
function BufferList(buf) {
    if (!(this instanceof BufferList)) return new BufferList(buf);
    BufferList._init.call(this, buf);
}
BufferList._init = function _init(buf) {
    Object.defineProperty(this, symbol, {
        value: true
    });
    this._bufs = [];
    this.length = 0;
    if (buf) this.append(buf);
};
BufferList.prototype._new = function _new(buf) {
    return new BufferList(buf);
};
BufferList.prototype._offset = function _offset(offset) {
    if (offset === 0) return [
        0,
        0
    ];
    let tot = 0;
    for(let i = 0; i < this._bufs.length; i++){
        const _t = tot + this._bufs[i].length;
        if (offset < _t || i === this._bufs.length - 1) return [
            i,
            offset - tot
        ];
        tot = _t;
    }
};
BufferList.prototype._reverseOffset = function(blOffset) {
    const bufferId = blOffset[0];
    let offset = blOffset[1];
    for(let i = 0; i < bufferId; i++)offset += this._bufs[i].length;
    return offset;
};
BufferList.prototype.get = function get(index) {
    if (index > this.length || index < 0) return undefined;
    const offset = this._offset(index);
    return this._bufs[offset[0]][offset[1]];
};
BufferList.prototype.slice = function slice(start, end) {
    if (typeof start === "number" && start < 0) start += this.length;
    if (typeof end === "number" && end < 0) end += this.length;
    return this.copy(null, 0, start, end);
};
BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
    if (typeof srcStart !== "number" || srcStart < 0) srcStart = 0;
    if (typeof srcEnd !== "number" || srcEnd > this.length) srcEnd = this.length;
    if (srcStart >= this.length) return dst || Buffer.alloc(0);
    if (srcEnd <= 0) return dst || Buffer.alloc(0);
    const copy = !!dst;
    const off = this._offset(srcStart);
    const len = srcEnd - srcStart;
    let bytes = len;
    let bufoff = copy && dstStart || 0;
    let start = off[1];
    // copy/slice everything
    if (srcStart === 0 && srcEnd === this.length) {
        if (!copy) // slice, but full concat if multiple buffers
        return this._bufs.length === 1 ? this._bufs[0] : Buffer.concat(this._bufs, this.length);
        // copy, need to copy individual buffers
        for(let i = 0; i < this._bufs.length; i++){
            this._bufs[i].copy(dst, bufoff);
            bufoff += this._bufs[i].length;
        }
        return dst;
    }
    // easy, cheap case where it's a subset of one of the buffers
    if (bytes <= this._bufs[off[0]].length - start) return copy ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
    if (!copy) // a slice, we need something to copy in to
    dst = Buffer.allocUnsafe(len);
    for(let i = off[0]; i < this._bufs.length; i++){
        const l = this._bufs[i].length - start;
        if (bytes > l) {
            this._bufs[i].copy(dst, bufoff, start);
            bufoff += l;
        } else {
            this._bufs[i].copy(dst, bufoff, start, start + bytes);
            bufoff += l;
            break;
        }
        bytes -= l;
        if (start) start = 0;
    }
    // safeguard so that we don't return uninitialized memory
    if (dst.length > bufoff) return dst.slice(0, bufoff);
    return dst;
};
BufferList.prototype.shallowSlice = function shallowSlice(start, end) {
    start = start || 0;
    end = typeof end !== "number" ? this.length : end;
    if (start < 0) start += this.length;
    if (end < 0) end += this.length;
    if (start === end) return this._new();
    const startOffset = this._offset(start);
    const endOffset = this._offset(end);
    const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);
    if (endOffset[1] === 0) buffers.pop();
    else buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
    if (startOffset[1] !== 0) buffers[0] = buffers[0].slice(startOffset[1]);
    return this._new(buffers);
};
BufferList.prototype.toString = function toString(encoding, start, end) {
    return this.slice(start, end).toString(encoding);
};
BufferList.prototype.consume = function consume(bytes) {
    // first, normalize the argument, in accordance with how Buffer does it
    bytes = Math.trunc(bytes);
    // do nothing if not a positive number
    if (Number.isNaN(bytes) || bytes <= 0) return this;
    while(this._bufs.length)if (bytes >= this._bufs[0].length) {
        bytes -= this._bufs[0].length;
        this.length -= this._bufs[0].length;
        this._bufs.shift();
    } else {
        this._bufs[0] = this._bufs[0].slice(bytes);
        this.length -= bytes;
        break;
    }
    return this;
};
BufferList.prototype.duplicate = function duplicate() {
    const copy = this._new();
    for(let i = 0; i < this._bufs.length; i++)copy.append(this._bufs[i]);
    return copy;
};
BufferList.prototype.append = function append(buf) {
    if (buf == null) return this;
    if (buf.buffer) // append a view of the underlying ArrayBuffer
    this._appendBuffer(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength));
    else if (Array.isArray(buf)) for(let i = 0; i < buf.length; i++)this.append(buf[i]);
    else if (this._isBufferList(buf)) // unwrap argument into individual BufferLists
    for(let i1 = 0; i1 < buf._bufs.length; i1++)this.append(buf._bufs[i1]);
    else {
        // coerce number arguments to strings, since Buffer(number) does
        // uninitialized memory allocation
        if (typeof buf === "number") buf = buf.toString();
        this._appendBuffer(Buffer.from(buf));
    }
    return this;
};
BufferList.prototype._appendBuffer = function appendBuffer(buf) {
    this._bufs.push(buf);
    this.length += buf.length;
};
BufferList.prototype.indexOf = function(search, offset, encoding) {
    if (encoding === undefined && typeof offset === "string") {
        encoding = offset;
        offset = undefined;
    }
    if (typeof search === "function" || Array.isArray(search)) throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
    else if (typeof search === "number") search = Buffer.from([
        search
    ]);
    else if (typeof search === "string") search = Buffer.from(search, encoding);
    else if (this._isBufferList(search)) search = search.slice();
    else if (Array.isArray(search.buffer)) search = Buffer.from(search.buffer, search.byteOffset, search.byteLength);
    else if (!Buffer.isBuffer(search)) search = Buffer.from(search);
    offset = Number(offset || 0);
    if (isNaN(offset)) offset = 0;
    if (offset < 0) offset = this.length + offset;
    if (offset < 0) offset = 0;
    if (search.length === 0) return offset > this.length ? this.length : offset;
    const blOffset = this._offset(offset);
    let blIndex = blOffset[0] // index of which internal buffer we're working on
    ;
    let buffOffset = blOffset[1] // offset of the internal buffer we're working on
    ;
    // scan over each buffer
    for(; blIndex < this._bufs.length; blIndex++){
        const buff = this._bufs[blIndex];
        while(buffOffset < buff.length){
            const availableWindow = buff.length - buffOffset;
            if (availableWindow >= search.length) {
                const nativeSearchResult = buff.indexOf(search, buffOffset);
                if (nativeSearchResult !== -1) return this._reverseOffset([
                    blIndex,
                    nativeSearchResult
                ]);
                buffOffset = buff.length - search.length + 1 // end of native search window
                ;
            } else {
                const revOffset = this._reverseOffset([
                    blIndex,
                    buffOffset
                ]);
                if (this._match(revOffset, search)) return revOffset;
                buffOffset++;
            }
        }
        buffOffset = 0;
    }
    return -1;
};
BufferList.prototype._match = function(offset, search) {
    if (this.length - offset < search.length) return false;
    for(let searchOffset = 0; searchOffset < search.length; searchOffset++){
        if (this.get(offset + searchOffset) !== search[searchOffset]) return false;
    }
    return true;
};
(function() {
    const methods = {
        readDoubleBE: 8,
        readDoubleLE: 8,
        readFloatBE: 4,
        readFloatLE: 4,
        readInt32BE: 4,
        readInt32LE: 4,
        readUInt32BE: 4,
        readUInt32LE: 4,
        readInt16BE: 2,
        readInt16LE: 2,
        readUInt16BE: 2,
        readUInt16LE: 2,
        readInt8: 1,
        readUInt8: 1,
        readIntBE: null,
        readIntLE: null,
        readUIntBE: null,
        readUIntLE: null
    };
    for(const m1 in methods)(function(m) {
        if (methods[m] === null) BufferList.prototype[m] = function(offset, byteLength) {
            return this.slice(offset, offset + byteLength)[m](0, byteLength);
        };
        else BufferList.prototype[m] = function(offset = 0) {
            return this.slice(offset, offset + methods[m])[m](0);
        };
    })(m1);
})();
// Used internally by the class and also as an indicator of this object being
// a `BufferList`. It's not possible to use `instanceof BufferList` in a browser
// environment because there could be multiple different copies of the
// BufferList class and some `BufferList`s might be `BufferList`s.
BufferList.prototype._isBufferList = function _isBufferList(b) {
    return b instanceof BufferList || BufferList.isBufferList(b);
};
BufferList.isBufferList = function isBufferList(b) {
    return b != null && b[symbol];
};
module.exports = BufferList;

},{"buffer":"fCgem"}],"fAyQ1":[function(require,module,exports) {
"use strict";
// @ts-ignore no types
const Varint = require("varint");
const { Buffer  } = require("buffer");
/**
 * Encode the passed length `value` to the `target` buffer at the given `offset`
 *
 * @type {import('./types').LengthEncoderFunction}
 */ // @ts-ignore cannot declare expected bytes property
const varintEncode = (value, target, offset)=>{
    const ret = Varint.encode(value, target, offset);
    varintEncode.bytes = Varint.encode.bytes;
    // If no target, create Buffer from returned array
    return target || Buffer.from(ret);
};
module.exports = varintEncode;

},{"varint":"9fMsR","buffer":"fCgem"}],"9fMsR":[function(require,module,exports) {
module.exports = {
    encode: require("./encode.js"),
    decode: require("./decode.js"),
    encodingLength: require("./length.js")
};

},{"./encode.js":"1xAzz","./decode.js":"10NGY","./length.js":"8TRjB"}],"1xAzz":[function(require,module,exports) {
module.exports = encode;
var MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);
function encode(num, out, offset) {
    if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
        encode.bytes = 0;
        throw new RangeError("Could not encode varint");
    }
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT){
        out[offset++] = num & 0xFF | MSB;
        num /= 128;
    }
    while(num & MSBALL){
        out[offset++] = num & 0xFF | MSB;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode.bytes = offset - oldOffset + 1;
    return out;
}

},{}],"10NGY":[function(require,module,exports) {
module.exports = read;
var MSB = 0x80, REST = 0x7F;
function read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l || shift > 49) {
            read.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST) << shift : (b & REST) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB);
    read.bytes = counter - offset;
    return res;
}

},{}],"8TRjB":[function(require,module,exports) {
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
module.exports = function(value) {
    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};

},{}],"7V2Ck":[function(require,module,exports) {
"use strict";
const { Buffer  } = require("buffer");
// @ts-ignore
const BufferList = require("bl/BufferList");
const varintDecode = require("./varint-decode");
// Maximum length of the length section of the message
const MAX_LENGTH_LENGTH = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length
;
// Maximum length of the data section of the message
const MAX_DATA_LENGTH = 4194304;
const Empty = Buffer.alloc(0);
const ReadModes = {
    LENGTH: "readLength",
    DATA: "readData"
};
const ReadHandlers = {
    /**
   * @param {BufferList} chunk
   * @param {BufferList} buffer
   * @param {import('./types').ReadState | undefined} state
   * @param {import('./types').DecoderOptions} options
   * @returns {import('./types').ReadResult}
   */ [ReadModes.LENGTH]: (chunk, buffer, state, options)=>{
        // console.log(ReadModes.LENGTH, chunk.length)
        buffer = buffer.append(chunk);
        let dataLength;
        try {
            dataLength = options.lengthDecoder(buffer);
        } catch (err) {
            if (buffer.length > options.maxLengthLength) throw Object.assign(err, {
                message: "message length too long",
                code: "ERR_MSG_LENGTH_TOO_LONG"
            });
            if (err instanceof RangeError) return {
                mode: ReadModes.LENGTH,
                buffer,
                chunk: undefined,
                state: undefined,
                data: undefined
            };
            throw err;
        }
        if (dataLength > options.maxDataLength) throw Object.assign(new Error("message data too long"), {
            code: "ERR_MSG_DATA_TOO_LONG"
        });
        chunk = buffer.shallowSlice(options.lengthDecoder.bytes);
        buffer = new BufferList();
        if (options.onLength) options.onLength(dataLength);
        if (dataLength <= 0) {
            if (options.onData) options.onData(Empty);
            return {
                mode: ReadModes.LENGTH,
                chunk,
                buffer,
                data: Empty
            };
        }
        return {
            mode: ReadModes.DATA,
            chunk,
            buffer,
            state: {
                dataLength
            },
            data: undefined
        };
    },
    /**
   * @param {BufferList} chunk
   * @param {BufferList} buffer
   * @param {import('./types').ReadState | undefined} state
   * @param {import('./types').DecoderOptions} options
   * @returns {import('./types').ReadResult}
   */ [ReadModes.DATA]: (chunk, buffer, state, options)=>{
        // console.log(ReadModes.DATA, chunk.length)
        buffer = buffer.append(chunk);
        if (!state) throw new Error("state is required");
        if (buffer.length < state.dataLength) return {
            mode: ReadModes.DATA,
            buffer,
            state,
            chunk: undefined,
            data: undefined
        };
        const { dataLength  } = state;
        const data = buffer.shallowSlice(0, dataLength);
        const nextChunk = buffer.length > dataLength ? buffer.shallowSlice(dataLength) : undefined;
        buffer = new BufferList();
        if (options.onData) options.onData(data);
        return {
            mode: ReadModes.LENGTH,
            chunk: nextChunk,
            buffer,
            state: undefined,
            data
        };
    }
};
/**
 * @param {any} [options]
 */ function decode(options) {
    options = options || {};
    /**
   * @type {import('./types').DecoderOptions}
   */ const opts = {
        lengthDecoder: options.lengthDecoder || varintDecode,
        maxLengthLength: options.maxLengthLength || MAX_LENGTH_LENGTH,
        maxDataLength: options.maxDataLength || MAX_DATA_LENGTH,
        onLength: options.onLength,
        onData: options.onData
    };
    /**
   * @param {AsyncIterable<BufferList>} source
   */ const decoder = async function*(source) {
        let buffer = new BufferList();
        let mode = ReadModes.LENGTH // current parsing mode
        ;
        let state // accumulated state for the current mode
        ;
        for await (const chunk of source){
            /** @type {BufferList | undefined} */ let nextChunk = chunk;
            // Each chunk may contain multiple messages - keep calling handler for the
            // current parsing mode until all handlers have consumed the chunk.
            while(nextChunk){
                const result = ReadHandlers[mode](nextChunk, buffer, state, opts);
                mode = result.mode;
                nextChunk = result.chunk;
                buffer = result.buffer;
                state = result.state;
                if (result.data) yield result.data;
            }
        }
        if (buffer.length) throw Object.assign(new Error("unexpected end of input"), {
            code: "ERR_UNEXPECTED_EOF"
        });
    };
    return decoder;
}
/**
 * @param {*} reader
 * @param {import('./types').DecoderOptions} [options]
 * @returns
 */ decode.fromReader = (reader, options)=>{
    let byteLength = 1 // Read single byte chunks until the length is known
    ;
    const varByteSource = {
        [Symbol.asyncIterator] () {
            return this;
        },
        next: async ()=>{
            try {
                return await reader.next(byteLength);
            } catch (err) {
                if (err.code === "ERR_UNDER_READ") return {
                    done: true,
                    value: null
                };
                throw err;
            } finally{
                // Reset the byteLength so we continue to check for varints
                byteLength = 1;
            }
        }
    };
    /**
   * Once the length has been parsed, read chunk for that length
   *
   * @param {number} l
   */ const onLength = (l)=>{
        byteLength = l;
    };
    return decode({
        ...options || {},
        onLength
    })(varByteSource);
};
module.exports = decode;
module.exports.MAX_LENGTH_LENGTH = MAX_LENGTH_LENGTH;
module.exports.MAX_DATA_LENGTH = MAX_DATA_LENGTH;

},{"buffer":"fCgem","bl/BufferList":"cf0Az","./varint-decode":"90zdq"}],"90zdq":[function(require,module,exports) {
"use strict";
// @ts-ignore no types
const Varint = require("varint");
const { Buffer  } = require("buffer");
/**
 * @param {any} bl
 */ const toBufferProxy = (bl)=>new Proxy({}, {
        get: (_, prop)=>{
            // @ts-ignore magic
            return prop[0] === "l" ? bl[prop] : bl.get(parseInt(prop));
        }
    });
/**
 * @type {import('./types').LengthDecoderFunction}
 */ // @ts-ignore cannot declare expected bytes property
const varintDecode = (data)=>{
    const len = Varint.decode(Buffer.isBuffer(data) ? data : toBufferProxy(data));
    varintDecode.bytes = Varint.decode.bytes;
    return len;
};
module.exports = varintDecode;

},{"varint":"9fMsR","buffer":"fCgem"}],"lB3B7":[function(require,module,exports) {
"use strict";
const { Buffer  } = require("buffer");
/**
 * @param {number} value
 * @param {Buffer} target
 * @param {number} offset
 */ const int32BEEncode = (value, target, offset)=>{
    target = target || Buffer.allocUnsafe(4);
    target.writeInt32BE(value, offset);
    return target;
};
int32BEEncode.bytes = 4 // Always because fixed length
;
module.exports = int32BEEncode;

},{"buffer":"fCgem"}],"5OPC4":[function(require,module,exports) {
"use strict";
/**
 * @param {import('buffer').Buffer} data
 */ const int32BEDecode = (data)=>{
    if (data.length < 4) throw RangeError("Could not decode int32BE");
    return data.readInt32BE(0);
};
int32BEDecode.bytes = 4 // Always because fixed length
;
module.exports = int32BEDecode;

},{}],"lbfQq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batch", ()=>batch);
parcelHelpers.export(exports, "batchWithTimeout", ()=>batchWithTimeout);
parcelHelpers.export(exports, "buffer", ()=>buffer);
parcelHelpers.export(exports, "collect", ()=>collect);
parcelHelpers.export(exports, "concat", ()=>concat);
parcelHelpers.export(exports, "consume", ()=>consume);
parcelHelpers.export(exports, "filter", ()=>filter);
parcelHelpers.export(exports, "flatMap", ()=>flatMap);
parcelHelpers.export(exports, "flatTransform", ()=>flatTransform);
parcelHelpers.export(exports, "flatten", ()=>flatten);
parcelHelpers.export(exports, "fromStream", ()=>fromStream);
parcelHelpers.export(exports, "getIterator", ()=>getIterator);
parcelHelpers.export(exports, "map", ()=>map);
parcelHelpers.export(exports, "merge", ()=>merge);
parcelHelpers.export(exports, "parallelFlatMap", ()=>parallelFlatMap);
parcelHelpers.export(exports, "parallelMap", ()=>parallelMap);
parcelHelpers.export(exports, "parallelMerge", ()=>parallelMerge);
parcelHelpers.export(exports, "pipeline", ()=>pipeline);
parcelHelpers.export(exports, "reduce", ()=>reduce);
parcelHelpers.export(exports, "take", ()=>take);
parcelHelpers.export(exports, "tap", ()=>tap);
parcelHelpers.export(exports, "throttle", ()=>throttle);
parcelHelpers.export(exports, "time", ()=>time);
parcelHelpers.export(exports, "transform", ()=>transform);
parcelHelpers.export(exports, "writeToStream", ()=>writeToStream);
var process = require("process");
async function* _batch(size, iterable) {
    let dataBatch = [];
    for await (const data of iterable){
        dataBatch.push(data);
        if (dataBatch.length === size) {
            yield dataBatch;
            dataBatch = [];
        }
    }
    if (dataBatch.length > 0) yield dataBatch;
}
function* _syncBatch(size, iterable) {
    let dataBatch = [];
    for (const data of iterable){
        dataBatch.push(data);
        if (dataBatch.length === size) {
            yield dataBatch;
            dataBatch = [];
        }
    }
    if (dataBatch.length > 0) yield dataBatch;
}
function batch(size, iterable) {
    if (iterable === undefined) return (curriedIterable)=>batch(size, curriedIterable);
    if (iterable[Symbol.asyncIterator]) return _batch(size, iterable);
    return _syncBatch(size, iterable);
}
const TIMEOUT = Symbol("TIMEOUT");
const createTimer = (duration)=>{
    let timeoutId;
    return [
        new Promise((resolve)=>{
            timeoutId = setTimeout(()=>resolve(TIMEOUT), duration);
        }),
        ()=>{
            clearTimeout(timeoutId);
        }, 
    ];
};
// Like `batch` but flushes early if the `timeout` is reached
// NOTE: The strategy is to only hold onto a single item for a maximum of `timeout` ms.
async function* _batchWithTimeout(size, timeout, iterable) {
    const iterator = iterable[Symbol.asyncIterator]();
    let pendingData;
    let batchData = [];
    let timer;
    let clearTimer;
    const startTimer = ()=>{
        deleteTimer();
        [timer, clearTimer] = createTimer(timeout);
    };
    const deleteTimer = ()=>{
        if (clearTimer) clearTimer();
        timer = undefined;
    };
    pendingData = iterator.next();
    while(true){
        const res = await (timer ? Promise.race([
            pendingData,
            timer
        ]) : pendingData);
        if (res === TIMEOUT || res.done) {
            // Flush early (before we reach the batch size)
            if (batchData.length) {
                yield batchData;
                batchData = [];
            }
            deleteTimer();
            // And exit appropriately
            if (res !== TIMEOUT) break;
            continue;
        }
        // Fetch next item early doors (before we potentially yield)
        pendingData = iterator.next();
        // Then handle the value
        batchData.push(res.value);
        if (batchData.length === 1) // Start timer once we have at least 1 item ready to go
        startTimer();
        if (batchData.length === size) {
            yield batchData;
            batchData = [];
            deleteTimer();
            continue;
        }
    }
}
function batchWithTimeout(size, timeout, iterable) {
    if (iterable === undefined) return (curriedIterable)=>batchWithTimeout(size, timeout, curriedIterable);
    if (iterable[Symbol.asyncIterator] && timeout !== Infinity) return _batchWithTimeout(size, timeout, iterable);
    // For sync iterables or an infinite timeout, the timeout is irrelevant so just fallback to regular `batch`.
    return batch(size, iterable);
}
function getIterator(iterable) {
    if (typeof iterable.next === "function") return iterable;
    if (typeof iterable[Symbol.iterator] === "function") return iterable[Symbol.iterator]();
    if (typeof iterable[Symbol.asyncIterator] === "function") return iterable[Symbol.asyncIterator]();
    throw new TypeError('"values" does not to conform to any of the iterator or iterable protocols');
}
function defer() {
    let reject;
    let resolve;
    const promise = new Promise((resolveFunc, rejectFunc)=>{
        resolve = resolveFunc;
        reject = rejectFunc;
    });
    return {
        promise,
        reject,
        resolve
    };
}
function _buffer(size, iterable) {
    const iterator = getIterator(iterable);
    const resultQueue = [];
    const readQueue = [];
    let reading = false;
    let ended = false;
    function fulfillReadQueue() {
        while(readQueue.length > 0 && resultQueue.length > 0){
            const readDeferred = readQueue.shift();
            const { error , value  } = resultQueue.shift();
            if (error) readDeferred.reject(error);
            else readDeferred.resolve({
                done: false,
                value
            });
        }
        while(readQueue.length > 0 && ended){
            const { resolve  } = readQueue.shift();
            resolve({
                done: true,
                value: undefined
            });
        }
    }
    async function fillQueue() {
        if (ended) return;
        if (reading) return;
        if (resultQueue.length >= size) return;
        reading = true;
        try {
            const { done , value  } = await iterator.next();
            if (done) ended = true;
            else resultQueue.push({
                value
            });
        } catch (error) {
            ended = true;
            resultQueue.push({
                error
            });
        }
        fulfillReadQueue();
        reading = false;
        fillQueue();
    }
    async function next() {
        if (resultQueue.length > 0) {
            const { error , value  } = resultQueue.shift();
            if (error) throw error;
            fillQueue();
            return {
                done: false,
                value
            };
        }
        if (ended) return {
            done: true,
            value: undefined
        }; // stupid ts
        const deferred = defer();
        readQueue.push(deferred);
        fillQueue();
        return deferred.promise;
    }
    const asyncIterableIterator = {
        next,
        [Symbol.asyncIterator]: ()=>asyncIterableIterator
    };
    return asyncIterableIterator;
}
function* syncBuffer(size, iterable) {
    const valueQueue = [];
    let e;
    try {
        for (const value of iterable){
            valueQueue.push(value);
            if (valueQueue.length <= size) continue;
            yield valueQueue.shift();
        }
    } catch (error) {
        e = error;
    }
    for (const value of valueQueue)yield value;
    if (e) throw e;
}
function buffer(size, iterable) {
    if (iterable === undefined) return (curriedIterable)=>buffer(size, curriedIterable);
    if (size === 0) return iterable;
    if (iterable[Symbol.asyncIterator]) return _buffer(size, iterable);
    return syncBuffer(size, iterable);
}
async function _collect(iterable) {
    const values = [];
    for await (const value of iterable)values.push(value);
    return values;
}
function collect(iterable) {
    if (iterable[Symbol.asyncIterator]) return _collect(iterable);
    return Array.from(iterable);
}
async function* _concat(iterables) {
    for await (const iterable of iterables)yield* iterable;
}
function* _syncConcat(iterables) {
    for (const iterable of iterables)yield* iterable;
}
function concat(...iterables) {
    const hasAnyAsync = iterables.find((itr)=>itr[Symbol.asyncIterator] !== undefined);
    if (hasAnyAsync) return _concat(iterables);
    else return _syncConcat(iterables);
}
async function _consume(iterable) {
    for await (const val of iterable);
}
function consume(iterable) {
    if (iterable[Symbol.asyncIterator]) return _consume(iterable);
    for (const val of iterable);
}
async function* _filter(filterFunc, iterable) {
    for await (const data of iterable)if (await filterFunc(data)) yield data;
}
function filter(filterFunc, iterable) {
    if (iterable === undefined) return (curriedIterable)=>_filter(filterFunc, curriedIterable);
    return _filter(filterFunc, iterable);
}
async function* flatten(iterable) {
    for await (const maybeItr of iterable)if (maybeItr && typeof maybeItr !== "string" && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator])) yield* flatten(maybeItr);
    else yield maybeItr;
}
async function* _map(func, iterable) {
    for await (const val of iterable)yield await func(val);
}
function map(func, iterable) {
    if (iterable === undefined) return (curriedIterable)=>_map(func, curriedIterable);
    return _map(func, iterable);
}
function flatMap(func, iterable) {
    if (iterable === undefined) return (curriedIterable)=>flatMap(func, curriedIterable);
    return filter((i)=>i !== undefined && i !== null, flatten(map(func, iterable)));
}
function _flatTransform(concurrency, func, iterable) {
    const iterator = getIterator(iterable);
    const resultQueue = [];
    const readQueue = [];
    let ended = false;
    let reading = false;
    let inflightCount = 0;
    let lastError = null;
    function fulfillReadQueue() {
        while(readQueue.length > 0 && resultQueue.length > 0){
            const { resolve  } = readQueue.shift();
            const value = resultQueue.shift();
            resolve({
                done: false,
                value
            });
        }
        while(readQueue.length > 0 && inflightCount === 0 && ended){
            const { resolve , reject  } = readQueue.shift();
            if (lastError) {
                reject(lastError);
                lastError = null;
            } else resolve({
                done: true,
                value: undefined
            });
        }
    }
    async function fillQueue() {
        if (ended) {
            fulfillReadQueue();
            return;
        }
        if (reading) return;
        if (inflightCount + resultQueue.length >= concurrency) return;
        reading = true;
        inflightCount++;
        try {
            const { done , value  } = await iterator.next();
            if (done) {
                ended = true;
                inflightCount--;
                fulfillReadQueue();
            } else mapAndQueue(value);
        } catch (error) {
            ended = true;
            inflightCount--;
            lastError = error;
            fulfillReadQueue();
        }
        reading = false;
        fillQueue();
    }
    async function mapAndQueue(itrValue) {
        try {
            const value = await func(itrValue);
            if (value && value[Symbol.asyncIterator]) for await (const asyncVal of value)resultQueue.push(asyncVal);
            else resultQueue.push(value);
        } catch (error) {
            ended = true;
            lastError = error;
        }
        inflightCount--;
        fulfillReadQueue();
        fillQueue();
    }
    async function next() {
        if (resultQueue.length === 0) {
            const deferred = defer();
            readQueue.push(deferred);
            fillQueue();
            return deferred.promise;
        }
        const value = resultQueue.shift();
        fillQueue();
        return {
            done: false,
            value
        };
    }
    const asyncIterableIterator = {
        next,
        [Symbol.asyncIterator]: ()=>asyncIterableIterator
    };
    return asyncIterableIterator;
}
function flatTransform(concurrency, func, iterable) {
    if (func === undefined) return (curriedFunc, curriedIterable)=>curriedIterable ? flatTransform(concurrency, curriedFunc, curriedIterable) : flatTransform(concurrency, curriedFunc);
    if (iterable === undefined) return (curriedIterable)=>flatTransform(concurrency, func, curriedIterable);
    return filter((i)=>i !== undefined && i !== null, flatten(_flatTransform(concurrency, func, iterable)));
}
async function onceReadable(stream) {
    return new Promise((resolve)=>{
        stream.once("readable", ()=>{
            resolve();
        });
    });
}
async function* _fromStream(stream) {
    while(true){
        const data = stream.read();
        if (data !== null) {
            yield data;
            continue;
        }
        if (stream._readableState.ended) break;
        await onceReadable(stream);
    }
}
function fromStream(stream) {
    if (typeof stream[Symbol.asyncIterator] === "function") return stream;
    return _fromStream(stream);
}
async function* merge(...iterables) {
    const sources = new Set(iterables.map(getIterator));
    while(sources.size > 0)for (const iterator of sources){
        const nextVal = await iterator.next();
        if (nextVal.done) sources.delete(iterator);
        else yield nextVal.value;
    }
}
function pipeline(firstFn, ...fns) {
    let previousFn = firstFn();
    for (const func of fns)previousFn = func(previousFn);
    return previousFn;
}
async function* _parallelMap(concurrency, func, iterable) {
    let transformError = null;
    const wrapFunc = (value)=>({
            value: func(value)
        });
    const stopOnError = async function*(source) {
        for await (const value of source){
            if (transformError) return;
            yield value;
        }
    };
    const output = pipeline(()=>iterable, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency - 1));
    const itr = getIterator(output);
    while(true){
        const { value , done  } = await itr.next();
        if (done) break;
        try {
            const val = await value.value;
            if (!transformError) yield val;
        } catch (error) {
            transformError = error;
        }
    }
    if (transformError) throw transformError;
}
function parallelMap(concurrency, func, iterable) {
    if (func === undefined) return (curriedFunc, curriedIterable)=>parallelMap(concurrency, curriedFunc, curriedIterable);
    if (iterable === undefined) return (curriedIterable)=>parallelMap(concurrency, func, curriedIterable);
    if (concurrency === 1) return map(func, iterable);
    return _parallelMap(concurrency, func, iterable);
}
function parallelFlatMap(concurrency, func, iterable) {
    if (func === undefined) return (curriedFunc, curriedIterable)=>curriedIterable ? parallelFlatMap(concurrency, curriedFunc, curriedIterable) : parallelFlatMap(concurrency, curriedFunc);
    if (iterable === undefined) return (curriedIterable)=>parallelFlatMap(concurrency, func, curriedIterable);
    return filter((i)=>i !== undefined && i !== null, flatten(parallelMap(concurrency, func, iterable)));
}
async function* parallelMerge(...iterables) {
    const inputs = iterables.map(getIterator);
    const concurrentWork = new Set();
    const values = new Map();
    let lastError = null;
    let errCb = null;
    let valueCb = null;
    const notifyError = (err)=>{
        lastError = err;
        if (errCb) errCb(err);
    };
    const notifyDone = (value)=>{
        if (valueCb) valueCb(value);
    };
    const waitForQueue = ()=>new Promise((resolve, reject)=>{
            if (lastError) reject(lastError);
            if (values.size > 0) return resolve();
            valueCb = resolve;
            errCb = reject;
        });
    const queueNext = (input)=>{
        const nextVal = Promise.resolve(input.next()).then(async ({ done , value  })=>{
            if (!done) values.set(input, value);
            concurrentWork.delete(nextVal);
        });
        concurrentWork.add(nextVal);
        nextVal.then(notifyDone, notifyError);
    };
    for (const input1 of inputs)queueNext(input1);
    while(true){
        // We technically don't have to check `values.size` as the for loop should have emptied it
        // However I haven't yet found specs verifying that behavior, only tests
        // the guard in waitForQueue() checking for values is in place for the same reason
        if (concurrentWork.size === 0 && values.size === 0) return;
        await waitForQueue();
        for (const [input, value] of values){
            values.delete(input);
            yield value;
            queueNext(input);
        }
    }
}
async function _reduce(func, start, iterable) {
    let value = start;
    for await (const nextItem of iterable)value = await func(value, nextItem);
    return value;
}
function reduce(func, start, iterable) {
    if (start === undefined) return (curriedStart, curriedIterable)=>curriedIterable ? _reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);
    if (iterable === undefined) return (curriedIterable)=>reduce(func, start, curriedIterable);
    return _reduce(func, start, iterable);
}
async function* _take(count, iterable) {
    let taken = 0;
    for await (const val of iterable){
        yield await val;
        taken++;
        if (taken >= count) break;
    }
}
function* _syncTake(count, iterable) {
    let taken = 0;
    for (const val of iterable){
        yield val;
        taken++;
        if (taken >= count) break;
    }
}
function take(count, iterable) {
    if (iterable === undefined) return (curriedIterable)=>take(count, curriedIterable);
    if (iterable[Symbol.asyncIterator]) return _take(count, iterable);
    return _syncTake(count, iterable);
}
async function* _asyncTap(func, iterable) {
    for await (const val of iterable){
        await func(val);
        yield val;
    }
}
function tap(func, iterable) {
    if (iterable === undefined) return (curriedIterable)=>_asyncTap(func, curriedIterable);
    return _asyncTap(func, iterable);
}
const sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));
function _throttle(limit, interval, iterable) {
    if (!Number.isFinite(limit)) throw new TypeError("Expected `limit` to be a finite number");
    if (limit <= 0) throw new TypeError("Expected `limit` to be greater than 0");
    if (!Number.isFinite(interval)) throw new TypeError("Expected `interval` to be a finite number");
    return async function* __throttle() {
        let sent = 0;
        let time1;
        for await (const val of iterable){
            if (sent < limit) {
                if (typeof time1 === "undefined") time1 = Date.now();
                sent++;
                yield val;
                continue;
            }
            // Only wait if the interval hasn't already passed while we were
            // yielding the previous values.
            const elapsedMs = Date.now() - time1;
            const waitFor = interval - elapsedMs;
            if (waitFor > 0) await sleep(waitFor);
            time1 = Date.now();
            sent = 1;
            yield val;
        }
    }();
}
function throttle(limit, interval, iterable) {
    if (iterable === undefined) return (curriedIterable)=>_throttle(limit, interval, curriedIterable);
    return _throttle(limit, interval, iterable);
}
function addTime(a, b) {
    let seconds = a[0] + b[0];
    let nanoseconds = a[1] + b[1];
    if (nanoseconds >= 1000000000) {
        const remainder = nanoseconds % 1000000000;
        seconds += (nanoseconds - remainder) / 1000000000;
        nanoseconds = remainder;
    }
    return [
        seconds,
        nanoseconds
    ];
}
async function* _asyncTime(config, iterable) {
    const itr = iterable[Symbol.asyncIterator]();
    let total = [
        0,
        0
    ];
    while(true){
        const start = process.hrtime();
        const { value , done  } = await itr.next();
        const delta = process.hrtime(start);
        total = addTime(total, delta);
        if (config.progress) config.progress(delta, total);
        if (done) {
            if (config.total) config.total(total);
            return value;
        }
        yield value;
    }
}
function* _syncTime(config, iterable) {
    const itr = iterable[Symbol.iterator]();
    let total = [
        0,
        0
    ];
    while(true){
        const start = process.hrtime();
        const { value , done  } = itr.next();
        const delta = process.hrtime(start);
        total = addTime(total, delta);
        if (config.progress) config.progress(delta, total);
        if (done) {
            if (config.total) config.total(total);
            return value;
        }
        yield value;
    }
}
function time(config = {}, iterable) {
    if (iterable === undefined) return (curriedIterable)=>time(config, curriedIterable);
    if (iterable[Symbol.asyncIterator] !== undefined) return _asyncTime(config, iterable);
    else return _syncTime(config, iterable);
}
function _transform(concurrency, func, iterable) {
    const iterator = getIterator(iterable);
    const resultQueue = [];
    const readQueue = [];
    let ended = false;
    let reading = false;
    let inflightCount = 0;
    let lastError = null;
    function fulfillReadQueue() {
        while(readQueue.length > 0 && resultQueue.length > 0){
            const { resolve  } = readQueue.shift();
            const value = resultQueue.shift();
            resolve({
                done: false,
                value
            });
        }
        while(readQueue.length > 0 && inflightCount === 0 && ended){
            const { resolve , reject  } = readQueue.shift();
            if (lastError) {
                reject(lastError);
                lastError = null;
            } else resolve({
                done: true,
                value: undefined
            });
        }
    }
    async function fillQueue() {
        if (ended) {
            fulfillReadQueue();
            return;
        }
        if (reading) return;
        if (inflightCount + resultQueue.length >= concurrency) return;
        reading = true;
        inflightCount++;
        try {
            const { done , value  } = await iterator.next();
            if (done) {
                ended = true;
                inflightCount--;
                fulfillReadQueue();
            } else mapAndQueue(value);
        } catch (error) {
            ended = true;
            inflightCount--;
            lastError = error;
            fulfillReadQueue();
        }
        reading = false;
        fillQueue();
    }
    async function mapAndQueue(itrValue) {
        try {
            const value = await func(itrValue);
            resultQueue.push(value);
        } catch (error) {
            ended = true;
            lastError = error;
        }
        inflightCount--;
        fulfillReadQueue();
        fillQueue();
    }
    async function next() {
        if (resultQueue.length === 0) {
            const deferred = defer();
            readQueue.push(deferred);
            fillQueue();
            return deferred.promise;
        }
        const value = resultQueue.shift();
        fillQueue();
        return {
            done: false,
            value
        };
    }
    const asyncIterableIterator = {
        next,
        [Symbol.asyncIterator]: ()=>asyncIterableIterator
    };
    return asyncIterableIterator;
}
function transform(concurrency, func, iterable) {
    if (func === undefined) return (curriedFunc, curriedIterable)=>curriedIterable ? transform(concurrency, curriedFunc, curriedIterable) : transform(concurrency, curriedFunc);
    if (iterable === undefined) return (curriedIterable)=>transform(concurrency, func, curriedIterable);
    return _transform(concurrency, func, iterable);
}
async function _writeToStream(stream, iterable) {
    let lastError = null;
    let errCb = null;
    let drainCb = null;
    const notifyError = (err)=>{
        lastError = err;
        if (errCb) errCb(err);
    };
    const notifyDrain = ()=>{
        if (drainCb) drainCb();
    };
    const cleanup = ()=>{
        stream.removeListener("error", notifyError);
        stream.removeListener("drain", notifyDrain);
    };
    stream.once("error", notifyError);
    const waitForDrain = ()=>new Promise((resolve, reject)=>{
            if (lastError) return reject(lastError);
            stream.once("drain", notifyDrain);
            drainCb = resolve;
            errCb = reject;
        });
    for await (const value of iterable){
        if (stream.write(value) === false) await waitForDrain();
        if (lastError) break;
    }
    cleanup();
    if (lastError) throw lastError;
}
function writeToStream(stream, iterable) {
    if (iterable === undefined) return (curriedIterable)=>_writeToStream(stream, curriedIterable);
    return _writeToStream(stream, iterable);
}

},{"process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kZCg9":[function(require,module,exports) {
"use strict";
/**
 * Returns the first result from an (async) iterable, unless empty, in which
 * case returns `undefined`.
 *
 * @template T
 * @param {AsyncIterable<T>|Iterable<T>} source
 */ const first = async (source)=>{
    for await (const entry of source)return entry;
    return undefined;
};
module.exports = first;

},{}],"6i7EG":[function(require,module,exports) {
"use strict";
const Topology = require("./index");
const multicodecTopologySymbol = Symbol.for("@libp2p/js-interfaces/topology/multicodec-topology");
class MulticodecTopology extends Topology {
    /**
   * @param {TopologyOptions & MulticodecOptions} props
   */ constructor({ min , max , multicodecs , handlers  }){
        super({
            min,
            max,
            handlers
        });
        if (!multicodecs) throw new Error("one or more multicodec should be provided");
        if (!handlers) throw new Error("the handlers should be provided");
        if (typeof handlers.onConnect !== "function") throw new Error("the 'onConnect' handler must be provided");
        if (typeof handlers.onDisconnect !== "function") throw new Error("the 'onDisconnect' handler must be provided");
        this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [
            multicodecs
        ];
        this._registrar = undefined;
        this._onProtocolChange = this._onProtocolChange.bind(this);
        this._onPeerConnect = this._onPeerConnect.bind(this);
    }
    get [Symbol.toStringTag]() {
        return "Topology";
    }
    get [multicodecTopologySymbol]() {
        return true;
    }
    /**
   * Checks if the given value is a `MulticodecTopology` instance.
   *
   * @param {any} other
   * @returns {other is MulticodecTopology}
   */ static isMulticodecTopology(other) {
        return Boolean(other && other[multicodecTopologySymbol]);
    }
    /**
   * @param {any} registrar
   */ set registrar(registrar) {
        this._registrar = registrar;
        this._registrar.peerStore.on("change:protocols", this._onProtocolChange);
        this._registrar.connectionManager.on("peer:connect", this._onPeerConnect);
        // Update topology peers
        this._updatePeers(this._registrar.peerStore.peers.values());
    }
    /**
   * Update topology.
   *
   * @param {Array<{id: PeerId, multiaddrs: Array<Multiaddr>, protocols: Array<string>}>} peerDataIterable
   * @returns {void}
   */ _updatePeers(peerDataIterable) {
        for (const { id , protocols  } of peerDataIterable)if (this.multicodecs.filter((multicodec)=>protocols.includes(multicodec)).length) {
            // Add the peer regardless of whether or not there is currently a connection
            this.peers.add(id.toB58String());
            // If there is a connection, call _onConnect
            const connection = this._registrar.getConnection(id);
            connection && this._onConnect(id, connection);
        } else // Remove any peers we might be tracking that are no longer of value to us
        this.peers.delete(id.toB58String());
    }
    /**
   * Check if a new peer support the multicodecs for this topology.
   *
   * @param {Object} props
   * @param {PeerId} props.peerId
   * @param {Array<string>} props.protocols
   */ _onProtocolChange({ peerId , protocols  }) {
        const hadPeer = this.peers.has(peerId.toB58String());
        const hasProtocol = protocols.filter((protocol)=>this.multicodecs.includes(protocol));
        // Not supporting the protocol anymore?
        if (hadPeer && hasProtocol.length === 0) this._onDisconnect(peerId);
        // New to protocol support
        for (const protocol1 of protocols)if (this.multicodecs.includes(protocol1)) {
            const peerData = this._registrar.peerStore.get(peerId);
            this._updatePeers([
                peerData
            ]);
            return;
        }
    }
    /**
   * Verify if a new connected peer has a topology multicodec and call _onConnect.
   *
   * @param {Connection} connection
   * @returns {void}
   */ _onPeerConnect(connection) {
        // @ts-ignore - remotePeer does not existist on Connection
        const peerId = connection.remotePeer;
        const protocols = this._registrar.peerStore.protoBook.get(peerId);
        if (!protocols) return;
        if (this.multicodecs.find((multicodec)=>protocols.includes(multicodec))) {
            this.peers.add(peerId.toB58String());
            this._onConnect(peerId, connection);
        }
    }
}
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('multiaddr')} Multiaddr
 * @typedef {import('../connection/connection')} Connection
 * @typedef {import('.').Options} TopologyOptions
 * @typedef {Object} MulticodecOptions
 * @property {string[]} multicodecs - protocol multicodecs
 * @property {Required<Handlers>} handlers
 * @typedef {import('.').Handlers} Handlers
 */ module.exports = MulticodecTopology;

},{"./index":"2JOOS"}],"2JOOS":[function(require,module,exports) {
"use strict";
const noop = ()=>{};
const topologySymbol = Symbol.for("@libp2p/js-interfaces/topology");
/**
 * @typedef {import('peer-id')} PeerId
 */ /**
 * @typedef {Object} Options
 * @property {number} [min=0] - minimum needed connections.
 * @property {number} [max=Infinity] - maximum needed connections.
 * @property {Handlers} [handlers]
 *
 * @typedef {Object} Handlers
 * @property {(peerId: PeerId, conn: Connection) => void} [onConnect] - protocol "onConnect" handler
 * @property {(peerId: PeerId, error?:Error) => void} [onDisconnect] - protocol "onDisconnect" handler
 *
 * @typedef {import('../connection/connection')} Connection
 */ class Topology {
    /**
   * @param {Options} options
   */ constructor({ min =0 , max =Infinity , handlers ={}  }){
        this.min = min;
        this.max = max;
        // Handlers
        this._onConnect = handlers.onConnect || noop;
        this._onDisconnect = handlers.onDisconnect || noop;
        /**
     * Set of peers that support the protocol.
     *
     * @type {Set<string>}
     */ this.peers = new Set();
    }
    get [Symbol.toStringTag]() {
        return "Topology";
    }
    get [topologySymbol]() {
        return true;
    }
    /**
   * Checks if the given value is a Topology instance.
   *
   * @param {any} other
   * @returns {other is Topology}
   */ static isTopology(other) {
        return Boolean(other && other[topologySymbol]);
    }
    /**
   * @param {any} registrar
   */ set registrar(registrar) {
        this._registrar = registrar;
    }
    /**
   * Notify about peer disconnected event.
   *
   * @param {PeerId} peerId
   * @returns {void}
   */ disconnect(peerId) {
        this._onDisconnect(peerId);
    }
}
module.exports = Topology;

},{}],"apBen":[function(require,module,exports) {
"use strict";
const { pipe  } = require("it-pipe");
const lp = require("it-length-prefixed");
const Message = require("../message");
const handlers = require("./handlers");
const utils = require("../utils");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 */ /**
 * @param {import('../index')} dht
 */ module.exports = (dht)=>{
    const log = utils.logger(dht.peerId, "rpc");
    const getMessageHandler = handlers(dht);
    /**
   * Process incoming DHT messages.
   *
   * @param {PeerId} peerId
   * @param {Message} msg
   */ async function handleMessage(peerId, msg) {
        // get handler & execute it
        const handler = getMessageHandler(msg.type);
        try {
            await dht._add(peerId);
        } catch (err) {
            log.error("Failed to update the kbucket store", err);
        }
        if (!handler) {
            log.error(`no handler found for message type: ${msg.type}`);
            return;
        }
        return handler(peerId, msg);
    }
    /**
   * Handle incoming streams on the dht protocol
   *
   * @param {object} props
   * @param {MuxedStream} props.stream
   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection
   */ async function onIncomingStream({ stream , connection  }) {
        const peerId = connection.remotePeer;
        try {
            await dht._add(peerId);
        } catch (err) {
            log.error(err);
        }
        const idB58Str = peerId.toB58String();
        log("from: %s", idB58Str);
        await pipe(stream.source, lp.decode(), /**
       * @param {AsyncIterable<Uint8Array>} source
       */ (source)=>(async function*() {
                for await (const msg of source){
                    // handle the message
                    const desMessage = Message.deserialize(msg.slice());
                    const res = await handleMessage(peerId, desMessage);
                    // Not all handlers will return a response
                    if (res) yield res.serialize();
                }
            })(), lp.encode(), stream.sink);
    }
    return onIncomingStream;
};

},{"it-pipe":"jkWle","it-length-prefixed":"31lGp","../message":"6c5Nm","./handlers":"aWIM1","../utils":"1wrtw"}],"6c5Nm":[function(require,module,exports) {
"use strict";
const PeerId = require("peer-id");
const { Multiaddr  } = require("multiaddr");
const { Record  } = require("libp2p-record");
const Proto = require("./dht");
const MESSAGE_TYPE = Proto.Message.MessageType;
const CONNECTION_TYPE = Proto.Message.ConnectionType;
/**
 * @typedef {0|1|2|3|4} ConnectionType
 *
 * @typedef {object} PBPeer
 * @property {Uint8Array} id
 * @property {Uint8Array[]} addrs
 * @property {ConnectionType} connection
 *
 * @typedef {import('../index').PeerData} PeerData
 */ /**
 * Represents a single DHT control message.
 */ class Message {
    /**
   * @param {import('./dht').Message.MessageType} type
   * @param {Uint8Array} key
   * @param {number} level
   */ constructor(type, key, level){
        if (key && !(key instanceof Uint8Array)) throw new Error("Key must be a Uint8Array");
        this.type = type;
        this.key = key;
        this._clusterLevelRaw = level;
        /** @type {PeerData[]} */ this.closerPeers = [];
        /** @type {PeerData[]} */ this.providerPeers = [];
        /** @type {import('libp2p-record').Record | undefined} */ this.record = undefined;
    }
    /**
   * @type {number}
   */ get clusterLevel() {
        const level = this._clusterLevelRaw - 1;
        if (level < 0) return 0;
        return level;
    }
    set clusterLevel(level) {
        this._clusterLevelRaw = level;
    }
    /**
   * Encode into protobuf
   */ serialize() {
        const obj = {
            key: this.key,
            type: this.type,
            clusterLevelRaw: this._clusterLevelRaw,
            closerPeers: this.closerPeers.map(toPbPeer),
            providerPeers: this.providerPeers.map(toPbPeer),
            /** @type {Uint8Array | undefined} */ record: undefined
        };
        if (this.record) {
            if (this.record instanceof Uint8Array) obj.record = this.record;
            else obj.record = this.record.serialize();
        }
        return Proto.Message.encode(obj).finish();
    }
    /**
   * Decode from protobuf
   *
   * @param {Uint8Array} raw
   */ static deserialize(raw) {
        const dec = Proto.Message.decode(raw);
        const msg = new Message(dec.type || 0, dec.key || Uint8Array.from([]), dec.clusterLevelRaw || 0);
        msg.closerPeers = dec.closerPeers.map(fromPbPeer);
        msg.providerPeers = dec.providerPeers.map(fromPbPeer);
        if (dec.record && dec.record.length) msg.record = Record.deserialize(dec.record);
        return msg;
    }
}
Message.TYPES = MESSAGE_TYPE;
Message.CONNECTION_TYPES = CONNECTION_TYPE;
/**
 * @param {PeerData} peer
 */ function toPbPeer(peer) {
    /** @type {PBPeer} */ const output = {
        id: peer.id.id,
        addrs: (peer.multiaddrs || []).map((m)=>m.bytes),
        connection: CONNECTION_TYPE.CONNECTED
    };
    return output;
}
/**
 * @param {import('./dht').Message.IPeer} peer
 */ function fromPbPeer(peer) {
    return {
        // @ts-ignore id is optional on protobuf, but it will exist?
        id: new PeerId(peer.id),
        multiaddrs: (peer.addrs || []).map((a)=>new Multiaddr(a))
    };
}
module.exports = Message;

},{"peer-id":"etBKN","multiaddr":"dOMJu","libp2p-record":"3iJYP","./dht":"cP5kF"}],"dOMJu":[function(require,module,exports) {
"use strict";
const codec = require("./codec");
const protocols = require("./protocols-table");
const varint = require("varint");
const { CID  } = require("multiformats/cid");
const { base58btc  } = require("multiformats/bases/base58");
const errCode = require("err-code");
const inspect = Symbol.for("nodejs.util.inspect.custom");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
/**
 * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver
 * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput
 * @typedef {import('./types').MultiaddrObject} MultiaddrObject
 * @typedef {import('./types').Protocol} Protocol
 */ /** @type {Map<string, Resolver>} */ const resolvers = new Map();
const symbol = Symbol.for("@multiformats/js-multiaddr/multiaddr");
/**
 * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from
 * a Uint8Array, String or another Multiaddr instance
 * public key.
 *
 */ class Multiaddr {
    /**
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   * ```
   *
   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)
   */ constructor(addr){
        // default
        if (addr == null) addr = "";
        // Define symbol
        Object.defineProperty(this, symbol, {
            value: true
        });
        if (addr instanceof Uint8Array) /** @type {Uint8Array} - The raw bytes representing this multiaddress */ this.bytes = codec.fromBytes(addr);
        else if (typeof addr === "string") {
            if (addr.length > 0 && addr.charAt(0) !== "/") throw new Error(`multiaddr "${addr}" must start with a "/"`);
            this.bytes = codec.fromString(addr);
        } else if (Multiaddr.isMultiaddr(addr)) this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer
        ;
        else throw new Error("addr must be a string, Buffer, or another Multiaddr");
    }
    /**
   * Returns Multiaddr as a String
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()
   * // '/ip4/127.0.0.1/tcp/4001'
   * ```
   */ toString() {
        return codec.bytesToString(this.bytes);
    }
    /**
   * Returns Multiaddr as a JSON encoded object
   *
   * @example
   * ```js
   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))
   * // '/ip4/127.0.0.1/tcp/4001'
   * ```
   */ toJSON() {
        return this.toString();
    }
    /**
   * Returns Multiaddr as a convinient options object to be used with net.createConnection
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()
   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }
   * ```
   */ toOptions() {
        /** @type {MultiaddrObject} */ const opts = {};
        const parsed = this.toString().split("/");
        opts.family = parsed[1] === "ip4" ? 4 : 6;
        opts.host = parsed[2];
        opts.transport = parsed[3];
        opts.port = parseInt(parsed[4]);
        return opts;
    }
    /**
   * Returns the protocols the Multiaddr is defined with, as an array of objects, in
   * left-to-right order. Each object contains the protocol code, protocol name,
   * and the size of its address space in bits.
   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()
   * // [ { code: 4, size: 32, name: 'ip4' },
   * //   { code: 6, size: 16, name: 'tcp' } ]
   * ```
   *
   * @returns {Protocol[]} protocols - All the protocols the address is composed of
   */ protos() {
        return this.protoCodes().map((code)=>Object.assign({}, protocols(code)));
    }
    /**
   * Returns the codes of the protocols in left-to-right order.
   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
   *
   * @example
   * ```js
   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()
   * // [ 4, 6 ]
   * ```
   *
   * @returns {number[]} protocol codes
   */ protoCodes() {
        const codes = [];
        const buf = this.bytes;
        let i = 0;
        while(i < buf.length){
            const code = varint.decode(buf, i);
            const n = varint.decode.bytes;
            const p = protocols(code);
            const size = codec.sizeForAddr(p, buf.slice(i + n));
            i += size + n;
            codes.push(code);
        }
        return codes;
    }
    /**
   * Returns the names of the protocols in left-to-right order.
   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()
   * // [ 'ip4', 'tcp' ]
   * ```
   *
   * @returns {string[]} protocol names
   */ protoNames() {
        return this.protos().map((proto)=>proto.name);
    }
    /**
   * Returns a tuple of parts
   *
   * @example
   * ```js
   * new Multiaddr("/ip4/127.0.0.1/tcp/4001").tuples()
   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]
   * ```
   */ tuples() {
        return codec.bytesToTuples(this.bytes);
    }
    /**
   * Returns a tuple of string/number parts
   * - tuples[][0] = code of protocol
   * - tuples[][1] = contents of address
   *
   * @example
   * ```js
   * new Multiaddr("/ip4/127.0.0.1/tcp/4001").stringTuples()
   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]
   * ```
   */ stringTuples() {
        const t = codec.bytesToTuples(this.bytes);
        return codec.tuplesToStringTuples(t);
    }
    /**
   * Encapsulates a Multiaddr in another Multiaddr
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
   *
   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   *
   * const mh3 = mh1.encapsulate(mh2)
   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>
   *
   * mh3.toString()
   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'
   * ```
   *
   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr
   */ encapsulate(addr) {
        addr = new Multiaddr(addr);
        return new Multiaddr(this.toString() + addr.toString());
    }
    /**
   * Decapsulates a Multiaddr from another Multiaddr
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
   *
   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   *
   * const mh3 = mh1.encapsulate(mh2)
   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>
   *
   * mh3.decapsulate(mh2).toString()
   * // '/ip4/8.8.8.8/tcp/1080'
   * ```
   *
   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr
   * @returns {Multiaddr}
   */ decapsulate(addr) {
        const addrString = addr.toString();
        const s = this.toString();
        const i = s.lastIndexOf(addrString);
        if (i < 0) throw new Error("Address " + this + " does not contain subaddress: " + addr);
        return new Multiaddr(s.slice(0, i));
    }
    /**
   * A more reliable version of `decapsulate` if you are targeting a
   * specific code, such as 421 (the `p2p` protocol code). The last index of the code
   * will be removed from the `Multiaddr`, and a new instance will be returned.
   * If the code is not present, the original `Multiaddr` is returned.
   *
   * @example
   * ```js
   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')
   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>
   *
   * addr.decapsulateCode(421).toString()
   * // '/ip4/0.0.0.0/tcp/8080'
   *
   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()
   * // '/ip4/127.0.0.1/tcp/8080'
   * ```
   *
   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr
   * @returns {Multiaddr}
   */ decapsulateCode(code) {
        const tuples = this.tuples();
        for(let i = tuples.length - 1; i >= 0; i--){
            if (tuples[i][0] === code) return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)));
        }
        return this;
    }
    /**
   * Extract the peerId if the multiaddr contains one
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>
   *
   * // should return QmValidBase58string or null if the id is missing or invalid
   * const peerId = mh1.getPeerId()
   * ```
   *
   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma
   */ getPeerId() {
        try {
            const tuples = this.stringTuples().filter((tuple)=>{
                if (tuple[0] === protocols.names.ipfs.code) return true;
                return false;
            });
            // Get the last ipfs tuple ['ipfs', 'peerid string']
            const tuple1 = tuples.pop();
            if (tuple1 && tuple1[1]) {
                const peerIdStr = tuple1[1];
                // peer id is base58btc encoded string but not multibase encoded so add the `z`
                // prefix so we can validate that it is correctly encoded
                if (peerIdStr[0] === "Q" || peerIdStr[0] === "1") return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), "base58btc");
                // try to parse peer id as CID
                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, "base58btc");
            }
            return null;
        } catch (e) {
            return null;
        }
    }
    /**
   * Extract the path if the multiaddr contains one
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>
   *
   * // should return utf8 string or null if the id is missing or invalid
   * const path = mh1.getPath()
   * ```js
   *
   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present
   */ getPath() {
        let path = null;
        try {
            path = this.stringTuples().filter((tuple)=>{
                const proto = protocols(tuple[0]);
                if (proto.path) return true;
                return false;
            })[0][1];
            if (!path) path = null;
        } catch (e) {
            path = null;
        }
        return path;
    }
    /**
   * Checks if two Multiaddrs are the same
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
   *
   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   *
   * mh1.equals(mh1)
   * // true
   *
   * mh1.equals(mh2)
   * // false
   * ```
   *
   * @param {Multiaddr} addr
   * @returns {boolean}
   */ equals(addr) {
        return uint8ArrayEquals(this.bytes, addr.bytes);
    }
    /**
   * Resolve multiaddr if containing resolvable hostname.
   *
   * @example
   * ```js
   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)
   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')
   * const resolvedMultiaddrs = await mh1.resolve()
   * // [
   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,
   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,
   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>
   * // ]
   * ```
   *
   * @returns {Promise<Array<Multiaddr>>}
   */ async resolve() {
        const resolvableProto = this.protos().find((p)=>p.resolvable);
        // Multiaddr is not resolvable?
        if (!resolvableProto) return [
            this
        ];
        const resolver = resolvers.get(resolvableProto.name);
        if (!resolver) throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), "ERR_NO_AVAILABLE_RESOLVER");
        const addresses = await resolver(this);
        return addresses.map((a)=>new Multiaddr(a));
    }
    /**
   * Gets a Multiaddrs node-friendly address object. Note that protocol information
   * is left out: in Node (and most network systems) the protocol is unknowable
   * given only the address.
   *
   * Has to be a ThinWaist Address, otherwise throws error
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()
   * // {family: 4, address: '127.0.0.1', port: 4001}
   * ```
   *
   * @returns {{family: 4 | 6, address: string, port: number}}
   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address
   */ nodeAddress() {
        const codes = this.protoCodes();
        const names = this.protoNames();
        const parts = this.toString().split("/").slice(1);
        if (parts.length < 4) throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}".');
        else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) throw new Error(`no protocol with name: "'${names[0]}'". Must have a valid family name: "{ip4, ip6, dns4, dns6}".`);
        else if (parts[2] !== "tcp" && parts[2] !== "udp") throw new Error(`no protocol with name: "'${names[1]}'". Must have a valid transport protocol: "{tcp, udp}".`);
        return {
            family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,
            address: parts[1],
            port: parseInt(parts[3]) // tcp or udp port
        };
    }
    /**
   * Returns if a Multiaddr is a Thin Waist address or not.
   *
   * Thin Waist is if a Multiaddr adheres to the standard combination of:
   *
   * `{IPv4, IPv6}/{TCP, UDP}`
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')
   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>
   * const mh3 = mh1.encapsulate(mh2)
   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>
   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')
   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>
   * mh1.isThinWaistAddress()
   * // true
   * mh2.isThinWaistAddress()
   * // true
   * mh3.isThinWaistAddress()
   * // false
   * mh4.isThinWaistAddress()
   * // false
   * ```
   *
   * @param {Multiaddr} [addr] - Defaults to using `this` instance
   */ isThinWaistAddress(addr) {
        const protos = (addr || this).protos();
        if (protos.length !== 2) return false;
        if (protos[0].code !== 4 && protos[0].code !== 41) return false;
        if (protos[1].code !== 6 && protos[1].code !== 273) return false;
        return true;
    }
    /**
   * Creates a Multiaddr from a node-friendly address object
   *
   * @example
   * ```js
   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   * ```
   *
   * @param {{family: 4 | 6, address: string, port: number}} addr
   * @param {string} transport
   */ static fromNodeAddress(addr, transport) {
        if (!addr) throw new Error("requires node address object");
        if (!transport) throw new Error("requires transport protocol");
        let ip;
        switch(addr.family){
            case 4:
                ip = "ip4";
                break;
            case 6:
                ip = "ip6";
                break;
            default:
                throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`);
        }
        return new Multiaddr("/" + [
            ip,
            addr.address,
            transport,
            addr.port
        ].join("/"));
    }
    /**
   * Returns if something is a Multiaddr that is a name
   *
   * @param {Multiaddr} addr
   * @returns {boolean} isName
   */ static isName(addr) {
        if (!Multiaddr.isMultiaddr(addr)) return false;
        // if a part of the multiaddr is resolvable, then return true
        return addr.protos().some((proto)=>proto.resolvable);
    }
    /**
   * Check if object is a CID instance
   *
   * @param {any} value
   * @returns {value is Multiaddr}
   */ static isMultiaddr(value) {
        return value instanceof Multiaddr || Boolean(value && value[symbol]);
    }
    /**
   * Returns Multiaddr as a human-readable string.
   * For post Node.js v10.0.0.
   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect
   *
   * @example
   * ```js
   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))
   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'
   * ```
   *
   * @returns {string}
   */ [inspect]() {
        return "<Multiaddr " + uint8ArrayToString(this.bytes, "base16") + " - " + codec.bytesToString(this.bytes) + ">";
    }
    /**
   * Returns Multiaddr as a human-readable string.
   * Fallback for pre Node.js v10.0.0.
   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()
   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'
   * ```
   *
   * @returns {string}
   */ inspect() {
        return "<Multiaddr " + uint8ArrayToString(this.bytes, "base16") + " - " + codec.bytesToString(this.bytes) + ">";
    }
}
/**
 * Object containing table, names and codes of all supported protocols.
 * To get the protocol values from a Multiaddr, you can use
 * [`.protos()`](#multiaddrprotos),
 * [`.protoCodes()`](#multiaddrprotocodes) or
 * [`.protoNames()`](#multiaddrprotonames)
 *
 * @returns {{table: Array, names: Object, codes: Object}}
 */ Multiaddr.protocols = protocols;
Multiaddr.resolvers = resolvers;
/**
 * Static factory
 *
 * @param {MultiaddrInput} addr
 */ function multiaddr(addr) {
    return new Multiaddr(addr);
}
module.exports = {
    Multiaddr,
    multiaddr,
    protocols,
    resolvers
};

},{"./codec":"5HyU8","./protocols-table":"j1p40","varint":"9fMsR","multiformats/cid":"4uoBU","multiformats/bases/base58":"9KkrI","err-code":"dUrrM","uint8arrays/to-string":"w8mvE","uint8arrays/equals":"iZMnE"}],"5HyU8":[function(require,module,exports) {
"use strict";
const convert = require("./convert");
const protocols = require("./protocols-table");
const varint = require("varint");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
// export codec
module.exports = {
    stringToStringTuples,
    stringTuplesToString,
    tuplesToStringTuples,
    stringTuplesToTuples,
    bytesToTuples,
    tuplesToBytes,
    bytesToString,
    stringToBytes,
    fromString,
    fromBytes,
    validateBytes,
    isValidBytes,
    cleanPath,
    ParseError,
    protoFromTuple,
    sizeForAddr
};
// string -> [[str name, str addr]... ]
/**
 * @param {string} str
 */ function stringToStringTuples(str) {
    const tuples = [];
    const parts = str.split("/").slice(1) // skip first empty elem
    ;
    if (parts.length === 1 && parts[0] === "") return [];
    for(let p = 0; p < parts.length; p++){
        const part = parts[p];
        const proto = protocols(part);
        if (proto.size === 0) {
            tuples.push([
                part
            ]);
            continue;
        }
        p++ // advance addr part
        ;
        if (p >= parts.length) throw ParseError("invalid address: " + str);
        // if it's a path proto, take the rest
        if (proto.path) {
            tuples.push([
                part,
                // TODO: should we need to check each path part to see if it's a proto?
                // This would allow for other protocols to be added after a unix path,
                // however it would have issues if the path had a protocol name in the path
                cleanPath(parts.slice(p).join("/"))
            ]);
            break;
        }
        tuples.push([
            part,
            parts[p]
        ]);
    }
    return tuples;
}
// [[str name, str addr]... ] -> string
/**
 * @param {[number, string?][]} tuples
 */ function stringTuplesToString(tuples) {
    /** @type {Array<string | undefined>} */ const parts = [];
    tuples.map((tup)=>{
        const proto = protoFromTuple(tup);
        parts.push(proto.name);
        if (tup.length > 1) parts.push(tup[1]);
        return null;
    });
    return cleanPath(parts.join("/"));
}
// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]
/**
 * @param {Array<string[] | string >} tuples
 * @returns {[number , Uint8Array?][]}
 */ function stringTuplesToTuples(tuples) {
    return tuples.map((tup)=>{
        if (!Array.isArray(tup)) tup = [
            tup
        ];
        const proto = protoFromTuple(tup);
        if (tup.length > 1) return [
            proto.code,
            convert.toBytes(proto.code, tup[1])
        ];
        return [
            proto.code
        ];
    });
}
/**
 * Convert tuples to string tuples
 *
 * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]
 *
 * @param {Array<[number, Uint8Array?]>} tuples
 * @returns {Array<[number, string?]>}
 */ function tuplesToStringTuples(tuples) {
    return tuples.map((tup)=>{
        const proto = protoFromTuple(tup);
        if (tup[1]) return [
            proto.code,
            convert.toString(proto.code, tup[1])
        ];
        return [
            proto.code
        ];
    });
}
// [[int code, Uint8Array ]... ] -> Uint8Array
/**
 * @param {[number, Uint8Array?][]} tuples
 */ function tuplesToBytes(tuples) {
    return fromBytes(uint8ArrayConcat(tuples.map((/** @type {any[]} */ tup)=>{
        const proto = protoFromTuple(tup);
        let buf = Uint8Array.from(varint.encode(proto.code));
        if (tup.length > 1) buf = uint8ArrayConcat([
            buf,
            tup[1]
        ]) // add address buffer
        ;
        return buf;
    })));
}
/**
 * @param {import("./types").Protocol} p
 * @param {Uint8Array | number[]} addr
 */ function sizeForAddr(p, addr) {
    if (p.size > 0) return p.size / 8;
    else if (p.size === 0) return 0;
    else {
        const size = varint.decode(addr);
        return size + varint.decode.bytes;
    }
}
/**
 *
 * @param {Uint8Array} buf
 * @returns {Array<[number, Uint8Array?]>}
 */ function bytesToTuples(buf) {
    /** @type {Array<[number, Uint8Array?]>} */ const tuples = [];
    let i = 0;
    while(i < buf.length){
        const code = varint.decode(buf, i);
        const n = varint.decode.bytes;
        const p = protocols(code);
        const size = sizeForAddr(p, buf.slice(i + n));
        if (size === 0) {
            tuples.push([
                code
            ]);
            i += n;
            continue;
        }
        const addr = buf.slice(i + n, i + n + size);
        i += size + n;
        if (i > buf.length) throw ParseError("Invalid address Uint8Array: " + uint8ArrayToString(buf, "base16"));
        // ok, tuple seems good.
        tuples.push([
            code,
            addr
        ]);
    }
    return tuples;
}
// Uint8Array -> String
/**
 * @param {Uint8Array} buf
 */ function bytesToString(buf) {
    const a = bytesToTuples(buf);
    const b = tuplesToStringTuples(a);
    return stringTuplesToString(b);
}
// String -> Uint8Array
/**
 * @param {string} str
 */ function stringToBytes(str) {
    str = cleanPath(str);
    const a = stringToStringTuples(str);
    const b = stringTuplesToTuples(a);
    return tuplesToBytes(b);
}
// String -> Uint8Array
/**
 * @param {string} str
 */ function fromString(str) {
    return stringToBytes(str);
}
// Uint8Array -> Uint8Array
/**
 * @param {Uint8Array} buf
 */ function fromBytes(buf) {
    const err = validateBytes(buf);
    if (err) throw err;
    return Uint8Array.from(buf) // copy
    ;
}
/**
 * @param {Uint8Array} buf
 */ function validateBytes(buf) {
    try {
        bytesToTuples(buf) // try to parse. will throw if breaks
        ;
    } catch (err) {
        return err;
    }
}
/**
 * @param {Uint8Array} buf
 */ function isValidBytes(buf) {
    return validateBytes(buf) === undefined;
}
/**
 * @param {string} str
 */ function cleanPath(str) {
    return "/" + str.trim().split("/").filter((/** @type {any} */ a)=>a).join("/");
}
/**
 * @param {string} str
 */ function ParseError(str) {
    return new Error("Error parsing address: " + str);
}
/**
 * @param {any[]} tup
 */ function protoFromTuple(tup) {
    const proto = protocols(tup[0]);
    return proto;
}

},{"./convert":"3VFEe","./protocols-table":"j1p40","varint":"9fMsR","uint8arrays/concat":"gqJ9u","uint8arrays/to-string":"w8mvE"}],"3VFEe":[function(require,module,exports) {
"use strict";
const ip = require("./ip");
const protocols = require("./protocols-table");
const { CID  } = require("multiformats/cid");
const { base32  } = require("multiformats/bases/base32");
const { base58btc  } = require("multiformats/bases/base58");
const Digest = require("multiformats/hashes/digest");
const varint = require("varint");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
module.exports = Convert;
// converts (serializes) addresses
/**
 * @param {string} proto
 * @param {string | Uint8Array} a
 */ function Convert(proto, a) {
    if (a instanceof Uint8Array) return Convert.toString(proto, a);
    else return Convert.toBytes(proto, a);
}
/**
 * Convert [code,Uint8Array] to string
 *
 * @param {number|string} proto
 * @param {Uint8Array} buf
 * @returns {string}
 */ Convert.toString = function convertToString(proto, buf) {
    const protocol = protocols(proto);
    switch(protocol.code){
        case 4:
        case 41:
            return bytes2ip(buf);
        case 6:
        case 273:
        case 33:
        case 132:
            return bytes2port(buf).toString();
        case 53:
        case 54:
        case 55:
        case 56:
        case 400:
        case 777:
            return bytes2str(buf);
        case 421:
            return bytes2mh(buf);
        case 444:
            return bytes2onion(buf);
        case 445:
            return bytes2onion(buf);
        default:
            return uint8ArrayToString(buf, "base16") // no clue. convert to hex
            ;
    }
};
Convert.toBytes = function convertToBytes(/** @type {string | number } */ proto, /** @type {string} */ str) {
    const protocol = protocols(proto);
    switch(protocol.code){
        case 4:
            return ip2bytes(str);
        case 41:
            return ip2bytes(str);
        case 6:
        case 273:
        case 33:
        case 132:
            return port2bytes(parseInt(str, 10));
        case 53:
        case 54:
        case 55:
        case 56:
        case 400:
        case 777:
            return str2bytes(str);
        case 421:
            return mh2bytes(str);
        case 444:
            return onion2bytes(str);
        case 445:
            return onion32bytes(str);
        default:
            return uint8ArrayFromString(str, "base16") // no clue. convert from hex
            ;
    }
};
/**
 * @param {string} ipString
 */ function ip2bytes(ipString) {
    if (!ip.isIP(ipString)) throw new Error("invalid ip address");
    return ip.toBytes(ipString);
}
/**
 * @param {Uint8Array} ipBuff
 */ function bytes2ip(ipBuff) {
    const ipString = ip.toString(ipBuff);
    if (!ipString || !ip.isIP(ipString)) throw new Error("invalid ip address");
    return ipString;
}
/**
 * @param {number} port
 */ function port2bytes(port) {
    const buf = new ArrayBuffer(2);
    const view = new DataView(buf);
    view.setUint16(0, port);
    return new Uint8Array(buf);
}
/**
 * @param {Uint8Array} buf
 */ function bytes2port(buf) {
    const view = new DataView(buf.buffer);
    return view.getUint16(buf.byteOffset);
}
/**
 * @param {string} str
 */ function str2bytes(str) {
    const buf = uint8ArrayFromString(str);
    const size = Uint8Array.from(varint.encode(buf.length));
    return uint8ArrayConcat([
        size,
        buf
    ], size.length + buf.length);
}
/**
 * @param {Uint8Array} buf
 */ function bytes2str(buf) {
    const size = varint.decode(buf);
    buf = buf.slice(varint.decode.bytes);
    if (buf.length !== size) throw new Error("inconsistent lengths");
    return uint8ArrayToString(buf);
}
/**
 * @param {string} hash - base58btc string
 */ function mh2bytes(hash) {
    let mh;
    if (hash[0] === "Q" || hash[0] === "1") mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;
    else mh = CID.parse(hash).multihash.bytes;
    // the address is a varint prefixed multihash string representation
    const size = Uint8Array.from(varint.encode(mh.length));
    return uint8ArrayConcat([
        size,
        mh
    ], size.length + mh.length);
}
/**
 * Converts bytes to bas58btc string
 *
 * @param {Uint8Array} buf
 * @returns {string} base58btc string
 */ function bytes2mh(buf) {
    const size = varint.decode(buf);
    const address = buf.slice(varint.decode.bytes);
    if (address.length !== size) throw new Error("inconsistent lengths");
    return uint8ArrayToString(address, "base58btc");
}
/**
 * @param {string} str
 */ function onion2bytes(str) {
    const addr = str.split(":");
    if (addr.length !== 2) throw new Error("failed to parse onion addr: " + addr + " does not contain a port number");
    if (addr[0].length !== 16) throw new Error("failed to parse onion addr: " + addr[0] + " not a Tor onion address.");
    // onion addresses do not include the multibase prefix, add it before decoding
    const buf = base32.decode("b" + addr[0]);
    // onion port number
    const port = parseInt(addr[1], 10);
    if (port < 1 || port > 65536) throw new Error("Port number is not in range(1, 65536)");
    const portBuf = port2bytes(port);
    return uint8ArrayConcat([
        buf,
        portBuf
    ], buf.length + portBuf.length);
}
/**
 * @param {string} str
 */ function onion32bytes(str) {
    const addr = str.split(":");
    if (addr.length !== 2) throw new Error("failed to parse onion addr: " + addr + " does not contain a port number");
    if (addr[0].length !== 56) throw new Error("failed to parse onion addr: " + addr[0] + " not a Tor onion3 address.");
    // onion addresses do not include the multibase prefix, add it before decoding
    const buf = base32.decode("b" + addr[0]);
    // onion port number
    const port = parseInt(addr[1], 10);
    if (port < 1 || port > 65536) throw new Error("Port number is not in range(1, 65536)");
    const portBuf = port2bytes(port);
    return uint8ArrayConcat([
        buf,
        portBuf
    ], buf.length + portBuf.length);
}
/**
 * @param {Uint8Array} buf
 */ function bytes2onion(buf) {
    const addrBytes = buf.slice(0, buf.length - 2);
    const portBytes = buf.slice(buf.length - 2);
    const addr = uint8ArrayToString(addrBytes, "base32");
    const port = bytes2port(portBytes);
    return addr + ":" + port;
}

},{"./ip":"ktWPM","./protocols-table":"j1p40","multiformats/cid":"4uoBU","multiformats/bases/base32":"apmz1","multiformats/bases/base58":"9KkrI","multiformats/hashes/digest":"9JdI8","varint":"9fMsR","uint8arrays/to-string":"w8mvE","uint8arrays/from-string":"7qjkp","uint8arrays/concat":"gqJ9u"}],"ktWPM":[function(require,module,exports) {
"use strict";
const isIp = require("is-ip");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const isIP = isIp;
const isV4 = isIp.v4;
const isV6 = isIp.v6;
// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7
// @ts-ignore - this is copied from the link above better to keep it the same
const toBytes = function(ip, buff, offset) {
    offset = ~~offset;
    let result;
    if (isV4(ip)) {
        result = buff || new Uint8Array(offset + 4);
        // @ts-ignore
        // eslint-disable-next-line array-callback-return
        ip.split(/\./g).map(function(byte) {
            result[offset++] = parseInt(byte, 10) & 0xff;
        });
    } else if (isV6(ip)) {
        const sections = ip.split(":", 8);
        let i;
        for(i = 0; i < sections.length; i++){
            const isv4 = isV4(sections[i]);
            let v4Buffer;
            if (isv4) {
                v4Buffer = toBytes(sections[i]);
                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), "base16");
            }
            if (v4Buffer && ++i < 8) sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), "base16"));
        }
        if (sections[0] === "") while(sections.length < 8)sections.unshift("0");
        else if (sections[sections.length - 1] === "") while(sections.length < 8)sections.push("0");
        else if (sections.length < 8) {
            for(i = 0; i < sections.length && sections[i] !== ""; i++);
            const argv = [
                i,
                "1"
            ];
            for(i = 9 - sections.length; i > 0; i--)argv.push("0");
            sections.splice.apply(sections, argv);
        }
        result = buff || new Uint8Array(offset + 16);
        for(i = 0; i < sections.length; i++){
            const word = parseInt(sections[i], 16);
            result[offset++] = word >> 8 & 0xff;
            result[offset++] = word & 0xff;
        }
    }
    if (!result) throw Error("Invalid ip address: " + ip);
    return result;
};
// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63
// @ts-ignore - this is copied from the link above better to keep it the same
const toString = function(buff, offset, length) {
    offset = ~~offset;
    length = length || buff.length - offset;
    const result = [];
    let string;
    const view = new DataView(buff.buffer);
    if (length === 4) {
        // IPv4
        for(let i = 0; i < length; i++)result.push(buff[offset + i]);
        string = result.join(".");
    } else if (length === 16) {
        // IPv6
        for(let i = 0; i < length; i += 2)result.push(view.getUint16(offset + i).toString(16));
        string = result.join(":");
        string = string.replace(/(^|:)0(:0)*:0(:|$)/, "$1::$3");
        string = string.replace(/:{3,4}/, "::");
    }
    return string;
};
module.exports = {
    isIP,
    isV4,
    isV6,
    toBytes,
    toString
};

},{"is-ip":"026DS","uint8arrays/to-string":"w8mvE"}],"026DS":[function(require,module,exports) {
"use strict";
const ipRegex = require("ip-regex");
const isIp = (string)=>ipRegex({
        exact: true
    }).test(string);
isIp.v4 = (string)=>ipRegex.v4({
        exact: true
    }).test(string);
isIp.v6 = (string)=>ipRegex.v6({
        exact: true
    }).test(string);
isIp.version = (string)=>isIp(string) ? isIp.v4(string) ? 4 : 6 : undefined;
module.exports = isIp;

},{"ip-regex":"atjxC"}],"atjxC":[function(require,module,exports) {
"use strict";
const word = "[a-fA-F\\d:]";
const b = (options)=>options && options.includeBoundaries ? `(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))` : "";
const v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
const v6seg = "[a-fA-F\\d]{1,4}";
const v6 = `
(?:
(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6seg}:){5}(?::${v4}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
// Pre-compile only the exact regexes because adding a global flag make regexes stateful
const v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
const v4exact = new RegExp(`^${v4}$`);
const v6exact = new RegExp(`^${v6}$`);
const ip = (options)=>options && options.exact ? v46Exact : new RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6}${b(options)})`, "g");
ip.v4 = (options)=>options && options.exact ? v4exact : new RegExp(`${b(options)}${v4}${b(options)}`, "g");
ip.v6 = (options)=>options && options.exact ? v6exact : new RegExp(`${b(options)}${v6}${b(options)}`, "g");
module.exports = ip;

},{}],"j1p40":[function(require,module,exports) {
"use strict";
/** @typedef {import("./types").Protocol} Protocol */ /**
 * Protocols
 *
 * @param {number | string} proto
 * @returns {Protocol}
 */ function Protocols(proto) {
    if (typeof proto === "number") {
        if (Protocols.codes[proto]) return Protocols.codes[proto];
        throw new Error("no protocol with code: " + proto);
    } else if (typeof proto === "string") {
        if (Protocols.names[proto]) return Protocols.names[proto];
        throw new Error("no protocol with name: " + proto);
    }
    throw new Error("invalid protocol id type: " + proto);
}
const V = -1;
Protocols.lengthPrefixedVarSize = V;
Protocols.V = V;
/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */ Protocols.table = [
    [
        4,
        32,
        "ip4"
    ],
    [
        6,
        16,
        "tcp"
    ],
    [
        33,
        16,
        "dccp"
    ],
    [
        41,
        128,
        "ip6"
    ],
    [
        42,
        V,
        "ip6zone"
    ],
    [
        53,
        V,
        "dns",
        "resolvable"
    ],
    [
        54,
        V,
        "dns4",
        "resolvable"
    ],
    [
        55,
        V,
        "dns6",
        "resolvable"
    ],
    [
        56,
        V,
        "dnsaddr",
        "resolvable"
    ],
    [
        132,
        16,
        "sctp"
    ],
    [
        273,
        16,
        "udp"
    ],
    [
        275,
        0,
        "p2p-webrtc-star"
    ],
    [
        276,
        0,
        "p2p-webrtc-direct"
    ],
    [
        277,
        0,
        "p2p-stardust"
    ],
    [
        290,
        0,
        "p2p-circuit"
    ],
    [
        301,
        0,
        "udt"
    ],
    [
        302,
        0,
        "utp"
    ],
    [
        400,
        V,
        "unix",
        false,
        "path"
    ],
    // `ipfs` is added before `p2p` for legacy support.
    // All text representations will default to `p2p`, but `ipfs` will
    // still be supported
    [
        421,
        V,
        "ipfs"
    ],
    // `p2p` is the preferred name for 421, and is now the default
    [
        421,
        V,
        "p2p"
    ],
    [
        443,
        0,
        "https"
    ],
    [
        444,
        96,
        "onion"
    ],
    [
        445,
        296,
        "onion3"
    ],
    [
        446,
        V,
        "garlic64"
    ],
    [
        460,
        0,
        "quic"
    ],
    [
        477,
        0,
        "ws"
    ],
    [
        478,
        0,
        "wss"
    ],
    [
        479,
        0,
        "p2p-websocket-star"
    ],
    [
        480,
        0,
        "http"
    ],
    [
        777,
        V,
        "memory"
    ]
];
/** @type {Record<string,Protocol>} */ Protocols.names = {};
/** @type {Record<number,Protocol>} */ Protocols.codes = {};
// populate tables
Protocols.table.map((row)=>{
    const proto = p.apply(null, row);
    Protocols.codes[proto.code] = proto;
    Protocols.names[proto.name] = proto;
    return null;
});
Protocols.object = p;
/**
 *
 * Create a protocol
 *
 * @param {number} code
 * @param {number} size
 * @param {string} name
 * @param {any} [resolvable]
 * @param {any} [path]
 * @returns {Protocol}
 */ function p(code, size, name, resolvable, path) {
    return {
        code,
        size,
        name,
        resolvable: Boolean(resolvable),
        path: Boolean(path)
    };
}
module.exports = Protocols;

},{}],"cP5kF":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-dht-message"] || ($protobuf.roots["libp2p-dht-message"] = {});
$root.Record = function() {
    /**
     * Properties of a Record.
     * @exports IRecord
     * @interface IRecord
     * @property {Uint8Array|null} [key] Record key
     * @property {Uint8Array|null} [value] Record value
     * @property {Uint8Array|null} [author] Record author
     * @property {Uint8Array|null} [signature] Record signature
     * @property {string|null} [timeReceived] Record timeReceived
     */ /**
     * Constructs a new Record.
     * @exports Record
     * @classdesc Represents a Record.
     * @implements IRecord
     * @constructor
     * @param {IRecord=} [p] Properties to set
     */ function Record(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * Record key.
     * @member {Uint8Array|null|undefined} key
     * @memberof Record
     * @instance
     */ Record.prototype.key = null;
    /**
     * Record value.
     * @member {Uint8Array|null|undefined} value
     * @memberof Record
     * @instance
     */ Record.prototype.value = null;
    /**
     * Record author.
     * @member {Uint8Array|null|undefined} author
     * @memberof Record
     * @instance
     */ Record.prototype.author = null;
    /**
     * Record signature.
     * @member {Uint8Array|null|undefined} signature
     * @memberof Record
     * @instance
     */ Record.prototype.signature = null;
    /**
     * Record timeReceived.
     * @member {string|null|undefined} timeReceived
     * @memberof Record
     * @instance
     */ Record.prototype.timeReceived = null;
    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;
    /**
     * Record _key.
     * @member {"key"|undefined} _key
     * @memberof Record
     * @instance
     */ Object.defineProperty(Record.prototype, "_key", {
        get: $util.oneOfGetter($oneOfFields = [
            "key"
        ]),
        set: $util.oneOfSetter($oneOfFields)
    });
    /**
     * Record _value.
     * @member {"value"|undefined} _value
     * @memberof Record
     * @instance
     */ Object.defineProperty(Record.prototype, "_value", {
        get: $util.oneOfGetter($oneOfFields = [
            "value"
        ]),
        set: $util.oneOfSetter($oneOfFields)
    });
    /**
     * Record _author.
     * @member {"author"|undefined} _author
     * @memberof Record
     * @instance
     */ Object.defineProperty(Record.prototype, "_author", {
        get: $util.oneOfGetter($oneOfFields = [
            "author"
        ]),
        set: $util.oneOfSetter($oneOfFields)
    });
    /**
     * Record _signature.
     * @member {"signature"|undefined} _signature
     * @memberof Record
     * @instance
     */ Object.defineProperty(Record.prototype, "_signature", {
        get: $util.oneOfGetter($oneOfFields = [
            "signature"
        ]),
        set: $util.oneOfSetter($oneOfFields)
    });
    /**
     * Record _timeReceived.
     * @member {"timeReceived"|undefined} _timeReceived
     * @memberof Record
     * @instance
     */ Object.defineProperty(Record.prototype, "_timeReceived", {
        get: $util.oneOfGetter($oneOfFields = [
            "timeReceived"
        ]),
        set: $util.oneOfSetter($oneOfFields)
    });
    /**
     * Encodes the specified Record message. Does not implicitly {@link Record.verify|verify} messages.
     * @function encode
     * @memberof Record
     * @static
     * @param {IRecord} m Record message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ Record.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.key != null && Object.hasOwnProperty.call(m, "key")) w.uint32(10).bytes(m.key);
        if (m.value != null && Object.hasOwnProperty.call(m, "value")) w.uint32(18).bytes(m.value);
        if (m.author != null && Object.hasOwnProperty.call(m, "author")) w.uint32(26).bytes(m.author);
        if (m.signature != null && Object.hasOwnProperty.call(m, "signature")) w.uint32(34).bytes(m.signature);
        if (m.timeReceived != null && Object.hasOwnProperty.call(m, "timeReceived")) w.uint32(42).string(m.timeReceived);
        return w;
    };
    /**
     * Decodes a Record message from the specified reader or buffer.
     * @function decode
     * @memberof Record
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {Record} Record
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ Record.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Record();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.key = r.bytes();
                    break;
                case 2:
                    m.value = r.bytes();
                    break;
                case 3:
                    m.author = r.bytes();
                    break;
                case 4:
                    m.signature = r.bytes();
                    break;
                case 5:
                    m.timeReceived = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates a Record message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Record
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {Record} Record
     */ Record.fromObject = function fromObject(d) {
        if (d instanceof $root.Record) return d;
        var m = new $root.Record();
        if (d.key != null) {
            if (typeof d.key === "string") $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);
            else if (d.key.length) m.key = d.key;
        }
        if (d.value != null) {
            if (typeof d.value === "string") $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);
            else if (d.value.length) m.value = d.value;
        }
        if (d.author != null) {
            if (typeof d.author === "string") $util.base64.decode(d.author, m.author = $util.newBuffer($util.base64.length(d.author)), 0);
            else if (d.author.length) m.author = d.author;
        }
        if (d.signature != null) {
            if (typeof d.signature === "string") $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);
            else if (d.signature.length) m.signature = d.signature;
        }
        if (d.timeReceived != null) m.timeReceived = String(d.timeReceived);
        return m;
    };
    /**
     * Creates a plain object from a Record message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Record
     * @static
     * @param {Record} m Record
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ Record.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (m.key != null && m.hasOwnProperty("key")) {
            d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
            if (o.oneofs) d._key = "key";
        }
        if (m.value != null && m.hasOwnProperty("value")) {
            d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;
            if (o.oneofs) d._value = "value";
        }
        if (m.author != null && m.hasOwnProperty("author")) {
            d.author = o.bytes === String ? $util.base64.encode(m.author, 0, m.author.length) : o.bytes === Array ? Array.prototype.slice.call(m.author) : m.author;
            if (o.oneofs) d._author = "author";
        }
        if (m.signature != null && m.hasOwnProperty("signature")) {
            d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
            if (o.oneofs) d._signature = "signature";
        }
        if (m.timeReceived != null && m.hasOwnProperty("timeReceived")) {
            d.timeReceived = m.timeReceived;
            if (o.oneofs) d._timeReceived = "timeReceived";
        }
        return d;
    };
    /**
     * Converts this Record to JSON.
     * @function toJSON
     * @memberof Record
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ Record.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Record;
}();
$root.Message = function() {
    /**
     * Properties of a Message.
     * @exports IMessage
     * @interface IMessage
     * @property {Message.MessageType|null} [type] Message type
     * @property {number|null} [clusterLevelRaw] Message clusterLevelRaw
     * @property {Uint8Array|null} [key] Message key
     * @property {Uint8Array|null} [record] Message record
     * @property {Array.<Message.IPeer>|null} [closerPeers] Message closerPeers
     * @property {Array.<Message.IPeer>|null} [providerPeers] Message providerPeers
     */ /**
     * Constructs a new Message.
     * @exports Message
     * @classdesc Represents a Message.
     * @implements IMessage
     * @constructor
     * @param {IMessage=} [p] Properties to set
     */ function Message(p) {
        this.closerPeers = [];
        this.providerPeers = [];
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * Message type.
     * @member {Message.MessageType|null|undefined} type
     * @memberof Message
     * @instance
     */ Message.prototype.type = null;
    /**
     * Message clusterLevelRaw.
     * @member {number|null|undefined} clusterLevelRaw
     * @memberof Message
     * @instance
     */ Message.prototype.clusterLevelRaw = null;
    /**
     * Message key.
     * @member {Uint8Array|null|undefined} key
     * @memberof Message
     * @instance
     */ Message.prototype.key = null;
    /**
     * Message record.
     * @member {Uint8Array|null|undefined} record
     * @memberof Message
     * @instance
     */ Message.prototype.record = null;
    /**
     * Message closerPeers.
     * @member {Array.<Message.IPeer>} closerPeers
     * @memberof Message
     * @instance
     */ Message.prototype.closerPeers = $util.emptyArray;
    /**
     * Message providerPeers.
     * @member {Array.<Message.IPeer>} providerPeers
     * @memberof Message
     * @instance
     */ Message.prototype.providerPeers = $util.emptyArray;
    // OneOf field names bound to virtual getters and setters
    var $oneOfFields1;
    /**
     * Message _type.
     * @member {"type"|undefined} _type
     * @memberof Message
     * @instance
     */ Object.defineProperty(Message.prototype, "_type", {
        get: $util.oneOfGetter($oneOfFields1 = [
            "type"
        ]),
        set: $util.oneOfSetter($oneOfFields1)
    });
    /**
     * Message _clusterLevelRaw.
     * @member {"clusterLevelRaw"|undefined} _clusterLevelRaw
     * @memberof Message
     * @instance
     */ Object.defineProperty(Message.prototype, "_clusterLevelRaw", {
        get: $util.oneOfGetter($oneOfFields1 = [
            "clusterLevelRaw"
        ]),
        set: $util.oneOfSetter($oneOfFields1)
    });
    /**
     * Message _key.
     * @member {"key"|undefined} _key
     * @memberof Message
     * @instance
     */ Object.defineProperty(Message.prototype, "_key", {
        get: $util.oneOfGetter($oneOfFields1 = [
            "key"
        ]),
        set: $util.oneOfSetter($oneOfFields1)
    });
    /**
     * Message _record.
     * @member {"record"|undefined} _record
     * @memberof Message
     * @instance
     */ Object.defineProperty(Message.prototype, "_record", {
        get: $util.oneOfGetter($oneOfFields1 = [
            "record"
        ]),
        set: $util.oneOfSetter($oneOfFields1)
    });
    /**
     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.
     * @function encode
     * @memberof Message
     * @static
     * @param {IMessage} m Message message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ Message.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
        if (m.key != null && Object.hasOwnProperty.call(m, "key")) w.uint32(18).bytes(m.key);
        if (m.record != null && Object.hasOwnProperty.call(m, "record")) w.uint32(26).bytes(m.record);
        if (m.closerPeers != null && m.closerPeers.length) for(var i = 0; i < m.closerPeers.length; ++i)$root.Message.Peer.encode(m.closerPeers[i], w.uint32(66).fork()).ldelim();
        if (m.providerPeers != null && m.providerPeers.length) for(var i = 0; i < m.providerPeers.length; ++i)$root.Message.Peer.encode(m.providerPeers[i], w.uint32(74).fork()).ldelim();
        if (m.clusterLevelRaw != null && Object.hasOwnProperty.call(m, "clusterLevelRaw")) w.uint32(80).int32(m.clusterLevelRaw);
        return w;
    };
    /**
     * Decodes a Message message from the specified reader or buffer.
     * @function decode
     * @memberof Message
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {Message} Message
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ Message.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Message();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.type = r.int32();
                    break;
                case 10:
                    m.clusterLevelRaw = r.int32();
                    break;
                case 2:
                    m.key = r.bytes();
                    break;
                case 3:
                    m.record = r.bytes();
                    break;
                case 8:
                    if (!(m.closerPeers && m.closerPeers.length)) m.closerPeers = [];
                    m.closerPeers.push($root.Message.Peer.decode(r, r.uint32()));
                    break;
                case 9:
                    if (!(m.providerPeers && m.providerPeers.length)) m.providerPeers = [];
                    m.providerPeers.push($root.Message.Peer.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates a Message message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Message
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {Message} Message
     */ Message.fromObject = function fromObject(d) {
        if (d instanceof $root.Message) return d;
        var m = new $root.Message();
        switch(d.type){
            case "PUT_VALUE":
            case 0:
                m.type = 0;
                break;
            case "GET_VALUE":
            case 1:
                m.type = 1;
                break;
            case "ADD_PROVIDER":
            case 2:
                m.type = 2;
                break;
            case "GET_PROVIDERS":
            case 3:
                m.type = 3;
                break;
            case "FIND_NODE":
            case 4:
                m.type = 4;
                break;
            case "PING":
            case 5:
                m.type = 5;
                break;
        }
        if (d.clusterLevelRaw != null) m.clusterLevelRaw = d.clusterLevelRaw | 0;
        if (d.key != null) {
            if (typeof d.key === "string") $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);
            else if (d.key.length) m.key = d.key;
        }
        if (d.record != null) {
            if (typeof d.record === "string") $util.base64.decode(d.record, m.record = $util.newBuffer($util.base64.length(d.record)), 0);
            else if (d.record.length) m.record = d.record;
        }
        if (d.closerPeers) {
            if (!Array.isArray(d.closerPeers)) throw TypeError(".Message.closerPeers: array expected");
            m.closerPeers = [];
            for(var i = 0; i < d.closerPeers.length; ++i){
                if (typeof d.closerPeers[i] !== "object") throw TypeError(".Message.closerPeers: object expected");
                m.closerPeers[i] = $root.Message.Peer.fromObject(d.closerPeers[i]);
            }
        }
        if (d.providerPeers) {
            if (!Array.isArray(d.providerPeers)) throw TypeError(".Message.providerPeers: array expected");
            m.providerPeers = [];
            for(var i = 0; i < d.providerPeers.length; ++i){
                if (typeof d.providerPeers[i] !== "object") throw TypeError(".Message.providerPeers: object expected");
                m.providerPeers[i] = $root.Message.Peer.fromObject(d.providerPeers[i]);
            }
        }
        return m;
    };
    /**
     * Creates a plain object from a Message message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Message
     * @static
     * @param {Message} m Message
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ Message.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.arrays || o.defaults) {
            d.closerPeers = [];
            d.providerPeers = [];
        }
        if (m.type != null && m.hasOwnProperty("type")) {
            d.type = o.enums === String ? $root.Message.MessageType[m.type] : m.type;
            if (o.oneofs) d._type = "type";
        }
        if (m.key != null && m.hasOwnProperty("key")) {
            d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
            if (o.oneofs) d._key = "key";
        }
        if (m.record != null && m.hasOwnProperty("record")) {
            d.record = o.bytes === String ? $util.base64.encode(m.record, 0, m.record.length) : o.bytes === Array ? Array.prototype.slice.call(m.record) : m.record;
            if (o.oneofs) d._record = "record";
        }
        if (m.closerPeers && m.closerPeers.length) {
            d.closerPeers = [];
            for(var j = 0; j < m.closerPeers.length; ++j)d.closerPeers[j] = $root.Message.Peer.toObject(m.closerPeers[j], o);
        }
        if (m.providerPeers && m.providerPeers.length) {
            d.providerPeers = [];
            for(var j = 0; j < m.providerPeers.length; ++j)d.providerPeers[j] = $root.Message.Peer.toObject(m.providerPeers[j], o);
        }
        if (m.clusterLevelRaw != null && m.hasOwnProperty("clusterLevelRaw")) {
            d.clusterLevelRaw = m.clusterLevelRaw;
            if (o.oneofs) d._clusterLevelRaw = "clusterLevelRaw";
        }
        return d;
    };
    /**
     * Converts this Message to JSON.
     * @function toJSON
     * @memberof Message
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ Message.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    /**
     * MessageType enum.
     * @name Message.MessageType
     * @enum {number}
     * @property {number} PUT_VALUE=0 PUT_VALUE value
     * @property {number} GET_VALUE=1 GET_VALUE value
     * @property {number} ADD_PROVIDER=2 ADD_PROVIDER value
     * @property {number} GET_PROVIDERS=3 GET_PROVIDERS value
     * @property {number} FIND_NODE=4 FIND_NODE value
     * @property {number} PING=5 PING value
     */ Message.MessageType = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PUT_VALUE"] = 0;
        values[valuesById[1] = "GET_VALUE"] = 1;
        values[valuesById[2] = "ADD_PROVIDER"] = 2;
        values[valuesById[3] = "GET_PROVIDERS"] = 3;
        values[valuesById[4] = "FIND_NODE"] = 4;
        values[valuesById[5] = "PING"] = 5;
        return values;
    }();
    /**
     * ConnectionType enum.
     * @name Message.ConnectionType
     * @enum {number}
     * @property {number} NOT_CONNECTED=0 NOT_CONNECTED value
     * @property {number} CONNECTED=1 CONNECTED value
     * @property {number} CAN_CONNECT=2 CAN_CONNECT value
     * @property {number} CANNOT_CONNECT=3 CANNOT_CONNECT value
     */ Message.ConnectionType = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NOT_CONNECTED"] = 0;
        values[valuesById[1] = "CONNECTED"] = 1;
        values[valuesById[2] = "CAN_CONNECT"] = 2;
        values[valuesById[3] = "CANNOT_CONNECT"] = 3;
        return values;
    }();
    Message.Peer = function() {
        /**
         * Properties of a Peer.
         * @memberof Message
         * @interface IPeer
         * @property {Uint8Array|null} [id] Peer id
         * @property {Array.<Uint8Array>|null} [addrs] Peer addrs
         * @property {Message.ConnectionType|null} [connection] Peer connection
         */ /**
         * Constructs a new Peer.
         * @memberof Message
         * @classdesc Represents a Peer.
         * @implements IPeer
         * @constructor
         * @param {Message.IPeer=} [p] Properties to set
         */ function Peer(p) {
            this.addrs = [];
            if (p) {
                for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
        }
        /**
         * Peer id.
         * @member {Uint8Array|null|undefined} id
         * @memberof Message.Peer
         * @instance
         */ Peer.prototype.id = null;
        /**
         * Peer addrs.
         * @member {Array.<Uint8Array>} addrs
         * @memberof Message.Peer
         * @instance
         */ Peer.prototype.addrs = $util.emptyArray;
        /**
         * Peer connection.
         * @member {Message.ConnectionType|null|undefined} connection
         * @memberof Message.Peer
         * @instance
         */ Peer.prototype.connection = null;
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
        /**
         * Peer _id.
         * @member {"id"|undefined} _id
         * @memberof Message.Peer
         * @instance
         */ Object.defineProperty(Peer.prototype, "_id", {
            get: $util.oneOfGetter($oneOfFields = [
                "id"
            ]),
            set: $util.oneOfSetter($oneOfFields)
        });
        /**
         * Peer _connection.
         * @member {"connection"|undefined} _connection
         * @memberof Message.Peer
         * @instance
         */ Object.defineProperty(Peer.prototype, "_connection", {
            get: $util.oneOfGetter($oneOfFields = [
                "connection"
            ]),
            set: $util.oneOfSetter($oneOfFields)
        });
        /**
         * Encodes the specified Peer message. Does not implicitly {@link Message.Peer.verify|verify} messages.
         * @function encode
         * @memberof Message.Peer
         * @static
         * @param {Message.IPeer} m Peer message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */ Peer.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(10).bytes(m.id);
            if (m.addrs != null && m.addrs.length) for(var i = 0; i < m.addrs.length; ++i)w.uint32(18).bytes(m.addrs[i]);
            if (m.connection != null && Object.hasOwnProperty.call(m, "connection")) w.uint32(24).int32(m.connection);
            return w;
        };
        /**
         * Decodes a Peer message from the specified reader or buffer.
         * @function decode
         * @memberof Message.Peer
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {Message.Peer} Peer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */ Peer.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Peer();
            while(r.pos < c){
                var t = r.uint32();
                switch(t >>> 3){
                    case 1:
                        m.id = r.bytes();
                        break;
                    case 2:
                        if (!(m.addrs && m.addrs.length)) m.addrs = [];
                        m.addrs.push(r.bytes());
                        break;
                    case 3:
                        m.connection = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };
        /**
         * Creates a Peer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Message.Peer
         * @static
         * @param {Object.<string,*>} d Plain object
         * @returns {Message.Peer} Peer
         */ Peer.fromObject = function fromObject(d) {
            if (d instanceof $root.Message.Peer) return d;
            var m = new $root.Message.Peer();
            if (d.id != null) {
                if (typeof d.id === "string") $util.base64.decode(d.id, m.id = $util.newBuffer($util.base64.length(d.id)), 0);
                else if (d.id.length) m.id = d.id;
            }
            if (d.addrs) {
                if (!Array.isArray(d.addrs)) throw TypeError(".Message.Peer.addrs: array expected");
                m.addrs = [];
                for(var i = 0; i < d.addrs.length; ++i){
                    if (typeof d.addrs[i] === "string") $util.base64.decode(d.addrs[i], m.addrs[i] = $util.newBuffer($util.base64.length(d.addrs[i])), 0);
                    else if (d.addrs[i].length) m.addrs[i] = d.addrs[i];
                }
            }
            switch(d.connection){
                case "NOT_CONNECTED":
                case 0:
                    m.connection = 0;
                    break;
                case "CONNECTED":
                case 1:
                    m.connection = 1;
                    break;
                case "CAN_CONNECT":
                case 2:
                    m.connection = 2;
                    break;
                case "CANNOT_CONNECT":
                case 3:
                    m.connection = 3;
                    break;
            }
            return m;
        };
        /**
         * Creates a plain object from a Peer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Message.Peer
         * @static
         * @param {Message.Peer} m Peer
         * @param {$protobuf.IConversionOptions} [o] Conversion options
         * @returns {Object.<string,*>} Plain object
         */ Peer.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};
            if (o.arrays || o.defaults) d.addrs = [];
            if (m.id != null && m.hasOwnProperty("id")) {
                d.id = o.bytes === String ? $util.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;
                if (o.oneofs) d._id = "id";
            }
            if (m.addrs && m.addrs.length) {
                d.addrs = [];
                for(var j = 0; j < m.addrs.length; ++j)d.addrs[j] = o.bytes === String ? $util.base64.encode(m.addrs[j], 0, m.addrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.addrs[j]) : m.addrs[j];
            }
            if (m.connection != null && m.hasOwnProperty("connection")) {
                d.connection = o.enums === String ? $root.Message.ConnectionType[m.connection] : m.connection;
                if (o.oneofs) d._connection = "connection";
            }
            return d;
        };
        /**
         * Converts this Peer to JSON.
         * @function toJSON
         * @memberof Message.Peer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */ Peer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Peer;
    }();
    return Message;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"aWIM1":[function(require,module,exports) {
"use strict";
const T = require("../../message").TYPES;
/**
 *
 * @param {import('../../index')} dht
 */ module.exports = (dht)=>{
    const handlers = {
        [T.GET_VALUE]: require("./get-value")(dht),
        [T.PUT_VALUE]: require("./put-value")(dht),
        [T.FIND_NODE]: require("./find-node")(dht),
        [T.ADD_PROVIDER]: require("./add-provider")(dht),
        [T.GET_PROVIDERS]: require("./get-providers")(dht),
        [T.PING]: require("./ping")(dht)
    };
    /**
   * Get the message handler matching the passed in type.
   *
   * @param {number} type
   */ function getMessageHandler(type) {
        // @ts-ignore ts does not aknowledge number as an index type
        return handlers[type];
    }
    return getMessageHandler;
};

},{"../../message":"6c5Nm","./get-value":"21iPB","./put-value":"9pJQc","./find-node":"16swm","./add-provider":"cnyTN","./get-providers":"e3GUr","./ping":"iOjOC"}],"21iPB":[function(require,module,exports) {
"use strict";
const { Record  } = require("libp2p-record");
const errcode = require("err-code");
const Message = require("../../message");
const utils = require("../../utils");
/**
 * @typedef {import('peer-id')} PeerId
 */ /**
 * @param {import('../../index')} dht
 */ module.exports = (dht)=>{
    const log = utils.logger(dht.peerId, "rpc:get-value");
    /**
   * Process `GetValue` DHT messages.
   *
   * @param {PeerId} peerId
   * @param {Message} msg
   * @returns {Promise<Message>}
   */ async function getValue(peerId, msg) {
        const key = msg.key;
        log("key: %b", key);
        if (!key || key.length === 0) throw errcode(new Error("Invalid key"), "ERR_INVALID_KEY");
        const response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel);
        if (utils.isPublicKeyKey(key)) {
            log("is public key");
            const idFromKey = utils.fromPublicKeyKey(key);
            let id;
            if (dht._isSelf(idFromKey)) id = dht.peerId;
            else {
                const peerData = dht.peerStore.get(idFromKey);
                id = peerData && peerData.id;
            }
            if (id && id.pubKey) {
                log("returning found public key");
                response.record = new Record(key, id.pubKey.bytes);
                return response;
            }
        }
        const [record, closer] = await Promise.all([
            dht._checkLocalDatastore(key),
            dht._betterPeersToQuery(msg, peerId)
        ]);
        if (record) {
            log("got record");
            response.record = record;
        }
        if (closer.length > 0) {
            log("got closer %s", closer.length);
            response.closerPeers = closer;
        }
        return response;
    }
    return getValue;
};

},{"libp2p-record":"3iJYP","err-code":"dUrrM","../../message":"6c5Nm","../../utils":"1wrtw"}],"9pJQc":[function(require,module,exports) {
"use strict";
const utils = require("../../utils");
const errcode = require("err-code");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../../message')} Message
 */ /**
 * @param {import('../../index')} dht
 */ module.exports = (dht)=>{
    const log = utils.logger(dht.peerId, "rpc:put-value");
    /**
   * Process `PutValue` DHT messages.
   *
   * @param {PeerId} peerId
   * @param {Message} msg
   */ async function putValue(peerId, msg) {
        const key = msg.key;
        log("key: %b", key);
        const record = msg.record;
        if (!record) {
            const errMsg = `Empty record from: ${peerId.toB58String()}`;
            log.error(errMsg);
            throw errcode(new Error(errMsg), "ERR_EMPTY_RECORD");
        }
        await dht._verifyRecordLocally(record);
        record.timeReceived = new Date();
        const recordKey = utils.bufferToKey(record.key);
        await dht.datastore.put(recordKey, record.serialize());
        dht.onPut(record, peerId);
        return msg;
    }
    return putValue;
};

},{"../../utils":"1wrtw","err-code":"dUrrM"}],"16swm":[function(require,module,exports) {
"use strict";
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const Message = require("../../message");
const utils = require("../../utils");
/**
 * @typedef {import('peer-id')} PeerId
 */ /**
 * @param {import('../../index')} dht
 */ module.exports = (dht)=>{
    const log = utils.logger(dht.peerId, "rpc:find-node");
    /**
   * Process `FindNode` DHT messages.
   *
   * @param {PeerId} peerId
   * @param {Message} msg
   */ async function findNode(peerId, msg) {
        log("start");
        let closer;
        if (uint8ArrayEquals(msg.key, dht.peerId.id)) closer = [
            {
                id: dht.peerId,
                multiaddrs: dht.libp2p.multiaddrs
            }
        ];
        else closer = await dht._betterPeersToQuery(msg, peerId);
        const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel);
        if (closer.length > 0) response.closerPeers = closer;
        else log("handle FindNode %s: could not find anything", peerId.toB58String());
        return response;
    }
    return findNode;
};

},{"uint8arrays/equals":"iZMnE","../../message":"6c5Nm","../../utils":"1wrtw"}],"cnyTN":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const errcode = require("err-code");
const utils = require("../../utils");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../../message')} Message
 */ /**
 * @param {import('../../index')} dht
 */ module.exports = (dht)=>{
    const log = utils.logger(dht.peerId, "rpc:add-provider");
    /**
   * Process `AddProvider` DHT messages.
   *
   * @param {PeerId} peerId
   * @param {Message} msg
   */ async function addProvider(peerId, msg) {
        log("start");
        if (!msg.key || msg.key.length === 0) throw errcode(new Error("Missing key"), "ERR_MISSING_KEY");
        /** @type {CID} */ let cid;
        try {
            cid = CID.decode(msg.key);
        } catch (err) {
            const errMsg = `Invalid CID: ${err.message}`;
            throw errcode(new Error(errMsg), "ERR_INVALID_CID");
        }
        msg.providerPeers.forEach((pi)=>{
            // Ignore providers not from the originator
            if (!pi.id.isEqual(peerId)) {
                log("invalid provider peer %s from %s", pi.id.toB58String(), peerId.toB58String());
                return;
            }
            if (pi.multiaddrs.length < 1) {
                log("no valid addresses for provider %s. Ignore", peerId.toB58String());
                return;
            }
            log("received provider %s for %s (addrs %s)", peerId.toB58String(), cid.toString(), pi.multiaddrs.map((m)=>m.toString()));
            if (!dht._isSelf(pi.id)) {
                // Add known address to peer store
                dht.peerStore.addressBook.add(pi.id, pi.multiaddrs);
                return dht.providers.addProvider(cid, pi.id);
            }
        });
        // Previous versions of the JS DHT sent erroneous providers in the
        // `providerPeers` field. In order to accommodate older clients that have
        // this bug, we fall back to assuming the originator is the provider if
        // we can't find any valid providers in the payload.
        // https://github.com/libp2p/js-libp2p-kad-dht/pull/127
        // https://github.com/libp2p/js-libp2p-kad-dht/issues/128
        return dht.providers.addProvider(cid, peerId);
    }
    return addProvider;
};

},{"multiformats/cid":"4uoBU","err-code":"dUrrM","../../utils":"1wrtw"}],"e3GUr":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const errcode = require("err-code");
const Message = require("../../message");
const utils = require("../../utils");
/**
 * @typedef {import('peer-id')} PeerId
 */ /**
 * @param {import('../../index')} dht
 */ module.exports = (dht)=>{
    const log = utils.logger(dht.peerId, "rpc:get-providers");
    /**
   * Process `GetProviders` DHT messages.
   *
   * @param {PeerId} peerId
   * @param {Message} msg
   */ async function getProviders(peerId1, msg) {
        let cid;
        try {
            cid = CID.decode(msg.key);
        } catch (err) {
            throw errcode(new Error(`Invalid CID: ${err.message}`), "ERR_INVALID_CID");
        }
        log("%s", cid.toString());
        const dsKey = utils.bufferToKey(cid.bytes);
        const [has, peers, closer] = await Promise.all([
            dht.datastore.has(dsKey),
            dht.providers.getProviders(cid),
            dht._betterPeersToQuery(msg, peerId1)
        ]);
        const providerPeers = peers.map((peerId)=>({
                id: peerId,
                multiaddrs: []
            }));
        const closerPeers = closer.map((c)=>({
                id: c.id,
                multiaddrs: []
            }));
        if (has) providerPeers.push({
            id: dht.peerId,
            multiaddrs: []
        });
        const response = new Message(msg.type, msg.key, msg.clusterLevel);
        if (providerPeers.length > 0) response.providerPeers = providerPeers;
        if (closerPeers.length > 0) response.closerPeers = closerPeers;
        log("got %s providers %s closerPeers", providerPeers.length, closerPeers.length);
        return response;
    }
    return getProviders;
};

},{"multiformats/cid":"4uoBU","err-code":"dUrrM","../../message":"6c5Nm","../../utils":"1wrtw"}],"iOjOC":[function(require,module,exports) {
"use strict";
const utils = require("../../utils");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../../message')} Message
 */ /**
 * @param {import('../../index')} dht
 */ module.exports = (dht)=>{
    const log = utils.logger(dht.peerId, "rpc:ping");
    /**
   * Process `Ping` DHT messages.
   *
   * @param {PeerId} peerId
   * @param {Message} msg
   */ function ping(peerId, msg) {
        log("from %s", peerId.toB58String());
        return msg;
    }
    return ping;
};

},{"../../utils":"1wrtw"}],"67nTW":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const pTimeout = require("p-timeout");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const libp2pRecord = require("libp2p-record");
const c = require("../constants");
const Query = require("../query");
const utils = require("../utils");
const Record = libp2pRecord.Record;
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../query').DHTQueryResult} DHTQueryResult
 */ /**
 * @param {import('../')} dht
 */ module.exports = (dht)=>{
    /**
   * @param {Uint8Array} key
   * @param {Uint8Array} rec
   */ const putLocal = async (key, rec)=>{
        return dht.datastore.put(utils.bufferToKey(key), rec);
    };
    /**
   * Attempt to retrieve the value for the given key from
   * the local datastore.
   *
   * @param {Uint8Array} key
   */ const getLocal = async (key)=>{
        dht._log(`getLocal ${uint8ArrayToString(key, "base32")}`);
        const raw = await dht.datastore.get(utils.bufferToKey(key));
        dht._log(`found ${uint8ArrayToString(key, "base32")} in local datastore`);
        const rec = Record.deserialize(raw);
        await dht._verifyRecordLocally(rec);
        return rec;
    };
    /**
   * Send the best record found to any peers that have an out of date record.
   *
   * @param {Uint8Array} key
   * @param {import('../query').DHTQueryValue[]} vals - values retrieved from the DHT
   * @param {Uint8Array} best - the best record that was found
   */ const sendCorrectionRecord = async (key, vals, best)=>{
        const fixupRec = await utils.createPutRecord(key, best);
        return Promise.all(vals.map(async (v)=>{
            // no need to do anything
            if (uint8ArrayEquals(v.val, best)) return;
            // correct ourself
            if (dht._isSelf(v.from)) {
                try {
                    await dht._putLocal(key, fixupRec);
                } catch (err) {
                    dht._log.error("Failed error correcting self", err);
                }
                return;
            }
            // send correction
            try {
                await dht._putValueToPeer(key, fixupRec, v.from);
            } catch (err) {
                dht._log.error("Failed error correcting entry", err);
            }
        }));
    };
    return {
        /**
     * Store the given key/value pair locally, in the datastore.
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} rec - encoded record
     */ async _putLocal (key, rec) {
            return putLocal(key, rec);
        },
        /**
     * Store the given key/value  pair in the DHT.
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} value
     * @param {object} [options] - put options
     * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)
     */ async put (key, value, options = {}) {
            dht._log("PutValue %b", key);
            // create record in the dht format
            const record = await utils.createPutRecord(key, value);
            // store the record locally
            await putLocal(key, record);
            // put record to the closest peers
            let counterAll = 0;
            let counterSuccess = 0;
            await utils.mapParallel(dht.getClosestPeers(key, {
                shallow: true
            }), async (peer)=>{
                try {
                    counterAll += 1;
                    await dht._putValueToPeer(key, record, peer);
                    counterSuccess += 1;
                } catch (err) {
                    dht._log.error("Failed to put to peer (%b): %s", peer.id, err);
                }
            });
            // verify if we were able to put to enough peers
            const minPeers = options.minPeers || counterAll // Ensure we have a default `minPeers`
            ;
            if (minPeers > counterSuccess) {
                const error = errcode(new Error(`Failed to put value to enough peers: ${counterSuccess}/${minPeers}`), "ERR_NOT_ENOUGH_PUT_PEERS");
                dht._log.error(error);
                throw error;
            }
        },
        /**
     * Get the value to the given key.
     * Times out after 1 minute by default.
     *
     * @param {Uint8Array} key
     * @param {object} [options] - get options
     * @param {number} [options.timeout] - optional timeout (default: 60000)
     */ async get (key, options = {}) {
            options.timeout = options.timeout || c.minute;
            dht._log("_get %b", key);
            const vals = await dht.getMany(key, c.GET_MANY_RECORD_COUNT, options);
            const recs = vals.map((v)=>v.val);
            let i = 0;
            try {
                i = libp2pRecord.selection.bestRecord(dht.selectors, key, recs);
            } catch (err) {
                // Assume the first record if no selector available
                if (err.code !== "ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY") throw err;
            }
            const best = recs[i];
            dht._log("GetValue %b %s", key, best);
            if (!best) throw errcode(new Error("best value was not found"), "ERR_NOT_FOUND");
            await sendCorrectionRecord(key, vals, best);
            return best;
        },
        /**
     * Get the `n` values to the given key without sorting.
     *
     * @param {Uint8Array} key
     * @param {number} nvals
     * @param {object} [options] - get options
     * @param {number} [options.timeout] - optional timeout (default: 60000)
     */ async getMany (key, nvals, options = {}) {
            options.timeout = options.timeout || c.minute;
            dht._log("getMany %b (%s)", key, nvals);
            const vals = [];
            let localRec;
            try {
                localRec = await getLocal(key);
            } catch (err1) {
                if (nvals === 0) throw err1;
            }
            if (localRec) vals.push({
                val: localRec.value,
                from: dht.peerId
            });
            if (vals.length >= nvals) return vals;
            const id = await utils.convertBuffer(key);
            const rtp = dht.routingTable.closestPeers(id, dht.kBucketSize);
            dht._log("peers in rt: %d", rtp.length);
            if (rtp.length === 0) {
                const errMsg = "Failed to lookup key! No peers from routing table!";
                dht._log.error(errMsg);
                if (vals.length === 0) throw errcode(new Error(errMsg), "ERR_NO_PEERS_IN_ROUTING_TABLE");
                return vals;
            }
            const valsLength = vals.length;
            /**
       * @param {number} pathIndex
       * @param {number} numPaths
       */ function createQuery(pathIndex, numPaths) {
                // This function body runs once per disjoint path
                const pathSize = utils.pathSize(nvals - valsLength, numPaths);
                let queryResults = 0;
                /**
         * Here we return the query function to use on this particular disjoint path
         *
         * @param {PeerId} peer
         */ async function disjointPathQuery(peer) {
                    let rec, peers, lookupErr;
                    try {
                        const results = await dht._getValueOrPeers(peer, key);
                        rec = results.record;
                        peers = results.peers;
                    } catch (err) {
                        // If we have an invalid record we just want to continue and fetch a new one.
                        if (err.code !== "ERR_INVALID_RECORD") throw err;
                        lookupErr = err;
                    }
                    /** @type {import('../query').QueryResult} */ const res = {
                        closerPeers: peers
                    };
                    if (rec && rec.value) {
                        vals.push({
                            val: rec.value,
                            from: peer
                        });
                        queryResults++;
                    } else if (lookupErr) {
                        vals.push({
                            err: lookupErr,
                            from: peer
                        });
                        queryResults++;
                    }
                    // enough is enough
                    if (queryResults >= pathSize) res.pathComplete = true;
                    return res;
                }
                return disjointPathQuery;
            }
            // we have peers, lets send the actual query to them
            const query = new Query(dht, key, createQuery);
            try {
                await pTimeout(query.run(rtp), options.timeout);
            } catch (err) {
                if (vals.length === 0) throw err;
            } finally{
                query.stop();
            }
            return vals;
        }
    };
};

},{"err-code":"dUrrM","p-timeout":"2j2Zi","uint8arrays/equals":"iZMnE","uint8arrays/to-string":"w8mvE","libp2p-record":"3iJYP","../constants":"ghCGZ","../query":"fnHnh","../utils":"1wrtw"}],"fnHnh":[function(require,module,exports) {
"use strict";
const { base58btc  } = require("multiformats/bases/base58");
const utils = require("../utils");
const Run = require("./run");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {{from: PeerId, val: Uint8Array}} DHTQueryValue
 * @typedef {{from: PeerId, err: Error}} DHTQueryError
 * @typedef {DHTQueryValue | DHTQueryError} DHTQueryResult
 * @typedef {import('../').PeerData} PeerData
 *
 * @typedef {{ pathComplete?: boolean, queryComplete?: boolean, closerPeers?: PeerData[], peer?: PeerData, success?: boolean }} QueryResult
 */ /**
 * User-supplied function to set up an individual disjoint path. Per-path
 * query state should be held in this function's closure.
 *
 * Accepts the numeric index from zero to numPaths - 1 and returns a function
 * to call on each peer in the query.
 *
 * @typedef {(pathIndex: number, numPaths: number) => QueryFunc } MakeQueryFunc
 */ /**
 * Query function
 *
 * @typedef {(peer: PeerId) => Promise<QueryResult> } QueryFunc
 */ /**
 * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.
 * Within each path, query peers from closest to farthest away.
 */ class Query {
    /**
   * Create a new query. The makePath function is called once per disjoint path, so that per-path
   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to
   * use when on that path.
   *
   * @param {import('../index')} dht - DHT instance
   * @param {Uint8Array} key
   * @param {MakeQueryFunc} makePath - Called to set up each disjoint path. Must return the query function.
   */ constructor(dht, key, makePath){
        this.dht = dht;
        this.key = key;
        this.makePath = makePath;
        this._log = utils.logger(this.dht.peerId, "query:" + base58btc.baseEncode(key));
        this.running = false;
        this._onStart = this._onStart.bind(this);
        this._onComplete = this._onComplete.bind(this);
    }
    /**
   * Run this query, start with the given list of peers first.
   *
   * @param {PeerId[]} peers
   */ async run(peers) {
        if (!this.dht._queryManager.running) {
            this._log.error("Attempt to run query after shutdown");
            return {
                finalSet: new Set(),
                paths: []
            };
        }
        if (peers.length === 0) {
            this._log.error("Running query with no peers");
            return {
                finalSet: new Set(),
                paths: []
            };
        }
        this._run = new Run(this);
        this._log(`query running with K=${this.dht.kBucketSize}, A=${this.dht.concurrency}, D=${Math.min(this.dht.disjointPaths, peers.length)}`);
        this._run.once("start", this._onStart);
        this._run.once("complete", this._onComplete);
        return this._run.execute(peers);
    }
    /**
   * Called when the run starts.
   */ _onStart() {
        this.running = true;
        this._startTime = Date.now();
        this._log("query:start");
        // Register this query so we can stop it if the DHT stops
        this.dht._queryManager.queryStarted(this);
    }
    /**
   * Called when the run completes (even if there's an error).
   */ _onComplete() {
        // Ensure worker queues for all paths are stopped at the end of the query
        this.stop();
    }
    /**
   * Stop the query.
   */ stop() {
        this._log(`query:done in ${Date.now() - (this._startTime || 0)}ms`);
        if (this._run) this._log(`${this._run.errors.length} of ${this._run.peersSeen.size} peers errored (${this._run.errors.length / this._run.peersSeen.size * 100}% fail rate)`);
        if (!this.running) return;
        this.running = false;
        if (this._run) {
            this._run.removeListener("start", this._onStart);
            this._run.removeListener("complete", this._onComplete);
            this._run.stop();
        }
        this.dht._queryManager.queryCompleted(this);
    }
}
module.exports = Query;

},{"multiformats/bases/base58":"9KkrI","../utils":"1wrtw","./run":"chRlV"}],"chRlV":[function(require,module,exports) {
"use strict";
const PeerDistanceList = require("../peer-list/peer-distance-list");
const EventEmitter = require("events");
const Path = require("./path");
const WorkerQueue = require("./worker-queue");
const utils = require("../utils");
/**
 * @typedef {import('peer-id')} PeerId
 */ /**
 * Manages a single run of the query.
 */ class Run extends EventEmitter {
    /**
   * Creates a Run.
   *
   * @param {import('./index')} query
   */ constructor(query){
        super();
        this.query = query;
        this.running = false;
        /** @type {WorkerQueue[]} */ this.workers = [];
        // The peers that have been queried (including error responses)
        this.peersSeen = new Set();
        // The errors received when querying peers
        /** @type {Error[]} */ this.errors = [];
        // The closest K peers that have been queried successfully
        // (this member is initialized when the worker queues start)
        /** @type {PeerDistanceList | null} */ this.peersQueried = null;
    }
    /**
   * Stop all the workers
   */ stop() {
        if (!this.running) return;
        this.running = false;
        for (const worker of this.workers)worker.stop();
    }
    /**
   * Execute the run with the given initial set of peers.
   *
   * @param {PeerId[]} peers
   */ async execute(peers) {
        /** @type {import('./path')[]} */ const paths = [] // array of states per disjoint path
        ;
        // Create disjoint paths
        const numPaths = Math.min(this.query.dht.disjointPaths, peers.length);
        for(let i1 = 0; i1 < numPaths; i1++)paths.push(new Path(this, this.query.makePath(i1, numPaths)));
        // Assign peers to paths round-robin style
        peers.forEach((peer, i)=>{
            paths[i % numPaths].addInitialPeer(peer);
        });
        // Execute the query along each disjoint path
        await this.executePaths(paths);
        const res = {
            // The closest K peers we were able to query successfully
            finalSet: new Set(this.peersQueried && this.peersQueried.peers),
            /** @type {import('./index').QueryResult[]} */ paths: []
        };
        // Collect the results from each completed path
        for (const path of paths)if (path.res && (path.res.pathComplete || path.res.queryComplete)) {
            path.res.success = true;
            res.paths.push(path.res);
        }
        return res;
    }
    /**
   * Execute all paths through the DHT.
   *
   * @param {Array<Path>} paths
   * @returns {Promise<void>}
   */ async executePaths(paths) {
        this.running = true;
        this.emit("start");
        try {
            await Promise.all(paths.map((path)=>path.execute()));
        } finally{
            // Ensure all workers are stopped
            this.stop();
            // Completed the Run
            this.emit("complete");
        }
        // If all queries errored out, something is seriously wrong, so callback
        // with an error
        if (this.errors.length === this.peersSeen.size) throw this.errors[0];
    }
    /**
   * Initialize the list of queried peers, then start a worker queue for the
   * given path.
   *
   * @param {Path} path
   * @returns {Promise<void>}
   */ async workerQueue(path) {
        await this.init();
        await this.startWorker(path);
    }
    /**
   * Create and start a worker queue for a particular path.
   *
   * @param {Path} path
   * @returns {Promise<void>}
   */ async startWorker(path) {
        const worker = new WorkerQueue(this.query.dht, this, path, this.query._log);
        this.workers.push(worker);
        await worker.execute();
    }
    /**
   * Initialize the list of closest peers we've queried - this is shared by all
   * paths in the run.
   *
   * @returns {Promise<void>}
   */ async init() {
        if (this.peersQueried) return;
        // We only want to initialize the PeerDistanceList once for the run
        if (this.peersQueriedPromise) {
            await this.peersQueriedPromise;
            return;
        }
        // This promise is temporarily stored so that others may await its completion
        this.peersQueriedPromise = (async ()=>{
            const dhtKey = await utils.convertBuffer(this.query.key);
            this.peersQueried = new PeerDistanceList(dhtKey, this.query.dht.kBucketSize);
        })();
        // After PeerDistanceList is initialized, clean up
        await this.peersQueriedPromise;
        delete this.peersQueriedPromise;
    }
    /**
   * If we've queried K peers, and the remaining peers in the given `worker`'s queue
   * are all further from the key than the peers we've already queried, then we should
   * stop querying on that `worker`.
   *
   * @param {WorkerQueue} worker
   * @returns {Promise<boolean>}
   */ async continueQuerying(worker) {
        // If we haven't queried K peers yet, keep going
        if (this.peersQueried && this.peersQueried.length < this.peersQueried.capacity) return true;
        // Get all the peers that are currently being queried.
        // Note that this function gets called right after a peer has been popped
        // off the head of the closest peers queue so it will include that peer.
        const running = Array.from(worker.queuedPeerIds);
        // Check if any of the peers that are currently being queried are closer
        // to the key than the peers we've already queried
        const someCloser = this.peersQueried && await this.peersQueried.anyCloser(running);
        // Some are closer, the worker should keep going
        if (someCloser) return true;
        // None are closer, the worker can stop
        return false;
    }
}
module.exports = Run;

},{"../peer-list/peer-distance-list":"jLQ6V","events":"1VQLm","./path":"9A5pl","./worker-queue":"dVHsL","../utils":"1wrtw"}],"jLQ6V":[function(require,module,exports) {
"use strict";
// @ts-ignore
const distance = require("xor-distance");
const utils = require("../utils");
const pMap = require("p-map");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../').PeerData} PeerData
 */ /**
 * Maintains a list of peerIds sorted by distance from a DHT key.
 */ class PeerDistanceList {
    /**
   * Creates a new PeerDistanceList.
   *
   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated
   * @param {number} capacity - the maximum size of the list
   */ constructor(originDhtKey, capacity){
        this.originDhtKey = originDhtKey;
        this.capacity = capacity;
        /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */ this.peerDistances = [];
    }
    /**
   * The length of the list
   */ get length() {
        return this.peerDistances.length;
    }
    /**
   * The peerIds in the list, in order of distance from the origin key
   */ get peers() {
        return this.peerDistances.map((pd)=>pd.peerId);
    }
    /**
   * Add a peerId to the list.
   *
   * @param {PeerId} peerId
   */ async add(peerId) {
        if (this.peerDistances.find((pd)=>uint8ArrayEquals(pd.peerId.id, peerId.id))) return;
        const dhtKey = await utils.convertPeerId(peerId);
        const el = {
            peerId,
            distance: distance(this.originDhtKey, dhtKey)
        };
        this.peerDistances.push(el);
        this.peerDistances.sort((a, b)=>distance.compare(a.distance, b.distance));
        this.peerDistances = this.peerDistances.slice(0, this.capacity);
    }
    /**
   * Indicates whether any of the peerIds passed as a parameter are closer
   * to the origin key than the furthest peerId in the PeerDistanceList.
   *
   * @param {PeerId[]} peerIds
   */ async anyCloser(peerIds) {
        if (!peerIds.length) return false;
        if (!this.length) return true;
        const dhtKeys = await pMap(peerIds, (peerId)=>utils.convertPeerId(peerId));
        const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;
        for (const dhtKey of dhtKeys){
            const keyDistance = distance(this.originDhtKey, dhtKey);
            if (distance.compare(keyDistance, furthestDistance) < 0) return true;
        }
        return false;
    }
}
module.exports = PeerDistanceList;

},{"xor-distance":"8gha1","../utils":"1wrtw","p-map":"6cgrC","uint8arrays/equals":"iZMnE"}],"9A5pl":[function(require,module,exports) {
"use strict";
const PeerQueue = require("../peer-list/peer-queue");
const utils = require("../utils");
// TODO: Temporary until parallel dial in Switch have a proper
// timeout. Requires async/await refactor of transports and
// dial abort logic. This gives us 30s to complete the `queryFunc`.
// This should help reduce the high end call times of queries
const QUERY_FUNC_TIMEOUT = 30e3;
/**
 * @typedef {import('peer-id')} PeerId
 */ /**
 * Manages a single Path through the DHT.
 */ class Path {
    /**
   * Creates a Path.
   *
   * @param {import('./run')} run
   * @param {import('./index').QueryFunc} queryFunc
   */ constructor(run, queryFunc){
        this.run = run;
        this.queryFunc = utils.withTimeout(queryFunc, QUERY_FUNC_TIMEOUT);
        if (!this.queryFunc) throw new Error("Path requires a `queryFn` to be specified");
        if (typeof this.queryFunc !== "function") throw new Error("Path expected `queryFn` to be a function. Got " + typeof this.queryFunc);
        /** @type {PeerId[]} */ this.initialPeers = [];
        /** @type {PeerQueue | null} */ this.peersToQuery = null;
        /** @type {import('./index').QueryResult | null} */ this.res = null;
    }
    /**
   * Add a peer to the set of peers that are used to intialize the path.
   *
   * @param {PeerId} peer
   */ addInitialPeer(peer) {
        this.initialPeers.push(peer);
    }
    /**
   * Execute the path
   */ async execute() {
        // Create a queue of peers ordered by distance from the key
        const queue = await PeerQueue.fromKey(this.run.query.key);
        // Add initial peers to the queue
        this.peersToQuery = queue;
        await Promise.all(this.initialPeers.map((peer)=>this.addPeerToQuery(peer)));
        await this.run.workerQueue(this);
    }
    /**
   * Add a peer to the peers to be queried.
   *
   * @param {PeerId} peer
   */ async addPeerToQuery(peer) {
        // Don't add self
        if (this.run.query.dht._isSelf(peer)) return;
        // The paths must be disjoint, meaning that no two paths in the Query may
        // traverse the same peer
        if (this.run.peersSeen.has(peer.toB58String())) return;
        if (this.peersToQuery) await this.peersToQuery.enqueue(peer);
    }
}
module.exports = Path;

},{"../peer-list/peer-queue":"6r55c","../utils":"1wrtw"}],"6r55c":[function(require,module,exports) {
"use strict";
// @ts-ignore
const Heap = require("heap");
// @ts-ignore
const distance = require("xor-distance");
const debug = require("debug");
const utils = require("../utils");
const log = debug("libp2p:dht:peer-queue");
/**
 * @typedef {import('peer-id')} PeerId
 */ /**
 * PeerQueue is a heap that sorts its entries (PeerIds) by their
 * xor distance to the inital provided key.
 */ class PeerQueue {
    /**
   * Create from a given peer id.
   *
   * @param {PeerId} id
   * @returns {Promise<PeerQueue>}
   */ static async fromPeerId(id) {
        const key = await utils.convertPeerId(id);
        return new PeerQueue(key);
    }
    /**
   * Create from a given Uint8Array.
   *
   * @param {Uint8Array} keyBuffer
   * @returns {Promise<PeerQueue>}
   */ static async fromKey(keyBuffer) {
        const key = await utils.convertBuffer(keyBuffer);
        return new PeerQueue(key);
    }
    /**
   * Create a new PeerQueue.
   *
   * @param {Uint8Array} from - The sha2-256 encoded peer id
   */ constructor(from){
        log("create: %b", from);
        this.from = from;
        this.heap = new Heap(utils.xorCompare);
    }
    /**
   * Add a new PeerId to the queue.
   *
   * @param {PeerId} id
   */ async enqueue(id) {
        log("enqueue %s", id.toB58String());
        const key = await utils.convertPeerId(id);
        const el = {
            id: id,
            distance: distance(this.from, key)
        };
        this.heap.push(el);
    }
    /**
   * Returns the closest peer to the `from` peer.
   *
   * @returns {PeerId}
   */ dequeue() {
        const el = this.heap.pop();
        log("dequeue %s", el.id.toB58String());
        return el.id;
    }
    get length() {
        return this.heap.size();
    }
}
module.exports = PeerQueue;

},{"heap":"j0cbr","xor-distance":"8gha1","debug":"l0oUb","../utils":"1wrtw"}],"j0cbr":[function(require,module,exports) {
module.exports = require("./lib/heap");

},{"./lib/heap":"gZPHW"}],"gZPHW":[function(require,module,exports) {
// Generated by CoffeeScript 1.8.0
(function() {
    var Heap1, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;
    floor = Math.floor, min = Math.min;
    /*
  Default comparison function to be used
   */ defaultCmp = function(x, y) {
        if (x < y) return -1;
        if (x > y) return 1;
        return 0;
    };
    /*
  Insert item x in list a, and keep it sorted assuming a is sorted.
  
  If x is already in a, insert it to the right of the rightmost x.
  
  Optional args lo (default 0) and hi (default a.length) bound the slice
  of a to be searched.
   */ insort = function(a, x, lo, hi, cmp) {
        var mid;
        if (lo == null) lo = 0;
        if (cmp == null) cmp = defaultCmp;
        if (lo < 0) throw new Error("lo must be non-negative");
        if (hi == null) hi = a.length;
        while(lo < hi){
            mid = floor((lo + hi) / 2);
            if (cmp(x, a[mid]) < 0) hi = mid;
            else lo = mid + 1;
        }
        return [].splice.apply(a, [
            lo,
            lo - lo
        ].concat(x)), x;
    };
    /*
  Push item onto heap, maintaining the heap invariant.
   */ heappush = function(array, item, cmp) {
        if (cmp == null) cmp = defaultCmp;
        array.push(item);
        return _siftdown(array, 0, array.length - 1, cmp);
    };
    /*
  Pop the smallest item off the heap, maintaining the heap invariant.
   */ heappop = function(array, cmp) {
        var lastelt, returnitem;
        if (cmp == null) cmp = defaultCmp;
        lastelt = array.pop();
        if (array.length) {
            returnitem = array[0];
            array[0] = lastelt;
            _siftup(array, 0, cmp);
        } else returnitem = lastelt;
        return returnitem;
    };
    /*
  Pop and return the current smallest value, and add the new item.
  
  This is more efficient than heappop() followed by heappush(), and can be
  more appropriate when using a fixed size heap. Note that the value
  returned may be larger than item! That constrains reasonable use of
  this routine unless written as part of a conditional replacement:
      if item > array[0]
        item = heapreplace(array, item)
   */ heapreplace = function(array, item, cmp) {
        var returnitem;
        if (cmp == null) cmp = defaultCmp;
        returnitem = array[0];
        array[0] = item;
        _siftup(array, 0, cmp);
        return returnitem;
    };
    /*
  Fast version of a heappush followed by a heappop.
   */ heappushpop = function(array, item, cmp) {
        var _ref;
        if (cmp == null) cmp = defaultCmp;
        if (array.length && cmp(array[0], item) < 0) {
            _ref = [
                array[0],
                item
            ], item = _ref[0], array[0] = _ref[1];
            _siftup(array, 0, cmp);
        }
        return item;
    };
    /*
  Transform list into a heap, in-place, in O(array.length) time.
   */ heapify = function(array, cmp) {
        var i, _i, _j1, _len, _ref2, _ref1, _results, _results1;
        if (cmp == null) cmp = defaultCmp;
        _ref1 = (function() {
            _results1 = [];
            for(var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--)_results1.push(_j);
            return _results1;
        }).apply(this).reverse();
        _results = [];
        for(_i = 0, _len = _ref1.length; _i < _len; _i++){
            i = _ref1[_i];
            _results.push(_siftup(array, i, cmp));
        }
        return _results;
    };
    /*
  Update the position of the given item in the heap.
  This function should be called every time the item is being modified.
   */ updateItem = function(array, item, cmp) {
        var pos;
        if (cmp == null) cmp = defaultCmp;
        pos = array.indexOf(item);
        if (pos === -1) return;
        _siftdown(array, 0, pos, cmp);
        return _siftup(array, pos, cmp);
    };
    /*
  Find the n largest elements in a dataset.
   */ nlargest = function(array, n, cmp) {
        var elem, result, _i, _len, _ref;
        if (cmp == null) cmp = defaultCmp;
        result = array.slice(0, n);
        if (!result.length) return result;
        heapify(result, cmp);
        _ref = array.slice(n);
        for(_i = 0, _len = _ref.length; _i < _len; _i++){
            elem = _ref[_i];
            heappushpop(result, elem, cmp);
        }
        return result.sort(cmp).reverse();
    };
    /*
  Find the n smallest elements in a dataset.
   */ nsmallest = function(array, n, cmp) {
        var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
        if (cmp == null) cmp = defaultCmp;
        if (n * 10 <= array.length) {
            result = array.slice(0, n).sort(cmp);
            if (!result.length) return result;
            los = result[result.length - 1];
            _ref = array.slice(n);
            for(_i = 0, _len = _ref.length; _i < _len; _i++){
                elem = _ref[_i];
                if (cmp(elem, los) < 0) {
                    insort(result, elem, 0, null, cmp);
                    result.pop();
                    los = result[result.length - 1];
                }
            }
            return result;
        }
        heapify(array, cmp);
        _results = [];
        for(i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j)_results.push(heappop(array, cmp));
        return _results;
    };
    _siftdown = function(array, startpos, pos, cmp) {
        var newitem, parent, parentpos;
        if (cmp == null) cmp = defaultCmp;
        newitem = array[pos];
        while(pos > startpos){
            parentpos = pos - 1 >> 1;
            parent = array[parentpos];
            if (cmp(newitem, parent) < 0) {
                array[pos] = parent;
                pos = parentpos;
                continue;
            }
            break;
        }
        return array[pos] = newitem;
    };
    _siftup = function(array, pos, cmp) {
        var childpos, endpos, newitem, rightpos, startpos;
        if (cmp == null) cmp = defaultCmp;
        endpos = array.length;
        startpos = pos;
        newitem = array[pos];
        childpos = 2 * pos + 1;
        while(childpos < endpos){
            rightpos = childpos + 1;
            if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) childpos = rightpos;
            array[pos] = array[childpos];
            pos = childpos;
            childpos = 2 * pos + 1;
        }
        array[pos] = newitem;
        return _siftdown(array, startpos, pos, cmp);
    };
    Heap1 = function() {
        Heap.push = heappush;
        Heap.pop = heappop;
        Heap.replace = heapreplace;
        Heap.pushpop = heappushpop;
        Heap.heapify = heapify;
        Heap.updateItem = updateItem;
        Heap.nlargest = nlargest;
        Heap.nsmallest = nsmallest;
        function Heap(cmp) {
            this.cmp = cmp != null ? cmp : defaultCmp;
            this.nodes = [];
        }
        Heap.prototype.push = function(x) {
            return heappush(this.nodes, x, this.cmp);
        };
        Heap.prototype.pop = function() {
            return heappop(this.nodes, this.cmp);
        };
        Heap.prototype.peek = function() {
            return this.nodes[0];
        };
        Heap.prototype.contains = function(x) {
            return this.nodes.indexOf(x) !== -1;
        };
        Heap.prototype.replace = function(x) {
            return heapreplace(this.nodes, x, this.cmp);
        };
        Heap.prototype.pushpop = function(x) {
            return heappushpop(this.nodes, x, this.cmp);
        };
        Heap.prototype.heapify = function() {
            return heapify(this.nodes, this.cmp);
        };
        Heap.prototype.updateItem = function(x) {
            return updateItem(this.nodes, x, this.cmp);
        };
        Heap.prototype.clear = function() {
            return this.nodes = [];
        };
        Heap.prototype.empty = function() {
            return this.nodes.length === 0;
        };
        Heap.prototype.size = function() {
            return this.nodes.length;
        };
        Heap.prototype.clone = function() {
            var heap;
            heap = new Heap();
            heap.nodes = this.nodes.slice(0);
            return heap;
        };
        Heap.prototype.toArray = function() {
            return this.nodes.slice(0);
        };
        Heap.prototype.insert = Heap.prototype.push;
        Heap.prototype.top = Heap.prototype.peek;
        Heap.prototype.front = Heap.prototype.peek;
        Heap.prototype.has = Heap.prototype.contains;
        Heap.prototype.copy = Heap.prototype.clone;
        return Heap;
    }();
    (function(root, factory) {
        if (typeof define === "function" && define.amd) return define([], factory);
        else return module.exports = factory();
    })(this, function() {
        return Heap1;
    });
}).call(this);

},{}],"dVHsL":[function(require,module,exports) {
"use strict";
const { default: Queue  } = require("p-queue");
/**
 * @typedef {import('peer-id')} PeerId
 */ class WorkerQueue {
    /**
   * Creates a new WorkerQueue.
   *
   * @param {import('../index')} dht
   * @param {import('./run')} run
   * @param {import('./path')} path
   * @param {Function & {error: Function}} log
   */ constructor(dht, run, path, log){
        this.dht = dht;
        this.run = run;
        this.path = path;
        this.log = log;
        this.concurrency = this.dht.concurrency;
        this.queue = this.setupQueue();
        // a container for resolve/reject functions that will be populated
        // when execute() is called
        /** @type {{ resolve: (result?: any) => void, reject: (err: Error) => void} | null} */ this.execution = null;
        /** @type {Set<PeerId>} */ this.queuedPeerIds = new Set();
    }
    /**
   * Create the underlying async queue.
   *
   * @returns {Queue}
   */ setupQueue() {
        const q = new Queue({
            concurrency: this.concurrency
        });
        // When all peers in the queue have been processed, stop the worker
        q.on("idle", ()=>{
            if (this.path.peersToQuery && !this.path.peersToQuery.length) {
                this.log("queue:drain");
                this.stop();
            }
        });
        // When a space opens up in the queue, add some more peers
        q.on("next", ()=>{
            if (!this.running) return;
            if (q.pending < this.concurrency) this.fill();
        });
        return q;
    }
    /**
   * Stop the worker, optionally providing an error to pass to the worker's
   * callback.
   *
   * @param {Error} [err]
   */ stop(err) {
        if (!this.running) return;
        this.running = false;
        this.queue.clear();
        this.log("worker:stop, %d workers still running", this.run.workers.filter((w)=>w.running).length);
        if (this.execution) {
            if (err) this.execution.reject(err);
            else this.execution.resolve();
        }
    }
    /**
   * Use the queue from async to keep `concurrency` amount items running
   * per path.
   *
   * @returns {Promise<void>}
   */ async execute() {
        this.running = true;
        // store the promise resolution functions to be resolved at end of queue
        this.execution = null;
        const execPromise = new Promise((resolve, reject)=>{
            this.execution = {
                resolve,
                reject
            };
        });
        // start queue
        this.fill();
        // await completion
        await execPromise;
    }
    /**
   * Add peers to the worker queue until there are enough to satisfy the
   * worker queue concurrency.
   * Note that we don't want to take any more than those required to satisfy
   * concurrency from the peers-to-query queue, because we always want to
   * query the closest peers to the key first, and new peers are continuously
   * being added to the peers-to-query queue.
   */ fill() {
        if (!this.path.peersToQuery) return;
        // Note:
        // - queue.pending: number of items that are currently running
        // - queue.size: the number of items that are waiting to be run
        while(this.queue.pending + this.queue.size < this.concurrency && this.path.peersToQuery.length > 0){
            const peer = this.path.peersToQuery.dequeue();
            // store the peer id so we can potentially abort early
            this.queuedPeerIds.add(peer);
            this.queue.add(()=>{
                return this.processNext(peer).catch((err)=>{
                    this.log.error("queue", err);
                    this.stop(err);
                }).finally(()=>{
                    this.queuedPeerIds.delete(peer);
                });
            });
        }
    }
    /**
   * Process the next peer in the queue
   *
   * @param {PeerId} peer
   */ async processNext(peer) {
        if (!this.running) return;
        // The paths must be disjoint, meaning that no two paths in the Query may
        // traverse the same peer
        if (this.run.peersSeen.has(peer.toB58String())) return;
        // Check if we've queried enough peers already
        let continueQuerying, continueQueryingError;
        try {
            continueQuerying = await this.run.continueQuerying(this);
        } catch (err) {
            continueQueryingError = err;
        }
        // Abort and ignore any error if we're no longer running
        if (!this.running) return;
        if (continueQueryingError) throw continueQueryingError;
        // No peer we're querying is closer, stop the queue
        // This will cause queries that may potentially result in
        // closer nodes to be ended, but it reduces overall query time
        if (!continueQuerying) {
            this.stop();
            return;
        }
        // Check if another path has queried this peer in the mean time
        if (this.run.peersSeen.has(peer.toB58String())) return;
        this.run.peersSeen.add(peer.toB58String());
        // Execute the query on the next peer
        this.log("queue:work");
        let state, execError;
        try {
            state = await this.execQuery(peer);
        } catch (err1) {
            execError = err1;
        }
        // Abort and ignore any error if we're no longer running
        if (!this.running) return;
        this.log("queue:work:done", execError, state);
        if (execError) throw execError;
        // If query is complete, stop all workers.
        // Note: run.stop() calls stop() on all the workers, which kills the
        // queue and resolves execution
        if (state && state.queryComplete) {
            this.log("query:complete");
            this.run.stop();
            return;
        }
        // If path is complete, just stop this worker.
        // Note: this.stop() kills the queue and resolves execution
        if (state && state.pathComplete) this.stop();
    }
    /**
   * Execute a query on the next peer.
   *
   * @param {PeerId} peer
   */ async execQuery(peer) {
        let res, queryError;
        try {
            res = await this.path.queryFunc(peer);
        } catch (err) {
            queryError = err;
        }
        // Abort and ignore any error if we're no longer running
        if (!this.running) return;
        if (queryError) {
            this.run.errors.push(queryError);
            return;
        }
        // Add the peer to the closest peers we have successfully queried
        this.run.peersQueried && await this.run.peersQueried.add(peer);
        if (!res) return;
        // If the query indicates that this path or the whole query is complete
        // set the path result and bail out
        if (res.pathComplete || res.queryComplete) {
            this.path.res = res;
            return {
                pathComplete: res.pathComplete,
                queryComplete: res.queryComplete
            };
        }
        // If there are closer peers to query, add them to the queue
        if (res.closerPeers && res.closerPeers.length > 0) {
            /**
       * @param {import('../').PeerData} closer
       */ const queryCloser = async (closer)=>{
                // don't add ourselves
                if (this.dht._isSelf(closer.id)) return;
                this.dht._peerDiscovered(closer.id, closer.multiaddrs);
                await this.path.addPeerToQuery(closer.id);
            };
            await Promise.all(res.closerPeers.map(queryCloser));
        }
    }
}
module.exports = WorkerQueue;

},{"p-queue":"3KoWO"}],"3KoWO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const EventEmitter = require("eventemitter3");
const p_timeout_1 = require("p-timeout");
const priority_queue_1 = require("./priority-queue");
// eslint-disable-next-line @typescript-eslint/no-empty-function
const empty = ()=>{};
const timeoutError = new p_timeout_1.TimeoutError();
/**
Promise queue with concurrency control.
*/ class PQueue extends EventEmitter {
    constructor(options){
        var _a, _b, _c, _d;
        super();
        this._intervalCount = 0;
        this._intervalEnd = 0;
        this._pendingCount = 0;
        this._resolveEmpty = empty;
        this._resolveIdle = empty;
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        options = Object.assign({
            carryoverConcurrencyCount: false,
            intervalCap: Infinity,
            interval: 0,
            concurrency: Infinity,
            autoStart: true,
            queueClass: priority_queue_1.default
        }, options);
        if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ""}\` (${typeof options.intervalCap})`);
        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""}\` (${typeof options.interval})`);
        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
        this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
        this._intervalCap = options.intervalCap;
        this._interval = options.interval;
        this._queue = new options.queueClass();
        this._queueClass = options.queueClass;
        this.concurrency = options.concurrency;
        this._timeout = options.timeout;
        this._throwOnTimeout = options.throwOnTimeout === true;
        this._isPaused = options.autoStart === false;
    }
    get _doesIntervalAllowAnother() {
        return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
    }
    get _doesConcurrentAllowAnother() {
        return this._pendingCount < this._concurrency;
    }
    _next() {
        this._pendingCount--;
        this._tryToStartAnother();
        this.emit("next");
    }
    _resolvePromises() {
        this._resolveEmpty();
        this._resolveEmpty = empty;
        if (this._pendingCount === 0) {
            this._resolveIdle();
            this._resolveIdle = empty;
            this.emit("idle");
        }
    }
    _onResumeInterval() {
        this._onInterval();
        this._initializeIntervalIfNeeded();
        this._timeoutId = undefined;
    }
    _isIntervalPaused() {
        const now = Date.now();
        if (this._intervalId === undefined) {
            const delay = this._intervalEnd - now;
            if (delay < 0) // Act as the interval was done
            // We don't need to resume it here because it will be resumed on line 160
            this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
            else {
                // Act as the interval is pending
                if (this._timeoutId === undefined) this._timeoutId = setTimeout(()=>{
                    this._onResumeInterval();
                }, delay);
                return true;
            }
        }
        return false;
    }
    _tryToStartAnother() {
        if (this._queue.size === 0) {
            // We can clear the interval ("pause")
            // Because we can redo it later ("resume")
            if (this._intervalId) clearInterval(this._intervalId);
            this._intervalId = undefined;
            this._resolvePromises();
            return false;
        }
        if (!this._isPaused) {
            const canInitializeInterval = !this._isIntervalPaused();
            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
                const job = this._queue.dequeue();
                if (!job) return false;
                this.emit("active");
                job();
                if (canInitializeInterval) this._initializeIntervalIfNeeded();
                return true;
            }
        }
        return false;
    }
    _initializeIntervalIfNeeded() {
        if (this._isIntervalIgnored || this._intervalId !== undefined) return;
        this._intervalId = setInterval(()=>{
            this._onInterval();
        }, this._interval);
        this._intervalEnd = Date.now() + this._interval;
    }
    _onInterval() {
        if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
            clearInterval(this._intervalId);
            this._intervalId = undefined;
        }
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
        this._processQueue();
    }
    /**
    Executes all queued functions until it reaches the limit.
    */ _processQueue() {
        // eslint-disable-next-line no-empty
        while(this._tryToStartAnother());
    }
    get concurrency() {
        return this._concurrency;
    }
    set concurrency(newConcurrency) {
        if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
        this._concurrency = newConcurrency;
        this._processQueue();
    }
    /**
    Adds a sync or async task to the queue. Always returns a promise.
    */ async add(fn, options = {}) {
        return new Promise((resolve, reject)=>{
            const run = async ()=>{
                this._pendingCount++;
                this._intervalCount++;
                try {
                    const operation = this._timeout === undefined && options.timeout === undefined ? fn() : p_timeout_1.default(Promise.resolve(fn()), options.timeout === undefined ? this._timeout : options.timeout, ()=>{
                        if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) reject(timeoutError);
                        return undefined;
                    });
                    resolve(await operation);
                } catch (error) {
                    reject(error);
                }
                this._next();
            };
            this._queue.enqueue(run, options);
            this._tryToStartAnother();
            this.emit("add");
        });
    }
    /**
    Same as `.add()`, but accepts an array of sync or async functions.

    @returns A promise that resolves when all functions are resolved.
    */ async addAll(functions, options) {
        return Promise.all(functions.map(async (function_)=>this.add(function_, options)));
    }
    /**
    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
    */ start() {
        if (!this._isPaused) return this;
        this._isPaused = false;
        this._processQueue();
        return this;
    }
    /**
    Put queue execution on hold.
    */ pause() {
        this._isPaused = true;
    }
    /**
    Clear the queue.
    */ clear() {
        this._queue = new this._queueClass();
    }
    /**
    Can be called multiple times. Useful if you for example add additional items at a later time.

    @returns A promise that settles when the queue becomes empty.
    */ async onEmpty() {
        // Instantly resolve if the queue is empty
        if (this._queue.size === 0) return;
        return new Promise((resolve)=>{
            const existingResolve = this._resolveEmpty;
            this._resolveEmpty = ()=>{
                existingResolve();
                resolve();
            };
        });
    }
    /**
    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.

    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
    */ async onIdle() {
        // Instantly resolve if none pending and if nothing else is queued
        if (this._pendingCount === 0 && this._queue.size === 0) return;
        return new Promise((resolve)=>{
            const existingResolve = this._resolveIdle;
            this._resolveIdle = ()=>{
                existingResolve();
                resolve();
            };
        });
    }
    /**
    Size of the queue.
    */ get size() {
        return this._queue.size;
    }
    /**
    Size of the queue, filtered by the given options.

    For example, this can be used to find the number of items remaining in the queue with a specific priority level.
    */ sizeBy(options) {
        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator
        return this._queue.filter(options).length;
    }
    /**
    Number of pending promises.
    */ get pending() {
        return this._pendingCount;
    }
    /**
    Whether the queue is currently paused.
    */ get isPaused() {
        return this._isPaused;
    }
    get timeout() {
        return this._timeout;
    }
    /**
    Set the timeout for future operations.
    */ set timeout(milliseconds) {
        this._timeout = milliseconds;
    }
}
exports.default = PQueue;

},{"eventemitter3":"3fnfh","p-timeout":"4lVZp","./priority-queue":"grf7X"}],"3fnfh":[function(require,module,exports) {
"use strict";
var has = Object.prototype.hasOwnProperty, prefix = "~";
/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */ function Events() {}
//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
    Events.prototype = Object.create(null);
    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
}
/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */ function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
}
/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */ function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") throw new TypeError("The listener must be a function");
    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [
        emitter._events[evt],
        listener
    ];
    return emitter;
}
/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */ function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
}
/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */ function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
}
/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */ EventEmitter.prototype.eventNames = function eventNames() {
    var names = [], events, name;
    if (this._eventsCount === 0) return names;
    for(name in events = this._events)if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    if (Object.getOwnPropertySymbols) return names.concat(Object.getOwnPropertySymbols(events));
    return names;
};
/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */ EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [
        handlers.fn
    ];
    for(var i = 0, l = handlers.length, ee = new Array(l); i < l; i++)ee[i] = handlers[i].fn;
    return ee;
};
/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */ EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
};
/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */ EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
        switch(len){
            case 1:
                return listeners.fn.call(listeners.context), true;
            case 2:
                return listeners.fn.call(listeners.context, a1), true;
            case 3:
                return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
                return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for(i = 1, args = new Array(len - 1); i < len; i++)args[i - 1] = arguments[i];
        listeners.fn.apply(listeners.context, args);
    } else {
        var length = listeners.length, j;
        for(i = 0; i < length; i++){
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
            switch(len){
                case 1:
                    listeners[i].fn.call(listeners[i].context);
                    break;
                case 2:
                    listeners[i].fn.call(listeners[i].context, a1);
                    break;
                case 3:
                    listeners[i].fn.call(listeners[i].context, a1, a2);
                    break;
                case 4:
                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                    break;
                default:
                    if (!args) for(j = 1, args = new Array(len - 1); j < len; j++)args[j - 1] = arguments[j];
                    listeners[i].fn.apply(listeners[i].context, args);
            }
        }
    }
    return true;
};
/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
};
/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
};
/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;
    if (!fn) {
        clearEvent(this, evt);
        return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) clearEvent(this, evt);
    } else {
        for(var i = 0, events = [], length = listeners.length; i < length; i++)if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) events.push(listeners[i]);
        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
    }
    return this;
};
/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
    } else {
        this._events = new Events();
        this._eventsCount = 0;
    }
    return this;
};
//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;
//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;
//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;
module.exports = EventEmitter;

},{}],"4lVZp":[function(require,module,exports) {
"use strict";
const pFinally = require("p-finally");
class TimeoutError extends Error {
    constructor(message){
        super(message);
        this.name = "TimeoutError";
    }
}
const pTimeout = (promise, milliseconds, fallback)=>new Promise((resolve, reject)=>{
        if (typeof milliseconds !== "number" || milliseconds < 0) throw new TypeError("Expected `milliseconds` to be a positive number");
        if (milliseconds === Infinity) {
            resolve(promise);
            return;
        }
        const timer = setTimeout(()=>{
            if (typeof fallback === "function") {
                try {
                    resolve(fallback());
                } catch (error) {
                    reject(error);
                }
                return;
            }
            const message = typeof fallback === "string" ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
            const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);
            if (typeof promise.cancel === "function") promise.cancel();
            reject(timeoutError);
        }, milliseconds);
        // TODO: Use native `finally` keyword when targeting Node.js 10
        pFinally(// eslint-disable-next-line promise/prefer-await-to-then
        promise.then(resolve, reject), ()=>{
            clearTimeout(timer);
        });
    });
module.exports = pTimeout;
// TODO: Remove this for the next major release
module.exports.default = pTimeout;
module.exports.TimeoutError = TimeoutError;

},{"p-finally":"jBZa9"}],"jBZa9":[function(require,module,exports) {
"use strict";
module.exports = (promise, onFinally)=>{
    onFinally = onFinally || (()=>{});
    return promise.then((val)=>new Promise((resolve)=>{
            resolve(onFinally());
        }).then(()=>val), (err)=>new Promise((resolve)=>{
            resolve(onFinally());
        }).then(()=>{
            throw err;
        }));
};

},{}],"grf7X":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const lower_bound_1 = require("./lower-bound");
class PriorityQueue {
    constructor(){
        this._queue = [];
    }
    enqueue(run, options) {
        options = Object.assign({
            priority: 0
        }, options);
        const element = {
            priority: options.priority,
            run
        };
        if (this.size && this._queue[this.size - 1].priority >= options.priority) {
            this._queue.push(element);
            return;
        }
        const index = lower_bound_1.default(this._queue, element, (a, b)=>b.priority - a.priority);
        this._queue.splice(index, 0, element);
    }
    dequeue() {
        const item = this._queue.shift();
        return item === null || item === void 0 ? void 0 : item.run;
    }
    filter(options) {
        return this._queue.filter((element)=>element.priority === options.priority).map((element)=>element.run);
    }
    get size() {
        return this._queue.length;
    }
}
exports.default = PriorityQueue;

},{"./lower-bound":"etZjf"}],"etZjf":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion
function lowerBound(array, value, comparator) {
    let first = 0;
    let count = array.length;
    while(count > 0){
        const step = count / 2 | 0;
        let it = first + step;
        if (comparator(array[it], value) <= 0) {
            first = ++it;
            count -= step + 1;
        } else count = step;
    }
    return first;
}
exports.default = lowerBound;

},{}],"emf4P":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const pTimeout = require("p-timeout");
const c = require("../constants");
const LimitedPeerList = require("../peer-list/limited-peer-list");
const Message = require("../message");
const Query = require("../query");
const utils = require("../utils");
/**
 * @typedef {import('multiformats/cid').CID} CID
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * @param {import('../')} dht
 */ module.exports = (dht)=>{
    /**
   * Check for providers from a single node.
   *
   * @param {PeerId} peer
   * @param {CID} key
   *
   * @private
   */ const findProvidersSingle = async (peer, key)=>{
        const msg = new Message(Message.TYPES.GET_PROVIDERS, key.bytes, 0);
        return dht.network.sendRequest(peer, msg);
    };
    return {
        /**
     * Announce to the network that we can provide the value for a given key
     *
     * @param {CID} key
     */ async provide (key) {
            dht._log(`provide: ${key}`);
            /** @type {Error[]} */ const errors = [];
            // Add peer as provider
            await dht.providers.addProvider(key, dht.peerId);
            const multiaddrs = dht.libp2p ? dht.libp2p.multiaddrs : [];
            const msg = new Message(Message.TYPES.ADD_PROVIDER, key.bytes, 0);
            msg.providerPeers = [
                {
                    id: dht.peerId,
                    multiaddrs
                }
            ];
            /**
       * @param {PeerId} peer
       */ async function mapPeer(peer) {
                dht._log(`putProvider ${key} to ${peer.toB58String()}`);
                try {
                    await dht.network.sendMessage(peer, msg);
                } catch (err) {
                    errors.push(err);
                }
            }
            // Notify closest peers
            await utils.mapParallel(dht.getClosestPeers(key.bytes), mapPeer);
            if (errors.length) // TODO:
            // This should be infrequent. This means a peer we previously connected
            // to failed to exchange the provide message. If getClosestPeers was an
            // iterator, we could continue to pull until we announce to kBucketSize peers.
            throw errcode(new Error(`Failed to provide to ${errors.length} of ${dht.kBucketSize} peers`), "ERR_SOME_PROVIDES_FAILED", {
                errors
            });
        },
        /**
     * Search the dht for up to `K` providers of the given CID.
     *
     * @param {CID} key
     * @param {Object} [options] - findProviders options
     * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds
     * @param {number} [options.maxNumProviders=5] - maximum number of providers to find
     * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}
     */ async *findProviders (key, options = {
            timeout: 60000,
            maxNumProviders: 5
        }) {
            const providerTimeout = options.timeout || c.minute;
            const n = options.maxNumProviders || c.K;
            dht._log(`findProviders ${key}`);
            const out = new LimitedPeerList(n);
            const provs1 = await dht.providers.getProviders(key);
            provs1.forEach((id)=>{
                /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */ const peerData = dht.peerStore.get(id);
                if (peerData) out.push({
                    id: peerData.id,
                    multiaddrs: peerData.addresses.map((address)=>address.multiaddr)
                });
                else out.push({
                    id,
                    multiaddrs: []
                });
            });
            // All done
            if (out.length >= n) {
                // yield values
                for (const pData of out.toArray())yield pData;
                return;
            }
            // need more, query the network
            /** @type {LimitedPeerList[]} */ const paths = [];
            /**
       *
       * @param {number} pathIndex
       * @param {number} numPaths
       */ function makePath(pathIndex, numPaths) {
                // This function body runs once per disjoint path
                const pathSize = utils.pathSize(n - out.length, numPaths);
                const pathProviders = new LimitedPeerList(pathSize);
                paths.push(pathProviders);
                /**
         * The query function to use on this particular disjoint path
         *
         * @param {PeerId} peer
         */ async function queryDisjointPath(peer) {
                    const msg = await findProvidersSingle(peer, key);
                    const provs = msg.providerPeers;
                    dht._log(`Found ${provs.length} provider entries for ${key}`);
                    provs.forEach((prov)=>{
                        pathProviders.push({
                            ...prov
                        });
                    });
                    // hooray we have all that we want
                    if (pathProviders.length >= pathSize) return {
                        pathComplete: true
                    };
                    // it looks like we want some more
                    return {
                        closerPeers: msg.closerPeers
                    };
                }
                return queryDisjointPath;
            }
            const query = new Query(dht, key.bytes, makePath);
            const peers = dht.routingTable.closestPeers(key.bytes, dht.kBucketSize);
            try {
                await pTimeout(query.run(peers), providerTimeout);
            } catch (err) {
                if (err.name !== pTimeout.TimeoutError.name) throw err;
            } finally{
                query.stop();
            }
            // combine peers from each path
            paths.forEach((path)=>{
                path.toArray().forEach((peer)=>{
                    out.push(peer);
                });
            });
            for (const pData of out.toArray())yield pData;
        }
    };
};

},{"err-code":"dUrrM","p-timeout":"2j2Zi","../constants":"ghCGZ","../peer-list/limited-peer-list":"cMzVu","../message":"6c5Nm","../query":"fnHnh","../utils":"1wrtw"}],"cMzVu":[function(require,module,exports) {
"use strict";
const PeerList = require(".");
/**
 * @typedef {import('../').PeerData} PeerData
 */ /**
 * Like PeerList but with a length restriction.
 */ class LimitedPeerList extends PeerList {
    /**
   * Create a new limited peer list.
   *
   * @param {number} limit
   */ constructor(limit){
        super();
        this.limit = limit;
    }
    /**
   * Add a PeerData if it fits in the list
   *
   * @param {PeerData} peerData
   */ push(peerData) {
        if (this.length < this.limit) return super.push(peerData);
        return false;
    }
}
module.exports = LimitedPeerList;

},{".":"XIuz9"}],"XIuz9":[function(require,module,exports) {
"use strict";
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../').PeerData} PeerData
 */ /**
 * A list of unique peers.
 */ class PeerList {
    constructor(){
        /** @type {PeerData[]} */ this.list = [];
    }
    /**
   * Add a new peer. Returns `true` if it was a new one
   *
   * @param {PeerData} peerData
   */ push(peerData) {
        if (!this.has(peerData.id)) {
            this.list.push(peerData);
            return true;
        }
        return false;
    }
    /**
   * Check if this PeerData is already in here.
   *
   * @param {PeerId} peerId
   */ has(peerId) {
        const match = this.list.find((i)=>i.id.equals(peerId));
        return Boolean(match);
    }
    /**
   * Get the list as an array.
   */ toArray() {
        return this.list.slice();
    }
    /**
   * Remove the last element
   */ pop() {
        return this.list.pop();
    }
    /**
   * The length of the list
   */ get length() {
        return this.list.length;
    }
}
module.exports = PeerList;

},{}],"8zeAP":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const pTimeout = require("p-timeout");
const PeerId = require("peer-id");
const crypto = require("libp2p-crypto");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const c = require("../constants");
const Message = require("../message");
const Query = require("../query");
const utils = require("../utils");
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * @param {import('../index')} dht
 */ module.exports = (dht)=>{
    /**
   * Look if we are connected to a peer with the given id.
   * Returns its id and addresses, if found, otherwise `undefined`.
   *
   * @param {PeerId} peer
   */ const findPeerLocal = async (peer)=>{
        dht._log(`findPeerLocal ${peer.toB58String()}`);
        const p = await dht.routingTable.find(peer);
        /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */ const peerData = p && dht.peerStore.get(p);
        if (peerData) return {
            id: peerData.id,
            multiaddrs: peerData.addresses.map((address)=>address.multiaddr)
        };
    };
    /**
   * Get a value via rpc call for the given parameters.
   *
   * @param {PeerId} peer
   * @param {Uint8Array} key
   * @returns {Promise<Message>}
   * @private
   */ const getValueSingle = async (peer, key)=>{
        const msg = new Message(Message.TYPES.GET_VALUE, key, 0);
        return dht.network.sendRequest(peer, msg);
    };
    /**
   * Find close peers for a given peer
   *
   * @param {Uint8Array} key
   * @param {PeerId} peer
   * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}
   * @private
   */ const closerPeersSingle = async (key, peer)=>{
        dht._log(`closerPeersSingle ${uint8ArrayToString(key, "base32")} from ${peer.toB58String()}`);
        const msg = await dht.peerRouting._findPeerSingle(peer, new PeerId(key));
        return msg.closerPeers.filter((peerData)=>!dht._isSelf(peerData.id)).map((peerData)=>{
            dht.peerStore.addressBook.add(peerData.id, peerData.multiaddrs);
            return peerData;
        });
    };
    /**
   * Get the public key directly from a node.
   *
   * @param {PeerId} peer
   */ const getPublicKeyFromNode = async (peer)=>{
        const pkKey = utils.keyForPublicKey(peer);
        const msg = await getValueSingle(peer, pkKey);
        if (!msg.record || !msg.record.value) throw errcode(new Error(`Node not responding with its public key: ${peer.toB58String()}`), "ERR_INVALID_RECORD");
        const recPeer = await PeerId.createFromPubKey(msg.record.value);
        // compare hashes of the pub key
        if (!recPeer.equals(peer)) throw errcode(new Error("public key does not match id"), "ERR_PUBLIC_KEY_DOES_NOT_MATCH_ID");
        return recPeer.pubKey;
    };
    return {
        /**
   * Ask peer `peer` if they know where the peer with id `target` is.
   *
   * @param {PeerId} peer
   * @param {PeerId} target
   * @returns {Promise<Message>}
   * @private
   */ async _findPeerSingle (peer, target) {
            dht._log("findPeerSingle %s", peer.toB58String());
            const msg = new Message(Message.TYPES.FIND_NODE, target.id, 0);
            return dht.network.sendRequest(peer, msg);
        },
        /**
     * Search for a peer with the given ID.
     *
     * @param {PeerId} id
     * @param {Object} [options] - findPeer options
     * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds
     * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}
     */ async findPeer (id, options = {
            timeout: 60000
        }) {
            options.timeout = options.timeout || c.minute;
            dht._log("findPeer %s", id.toB58String());
            // Try to find locally
            const pi = await findPeerLocal(id);
            // already got it
            if (pi != null) {
                dht._log("found local");
                return pi;
            }
            const key = await utils.convertPeerId(id);
            const peers = dht.routingTable.closestPeers(key, dht.kBucketSize);
            if (peers.length === 0) throw errcode(new Error("Peer lookup failed"), "ERR_LOOKUP_FAILED");
            // sanity check
            const match1 = peers.find((p)=>p.isEqual(id));
            if (match1) {
                /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */ const peer = dht.peerStore.get(id);
                if (peer) {
                    dht._log("found in peerStore");
                    return {
                        id: peer.id,
                        multiaddrs: peer.addresses.map((address)=>address.multiaddr)
                    };
                }
            }
            // query the network
            const query = new Query(dht, id.id, ()=>{
                /**
         * There is no distinction between the disjoint paths, so there are no per-path
         * variables in dht scope. Just return the actual query function.
         *
         * @param {PeerId} peer
         */ const queryFn = async (peer)=>{
                    const msg = await this._findPeerSingle(peer, id);
                    const match = msg.closerPeers.find((p)=>p.id.isEqual(id));
                    // found it
                    if (match) return {
                        peer: match,
                        queryComplete: true
                    };
                    return {
                        closerPeers: msg.closerPeers
                    };
                };
                return queryFn;
            });
            let result1;
            try {
                result1 = await pTimeout(query.run(peers), options.timeout);
            } finally{
                query.stop();
            }
            let success = false;
            result1.paths.forEach((result)=>{
                if (result.success && result.peer) {
                    success = true;
                    dht.peerStore.addressBook.add(result.peer.id, result.peer.multiaddrs);
                }
            });
            dht._log("findPeer %s: %s", id.toB58String(), success);
            if (!success) throw errcode(new Error("No peer found"), "ERR_NOT_FOUND");
            /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */ const peerData = dht.peerStore.get(id);
            if (!peerData) throw errcode(new Error("No peer found in peer store"), "ERR_NOT_FOUND");
            return {
                id: peerData.id,
                multiaddrs: peerData.addresses.map((address)=>address.multiaddr)
            };
        },
        /**
     * Kademlia 'node lookup' operation.
     *
     * @param {Uint8Array} key
     * @param {Object} [options]
     * @param {boolean} [options.shallow=false] - shallow query
     * @returns {AsyncIterable<PeerId>}
     */ async *getClosestPeers (key, options = {
            shallow: false
        }) {
            dht._log("getClosestPeers to %b", key);
            const id = await utils.convertBuffer(key);
            const tablePeers = dht.routingTable.closestPeers(id, dht.kBucketSize);
            const q = new Query(dht, key, ()=>{
                // There is no distinction between the disjoint paths,
                // so there are no per-path variables in dht scope.
                // Just return the actual query function.
                return async (peer)=>{
                    const closer = await closerPeersSingle(key, peer);
                    return {
                        closerPeers: closer,
                        pathComplete: options.shallow ? true : undefined
                    };
                };
            });
            const res = await q.run(tablePeers);
            if (!res || !res.finalSet) return [];
            const sorted = await utils.sortClosestPeers(Array.from(res.finalSet), id);
            for (const pId of sorted.slice(0, dht.kBucketSize))yield pId;
        },
        /**
     * Get the public key for the given peer id.
     *
     * @param {PeerId} peer
     */ async getPublicKey (peer) {
            dht._log("getPublicKey %s", peer.toB58String());
            // local check
            /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */ const peerData = dht.peerStore.get(peer);
            if (peerData && peerData.id.pubKey) {
                dht._log("getPublicKey: found local copy");
                return peerData.id.pubKey;
            }
            // try the node directly
            let pk;
            try {
                pk = await getPublicKeyFromNode(peer);
            } catch (err) {
                // try dht directly
                const pkKey = utils.keyForPublicKey(peer);
                const value = await dht.get(pkKey);
                pk = crypto.keys.unmarshalPublicKey(value);
            }
            const peerId = new PeerId(peer.id, undefined, pk);
            const addrs = (peerData && peerData.addresses || []).map((address)=>address.multiaddr);
            dht.peerStore.addressBook.add(peerId, addrs);
            dht.peerStore.keyBook.set(peerId, pk);
            return pk;
        }
    };
};

},{"err-code":"dUrrM","p-timeout":"2j2Zi","peer-id":"etBKN","libp2p-crypto":"djNY1","uint8arrays/to-string":"w8mvE","../constants":"ghCGZ","../message":"6c5Nm","../query":"fnHnh","../utils":"1wrtw"}],"djNY1":[function(require,module,exports) {
"use strict";
const hmac = require("./hmac");
const aes = require("./aes");
const keys = require("./keys");
exports.aes = aes;
exports.hmac = hmac;
exports.keys = keys;
exports.randomBytes = require("./random-bytes");
exports.pbkdf2 = require("./pbkdf2");

},{"./hmac":"bVLta","./aes":"8ylbe","./keys":"42c0B","./random-bytes":"87UAX","./pbkdf2":"4sNm6"}],"bVLta":[function(require,module,exports) {
"use strict";
const webcrypto = require("../webcrypto");
const lengths = require("./lengths");
const hashTypes = {
    SHA1: "SHA-1",
    SHA256: "SHA-256",
    SHA512: "SHA-512"
};
const sign = async (key, data)=>{
    const buf = await webcrypto.get().subtle.sign({
        name: "HMAC"
    }, key, data);
    return new Uint8Array(buf, buf.byteOffset, buf.byteLength);
};
exports.create = async function(hashType, secret) {
    const hash = hashTypes[hashType];
    const key = await webcrypto.get().subtle.importKey("raw", secret, {
        name: "HMAC",
        hash: {
            name: hash
        }
    }, false, [
        "sign"
    ]);
    return {
        async digest (data) {
            return sign(key, data);
        },
        length: lengths[hashType]
    };
};

},{"../webcrypto":"8JvzZ","./lengths":"bXTpQ"}],"8JvzZ":[function(require,module,exports) {
/* eslint-env browser */ "use strict";
// Check native crypto exists and is enabled (In insecure context `self.crypto`
// exists but `self.crypto.subtle` does not).
exports.get = (win = self)=>{
    const nativeCrypto = win.crypto || win.msCrypto;
    if (!nativeCrypto || !nativeCrypto.subtle) throw Object.assign(new Error("Missing Web Crypto API. The most likely cause of this error is that this page is being accessed from an insecure context (i.e. not HTTPS). For more information and possible resolutions see https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api"), {
        code: "ERR_MISSING_WEB_CRYPTO"
    });
    return nativeCrypto;
};

},{}],"bXTpQ":[function(require,module,exports) {
"use strict";
module.exports = {
    SHA1: 20,
    SHA256: 32,
    SHA512: 64
};

},{}],"8ylbe":[function(require,module,exports) {
"use strict";
const ciphers = require("./ciphers");
const cipherMode = require("./cipher-mode");
exports.create = async function(key, iv) {
    const mode = cipherMode(key);
    const cipher = ciphers.createCipheriv(mode, key, iv);
    const decipher = ciphers.createDecipheriv(mode, key, iv);
    const res = {
        async encrypt (data) {
            return cipher.update(data);
        },
        async decrypt (data) {
            return decipher.update(data);
        }
    };
    return res;
};

},{"./ciphers":"7BP88","./cipher-mode":"cdSGX"}],"7BP88":[function(require,module,exports) {
"use strict";
require("node-forge/lib/aes");
const forge = require("node-forge/lib/forge");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
module.exports = {
    createCipheriv: (mode, key, iv)=>{
        const cipher2 = forge.cipher.createCipher("AES-CTR", uint8ArrayToString(key, "ascii"));
        cipher2.start({
            iv: uint8ArrayToString(iv, "ascii")
        });
        return {
            update: (data)=>{
                cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, "ascii")));
                return uint8ArrayFromString(cipher2.output.getBytes(), "ascii");
            }
        };
    },
    createDecipheriv: (mode, key, iv)=>{
        const cipher2 = forge.cipher.createDecipher("AES-CTR", uint8ArrayToString(key, "ascii"));
        cipher2.start({
            iv: uint8ArrayToString(iv, "ascii")
        });
        return {
            update: (data)=>{
                cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, "ascii")));
                return uint8ArrayFromString(cipher2.output.getBytes(), "ascii");
            }
        };
    }
};

},{"node-forge/lib/aes":"9Bdb3","node-forge/lib/forge":"9OMxz","uint8arrays/to-string":"w8mvE","uint8arrays/from-string":"7qjkp"}],"cdSGX":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const CIPHER_MODES = {
    16: "aes-128-ctr",
    32: "aes-256-ctr"
};
module.exports = function(key) {
    const mode = CIPHER_MODES[key.length];
    if (!mode) {
        const modes = Object.entries(CIPHER_MODES).map(([k, v])=>`${k} (${v})`).join(" / ");
        throw errcode(new Error(`Invalid key length ${key.length} bytes. Must be ${modes}`), "ERR_INVALID_KEY_LENGTH");
    }
    return mode;
};

},{"err-code":"dUrrM"}],"42c0B":[function(require,module,exports) {
"use strict";
const keysPBM = require("./keys");
require("node-forge/lib/asn1");
require("node-forge/lib/pbe");
const forge = require("node-forge/lib/forge");
const errcode = require("err-code");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const importer = require("./importer");
const supportedKeys = {
    rsa: require("./rsa-class"),
    ed25519: require("./ed25519-class"),
    secp256k1: require("./secp256k1-class")(keysPBM, require("../random-bytes"))
};
const ErrMissingSecp256K1 = {
    message: "secp256k1 support requires libp2p-crypto-secp256k1 package",
    code: "ERR_MISSING_PACKAGE"
};
function typeToKey(type) {
    const key = supportedKeys[type.toLowerCase()];
    if (!key) {
        const supported = Object.keys(supportedKeys).join(" / ");
        throw errcode(new Error(`invalid or unsupported key type ${type}. Must be ${supported}`), "ERR_UNSUPPORTED_KEY_TYPE");
    }
    return key;
}
// Generates a keypair of the given type and bitsize
const generateKeyPair = async (type, bits)=>{
    return typeToKey(type).generateKeyPair(bits);
};
// Generates a keypair of the given type and bitsize
// seed is a 32 byte uint8array
const generateKeyPairFromSeed = async (type, seed, bits)=>{
    const key = typeToKey(type);
    if (type.toLowerCase() !== "ed25519") throw errcode(new Error("Seed key derivation is unimplemented for RSA or secp256k1"), "ERR_UNSUPPORTED_KEY_DERIVATION_TYPE");
    return key.generateKeyPairFromSeed(seed, bits);
};
// Converts a protobuf serialized public key into its
// representative object
const unmarshalPublicKey = (buf)=>{
    const decoded = keysPBM.PublicKey.decode(buf);
    const data = decoded.Data;
    switch(decoded.Type){
        case keysPBM.KeyType.RSA:
            return supportedKeys.rsa.unmarshalRsaPublicKey(data);
        case keysPBM.KeyType.Ed25519:
            return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);
        case keysPBM.KeyType.Secp256k1:
            if (supportedKeys.secp256k1) return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);
            else throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);
        default:
            typeToKey(decoded.Type) // throws because type is not supported
            ;
    }
};
// Converts a public key object into a protobuf serialized public key
const marshalPublicKey = (key, type)=>{
    type = (type || "rsa").toLowerCase();
    typeToKey(type) // check type
    ;
    return key.bytes;
};
// Converts a protobuf serialized private key into its
// representative object
const unmarshalPrivateKey = async (buf)=>{
    const decoded = keysPBM.PrivateKey.decode(buf);
    const data = decoded.Data;
    switch(decoded.Type){
        case keysPBM.KeyType.RSA:
            return supportedKeys.rsa.unmarshalRsaPrivateKey(data);
        case keysPBM.KeyType.Ed25519:
            return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);
        case keysPBM.KeyType.Secp256k1:
            if (supportedKeys.secp256k1) return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);
            else throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);
        default:
            typeToKey(decoded.Type) // throws because type is not supported
            ;
    }
};
// Converts a private key object into a protobuf serialized private key
const marshalPrivateKey = (key, type)=>{
    type = (type || "rsa").toLowerCase();
    typeToKey(type) // check type
    ;
    return key.bytes;
};
/**
 *
 * @param {string} encryptedKey
 * @param {string} password
 */ const importKey = async (encryptedKey, password)=>{
    try {
        const key = await importer.import(encryptedKey, password);
        return unmarshalPrivateKey(key);
    } catch (_) {
    // Ignore and try the old pem decrypt
    }
    // Only rsa supports pem right now
    const key = forge.pki.decryptRsaPrivateKey(encryptedKey, password);
    if (key === null) throw errcode(new Error("Cannot read the key, most likely the password is wrong or not a RSA key"), "ERR_CANNOT_DECRYPT_PEM");
    let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));
    der = uint8ArrayFromString(der.getBytes(), "ascii");
    return supportedKeys.rsa.unmarshalRsaPrivateKey(der);
};
module.exports = {
    supportedKeys,
    keysPBM,
    keyStretcher: require("./key-stretcher"),
    generateEphemeralKeyPair: require("./ephemeral-keys"),
    generateKeyPair,
    generateKeyPairFromSeed,
    unmarshalPublicKey,
    marshalPublicKey,
    unmarshalPrivateKey,
    marshalPrivateKey,
    import: importKey
};

},{"./keys":"7Ev6O","node-forge/lib/asn1":"G8i2L","node-forge/lib/pbe":"AvWMf","node-forge/lib/forge":"9OMxz","err-code":"dUrrM","uint8arrays/from-string":"7qjkp","./importer":"bDlbw","./rsa-class":"44AOI","./ed25519-class":"bS4fQ","./secp256k1-class":"hNB9j","../random-bytes":"87UAX","./key-stretcher":"dHl9v","./ephemeral-keys":"HMWX3"}],"7Ev6O":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-crypto-keys"] || ($protobuf.roots["libp2p-crypto-keys"] = {});
/**
 * KeyType enum.
 * @exports KeyType
 * @enum {number}
 * @property {number} RSA=0 RSA value
 * @property {number} Ed25519=1 Ed25519 value
 * @property {number} Secp256k1=2 Secp256k1 value
 */ $root.KeyType = function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "RSA"] = 0;
    values[valuesById[1] = "Ed25519"] = 1;
    values[valuesById[2] = "Secp256k1"] = 2;
    return values;
}();
$root.PublicKey = function() {
    /**
     * Properties of a PublicKey.
     * @exports IPublicKey
     * @interface IPublicKey
     * @property {KeyType} Type PublicKey Type
     * @property {Uint8Array} Data PublicKey Data
     */ /**
     * Constructs a new PublicKey.
     * @exports PublicKey
     * @classdesc Represents a PublicKey.
     * @implements IPublicKey
     * @constructor
     * @param {IPublicKey=} [p] Properties to set
     */ function PublicKey(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * PublicKey Type.
     * @member {KeyType} Type
     * @memberof PublicKey
     * @instance
     */ PublicKey.prototype.Type = 0;
    /**
     * PublicKey Data.
     * @member {Uint8Array} Data
     * @memberof PublicKey
     * @instance
     */ PublicKey.prototype.Data = $util.newBuffer([]);
    /**
     * Encodes the specified PublicKey message. Does not implicitly {@link PublicKey.verify|verify} messages.
     * @function encode
     * @memberof PublicKey
     * @static
     * @param {IPublicKey} m PublicKey message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ PublicKey.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        w.uint32(8).int32(m.Type);
        w.uint32(18).bytes(m.Data);
        return w;
    };
    /**
     * Decodes a PublicKey message from the specified reader or buffer.
     * @function decode
     * @memberof PublicKey
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {PublicKey} PublicKey
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ PublicKey.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.PublicKey();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.Type = r.int32();
                    break;
                case 2:
                    m.Data = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        if (!m.hasOwnProperty("Type")) throw $util.ProtocolError("missing required 'Type'", {
            instance: m
        });
        if (!m.hasOwnProperty("Data")) throw $util.ProtocolError("missing required 'Data'", {
            instance: m
        });
        return m;
    };
    /**
     * Creates a PublicKey message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PublicKey
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {PublicKey} PublicKey
     */ PublicKey.fromObject = function fromObject(d) {
        if (d instanceof $root.PublicKey) return d;
        var m = new $root.PublicKey();
        switch(d.Type){
            case "RSA":
            case 0:
                m.Type = 0;
                break;
            case "Ed25519":
            case 1:
                m.Type = 1;
                break;
            case "Secp256k1":
            case 2:
                m.Type = 2;
                break;
        }
        if (d.Data != null) {
            if (typeof d.Data === "string") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);
            else if (d.Data.length) m.Data = d.Data;
        }
        return m;
    };
    /**
     * Creates a plain object from a PublicKey message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PublicKey
     * @static
     * @param {PublicKey} m PublicKey
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ PublicKey.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            d.Type = o.enums === String ? "RSA" : 0;
            if (o.bytes === String) d.Data = "";
            else {
                d.Data = [];
                if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);
            }
        }
        if (m.Type != null && m.hasOwnProperty("Type")) d.Type = o.enums === String ? $root.KeyType[m.Type] : m.Type;
        if (m.Data != null && m.hasOwnProperty("Data")) d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
        return d;
    };
    /**
     * Converts this PublicKey to JSON.
     * @function toJSON
     * @memberof PublicKey
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ PublicKey.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PublicKey;
}();
$root.PrivateKey = function() {
    /**
     * Properties of a PrivateKey.
     * @exports IPrivateKey
     * @interface IPrivateKey
     * @property {KeyType} Type PrivateKey Type
     * @property {Uint8Array} Data PrivateKey Data
     */ /**
     * Constructs a new PrivateKey.
     * @exports PrivateKey
     * @classdesc Represents a PrivateKey.
     * @implements IPrivateKey
     * @constructor
     * @param {IPrivateKey=} [p] Properties to set
     */ function PrivateKey(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * PrivateKey Type.
     * @member {KeyType} Type
     * @memberof PrivateKey
     * @instance
     */ PrivateKey.prototype.Type = 0;
    /**
     * PrivateKey Data.
     * @member {Uint8Array} Data
     * @memberof PrivateKey
     * @instance
     */ PrivateKey.prototype.Data = $util.newBuffer([]);
    /**
     * Encodes the specified PrivateKey message. Does not implicitly {@link PrivateKey.verify|verify} messages.
     * @function encode
     * @memberof PrivateKey
     * @static
     * @param {IPrivateKey} m PrivateKey message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ PrivateKey.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        w.uint32(8).int32(m.Type);
        w.uint32(18).bytes(m.Data);
        return w;
    };
    /**
     * Decodes a PrivateKey message from the specified reader or buffer.
     * @function decode
     * @memberof PrivateKey
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {PrivateKey} PrivateKey
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ PrivateKey.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.PrivateKey();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.Type = r.int32();
                    break;
                case 2:
                    m.Data = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        if (!m.hasOwnProperty("Type")) throw $util.ProtocolError("missing required 'Type'", {
            instance: m
        });
        if (!m.hasOwnProperty("Data")) throw $util.ProtocolError("missing required 'Data'", {
            instance: m
        });
        return m;
    };
    /**
     * Creates a PrivateKey message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PrivateKey
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {PrivateKey} PrivateKey
     */ PrivateKey.fromObject = function fromObject(d) {
        if (d instanceof $root.PrivateKey) return d;
        var m = new $root.PrivateKey();
        switch(d.Type){
            case "RSA":
            case 0:
                m.Type = 0;
                break;
            case "Ed25519":
            case 1:
                m.Type = 1;
                break;
            case "Secp256k1":
            case 2:
                m.Type = 2;
                break;
        }
        if (d.Data != null) {
            if (typeof d.Data === "string") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);
            else if (d.Data.length) m.Data = d.Data;
        }
        return m;
    };
    /**
     * Creates a plain object from a PrivateKey message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PrivateKey
     * @static
     * @param {PrivateKey} m PrivateKey
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ PrivateKey.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            d.Type = o.enums === String ? "RSA" : 0;
            if (o.bytes === String) d.Data = "";
            else {
                d.Data = [];
                if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);
            }
        }
        if (m.Type != null && m.hasOwnProperty("Type")) d.Type = o.enums === String ? $root.KeyType[m.Type] : m.Type;
        if (m.Data != null && m.hasOwnProperty("Data")) d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
        return d;
    };
    /**
     * Converts this PrivateKey to JSON.
     * @function toJSON
     * @memberof PrivateKey
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ PrivateKey.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PrivateKey;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"bDlbw":[function(require,module,exports) {
"use strict";
const { base64  } = require("multiformats/bases/base64");
const ciphers = require("../ciphers/aes-gcm");
module.exports = {
    /**
   * Attempts to decrypt a base64 encoded PrivateKey string
   * with the given password. The privateKey must have been exported
   * using the same password and underlying cipher (aes-gcm)
   *
   * @param {string} privateKey - A base64 encoded encrypted key
   * @param {string} password
   * @returns {Promise<Uint8Array>} The private key protobuf
   */ import: async function(privateKey, password) {
        const encryptedKey = base64.decode(privateKey);
        const cipher = ciphers.create();
        return await cipher.decrypt(encryptedKey, password);
    }
};

},{"multiformats/bases/base64":"3gCnk","../ciphers/aes-gcm":"dlpyK"}],"dlpyK":[function(require,module,exports) {
"use strict";
const { concat  } = require("uint8arrays/concat");
const { fromString  } = require("uint8arrays/from-string");
const webcrypto = require("../webcrypto");
// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples
/**
 *
 * @param {object} [options]
 * @param {string} [options.algorithm=AES-GCM]
 * @param {number} [options.nonceLength=12]
 * @param {number} [options.keyLength=16]
 * @param {string} [options.digest=sha256]
 * @param {number} [options.saltLength=16]
 * @param {number} [options.iterations=32767]
 * @returns {*}
 */ function create({ algorithm ="AES-GCM" , nonceLength =12 , keyLength =16 , digest ="SHA-256" , saltLength =16 , iterations =32767  } = {}) {
    const crypto = webcrypto.get();
    keyLength *= 8 // Browser crypto uses bits instead of bytes
    ;
    /**
   * Uses the provided password to derive a pbkdf2 key. The key
   * will then be used to encrypt the data.
   *
   * @param {Uint8Array} data - The data to decrypt
   * @param {string} password - A plain password
   * @returns {Promise<Uint8Array>}
   */ async function encrypt(data, password) {
        const salt = crypto.getRandomValues(new Uint8Array(saltLength));
        const nonce = crypto.getRandomValues(new Uint8Array(nonceLength));
        const aesGcm = {
            name: algorithm,
            iv: nonce
        };
        // Derive a key using PBKDF2.
        const deriveParams = {
            name: "PBKDF2",
            salt,
            iterations,
            hash: {
                name: digest
            }
        };
        const rawKey = await crypto.subtle.importKey("raw", fromString(password), {
            name: "PBKDF2"
        }, false, [
            "deriveKey",
            "deriveBits"
        ]);
        const cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, {
            name: algorithm,
            length: keyLength
        }, true, [
            "encrypt"
        ]);
        // Encrypt the string.
        const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data);
        return concat([
            salt,
            aesGcm.iv,
            new Uint8Array(ciphertext)
        ]);
    }
    /**
   * Uses the provided password to derive a pbkdf2 key. The key
   * will then be used to decrypt the data. The options used to create
   * this decryption cipher must be the same as those used to create
   * the encryption cipher.
   *
   * @param {Uint8Array} data - The data to decrypt
   * @param {string} password - A plain password
   * @returns {Promise<Uint8Array>}
   */ async function decrypt(data, password) {
        const salt = data.slice(0, saltLength);
        const nonce = data.slice(saltLength, saltLength + nonceLength);
        const ciphertext = data.slice(saltLength + nonceLength);
        const aesGcm = {
            name: algorithm,
            iv: nonce
        };
        // Derive the key using PBKDF2.
        const deriveParams = {
            name: "PBKDF2",
            salt,
            iterations,
            hash: {
                name: digest
            }
        };
        const rawKey = await crypto.subtle.importKey("raw", fromString(password), {
            name: "PBKDF2"
        }, false, [
            "deriveKey",
            "deriveBits"
        ]);
        const cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, {
            name: algorithm,
            length: keyLength
        }, true, [
            "decrypt"
        ]);
        // Decrypt the string.
        const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);
        return new Uint8Array(plaintext);
    }
    return {
        encrypt,
        decrypt
    };
}
module.exports = {
    create
};

},{"uint8arrays/concat":"gqJ9u","uint8arrays/from-string":"7qjkp","../webcrypto":"8JvzZ"}],"44AOI":[function(require,module,exports) {
"use strict";
const { sha256  } = require("multiformats/hashes/sha2");
const errcode = require("err-code");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
require("node-forge/lib/sha512");
require("node-forge/lib/ed25519");
const forge = require("node-forge/lib/forge");
const crypto = require("./rsa");
const pbm = require("./keys");
const exporter = require("./exporter");
class RsaPublicKey {
    constructor(key){
        this._key = key;
    }
    async verify(data, sig) {
        return crypto.hashAndVerify(this._key, sig, data);
    }
    marshal() {
        return crypto.utils.jwkToPkix(this._key);
    }
    get bytes() {
        return pbm.PublicKey.encode({
            Type: pbm.KeyType.RSA,
            Data: this.marshal()
        }).finish();
    }
    encrypt(bytes) {
        return crypto.encrypt(this._key, bytes);
    }
    equals(key) {
        return uint8ArrayEquals(this.bytes, key.bytes);
    }
    async hash() {
        const { bytes  } = await sha256.digest(this.bytes);
        return bytes;
    }
}
class RsaPrivateKey {
    // key       - Object of the jwk format
    // publicKey - Uint8Array of the spki format
    constructor(key, publicKey){
        this._key = key;
        this._publicKey = publicKey;
    }
    genSecret() {
        return crypto.getRandomValues(16);
    }
    async sign(message) {
        return crypto.hashAndSign(this._key, message);
    }
    get public() {
        if (!this._publicKey) throw errcode(new Error("public key not provided"), "ERR_PUBKEY_NOT_PROVIDED");
        return new RsaPublicKey(this._publicKey);
    }
    decrypt(bytes) {
        return crypto.decrypt(this._key, bytes);
    }
    marshal() {
        return crypto.utils.jwkToPkcs1(this._key);
    }
    get bytes() {
        return pbm.PrivateKey.encode({
            Type: pbm.KeyType.RSA,
            Data: this.marshal()
        }).finish();
    }
    equals(key) {
        return uint8ArrayEquals(this.bytes, key.bytes);
    }
    async hash() {
        const { bytes  } = await sha256.digest(this.bytes);
        return bytes;
    }
    /**
   * Gets the ID of the key.
   *
   * The key id is the base58 encoding of the SHA-256 multihash of its public key.
   * The public key is a protobuf encoding containing a type and the DER encoding
   * of the PKCS SubjectPublicKeyInfo.
   *
   * @returns {Promise<string>}
   */ async id() {
        const hash = await this.public.hash();
        return uint8ArrayToString(hash, "base58btc");
    }
    /**
   * Exports the key into a password protected PEM format
   *
   * @param {string} password - The password to read the encrypted PEM
   * @param {string} [format=pkcs-8] - The format in which to export as
   */ async export(password, format = "pkcs-8") {
        if (format === "pkcs-8") {
            const buffer = new forge.util.ByteBuffer(this.marshal());
            const asn1 = forge.asn1.fromDer(buffer);
            const privateKey = forge.pki.privateKeyFromAsn1(asn1);
            const options = {
                algorithm: "aes256",
                count: 10000,
                saltSize: 16,
                prfAlgorithm: "sha512"
            };
            return forge.pki.encryptRsaPrivateKey(privateKey, password, options);
        } else if (format === "libp2p-key") return exporter.export(this.bytes, password);
        else throw errcode(new Error(`export format '${format}' is not supported`), "ERR_INVALID_EXPORT_FORMAT");
    }
}
async function unmarshalRsaPrivateKey(bytes) {
    const jwk = crypto.utils.pkcs1ToJwk(bytes);
    const keys = await crypto.unmarshalPrivateKey(jwk);
    return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}
function unmarshalRsaPublicKey(bytes) {
    const jwk = crypto.utils.pkixToJwk(bytes);
    return new RsaPublicKey(jwk);
}
async function fromJwk(jwk) {
    const keys = await crypto.unmarshalPrivateKey(jwk);
    return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}
async function generateKeyPair(bits) {
    const keys = await crypto.generateKey(bits);
    return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}
module.exports = {
    RsaPublicKey,
    RsaPrivateKey,
    unmarshalRsaPublicKey,
    unmarshalRsaPrivateKey,
    generateKeyPair,
    fromJwk
};

},{"multiformats/hashes/sha2":"7U0mx","err-code":"dUrrM","uint8arrays/equals":"iZMnE","uint8arrays/to-string":"w8mvE","node-forge/lib/sha512":"ATXY0","node-forge/lib/ed25519":"48D0Y","node-forge/lib/forge":"9OMxz","./rsa":"iU9Nm","./keys":"7Ev6O","./exporter":"3x5jF"}],"48D0Y":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/**
 * JavaScript implementation of Ed25519.
 *
 * Copyright (c) 2017-2019 Digital Bazaar, Inc.
 *
 * This implementation is based on the most excellent TweetNaCl which is
 * in the public domain. Many thanks to its contributors:
 *
 * https://github.com/dchest/tweetnacl-js
 */ var forge = require("./forge");
require("./jsbn");
require("./random");
require("./sha512");
require("./util");
var asn1Validator = require("./asn1-validator");
var publicKeyValidator = asn1Validator.publicKeyValidator;
var privateKeyValidator = asn1Validator.privateKeyValidator;
if (typeof BigInteger === "undefined") var BigInteger = forge.jsbn.BigInteger;
var ByteBuffer = forge.util.ByteBuffer;
var NativeBuffer = typeof Buffer === "undefined" ? Uint8Array : Buffer;
/*
 * Ed25519 algorithms, see RFC 8032:
 * https://tools.ietf.org/html/rfc8032
 */ forge.pki = forge.pki || {};
module.exports = forge.pki.ed25519 = forge.ed25519 = forge.ed25519 || {};
var ed25519 = forge.ed25519;
ed25519.constants = {};
ed25519.constants.PUBLIC_KEY_BYTE_LENGTH = 32;
ed25519.constants.PRIVATE_KEY_BYTE_LENGTH = 64;
ed25519.constants.SEED_BYTE_LENGTH = 32;
ed25519.constants.SIGN_BYTE_LENGTH = 64;
ed25519.constants.HASH_BYTE_LENGTH = 64;
ed25519.generateKeyPair = function(options) {
    options = options || {};
    var seed = options.seed;
    if (seed === undefined) // generate seed
    seed = forge.random.getBytesSync(ed25519.constants.SEED_BYTE_LENGTH);
    else if (typeof seed === "string") {
        if (seed.length !== ed25519.constants.SEED_BYTE_LENGTH) throw new TypeError('"seed" must be ' + ed25519.constants.SEED_BYTE_LENGTH + " bytes in length.");
    } else if (!(seed instanceof Uint8Array)) throw new TypeError('"seed" must be a node.js Buffer, Uint8Array, or a binary string.');
    seed = messageToNativeBuffer({
        message: seed,
        encoding: "binary"
    });
    var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);
    var sk = new NativeBuffer(ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);
    for(var i = 0; i < 32; ++i)sk[i] = seed[i];
    crypto_sign_keypair(pk, sk);
    return {
        publicKey: pk,
        privateKey: sk
    };
};
/**
 * Converts a private key from a RFC8410 ASN.1 encoding.
 *
 * @param obj - The asn1 representation of a private key.
 *
 * @returns {Object} keyInfo - The key information.
 * @returns {Buffer|Uint8Array} keyInfo.privateKeyBytes - 32 private key bytes.
 */ ed25519.privateKeyFromAsn1 = function(obj) {
    var capture = {};
    var errors = [];
    var valid = forge.asn1.validate(obj, privateKeyValidator, capture, errors);
    if (!valid) {
        var error = new Error("Invalid Key.");
        error.errors = errors;
        throw error;
    }
    var oid = forge.asn1.derToOid(capture.privateKeyOid);
    var ed25519Oid = forge.oids.EdDSA25519;
    if (oid !== ed25519Oid) throw new Error('Invalid OID "' + oid + '"; OID must be "' + ed25519Oid + '".');
    var privateKey = capture.privateKey;
    // manually extract the private key bytes from nested octet string, see FIXME:
    // https://github.com/digitalbazaar/forge/blob/master/lib/asn1.js#L542
    var privateKeyBytes = messageToNativeBuffer({
        message: forge.asn1.fromDer(privateKey).value,
        encoding: "binary"
    });
    // TODO: RFC8410 specifies a format for encoding the public key bytes along
    // with the private key bytes. `publicKeyBytes` can be returned in the
    // future. https://tools.ietf.org/html/rfc8410#section-10.3
    return {
        privateKeyBytes: privateKeyBytes
    };
};
/**
 * Converts a public key from a RFC8410 ASN.1 encoding.
 *
 * @param obj - The asn1 representation of a public key.
 *
 * @return {Buffer|Uint8Array} - 32 public key bytes.
 */ ed25519.publicKeyFromAsn1 = function(obj) {
    // get SubjectPublicKeyInfo
    var capture = {};
    var errors = [];
    var valid = forge.asn1.validate(obj, publicKeyValidator, capture, errors);
    if (!valid) {
        var error = new Error("Invalid Key.");
        error.errors = errors;
        throw error;
    }
    var oid = forge.asn1.derToOid(capture.publicKeyOid);
    var ed25519Oid = forge.oids.EdDSA25519;
    if (oid !== ed25519Oid) throw new Error('Invalid OID "' + oid + '"; OID must be "' + ed25519Oid + '".');
    var publicKeyBytes = capture.ed25519PublicKey;
    if (publicKeyBytes.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) throw new Error("Key length is invalid.");
    return messageToNativeBuffer({
        message: publicKeyBytes,
        encoding: "binary"
    });
};
ed25519.publicKeyFromPrivateKey = function(options) {
    options = options || {};
    var privateKey = messageToNativeBuffer({
        message: options.privateKey,
        encoding: "binary"
    });
    if (privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) throw new TypeError('"options.privateKey" must have a byte length of ' + ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);
    var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);
    for(var i = 0; i < pk.length; ++i)pk[i] = privateKey[32 + i];
    return pk;
};
ed25519.sign = function(options) {
    options = options || {};
    var msg = messageToNativeBuffer(options);
    var privateKey = messageToNativeBuffer({
        message: options.privateKey,
        encoding: "binary"
    });
    if (privateKey.length === ed25519.constants.SEED_BYTE_LENGTH) {
        var keyPair = ed25519.generateKeyPair({
            seed: privateKey
        });
        privateKey = keyPair.privateKey;
    } else if (privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) throw new TypeError('"options.privateKey" must have a byte length of ' + ed25519.constants.SEED_BYTE_LENGTH + " or " + ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);
    var signedMsg = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);
    crypto_sign(signedMsg, msg, msg.length, privateKey);
    var sig = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH);
    for(var i = 0; i < sig.length; ++i)sig[i] = signedMsg[i];
    return sig;
};
ed25519.verify = function(options) {
    options = options || {};
    var msg = messageToNativeBuffer(options);
    if (options.signature === undefined) throw new TypeError('"options.signature" must be a node.js Buffer, a Uint8Array, a forge ByteBuffer, or a binary string.');
    var sig = messageToNativeBuffer({
        message: options.signature,
        encoding: "binary"
    });
    if (sig.length !== ed25519.constants.SIGN_BYTE_LENGTH) throw new TypeError('"options.signature" must have a byte length of ' + ed25519.constants.SIGN_BYTE_LENGTH);
    var publicKey = messageToNativeBuffer({
        message: options.publicKey,
        encoding: "binary"
    });
    if (publicKey.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) throw new TypeError('"options.publicKey" must have a byte length of ' + ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);
    var sm = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);
    var m = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);
    var i;
    for(i = 0; i < ed25519.constants.SIGN_BYTE_LENGTH; ++i)sm[i] = sig[i];
    for(i = 0; i < msg.length; ++i)sm[i + ed25519.constants.SIGN_BYTE_LENGTH] = msg[i];
    return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
};
function messageToNativeBuffer(options) {
    var message = options.message;
    if (message instanceof Uint8Array || message instanceof NativeBuffer) return message;
    var encoding = options.encoding;
    if (message === undefined) {
        if (options.md) {
            // TODO: more rigorous validation that `md` is a MessageDigest
            message = options.md.digest().getBytes();
            encoding = "binary";
        } else throw new TypeError('"options.message" or "options.md" not specified.');
    }
    if (typeof message === "string" && !encoding) throw new TypeError('"options.encoding" must be "binary" or "utf8".');
    if (typeof message === "string") {
        if (typeof Buffer !== "undefined") return Buffer.from(message, encoding);
        message = new ByteBuffer(message, encoding);
    } else if (!(message instanceof ByteBuffer)) throw new TypeError('"options.message" must be a node.js Buffer, a Uint8Array, a forge ByteBuffer, or a string with "options.encoding" specifying its encoding.');
    // convert to native buffer
    var buffer = new NativeBuffer(message.length());
    for(var i = 0; i < buffer.length; ++i)buffer[i] = message.at(i);
    return buffer;
}
var gf0 = gf();
var gf1 = gf([
    1
]);
var D = gf([
    0x78a3,
    0x1359,
    0x4dca,
    0x75eb,
    0xd8ab,
    0x4141,
    0x0a4d,
    0x0070,
    0xe898,
    0x7779,
    0x4079,
    0x8cc7,
    0xfe73,
    0x2b6f,
    0x6cee,
    0x5203
]);
var D2 = gf([
    0xf159,
    0x26b2,
    0x9b94,
    0xebd6,
    0xb156,
    0x8283,
    0x149a,
    0x00e0,
    0xd130,
    0xeef3,
    0x80f2,
    0x198e,
    0xfce7,
    0x56df,
    0xd9dc,
    0x2406
]);
var X = gf([
    0xd51a,
    0x8f25,
    0x2d60,
    0xc956,
    0xa7b2,
    0x9525,
    0xc760,
    0x692c,
    0xdc5c,
    0xfdd6,
    0xe231,
    0xc0a4,
    0x53fe,
    0xcd6e,
    0x36d3,
    0x2169
]);
var Y = gf([
    0x6658,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666,
    0x6666
]);
var L = new Float64Array([
    0xed,
    0xd3,
    0xf5,
    0x5c,
    0x1a,
    0x63,
    0x12,
    0x58,
    0xd6,
    0x9c,
    0xf7,
    0xa2,
    0xde,
    0xf9,
    0xde,
    0x14,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x10
]);
var I = gf([
    0xa0b0,
    0x4a0e,
    0x1b27,
    0xc4ee,
    0xe478,
    0xad2f,
    0x1806,
    0x2f43,
    0xd7a7,
    0x3dfb,
    0x0099,
    0x2b4d,
    0xdf0b,
    0x4fc1,
    0x2480,
    0x2b83
]);
// TODO: update forge buffer implementation to use `Buffer` or `Uint8Array`,
// whichever is available, to improve performance
function sha512(msg, msgLen) {
    // Note: `out` and `msg` are NativeBuffer
    var md = forge.md.sha512.create();
    var buffer = new ByteBuffer(msg);
    md.update(buffer.getBytes(msgLen), "binary");
    var hash = md.digest().getBytes();
    if (typeof Buffer !== "undefined") return Buffer.from(hash, "binary");
    var out = new NativeBuffer(ed25519.constants.HASH_BYTE_LENGTH);
    for(var i = 0; i < 64; ++i)out[i] = hash.charCodeAt(i);
    return out;
}
function crypto_sign_keypair(pk, sk) {
    var p = [
        gf(),
        gf(),
        gf(),
        gf()
    ];
    var i;
    var d = sha512(sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;
    scalarbase(p, d);
    pack(pk, p);
    for(i = 0; i < 32; ++i)sk[i + 32] = pk[i];
    return 0;
}
// Note: difference from C - smlen returned, not passed as argument.
function crypto_sign(sm, m, n, sk) {
    var i, j, x = new Float64Array(64);
    var p = [
        gf(),
        gf(),
        gf(),
        gf()
    ];
    var d = sha512(sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;
    var smlen = n + 64;
    for(i = 0; i < n; ++i)sm[64 + i] = m[i];
    for(i = 0; i < 32; ++i)sm[32 + i] = d[32 + i];
    var r = sha512(sm.subarray(32), n + 32);
    reduce(r);
    scalarbase(p, r);
    pack(sm, p);
    for(i = 32; i < 64; ++i)sm[i] = sk[i];
    var h = sha512(sm, n + 64);
    reduce(h);
    for(i = 32; i < 64; ++i)x[i] = 0;
    for(i = 0; i < 32; ++i)x[i] = r[i];
    for(i = 0; i < 32; ++i)for(j = 0; j < 32; j++)x[i + j] += h[i] * d[j];
    modL(sm.subarray(32), x);
    return smlen;
}
function crypto_sign_open(m, sm, n, pk) {
    var i, mlen;
    var t = new NativeBuffer(32);
    var p = [
        gf(),
        gf(),
        gf(),
        gf()
    ], q = [
        gf(),
        gf(),
        gf(),
        gf()
    ];
    mlen = -1;
    if (n < 64) return -1;
    if (unpackneg(q, pk)) return -1;
    for(i = 0; i < n; ++i)m[i] = sm[i];
    for(i = 0; i < 32; ++i)m[i + 32] = pk[i];
    var h = sha512(m, n);
    reduce(h);
    scalarmult(p, q, h);
    scalarbase(q, sm.subarray(32));
    add(p, q);
    pack(t, p);
    n -= 64;
    if (crypto_verify_32(sm, 0, t, 0)) {
        for(i = 0; i < n; ++i)m[i] = 0;
        return -1;
    }
    for(i = 0; i < n; ++i)m[i] = sm[i + 64];
    mlen = n;
    return mlen;
}
function modL(r, x) {
    var carry, i, j, k;
    for(i = 63; i >= 32; --i){
        carry = 0;
        for(j = i - 32, k = i - 12; j < k; ++j){
            x[j] += carry - 16 * x[i] * L[j - (i - 32)];
            carry = x[j] + 128 >> 8;
            x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
    }
    carry = 0;
    for(j = 0; j < 32; ++j){
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
    }
    for(j = 0; j < 32; ++j)x[j] -= carry * L[j];
    for(i = 0; i < 32; ++i){
        x[i + 1] += x[i] >> 8;
        r[i] = x[i] & 255;
    }
}
function reduce(r) {
    var x = new Float64Array(64);
    for(var i = 0; i < 64; ++i){
        x[i] = r[i];
        r[i] = 0;
    }
    modL(r, x);
}
function add(p, q) {
    var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
    Z(a, p[1], p[0]);
    Z(t, q[1], q[0]);
    M(a, a, t);
    A(b, p[0], p[1]);
    A(t, q[0], q[1]);
    M(b, b, t);
    M(c, p[3], q[3]);
    M(c, c, D2);
    M(d, p[2], q[2]);
    A(d, d, d);
    Z(e, b, a);
    Z(f, d, c);
    A(g, d, c);
    A(h, b, a);
    M(p[0], e, f);
    M(p[1], h, g);
    M(p[2], g, f);
    M(p[3], e, h);
}
function cswap(p, q, b) {
    for(var i = 0; i < 4; ++i)sel25519(p[i], q[i], b);
}
function pack(r, p) {
    var tx = gf(), ty = gf(), zi = gf();
    inv25519(zi, p[2]);
    M(tx, p[0], zi);
    M(ty, p[1], zi);
    pack25519(r, ty);
    r[31] ^= par25519(tx) << 7;
}
function pack25519(o, n) {
    var i, j, b;
    var m = gf(), t = gf();
    for(i = 0; i < 16; ++i)t[i] = n[i];
    car25519(t);
    car25519(t);
    car25519(t);
    for(j = 0; j < 2; ++j){
        m[0] = t[0] - 0xffed;
        for(i = 1; i < 15; ++i){
            m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
            m[i - 1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
        b = m[15] >> 16 & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1 - b);
    }
    for(i = 0; i < 16; i++){
        o[2 * i] = t[i] & 0xff;
        o[2 * i + 1] = t[i] >> 8;
    }
}
function unpackneg(r, p) {
    var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
    set25519(r[2], gf1);
    unpack25519(r[1], p);
    S(num, r[1]);
    M(den, num, D);
    Z(num, num, r[2]);
    A(den, r[2], den);
    S(den2, den);
    S(den4, den2);
    M(den6, den4, den2);
    M(t, den6, num);
    M(t, t, den);
    pow2523(t, t);
    M(t, t, num);
    M(t, t, den);
    M(t, t, den);
    M(r[0], t, den);
    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) M(r[0], r[0], I);
    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) return -1;
    if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
    M(r[3], r[0], r[1]);
    return 0;
}
function unpack25519(o, n) {
    var i;
    for(i = 0; i < 16; ++i)o[i] = n[2 * i] + (n[2 * i + 1] << 8);
    o[15] &= 0x7fff;
}
function pow2523(o, i) {
    var c = gf();
    var a;
    for(a = 0; a < 16; ++a)c[a] = i[a];
    for(a = 250; a >= 0; --a){
        S(c, c);
        if (a !== 1) M(c, c, i);
    }
    for(a = 0; a < 16; ++a)o[a] = c[a];
}
function neq25519(a, b) {
    var c = new NativeBuffer(32);
    var d = new NativeBuffer(32);
    pack25519(c, a);
    pack25519(d, b);
    return crypto_verify_32(c, 0, d, 0);
}
function crypto_verify_32(x, xi, y, yi) {
    return vn(x, xi, y, yi, 32);
}
function vn(x, xi, y, yi, n) {
    var i, d = 0;
    for(i = 0; i < n; ++i)d |= x[xi + i] ^ y[yi + i];
    return (1 & d - 1 >>> 8) - 1;
}
function par25519(a) {
    var d = new NativeBuffer(32);
    pack25519(d, a);
    return d[0] & 1;
}
function scalarmult(p, q, s) {
    var b, i;
    set25519(p[0], gf0);
    set25519(p[1], gf1);
    set25519(p[2], gf1);
    set25519(p[3], gf0);
    for(i = 255; i >= 0; --i){
        b = s[i / 8 | 0] >> (i & 7) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
    }
}
function scalarbase(p, s) {
    var q = [
        gf(),
        gf(),
        gf(),
        gf()
    ];
    set25519(q[0], X);
    set25519(q[1], Y);
    set25519(q[2], gf1);
    M(q[3], X, Y);
    scalarmult(p, q, s);
}
function set25519(r, a) {
    var i;
    for(i = 0; i < 16; i++)r[i] = a[i] | 0;
}
function inv25519(o, i) {
    var c = gf();
    var a;
    for(a = 0; a < 16; ++a)c[a] = i[a];
    for(a = 253; a >= 0; --a){
        S(c, c);
        if (a !== 2 && a !== 4) M(c, c, i);
    }
    for(a = 0; a < 16; ++a)o[a] = c[a];
}
function car25519(o) {
    var i, v, c = 1;
    for(i = 0; i < 16; ++i){
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
    }
    o[0] += c - 1 + 37 * (c - 1);
}
function sel25519(p, q, b) {
    var t, c = ~(b - 1);
    for(var i = 0; i < 16; ++i){
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
    }
}
function gf(init) {
    var i, r = new Float64Array(16);
    if (init) for(i = 0; i < init.length; ++i)r[i] = init[i];
    return r;
}
function A(o, a, b) {
    for(var i = 0; i < 16; ++i)o[i] = a[i] + b[i];
}
function Z(o, a, b) {
    for(var i = 0; i < 16; ++i)o[i] = a[i] - b[i];
}
function S(o, a) {
    M(o, a, a);
}
function M(o, a, b) {
    var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
    v = a[0];
    t0 += v * b0;
    t1 += v * b1;
    t2 += v * b2;
    t3 += v * b3;
    t4 += v * b4;
    t5 += v * b5;
    t6 += v * b6;
    t7 += v * b7;
    t8 += v * b8;
    t9 += v * b9;
    t10 += v * b10;
    t11 += v * b11;
    t12 += v * b12;
    t13 += v * b13;
    t14 += v * b14;
    t15 += v * b15;
    v = a[1];
    t1 += v * b0;
    t2 += v * b1;
    t3 += v * b2;
    t4 += v * b3;
    t5 += v * b4;
    t6 += v * b5;
    t7 += v * b6;
    t8 += v * b7;
    t9 += v * b8;
    t10 += v * b9;
    t11 += v * b10;
    t12 += v * b11;
    t13 += v * b12;
    t14 += v * b13;
    t15 += v * b14;
    t16 += v * b15;
    v = a[2];
    t2 += v * b0;
    t3 += v * b1;
    t4 += v * b2;
    t5 += v * b3;
    t6 += v * b4;
    t7 += v * b5;
    t8 += v * b6;
    t9 += v * b7;
    t10 += v * b8;
    t11 += v * b9;
    t12 += v * b10;
    t13 += v * b11;
    t14 += v * b12;
    t15 += v * b13;
    t16 += v * b14;
    t17 += v * b15;
    v = a[3];
    t3 += v * b0;
    t4 += v * b1;
    t5 += v * b2;
    t6 += v * b3;
    t7 += v * b4;
    t8 += v * b5;
    t9 += v * b6;
    t10 += v * b7;
    t11 += v * b8;
    t12 += v * b9;
    t13 += v * b10;
    t14 += v * b11;
    t15 += v * b12;
    t16 += v * b13;
    t17 += v * b14;
    t18 += v * b15;
    v = a[4];
    t4 += v * b0;
    t5 += v * b1;
    t6 += v * b2;
    t7 += v * b3;
    t8 += v * b4;
    t9 += v * b5;
    t10 += v * b6;
    t11 += v * b7;
    t12 += v * b8;
    t13 += v * b9;
    t14 += v * b10;
    t15 += v * b11;
    t16 += v * b12;
    t17 += v * b13;
    t18 += v * b14;
    t19 += v * b15;
    v = a[5];
    t5 += v * b0;
    t6 += v * b1;
    t7 += v * b2;
    t8 += v * b3;
    t9 += v * b4;
    t10 += v * b5;
    t11 += v * b6;
    t12 += v * b7;
    t13 += v * b8;
    t14 += v * b9;
    t15 += v * b10;
    t16 += v * b11;
    t17 += v * b12;
    t18 += v * b13;
    t19 += v * b14;
    t20 += v * b15;
    v = a[6];
    t6 += v * b0;
    t7 += v * b1;
    t8 += v * b2;
    t9 += v * b3;
    t10 += v * b4;
    t11 += v * b5;
    t12 += v * b6;
    t13 += v * b7;
    t14 += v * b8;
    t15 += v * b9;
    t16 += v * b10;
    t17 += v * b11;
    t18 += v * b12;
    t19 += v * b13;
    t20 += v * b14;
    t21 += v * b15;
    v = a[7];
    t7 += v * b0;
    t8 += v * b1;
    t9 += v * b2;
    t10 += v * b3;
    t11 += v * b4;
    t12 += v * b5;
    t13 += v * b6;
    t14 += v * b7;
    t15 += v * b8;
    t16 += v * b9;
    t17 += v * b10;
    t18 += v * b11;
    t19 += v * b12;
    t20 += v * b13;
    t21 += v * b14;
    t22 += v * b15;
    v = a[8];
    t8 += v * b0;
    t9 += v * b1;
    t10 += v * b2;
    t11 += v * b3;
    t12 += v * b4;
    t13 += v * b5;
    t14 += v * b6;
    t15 += v * b7;
    t16 += v * b8;
    t17 += v * b9;
    t18 += v * b10;
    t19 += v * b11;
    t20 += v * b12;
    t21 += v * b13;
    t22 += v * b14;
    t23 += v * b15;
    v = a[9];
    t9 += v * b0;
    t10 += v * b1;
    t11 += v * b2;
    t12 += v * b3;
    t13 += v * b4;
    t14 += v * b5;
    t15 += v * b6;
    t16 += v * b7;
    t17 += v * b8;
    t18 += v * b9;
    t19 += v * b10;
    t20 += v * b11;
    t21 += v * b12;
    t22 += v * b13;
    t23 += v * b14;
    t24 += v * b15;
    v = a[10];
    t10 += v * b0;
    t11 += v * b1;
    t12 += v * b2;
    t13 += v * b3;
    t14 += v * b4;
    t15 += v * b5;
    t16 += v * b6;
    t17 += v * b7;
    t18 += v * b8;
    t19 += v * b9;
    t20 += v * b10;
    t21 += v * b11;
    t22 += v * b12;
    t23 += v * b13;
    t24 += v * b14;
    t25 += v * b15;
    v = a[11];
    t11 += v * b0;
    t12 += v * b1;
    t13 += v * b2;
    t14 += v * b3;
    t15 += v * b4;
    t16 += v * b5;
    t17 += v * b6;
    t18 += v * b7;
    t19 += v * b8;
    t20 += v * b9;
    t21 += v * b10;
    t22 += v * b11;
    t23 += v * b12;
    t24 += v * b13;
    t25 += v * b14;
    t26 += v * b15;
    v = a[12];
    t12 += v * b0;
    t13 += v * b1;
    t14 += v * b2;
    t15 += v * b3;
    t16 += v * b4;
    t17 += v * b5;
    t18 += v * b6;
    t19 += v * b7;
    t20 += v * b8;
    t21 += v * b9;
    t22 += v * b10;
    t23 += v * b11;
    t24 += v * b12;
    t25 += v * b13;
    t26 += v * b14;
    t27 += v * b15;
    v = a[13];
    t13 += v * b0;
    t14 += v * b1;
    t15 += v * b2;
    t16 += v * b3;
    t17 += v * b4;
    t18 += v * b5;
    t19 += v * b6;
    t20 += v * b7;
    t21 += v * b8;
    t22 += v * b9;
    t23 += v * b10;
    t24 += v * b11;
    t25 += v * b12;
    t26 += v * b13;
    t27 += v * b14;
    t28 += v * b15;
    v = a[14];
    t14 += v * b0;
    t15 += v * b1;
    t16 += v * b2;
    t17 += v * b3;
    t18 += v * b4;
    t19 += v * b5;
    t20 += v * b6;
    t21 += v * b7;
    t22 += v * b8;
    t23 += v * b9;
    t24 += v * b10;
    t25 += v * b11;
    t26 += v * b12;
    t27 += v * b13;
    t28 += v * b14;
    t29 += v * b15;
    v = a[15];
    t15 += v * b0;
    t16 += v * b1;
    t17 += v * b2;
    t18 += v * b3;
    t19 += v * b4;
    t20 += v * b5;
    t21 += v * b6;
    t22 += v * b7;
    t23 += v * b8;
    t24 += v * b9;
    t25 += v * b10;
    t26 += v * b11;
    t27 += v * b12;
    t28 += v * b13;
    t29 += v * b14;
    t30 += v * b15;
    t0 += 38 * t16;
    t1 += 38 * t17;
    t2 += 38 * t18;
    t3 += 38 * t19;
    t4 += 38 * t20;
    t5 += 38 * t21;
    t6 += 38 * t22;
    t7 += 38 * t23;
    t8 += 38 * t24;
    t9 += 38 * t25;
    t10 += 38 * t26;
    t11 += 38 * t27;
    t12 += 38 * t28;
    t13 += 38 * t29;
    t14 += 38 * t30;
    // t15 left as is
    // first car
    c = 1;
    v = t0 + c + 65535;
    c = Math.floor(v / 65536);
    t0 = v - c * 65536;
    v = t1 + c + 65535;
    c = Math.floor(v / 65536);
    t1 = v - c * 65536;
    v = t2 + c + 65535;
    c = Math.floor(v / 65536);
    t2 = v - c * 65536;
    v = t3 + c + 65535;
    c = Math.floor(v / 65536);
    t3 = v - c * 65536;
    v = t4 + c + 65535;
    c = Math.floor(v / 65536);
    t4 = v - c * 65536;
    v = t5 + c + 65535;
    c = Math.floor(v / 65536);
    t5 = v - c * 65536;
    v = t6 + c + 65535;
    c = Math.floor(v / 65536);
    t6 = v - c * 65536;
    v = t7 + c + 65535;
    c = Math.floor(v / 65536);
    t7 = v - c * 65536;
    v = t8 + c + 65535;
    c = Math.floor(v / 65536);
    t8 = v - c * 65536;
    v = t9 + c + 65535;
    c = Math.floor(v / 65536);
    t9 = v - c * 65536;
    v = t10 + c + 65535;
    c = Math.floor(v / 65536);
    t10 = v - c * 65536;
    v = t11 + c + 65535;
    c = Math.floor(v / 65536);
    t11 = v - c * 65536;
    v = t12 + c + 65535;
    c = Math.floor(v / 65536);
    t12 = v - c * 65536;
    v = t13 + c + 65535;
    c = Math.floor(v / 65536);
    t13 = v - c * 65536;
    v = t14 + c + 65535;
    c = Math.floor(v / 65536);
    t14 = v - c * 65536;
    v = t15 + c + 65535;
    c = Math.floor(v / 65536);
    t15 = v - c * 65536;
    t0 += c - 1 + 37 * (c - 1);
    // second car
    c = 1;
    v = t0 + c + 65535;
    c = Math.floor(v / 65536);
    t0 = v - c * 65536;
    v = t1 + c + 65535;
    c = Math.floor(v / 65536);
    t1 = v - c * 65536;
    v = t2 + c + 65535;
    c = Math.floor(v / 65536);
    t2 = v - c * 65536;
    v = t3 + c + 65535;
    c = Math.floor(v / 65536);
    t3 = v - c * 65536;
    v = t4 + c + 65535;
    c = Math.floor(v / 65536);
    t4 = v - c * 65536;
    v = t5 + c + 65535;
    c = Math.floor(v / 65536);
    t5 = v - c * 65536;
    v = t6 + c + 65535;
    c = Math.floor(v / 65536);
    t6 = v - c * 65536;
    v = t7 + c + 65535;
    c = Math.floor(v / 65536);
    t7 = v - c * 65536;
    v = t8 + c + 65535;
    c = Math.floor(v / 65536);
    t8 = v - c * 65536;
    v = t9 + c + 65535;
    c = Math.floor(v / 65536);
    t9 = v - c * 65536;
    v = t10 + c + 65535;
    c = Math.floor(v / 65536);
    t10 = v - c * 65536;
    v = t11 + c + 65535;
    c = Math.floor(v / 65536);
    t11 = v - c * 65536;
    v = t12 + c + 65535;
    c = Math.floor(v / 65536);
    t12 = v - c * 65536;
    v = t13 + c + 65535;
    c = Math.floor(v / 65536);
    t13 = v - c * 65536;
    v = t14 + c + 65535;
    c = Math.floor(v / 65536);
    t14 = v - c * 65536;
    v = t15 + c + 65535;
    c = Math.floor(v / 65536);
    t15 = v - c * 65536;
    t0 += c - 1 + 37 * (c - 1);
    o[0] = t0;
    o[1] = t1;
    o[2] = t2;
    o[3] = t3;
    o[4] = t4;
    o[5] = t5;
    o[6] = t6;
    o[7] = t7;
    o[8] = t8;
    o[9] = t9;
    o[10] = t10;
    o[11] = t11;
    o[12] = t12;
    o[13] = t13;
    o[14] = t14;
    o[15] = t15;
}

},{"buffer":"jhUEF","./forge":"9OMxz","./jsbn":"5Wfp8","./random":"fOMS2","./sha512":"ATXY0","./util":"9XcEH","./asn1-validator":"k63l3"}],"k63l3":[function(require,module,exports) {
/**
 * Copyright (c) 2019 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./asn1");
var asn1 = forge.asn1;
exports.privateKeyValidator = {
    // PrivateKeyInfo
    name: "PrivateKeyInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            // Version (INTEGER)
            name: "PrivateKeyInfo.version",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "privateKeyVersion"
        },
        {
            // privateKeyAlgorithm
            name: "PrivateKeyInfo.privateKeyAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "AlgorithmIdentifier.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "privateKeyOid"
                }
            ]
        },
        {
            // PrivateKey
            name: "PrivateKeyInfo",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OCTETSTRING,
            constructed: false,
            capture: "privateKey"
        }
    ]
};
exports.publicKeyValidator = {
    name: "SubjectPublicKeyInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: "subjectPublicKeyInfo",
    value: [
        {
            name: "SubjectPublicKeyInfo.AlgorithmIdentifier",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "AlgorithmIdentifier.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "publicKeyOid"
                }
            ]
        },
        // capture group for ed25519PublicKey
        {
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.BITSTRING,
            constructed: false,
            composed: true,
            captureBitStringValue: "ed25519PublicKey"
        }
    ]
};

},{"./forge":"9OMxz","./asn1":"G8i2L"}],"iU9Nm":[function(require,module,exports) {
"use strict";
const webcrypto = require("../webcrypto");
const randomBytes = require("../random-bytes");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
exports.utils = require("./rsa-utils");
exports.generateKey = async function(bits) {
    const pair = await webcrypto.get().subtle.generateKey({
        name: "RSASSA-PKCS1-v1_5",
        modulusLength: bits,
        publicExponent: new Uint8Array([
            0x01,
            0x00,
            0x01
        ]),
        hash: {
            name: "SHA-256"
        }
    }, true, [
        "sign",
        "verify"
    ]);
    const keys = await exportKey(pair);
    return {
        privateKey: keys[0],
        publicKey: keys[1]
    };
};
// Takes a jwk key
exports.unmarshalPrivateKey = async function(key) {
    const privateKey = await webcrypto.get().subtle.importKey("jwk", key, {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        }
    }, true, [
        "sign"
    ]);
    const pair = [
        privateKey,
        await derivePublicFromPrivate(key)
    ];
    const keys = await exportKey({
        privateKey: pair[0],
        publicKey: pair[1]
    });
    return {
        privateKey: keys[0],
        publicKey: keys[1]
    };
};
exports.getRandomValues = randomBytes;
exports.hashAndSign = async function(key, msg) {
    const privateKey = await webcrypto.get().subtle.importKey("jwk", key, {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        }
    }, false, [
        "sign"
    ]);
    const sig = await webcrypto.get().subtle.sign({
        name: "RSASSA-PKCS1-v1_5"
    }, privateKey, Uint8Array.from(msg));
    return new Uint8Array(sig, sig.byteOffset, sig.byteLength);
};
exports.hashAndVerify = async function(key, sig, msg) {
    const publicKey = await webcrypto.get().subtle.importKey("jwk", key, {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        }
    }, false, [
        "verify"
    ]);
    return webcrypto.get().subtle.verify({
        name: "RSASSA-PKCS1-v1_5"
    }, publicKey, sig, msg);
};
function exportKey(pair) {
    return Promise.all([
        webcrypto.get().subtle.exportKey("jwk", pair.privateKey),
        webcrypto.get().subtle.exportKey("jwk", pair.publicKey)
    ]);
}
function derivePublicFromPrivate(jwKey) {
    return webcrypto.get().subtle.importKey("jwk", {
        kty: jwKey.kty,
        n: jwKey.n,
        e: jwKey.e
    }, {
        name: "RSASSA-PKCS1-v1_5",
        hash: {
            name: "SHA-256"
        }
    }, true, [
        "verify"
    ]);
}
/*

RSA encryption/decryption for the browser with webcrypto workarround
"bloody dark magic. webcrypto's why."

Explanation:
  - Convert JWK to nodeForge
  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a "binary-string backed buffer", so let's make our Uint8Array a binary string
  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array

*/ const { jwk2pub , jwk2priv  } = require("./jwk2pem");
function convertKey(key, pub, msg, handle) {
    const fkey = pub ? jwk2pub(key) : jwk2priv(key);
    const fmsg = uint8ArrayToString(Uint8Array.from(msg), "ascii");
    const fomsg = handle(fmsg, fkey);
    return uint8ArrayFromString(fomsg, "ascii");
}
exports.encrypt = function(key1, msg1) {
    return convertKey(key1, true, msg1, (msg, key)=>key.encrypt(msg));
};
exports.decrypt = function(key2, msg2) {
    return convertKey(key2, false, msg2, (msg, key)=>key.decrypt(msg));
};

},{"../webcrypto":"8JvzZ","../random-bytes":"87UAX","uint8arrays/to-string":"w8mvE","uint8arrays/from-string":"7qjkp","./rsa-utils":"5sMkm","./jwk2pem":"1auUn"}],"87UAX":[function(require,module,exports) {
"use strict";
const randomBytes = require("iso-random-stream/src/random");
const errcode = require("err-code");
module.exports = function(length) {
    if (isNaN(length) || length <= 0) throw errcode(new Error("random bytes length must be a Number bigger than 0"), "ERR_INVALID_LENGTH");
    return randomBytes(length);
};

},{"iso-random-stream/src/random":"36xDc","err-code":"dUrrM"}],"5sMkm":[function(require,module,exports) {
"use strict";
require("node-forge/lib/asn1");
require("node-forge/lib/rsa");
const forge = require("node-forge/lib/forge");
const { bigIntegerToUintBase64url , base64urlToBigInteger  } = require("./../util");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
// Convert a PKCS#1 in ASN1 DER format to a JWK key
exports.pkcs1ToJwk = function(bytes) {
    const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, "ascii"));
    const privateKey = forge.pki.privateKeyFromAsn1(asn1);
    // https://tools.ietf.org/html/rfc7518#section-6.3.1
    return {
        kty: "RSA",
        n: bigIntegerToUintBase64url(privateKey.n),
        e: bigIntegerToUintBase64url(privateKey.e),
        d: bigIntegerToUintBase64url(privateKey.d),
        p: bigIntegerToUintBase64url(privateKey.p),
        q: bigIntegerToUintBase64url(privateKey.q),
        dp: bigIntegerToUintBase64url(privateKey.dP),
        dq: bigIntegerToUintBase64url(privateKey.dQ),
        qi: bigIntegerToUintBase64url(privateKey.qInv),
        alg: "RS256",
        kid: "2011-04-29"
    };
};
// Convert a JWK key into PKCS#1 in ASN1 DER format
exports.jwkToPkcs1 = function(jwk) {
    const asn1 = forge.pki.privateKeyToAsn1({
        n: base64urlToBigInteger(jwk.n),
        e: base64urlToBigInteger(jwk.e),
        d: base64urlToBigInteger(jwk.d),
        p: base64urlToBigInteger(jwk.p),
        q: base64urlToBigInteger(jwk.q),
        dP: base64urlToBigInteger(jwk.dp),
        dQ: base64urlToBigInteger(jwk.dq),
        qInv: base64urlToBigInteger(jwk.qi)
    });
    return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), "ascii");
};
// Convert a PKCIX in ASN1 DER format to a JWK key
exports.pkixToJwk = function(bytes) {
    const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, "ascii"));
    const publicKey = forge.pki.publicKeyFromAsn1(asn1);
    return {
        kty: "RSA",
        n: bigIntegerToUintBase64url(publicKey.n),
        e: bigIntegerToUintBase64url(publicKey.e),
        alg: "RS256",
        kid: "2011-04-29"
    };
};
// Convert a JWK key to PKCIX in ASN1 DER format
exports.jwkToPkix = function(jwk) {
    const asn1 = forge.pki.publicKeyToAsn1({
        n: base64urlToBigInteger(jwk.n),
        e: base64urlToBigInteger(jwk.e)
    });
    return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), "ascii");
};

},{"node-forge/lib/asn1":"G8i2L","node-forge/lib/rsa":"5XDhn","node-forge/lib/forge":"9OMxz","./../util":"5tDCJ","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE"}],"5tDCJ":[function(require,module,exports) {
"use strict";
require("node-forge/lib/util");
require("node-forge/lib/jsbn");
const forge = require("node-forge/lib/forge");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
exports.bigIntegerToUintBase64url = (num, len)=>{
    // Call `.abs()` to convert to unsigned
    let buf = Uint8Array.from(num.abs().toByteArray()) // toByteArray converts to big endian
    ;
    // toByteArray() gives us back a signed array, which will include a leading 0
    // byte if the most significant bit of the number is 1:
    // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer
    // Our number will always be positive so we should remove the leading padding.
    buf = buf[0] === 0 ? buf.slice(1) : buf;
    if (len != null) {
        if (buf.length > len) throw new Error("byte array longer than desired length");
        buf = uint8ArrayConcat([
            new Uint8Array(len - buf.length),
            buf
        ]);
    }
    return uint8ArrayToString(buf, "base64url");
};
// Convert a base64url encoded string to a BigInteger
exports.base64urlToBigInteger = (str)=>{
    const buf = exports.base64urlToBuffer(str);
    return new forge.jsbn.BigInteger(uint8ArrayToString(buf, "base16"), 16);
};
exports.base64urlToBuffer = (str, len)=>{
    let buf = uint8ArrayFromString(str, "base64urlpad");
    if (len != null) {
        if (buf.length > len) throw new Error("byte array longer than desired length");
        buf = uint8ArrayConcat([
            new Uint8Array(len - buf.length),
            buf
        ]);
    }
    return buf;
};

},{"node-forge/lib/util":"9XcEH","node-forge/lib/jsbn":"5Wfp8","node-forge/lib/forge":"9OMxz","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE","uint8arrays/concat":"gqJ9u"}],"1auUn":[function(require,module,exports) {
"use strict";
require("node-forge/lib/rsa");
const forge = require("node-forge/lib/forge");
const { base64urlToBigInteger  } = require("../util");
function convert(key, types) {
    return types.map((t)=>base64urlToBigInteger(key[t]));
}
function jwk2priv(key) {
    return forge.pki.setRsaPrivateKey(...convert(key, [
        "n",
        "e",
        "d",
        "p",
        "q",
        "dp",
        "dq",
        "qi"
    ]));
}
function jwk2pub(key) {
    return forge.pki.setRsaPublicKey(...convert(key, [
        "n",
        "e"
    ]));
}
module.exports = {
    jwk2pub,
    jwk2priv
};

},{"node-forge/lib/rsa":"5XDhn","node-forge/lib/forge":"9OMxz","../util":"5tDCJ"}],"3x5jF":[function(require,module,exports) {
"use strict";
const { base64  } = require("multiformats/bases/base64");
const ciphers = require("../ciphers/aes-gcm");
module.exports = {
    /**
   * Exports the given PrivateKey as a base64 encoded string.
   * The PrivateKey is encrypted via a password derived PBKDF2 key
   * leveraging the aes-gcm cipher algorithm.
   *
   * @param {Uint8Array} privateKey - The PrivateKey protobuf
   * @param {string} password
   * @returns {Promise<string>} A base64 encoded string
   */ export: async function(privateKey, password) {
        const cipher = ciphers.create();
        const encryptedKey = await cipher.encrypt(privateKey, password);
        return base64.encode(encryptedKey);
    }
};

},{"multiformats/bases/base64":"3gCnk","../ciphers/aes-gcm":"dlpyK"}],"bS4fQ":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { sha256  } = require("multiformats/hashes/sha2");
const { base58btc  } = require("multiformats/bases/base58");
const { identity  } = require("multiformats/hashes/identity");
const crypto = require("./ed25519");
const pbm = require("./keys");
const exporter = require("./exporter");
class Ed25519PublicKey {
    constructor(key){
        this._key = ensureKey(key, crypto.publicKeyLength);
    }
    async verify(data, sig) {
        return crypto.hashAndVerify(this._key, sig, data);
    }
    marshal() {
        return this._key;
    }
    get bytes() {
        return pbm.PublicKey.encode({
            Type: pbm.KeyType.Ed25519,
            Data: this.marshal()
        }).finish();
    }
    equals(key) {
        return uint8ArrayEquals(this.bytes, key.bytes);
    }
    async hash() {
        const { bytes  } = await sha256.digest(this.bytes);
        return bytes;
    }
}
class Ed25519PrivateKey {
    // key       - 64 byte Uint8Array containing private key
    // publicKey - 32 byte Uint8Array containing public key
    constructor(key, publicKey){
        this._key = ensureKey(key, crypto.privateKeyLength);
        this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);
    }
    async sign(message) {
        return crypto.hashAndSign(this._key, message);
    }
    get public() {
        return new Ed25519PublicKey(this._publicKey);
    }
    marshal() {
        return this._key;
    }
    get bytes() {
        return pbm.PrivateKey.encode({
            Type: pbm.KeyType.Ed25519,
            Data: this.marshal()
        }).finish();
    }
    equals(key) {
        return uint8ArrayEquals(this.bytes, key.bytes);
    }
    async hash() {
        const { bytes  } = await sha256.digest(this.bytes);
        return bytes;
    }
    /**
   * Gets the ID of the key.
   *
   * The key id is the base58 encoding of the identity multihash containing its public key.
   * The public key is a protobuf encoding containing a type and the DER encoding
   * of the PKCS SubjectPublicKeyInfo.
   *
   * @returns {Promise<string>}
   */ async id() {
        const encoding = await identity.digest(this.public.bytes);
        return base58btc.encode(encoding.bytes).substring(1);
    }
    /**
   * Exports the key into a password protected `format`
   *
   * @param {string} password - The password to encrypt the key
   * @param {string} [format=libp2p-key] - The format in which to export as
   * @returns {Promise<Uint8Array>} The encrypted private key
   */ async export(password, format = "libp2p-key") {
        if (format === "libp2p-key") return exporter.export(this.bytes, password);
        else throw errcode(new Error(`export format '${format}' is not supported`), "ERR_INVALID_EXPORT_FORMAT");
    }
}
function unmarshalEd25519PrivateKey(bytes) {
    // Try the old, redundant public key version
    if (bytes.length > crypto.privateKeyLength) {
        bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);
        const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength);
        const publicKeyBytes = bytes.slice(crypto.privateKeyLength, bytes.length);
        return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);
    }
    bytes = ensureKey(bytes, crypto.privateKeyLength);
    const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength);
    const publicKeyBytes = bytes.slice(crypto.publicKeyLength);
    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);
}
function unmarshalEd25519PublicKey(bytes) {
    bytes = ensureKey(bytes, crypto.publicKeyLength);
    return new Ed25519PublicKey(bytes);
}
async function generateKeyPair() {
    const { privateKey , publicKey  } = await crypto.generateKey();
    return new Ed25519PrivateKey(privateKey, publicKey);
}
async function generateKeyPairFromSeed(seed) {
    const { privateKey , publicKey  } = await crypto.generateKeyFromSeed(seed);
    return new Ed25519PrivateKey(privateKey, publicKey);
}
function ensureKey(key, length) {
    key = Uint8Array.from(key || []);
    if (key.length !== length) throw errcode(new Error(`Key must be a Uint8Array of length ${length}, got ${key.length}`), "ERR_INVALID_KEY_TYPE");
    return key;
}
module.exports = {
    Ed25519PublicKey,
    Ed25519PrivateKey,
    unmarshalEd25519PrivateKey,
    unmarshalEd25519PublicKey,
    generateKeyPair,
    generateKeyPairFromSeed
};

},{"err-code":"dUrrM","uint8arrays/equals":"iZMnE","multiformats/hashes/sha2":"7U0mx","multiformats/bases/base58":"9KkrI","multiformats/hashes/identity":"bj4ky","./ed25519":"bhuQj","./keys":"7Ev6O","./exporter":"3x5jF"}],"bhuQj":[function(require,module,exports) {
"use strict";
require("node-forge/lib/ed25519");
const forge = require("node-forge/lib/forge");
exports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH;
exports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH;
exports.generateKey = async function() {
    return forge.pki.ed25519.generateKeyPair();
};
// seed should be a 32 byte uint8array
exports.generateKeyFromSeed = async function(seed) {
    return forge.pki.ed25519.generateKeyPair({
        seed
    });
};
exports.hashAndSign = async function(key, msg) {
    return forge.pki.ed25519.sign({
        message: msg,
        privateKey: key
    });
// return Uint8Array.from(nacl.sign.detached(msg, key))
};
exports.hashAndVerify = async function(key, sig, msg) {
    return forge.pki.ed25519.verify({
        signature: sig,
        message: msg,
        publicKey: key
    });
};

},{"node-forge/lib/ed25519":"48D0Y","node-forge/lib/forge":"9OMxz"}],"hNB9j":[function(require,module,exports) {
"use strict";
const { sha256  } = require("multiformats/hashes/sha2");
const errcode = require("err-code");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const exporter = require("./exporter");
module.exports = (keysProtobuf, randomBytes, crypto)=>{
    crypto = crypto || require("./secp256k1")(randomBytes);
    class Secp256k1PublicKey {
        constructor(key){
            crypto.validatePublicKey(key);
            this._key = key;
        }
        verify(data, sig) {
            return crypto.hashAndVerify(this._key, sig, data);
        }
        marshal() {
            return crypto.compressPublicKey(this._key);
        }
        get bytes() {
            return keysProtobuf.PublicKey.encode({
                Type: keysProtobuf.KeyType.Secp256k1,
                Data: this.marshal()
            }).finish();
        }
        equals(key) {
            return uint8ArrayEquals(this.bytes, key.bytes);
        }
        async hash() {
            const { bytes  } = await sha256.digest(this.bytes);
            return bytes;
        }
    }
    class Secp256k1PrivateKey {
        constructor(key, publicKey){
            this._key = key;
            this._publicKey = publicKey || crypto.computePublicKey(key);
            crypto.validatePrivateKey(this._key);
            crypto.validatePublicKey(this._publicKey);
        }
        sign(message) {
            return crypto.hashAndSign(this._key, message);
        }
        get public() {
            return new Secp256k1PublicKey(this._publicKey);
        }
        marshal() {
            return this._key;
        }
        get bytes() {
            return keysProtobuf.PrivateKey.encode({
                Type: keysProtobuf.KeyType.Secp256k1,
                Data: this.marshal()
            }).finish();
        }
        equals(key) {
            return uint8ArrayEquals(this.bytes, key.bytes);
        }
        async hash() {
            const { bytes  } = await sha256.digest(this.bytes);
            return bytes;
        }
        /**
     * Gets the ID of the key.
     *
     * The key id is the base58 encoding of the SHA-256 multihash of its public key.
     * The public key is a protobuf encoding containing a type and the DER encoding
     * of the PKCS SubjectPublicKeyInfo.
     *
     * @returns {Promise<string>}
     */ async id() {
            const hash = await this.public.hash();
            return uint8ArrayToString(hash, "base58btc");
        }
        /**
     * Exports the key into a password protected `format`
     *
     * @param {string} password - The password to encrypt the key
     * @param {string} [format=libp2p-key] - The format in which to export as
     * @returns {Promise<string>} The encrypted private key
     */ async export(password, format = "libp2p-key") {
            if (format === "libp2p-key") return exporter.export(this.bytes, password);
            else throw errcode(new Error(`export format '${format}' is not supported`), "ERR_INVALID_EXPORT_FORMAT");
        }
    }
    function unmarshalSecp256k1PrivateKey(bytes) {
        return new Secp256k1PrivateKey(bytes);
    }
    function unmarshalSecp256k1PublicKey(bytes) {
        return new Secp256k1PublicKey(bytes);
    }
    async function generateKeyPair() {
        const privateKeyBytes = await crypto.generateKey();
        return new Secp256k1PrivateKey(privateKeyBytes);
    }
    return {
        Secp256k1PublicKey,
        Secp256k1PrivateKey,
        unmarshalSecp256k1PrivateKey,
        unmarshalSecp256k1PublicKey,
        generateKeyPair
    };
};

},{"multiformats/hashes/sha2":"7U0mx","err-code":"dUrrM","uint8arrays/equals":"iZMnE","uint8arrays/to-string":"w8mvE","./exporter":"3x5jF","./secp256k1":"kNNO6"}],"kNNO6":[function(require,module,exports) {
"use strict";
const secp256k1 = require("secp256k1");
const { sha256  } = require("multiformats/hashes/sha2");
module.exports = (randomBytes)=>{
    const privateKeyLength = 32;
    function generateKey() {
        let privateKey;
        do privateKey = randomBytes(32);
        while (!secp256k1.privateKeyVerify(privateKey));
        return privateKey;
    }
    async function hashAndSign(key, msg) {
        const { digest  } = await sha256.digest(msg);
        const sig = secp256k1.ecdsaSign(digest, key);
        return secp256k1.signatureExport(sig.signature);
    }
    async function hashAndVerify(key, sig, msg) {
        const { digest  } = await sha256.digest(msg);
        sig = secp256k1.signatureImport(sig);
        return secp256k1.ecdsaVerify(sig, digest, key);
    }
    function compressPublicKey(key) {
        if (!secp256k1.publicKeyVerify(key)) throw new Error("Invalid public key");
        return secp256k1.publicKeyConvert(key, true);
    }
    function decompressPublicKey(key) {
        return secp256k1.publicKeyConvert(key, false);
    }
    function validatePrivateKey(key) {
        if (!secp256k1.privateKeyVerify(key)) throw new Error("Invalid private key");
    }
    function validatePublicKey(key) {
        if (!secp256k1.publicKeyVerify(key)) throw new Error("Invalid public key");
    }
    function computePublicKey(privateKey) {
        validatePrivateKey(privateKey);
        return secp256k1.publicKeyCreate(privateKey);
    }
    return {
        generateKey,
        privateKeyLength,
        hashAndSign,
        hashAndVerify,
        compressPublicKey,
        decompressPublicKey,
        validatePrivateKey,
        validatePublicKey,
        computePublicKey
    };
};

},{"secp256k1":"eY5po","multiformats/hashes/sha2":"7U0mx"}],"eY5po":[function(require,module,exports) {
module.exports = require("./lib")(require("./lib/elliptic"));

},{"./lib":"8BR3M","./lib/elliptic":"dmlFx"}],"8BR3M":[function(require,module,exports) {
const errors = {
    IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
    TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
    TWEAK_MUL: "The tweak was out of range or equal to zero",
    CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
    SECKEY_INVALID: "Private Key is invalid",
    PUBKEY_PARSE: "Public Key could not be parsed",
    PUBKEY_SERIALIZE: "Public Key serialization error",
    PUBKEY_COMBINE: "The sum of the public keys is not valid",
    SIG_PARSE: "Signature could not be parsed",
    SIGN: "The nonce generation function failed, or the private key was invalid",
    RECOVER: "Public key could not be recover",
    ECDH: "Scalar was invalid (zero or overflow)"
};
function assert(cond, msg) {
    if (!cond) throw new Error(msg);
}
function isUint8Array(name, value, length) {
    assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
    if (length !== undefined) {
        if (Array.isArray(length)) {
            const numbers = length.join(", ");
            const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
            assert(length.includes(value.length), msg);
        } else {
            const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
            assert(value.length === length, msg);
        }
    }
}
function isCompressed(value) {
    assert(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
}
function getAssertedOutput(output = (len)=>new Uint8Array(len), length) {
    if (typeof output === "function") output = output(length);
    isUint8Array("output", output, length);
    return output;
}
function toTypeString(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
}
module.exports = (secp256k1)=>{
    return {
        contextRandomize (seed) {
            assert(seed === null || seed instanceof Uint8Array, "Expected seed to be an Uint8Array or null");
            if (seed !== null) isUint8Array("seed", seed, 32);
            switch(secp256k1.contextRandomize(seed)){
                case 1:
                    throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
            }
        },
        privateKeyVerify (seckey) {
            isUint8Array("private key", seckey, 32);
            return secp256k1.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate (seckey) {
            isUint8Array("private key", seckey, 32);
            switch(secp256k1.privateKeyNegate(seckey)){
                case 0:
                    return seckey;
                case 1:
                    throw new Error(errors.IMPOSSIBLE_CASE);
            }
        },
        privateKeyTweakAdd (seckey, tweak) {
            isUint8Array("private key", seckey, 32);
            isUint8Array("tweak", tweak, 32);
            switch(secp256k1.privateKeyTweakAdd(seckey, tweak)){
                case 0:
                    return seckey;
                case 1:
                    throw new Error(errors.TWEAK_ADD);
            }
        },
        privateKeyTweakMul (seckey, tweak) {
            isUint8Array("private key", seckey, 32);
            isUint8Array("tweak", tweak, 32);
            switch(secp256k1.privateKeyTweakMul(seckey, tweak)){
                case 0:
                    return seckey;
                case 1:
                    throw new Error(errors.TWEAK_MUL);
            }
        },
        publicKeyVerify (pubkey) {
            isUint8Array("public key", pubkey, [
                33,
                65
            ]);
            return secp256k1.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate (seckey, compressed = true, output) {
            isUint8Array("private key", seckey, 32);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyCreate(output, seckey)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.SECKEY_INVALID);
                case 2:
                    throw new Error(errors.PUBKEY_SERIALIZE);
            }
        },
        publicKeyConvert (pubkey, compressed = true, output) {
            isUint8Array("public key", pubkey, [
                33,
                65
            ]);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyConvert(output, pubkey)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.PUBKEY_PARSE);
                case 2:
                    throw new Error(errors.PUBKEY_SERIALIZE);
            }
        },
        publicKeyNegate (pubkey, compressed = true, output) {
            isUint8Array("public key", pubkey, [
                33,
                65
            ]);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyNegate(output, pubkey)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.PUBKEY_PARSE);
                case 2:
                    throw new Error(errors.IMPOSSIBLE_CASE);
                case 3:
                    throw new Error(errors.PUBKEY_SERIALIZE);
            }
        },
        publicKeyCombine (pubkeys, compressed = true, output) {
            assert(Array.isArray(pubkeys), "Expected public keys to be an Array");
            assert(pubkeys.length > 0, "Expected public keys array will have more than zero items");
            for (const pubkey of pubkeys)isUint8Array("public key", pubkey, [
                33,
                65
            ]);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyCombine(output, pubkeys)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.PUBKEY_PARSE);
                case 2:
                    throw new Error(errors.PUBKEY_COMBINE);
                case 3:
                    throw new Error(errors.PUBKEY_SERIALIZE);
            }
        },
        publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
            isUint8Array("public key", pubkey, [
                33,
                65
            ]);
            isUint8Array("tweak", tweak, 32);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyTweakAdd(output, pubkey, tweak)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.PUBKEY_PARSE);
                case 2:
                    throw new Error(errors.TWEAK_ADD);
            }
        },
        publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
            isUint8Array("public key", pubkey, [
                33,
                65
            ]);
            isUint8Array("tweak", tweak, 32);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyTweakMul(output, pubkey, tweak)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.PUBKEY_PARSE);
                case 2:
                    throw new Error(errors.TWEAK_MUL);
            }
        },
        signatureNormalize (sig) {
            isUint8Array("signature", sig, 64);
            switch(secp256k1.signatureNormalize(sig)){
                case 0:
                    return sig;
                case 1:
                    throw new Error(errors.SIG_PARSE);
            }
        },
        signatureExport (sig, output) {
            isUint8Array("signature", sig, 64);
            output = getAssertedOutput(output, 72);
            const obj = {
                output,
                outputlen: 72
            };
            switch(secp256k1.signatureExport(obj, sig)){
                case 0:
                    return output.slice(0, obj.outputlen);
                case 1:
                    throw new Error(errors.SIG_PARSE);
                case 2:
                    throw new Error(errors.IMPOSSIBLE_CASE);
            }
        },
        signatureImport (sig, output) {
            isUint8Array("signature", sig);
            output = getAssertedOutput(output, 64);
            switch(secp256k1.signatureImport(output, sig)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.SIG_PARSE);
                case 2:
                    throw new Error(errors.IMPOSSIBLE_CASE);
            }
        },
        ecdsaSign (msg32, seckey, options = {}, output) {
            isUint8Array("message", msg32, 32);
            isUint8Array("private key", seckey, 32);
            assert(toTypeString(options) === "Object", "Expected options to be an Object");
            if (options.data !== undefined) isUint8Array("options.data", options.data);
            if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
            output = getAssertedOutput(output, 64);
            const obj = {
                signature: output,
                recid: null
            };
            switch(secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)){
                case 0:
                    return obj;
                case 1:
                    throw new Error(errors.SIGN);
                case 2:
                    throw new Error(errors.IMPOSSIBLE_CASE);
            }
        },
        ecdsaVerify (sig, msg32, pubkey) {
            isUint8Array("signature", sig, 64);
            isUint8Array("message", msg32, 32);
            isUint8Array("public key", pubkey, [
                33,
                65
            ]);
            switch(secp256k1.ecdsaVerify(sig, msg32, pubkey)){
                case 0:
                    return true;
                case 3:
                    return false;
                case 1:
                    throw new Error(errors.SIG_PARSE);
                case 2:
                    throw new Error(errors.PUBKEY_PARSE);
            }
        },
        ecdsaRecover (sig, recid, msg32, compressed = true, output) {
            isUint8Array("signature", sig, 64);
            assert(toTypeString(recid) === "Number" && recid >= 0 && recid <= 3, "Expected recovery id to be a Number within interval [0, 3]");
            isUint8Array("message", msg32, 32);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.ecdsaRecover(output, sig, recid, msg32)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.SIG_PARSE);
                case 2:
                    throw new Error(errors.RECOVER);
                case 3:
                    throw new Error(errors.IMPOSSIBLE_CASE);
            }
        },
        ecdh (pubkey, seckey, options = {}, output) {
            isUint8Array("public key", pubkey, [
                33,
                65
            ]);
            isUint8Array("private key", seckey, 32);
            assert(toTypeString(options) === "Object", "Expected options to be an Object");
            if (options.data !== undefined) isUint8Array("options.data", options.data);
            if (options.hashfn !== undefined) {
                assert(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
                if (options.xbuf !== undefined) isUint8Array("options.xbuf", options.xbuf, 32);
                if (options.ybuf !== undefined) isUint8Array("options.ybuf", options.ybuf, 32);
                isUint8Array("output", output);
            } else output = getAssertedOutput(output, 32);
            switch(secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)){
                case 0:
                    return output;
                case 1:
                    throw new Error(errors.PUBKEY_PARSE);
                case 2:
                    throw new Error(errors.ECDH);
            }
        }
    };
};

},{}],"dmlFx":[function(require,module,exports) {
const EC = require("elliptic").ec;
const ec = new EC("secp256k1");
const ecparams = ec.curve;
// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
const BN = ecparams.n.constructor;
function loadCompressedPublicKey(first, xbuf) {
    let x = new BN(xbuf);
    // overflow
    if (x.cmp(ecparams.p) >= 0) return null;
    x = x.toRed(ecparams.red);
    // compute corresponding Y
    let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
    if (first === 0x03 !== y.isOdd()) y = y.redNeg();
    return ec.keyPair({
        pub: {
            x: x,
            y: y
        }
    });
}
function loadUncompressedPublicKey(first, xbuf, ybuf) {
    let x = new BN(xbuf);
    let y = new BN(ybuf);
    // overflow
    if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
    x = x.toRed(ecparams.red);
    y = y.toRed(ecparams.red);
    // is odd flag
    if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;
    // x*x*x + b = y*y
    const x3 = x.redSqr().redIMul(x);
    if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
    return ec.keyPair({
        pub: {
            x: x,
            y: y
        }
    });
}
function loadPublicKey(pubkey) {
    // length should be validated in interface
    const first = pubkey[0];
    switch(first){
        case 0x02:
        case 0x03:
            if (pubkey.length !== 33) return null;
            return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
        case 0x04:
        case 0x06:
        case 0x07:
            if (pubkey.length !== 65) return null;
            return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
        default:
            return null;
    }
}
function savePublicKey(output, point) {
    const pubkey = point.encode(null, output.length === 33);
    // Loop should be faster because we do not need create extra Uint8Array
    // output.set(new Uint8Array(pubkey))
    for(let i = 0; i < output.length; ++i)output[i] = pubkey[i];
}
module.exports = {
    contextRandomize () {
        return 0;
    },
    privateKeyVerify (seckey) {
        const bn = new BN(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
    },
    privateKeyNegate (seckey) {
        const bn = new BN(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
        seckey.set(negate);
        return 0;
    },
    privateKeyTweakAdd (seckey, tweak) {
        const bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0) return 1;
        bn.iadd(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) return 1;
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
    },
    privateKeyTweakMul (seckey, tweak) {
        let bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        bn.imul(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
    },
    publicKeyVerify (pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
    },
    publicKeyCreate (output, seckey) {
        const bn = new BN(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        const point = ec.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);
        return 0;
    },
    publicKeyConvert (output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point = pair.getPublic();
        savePublicKey(output, point);
        return 0;
    },
    publicKeyNegate (output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);
        return 0;
    },
    publicKeyCombine (output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for(let i = 0; i < pubkeys.length; ++i){
            pairs[i] = loadPublicKey(pubkeys[i]);
            if (pairs[i] === null) return 1;
        }
        let point = pairs[0].getPublic();
        for(let i1 = 1; i1 < pairs.length; ++i1)point = point.add(pairs[i1].pub);
        if (point.isInfinity()) return 2;
        savePublicKey(output, point);
        return 0;
    },
    publicKeyTweakAdd (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0) return 2;
        const point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity()) return 2;
        savePublicKey(output, point);
        return 0;
    },
    publicKeyTweakMul (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
        const point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);
        return 0;
    },
    signatureNormalize (sig) {
        const r = new BN(sig.subarray(0, 32));
        const s = new BN(sig.subarray(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;
        if (s.cmp(ec.nh) === 1) sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
        return 0;
    },
    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
    // Adapted for Uint8Array instead Buffer
    signatureExport (obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;
        if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;
        const { output  } = obj;
        // Prepare R
        let r = output.subarray(4, 37);
        r[0] = 0x00;
        r.set(sigR, 1);
        let lenR = 33;
        let posR = 0;
        for(; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);
        r = r.subarray(posR);
        if (r[0] & 0x80) return 1;
        if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) return 1;
        // Prepare S
        let s = output.subarray(39, 72);
        s[0] = 0x00;
        s.set(sigS, 1);
        let lenS = 33;
        let posS = 0;
        for(; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);
        s = s.subarray(posS);
        if (s[0] & 0x80) return 1;
        if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) return 1;
        // Set output length for return
        obj.outputlen = 6 + lenR + lenS;
        // Output in specified format
        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
        output[0] = 0x30;
        output[1] = obj.outputlen - 2;
        output[2] = 0x02;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 0x02;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
    },
    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
    // Adapted for Uint8Array instead Buffer
    signatureImport (output, sig) {
        if (sig.length < 8) return 1;
        if (sig.length > 72) return 1;
        if (sig[0] !== 0x30) return 1;
        if (sig[1] !== sig.length - 2) return 1;
        if (sig[2] !== 0x02) return 1;
        const lenR = sig[3];
        if (lenR === 0) return 1;
        if (5 + lenR >= sig.length) return 1;
        if (sig[4 + lenR] !== 0x02) return 1;
        const lenS = sig[5 + lenR];
        if (lenS === 0) return 1;
        if (6 + lenR + lenS !== sig.length) return 1;
        if (sig[4] & 0x80) return 1;
        if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return 1;
        if (sig[lenR + 6] & 0x80) return 1;
        if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return 1;
        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1;
        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error("S length is too long");
        let r = new BN(sigR);
        if (r.cmp(ecparams.n) >= 0) r = new BN(0);
        let s = new BN(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0) s = new BN(0);
        output.set(r.toArrayLike(Uint8Array, "be", 32), 0);
        output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
        return 0;
    },
    ecdsaSign (obj, message, seckey, data, noncefn) {
        if (noncefn) {
            const _noncefn = noncefn;
            noncefn = (counter)=>{
                const nonce = _noncefn(message, seckey, null, data, counter);
                const isValid = nonce instanceof Uint8Array && nonce.length === 32;
                if (!isValid) throw new Error("This is the way");
                return new BN(nonce);
            };
        }
        const d = new BN(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
        let sig;
        try {
            sig = ec.sign(message, seckey, {
                canonical: true,
                k: noncefn,
                pers: data
            });
        } catch (err) {
            return 1;
        }
        obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
    },
    ecdsaVerify (sig, msg32, pubkey) {
        const sigObj = {
            r: sig.subarray(0, 32),
            s: sig.subarray(32, 64)
        };
        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 2;
        const point = pair.getPublic();
        const isValid = ec.verify(msg32, sigObj, point);
        return isValid ? 0 : 3;
    },
    ecdsaRecover (output, sig, recid, msg32) {
        const sigObj = {
            r: sig.slice(0, 32),
            s: sig.slice(32, 64)
        };
        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigr.isZero() || sigs.isZero()) return 2;
        // Can throw `throw new Error('Unable to find sencond key candinate');`
        let point;
        try {
            point = ec.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
            return 2;
        }
        savePublicKey(output, point);
        return 0;
    },
    ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const scalar = new BN(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
        const point = pair.getPublic().mul(scalar);
        if (hashfn === undefined) {
            const data = point.encode(null, true);
            const sha256 = ec.hash().update(data).digest();
            for(let i = 0; i < 32; ++i)output[i] = sha256[i];
        } else {
            if (!xbuf) xbuf = new Uint8Array(32);
            const x = point.getX().toArray("be", 32);
            for(let i = 0; i < 32; ++i)xbuf[i] = x[i];
            if (!ybuf) ybuf = new Uint8Array(32);
            const y = point.getY().toArray("be", 32);
            for(let i2 = 0; i2 < 32; ++i2)ybuf[i2] = y[i2];
            const hash = hashfn(xbuf, ybuf, data);
            const isValid = hash instanceof Uint8Array && hash.length === output.length;
            if (!isValid) return 2;
            output.set(hash);
        }
        return 0;
    }
};

},{"elliptic":"1NKsH"}],"1NKsH":[function(require,module,exports) {
"use strict";
var elliptic = exports;
elliptic.version = require("../package.json").version;
elliptic.utils = require("./elliptic/utils");
elliptic.rand = require("brorand");
elliptic.curve = require("./elliptic/curve");
elliptic.curves = require("./elliptic/curves");
// Protocols
elliptic.ec = require("./elliptic/ec");
elliptic.eddsa = require("./elliptic/eddsa");

},{"../package.json":"bvED4","./elliptic/utils":"8sNT5","brorand":"8FGdh","./elliptic/curve":"72OoG","./elliptic/curves":"6yRo9","./elliptic/ec":"5gDK1","./elliptic/eddsa":"jPbam"}],"bvED4":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"elliptic","version":"6.5.4","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}');

},{}],"8sNT5":[function(require,module,exports) {
"use strict";
var utils = exports;
var BN = require("bn.js");
var minAssert = require("minimalistic-assert");
var minUtils = require("minimalistic-crypto-utils");
utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;
// Represent num in a w-NAF form
function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = "_" + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, "hex", "le");
}
utils.intFromLE = intFromLE;

},{"bn.js":"VopIn","minimalistic-assert":"8OvWh","minimalistic-crypto-utils":"6f39G"}],"VopIn":[function(require,module,exports) {
(function(module, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module === "object") module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("buffer").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"buffer":"jhUEF"}],"8OvWh":[function(require,module,exports) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};

},{}],"6f39G":[function(require,module,exports) {
"use strict";
var utils = exports;
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== "string") {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0) msg = "0" + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === "hex") return toHex(arr);
    else return arr;
};

},{}],"8FGdh":[function(require,module,exports) {
var r;
module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
};
function Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = Rand;
Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};
if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === "object") // Old junk
    Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
    };
} else // Node.js or Web worker with no crypto support
try {
    var crypto = require("crypto");
    if (typeof crypto.randomBytes !== "function") throw new Error("Not supported");
    Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
    };
} catch (e) {}

},{"crypto":"jhUEF"}],"72OoG":[function(require,module,exports) {
"use strict";
var curve = exports;
curve.base = require("./base");
curve.short = require("./short");
curve.mont = require("./mont");
curve.edwards = require("./edwards");

},{"./base":"kvY1a","./short":"e7TRt","./mont":"2JhQH","./edwards":"3idNZ"}],"kvY1a":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var utils = require("../utils");
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"e7TRt":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var BN = require("bn.js");
var inherits = require("inherits");
var Base = require("./base");
var assert = utils.assert;
function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new BN(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj1, red) {
    if (typeof obj1 === "string") obj1 = JSON.parse(obj1);
    var res = curve.point(obj1[0], obj1[1], red);
    if (!obj1[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj1[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine") return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"../utils":"8sNT5","bn.js":"VopIn","inherits":"bRL3M","./base":"kvY1a"}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"2JhQH":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var inherits = require("inherits");
var Base = require("./base");
var utils = require("../utils");
function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
// No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"bn.js":"VopIn","inherits":"bRL3M","./base":"kvY1a","../utils":"8sNT5"}],"3idNZ":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var BN = require("bn.js");
var inherits = require("inherits");
var Base = require("./base");
var assert = utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error("invalid point");
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":"8sNT5","bn.js":"VopIn","inherits":"bRL3M","./base":"kvY1a"}],"6yRo9":[function(require,module,exports) {
"use strict";
var curves = exports;
var hash = require("hash.js");
var curve = require("./curve");
var utils = require("./utils");
var assert = utils.assert;
function PresetCurve(options) {
    if (options.type === "short") this.curve = new curve.short(options);
    else if (options.type === "edwards") this.curve = new curve.edwards(options);
    else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), "Invalid curve");
    assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve1 = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve1
            });
            return curve1;
        }
    });
}
defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: hash.sha256,
    gRed: false,
    g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811", 
    ]
});
defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: hash.sha256,
    gRed: false,
    g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34", 
    ]
});
defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: hash.sha256,
    gRed: false,
    g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5", 
    ]
});
defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
        "9", 
    ]
});
defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658", 
    ]
});
var pre;
try {
    pre = require("./precomputed/secp256k1");
} catch (e) {
    pre = undefined;
}
defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: hash.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
        {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
        }, 
    ],
    gRed: false,
    g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre, 
    ]
});

},{"hash.js":"gOEGU","./curve":"72OoG","./utils":"8sNT5","./precomputed/secp256k1":"lgNSV"}],"gOEGU":[function(require,module,exports) {
var hash = exports;
hash.utils = require("./hash/utils");
hash.common = require("./hash/common");
hash.sha = require("./hash/sha");
hash.ripemd = require("./hash/ripemd");
hash.hmac = require("./hash/hmac");
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"kfzn2","./hash/common":"ecAfF","./hash/sha":"8nbee","./hash/ripemd":"9kyRQ","./hash/hmac":"5KrrE"}],"kfzn2":[function(require,module,exports) {
"use strict";
var assert = require("minimalistic-assert");
var inherits = require("inherits");
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = "";
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === "little") w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M"}],"ecAfF":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var assert = require("minimalistic-assert");
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === "big") {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"./utils":"kfzn2","minimalistic-assert":"8OvWh"}],"8nbee":[function(require,module,exports) {
"use strict";
exports.sha1 = require("./sha/1");
exports.sha224 = require("./sha/224");
exports.sha256 = require("./sha/256");
exports.sha384 = require("./sha/384");
exports.sha512 = require("./sha/512");

},{"./sha/1":"fnjyb","./sha/224":"9x7tY","./sha/256":"9bCbT","./sha/384":"lJMiS","./sha/512":"8y482"}],"fnjyb":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var shaCommon = require("./common");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"../utils":"kfzn2","../common":"ecAfF","./common":"gzrNi"}],"gzrNi":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"../utils":"kfzn2"}],"9x7tY":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var SHA256 = require("./256");
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
    else return utils.split32(this.h.slice(0, 7), "big");
};

},{"../utils":"kfzn2","./256":"9bCbT"}],"9bCbT":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var shaCommon = require("./common");
var assert = require("minimalistic-assert");
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"../utils":"kfzn2","../common":"ecAfF","./common":"gzrNi","minimalistic-assert":"8OvWh"}],"lJMiS":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var SHA512 = require("./512");
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
    else return utils.split32(this.h.slice(0, 12), "big");
};

},{"../utils":"kfzn2","./512":"8y482"}],"8y482":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var assert = require("minimalistic-assert");
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

},{"../utils":"kfzn2","../common":"ecAfF","minimalistic-assert":"8OvWh"}],"9kyRQ":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var common = require("./common");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = "little";
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "little");
    else return utils.split32(this.h, "little");
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"./utils":"kfzn2","./common":"ecAfF"}],"5KrrE":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var assert = require("minimalistic-assert");
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"./utils":"kfzn2","minimalistic-assert":"8OvWh"}],"lgNSV":[function(require,module,exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821", 
            ],
            [
                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf", 
            ],
            [
                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695", 
            ],
            [
                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9", 
            ],
            [
                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36", 
            ],
            [
                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f", 
            ],
            [
                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999", 
            ],
            [
                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09", 
            ],
            [
                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d", 
            ],
            [
                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088", 
            ],
            [
                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d", 
            ],
            [
                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8", 
            ],
            [
                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a", 
            ],
            [
                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453", 
            ],
            [
                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160", 
            ],
            [
                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0", 
            ],
            [
                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6", 
            ],
            [
                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589", 
            ],
            [
                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17", 
            ],
            [
                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda", 
            ],
            [
                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd", 
            ],
            [
                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2", 
            ],
            [
                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6", 
            ],
            [
                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f", 
            ],
            [
                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01", 
            ],
            [
                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3", 
            ],
            [
                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f", 
            ],
            [
                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7", 
            ],
            [
                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78", 
            ],
            [
                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1", 
            ],
            [
                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150", 
            ],
            [
                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82", 
            ],
            [
                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc", 
            ],
            [
                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b", 
            ],
            [
                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51", 
            ],
            [
                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45", 
            ],
            [
                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120", 
            ],
            [
                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84", 
            ],
            [
                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d", 
            ],
            [
                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d", 
            ],
            [
                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8", 
            ],
            [
                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8", 
            ],
            [
                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac", 
            ],
            [
                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f", 
            ],
            [
                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962", 
            ],
            [
                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907", 
            ],
            [
                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec", 
            ],
            [
                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d", 
            ],
            [
                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414", 
            ],
            [
                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd", 
            ],
            [
                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0", 
            ],
            [
                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811", 
            ],
            [
                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1", 
            ],
            [
                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c", 
            ],
            [
                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73", 
            ],
            [
                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd", 
            ],
            [
                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405", 
            ],
            [
                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589", 
            ],
            [
                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e", 
            ],
            [
                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27", 
            ],
            [
                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1", 
            ],
            [
                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482", 
            ],
            [
                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945", 
            ],
            [
                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573", 
            ],
            [
                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82", 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672", 
            ],
            [
                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6", 
            ],
            [
                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da", 
            ],
            [
                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37", 
            ],
            [
                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b", 
            ],
            [
                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81", 
            ],
            [
                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58", 
            ],
            [
                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77", 
            ],
            [
                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a", 
            ],
            [
                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c", 
            ],
            [
                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67", 
            ],
            [
                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402", 
            ],
            [
                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55", 
            ],
            [
                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482", 
            ],
            [
                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82", 
            ],
            [
                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396", 
            ],
            [
                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49", 
            ],
            [
                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf", 
            ],
            [
                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a", 
            ],
            [
                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7", 
            ],
            [
                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933", 
            ],
            [
                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a", 
            ],
            [
                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6", 
            ],
            [
                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37", 
            ],
            [
                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e", 
            ],
            [
                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6", 
            ],
            [
                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476", 
            ],
            [
                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40", 
            ],
            [
                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61", 
            ],
            [
                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683", 
            ],
            [
                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5", 
            ],
            [
                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b", 
            ],
            [
                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417", 
            ],
            [
                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868", 
            ],
            [
                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a", 
            ],
            [
                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6", 
            ],
            [
                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996", 
            ],
            [
                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e", 
            ],
            [
                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d", 
            ],
            [
                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2", 
            ],
            [
                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e", 
            ],
            [
                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437", 
            ],
            [
                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311", 
            ],
            [
                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4", 
            ],
            [
                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575", 
            ],
            [
                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d", 
            ],
            [
                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d", 
            ],
            [
                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629", 
            ],
            [
                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06", 
            ],
            [
                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374", 
            ],
            [
                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee", 
            ],
            [
                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1", 
            ],
            [
                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b", 
            ],
            [
                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661", 
            ],
            [
                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6", 
            ],
            [
                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e", 
            ],
            [
                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d", 
            ],
            [
                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc", 
            ],
            [
                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4", 
            ],
            [
                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c", 
            ],
            [
                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b", 
            ],
            [
                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913", 
            ],
            [
                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154", 
            ],
            [
                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865", 
            ],
            [
                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc", 
            ],
            [
                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224", 
            ],
            [
                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e", 
            ],
            [
                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6", 
            ],
            [
                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511", 
            ],
            [
                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b", 
            ],
            [
                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2", 
            ],
            [
                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c", 
            ],
            [
                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3", 
            ],
            [
                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d", 
            ],
            [
                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700", 
            ],
            [
                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4", 
            ],
            [
                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196", 
            ],
            [
                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4", 
            ],
            [
                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257", 
            ],
            [
                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13", 
            ],
            [
                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096", 
            ],
            [
                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38", 
            ],
            [
                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f", 
            ],
            [
                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448", 
            ],
            [
                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a", 
            ],
            [
                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4", 
            ],
            [
                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437", 
            ],
            [
                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7", 
            ],
            [
                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d", 
            ],
            [
                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a", 
            ],
            [
                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54", 
            ],
            [
                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77", 
            ],
            [
                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517", 
            ],
            [
                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10", 
            ],
            [
                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125", 
            ],
            [
                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e", 
            ],
            [
                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1", 
            ],
            [
                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2", 
            ],
            [
                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423", 
            ],
            [
                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8", 
            ],
            [
                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758", 
            ],
            [
                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375", 
            ],
            [
                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d", 
            ],
            [
                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec", 
            ],
            [
                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0", 
            ],
            [
                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c", 
            ],
            [
                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4", 
            ],
            [
                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f", 
            ],
            [
                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649", 
            ],
            [
                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826", 
            ],
            [
                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5", 
            ],
            [
                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87", 
            ],
            [
                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b", 
            ],
            [
                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc", 
            ],
            [
                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c", 
            ],
            [
                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f", 
            ],
            [
                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a", 
            ],
            [
                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46", 
            ],
            [
                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f", 
            ],
            [
                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03", 
            ],
            [
                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08", 
            ],
            [
                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8", 
            ],
            [
                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373", 
            ],
            [
                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3", 
            ],
            [
                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8", 
            ],
            [
                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1", 
            ],
            [
                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9", 
            ], 
        ]
    }
};

},{}],"5gDK1":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var HmacDRBG = require("hmac-drbg");
var utils = require("../utils");
var curves = require("../curves");
var rand = require("brorand");
var assert = utils.assert;
var KeyPair = require("./key");
var Signature = require("./signature");
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === "string") {
        assert(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
        options = curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for(;;){
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray("be", bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, "hex");
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, "The recovery param is more than two bits");
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};

},{"bn.js":"VopIn","hmac-drbg":"eMMR6","../utils":"8sNT5","../curves":"6yRo9","brorand":"8FGdh","./key":"c4oIH","./signature":"cRuxW"}],"eMMR6":[function(require,module,exports) {
"use strict";
var hash = require("hash.js");
var utils = require("minimalistic-crypto-utils");
var assert = require("minimalistic-assert");
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils.toArray(options.pers, options.persEnc || "hex");
    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
    // Optional encoding
    if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
};

},{"hash.js":"gOEGU","minimalistic-crypto-utils":"6f39G","minimalistic-assert":"8OvWh"}],"c4oIH":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var utils = require("../utils");
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
    };
    if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === "mont") assert(key.x, "Need x coordinate");
        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") assert(key.x && key.y, "Need both x and y coordinate");
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert(pub.validate(), "public point not validated");
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"cRuxW":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var utils = require("../utils");
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"jPbam":[function(require,module,exports) {
"use strict";
var hash = require("hash.js");
var curves = require("../curves");
var utils = require("../utils");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require("./key");
var Signature = require("./signature");
function EDDSA(curve) {
    assert(curve === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    var hash1 = this.hash();
    for(var i = 0; i < arguments.length; i++)hash1.update(arguments[i]);
    return utils.intFromLE(hash1.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"hash.js":"gOEGU","../curves":"6yRo9","../utils":"8sNT5","./key":"hOVET","./signature":"a5qj9"}],"hOVET":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
        pub: pub
    });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
        secret: secret
    });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, "KeyPair is public only");
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"../utils":"8sNT5"}],"a5qj9":[function(require,module,exports) {
"use strict";
var BN = require("bn.js");
var utils = require("../utils");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== "object") sig = parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    assert(sig.R && sig.S, "Signature without R or S");
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, "S", function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, "R", function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), "hex").toUpperCase();
};
module.exports = Signature;

},{"bn.js":"VopIn","../utils":"8sNT5"}],"dHl9v":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const hmac = require("../hmac");
const cipherMap = {
    "AES-128": {
        ivSize: 16,
        keySize: 16
    },
    "AES-256": {
        ivSize: 16,
        keySize: 32
    },
    Blowfish: {
        ivSize: 8,
        cipherKeySize: 32
    }
};
// Generates a set of keys for each party by stretching the shared key.
// (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)
module.exports = async (cipherType, hash, secret)=>{
    const cipher = cipherMap[cipherType];
    if (!cipher) {
        const allowed = Object.keys(cipherMap).join(" / ");
        throw errcode(new Error(`unknown cipher type '${cipherType}'. Must be ${allowed}`), "ERR_INVALID_CIPHER_TYPE");
    }
    if (!hash) throw errcode(new Error("missing hash type"), "ERR_MISSING_HASH_TYPE");
    const cipherKeySize = cipher.keySize;
    const ivSize = cipher.ivSize;
    const hmacKeySize = 20;
    const seed = uint8ArrayFromString("key expansion");
    const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize);
    const m = await hmac.create(hash, secret);
    let a = await m.digest(seed);
    const result = [];
    let j = 0;
    while(j < resultLength){
        const b = await m.digest(uint8ArrayConcat([
            a,
            seed
        ]));
        let todo = b.length;
        if (j + todo > resultLength) todo = resultLength - j;
        result.push(b);
        j += todo;
        a = await m.digest(a);
    }
    const half = resultLength / 2;
    const resultBuffer = uint8ArrayConcat(result);
    const r1 = resultBuffer.slice(0, half);
    const r2 = resultBuffer.slice(half, resultLength);
    const createKey = (res)=>({
            iv: res.slice(0, ivSize),
            cipherKey: res.slice(ivSize, ivSize + cipherKeySize),
            macKey: res.slice(ivSize + cipherKeySize)
        });
    return {
        k1: createKey(r1),
        k2: createKey(r2)
    };
};

},{"err-code":"dUrrM","uint8arrays/concat":"gqJ9u","uint8arrays/from-string":"7qjkp","../hmac":"bVLta"}],"HMWX3":[function(require,module,exports) {
"use strict";
const ecdh = require("./ecdh");
// Generates an ephemeral public key and returns a function that will compute
// the shared secret key.
//
// Focuses only on ECDH now, but can be made more general in the future.
module.exports = async (curve)=>ecdh.generateEphmeralKeyPair(curve) // eslint-disable-line require-await
;

},{"./ecdh":"ha0tF"}],"ha0tF":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const webcrypto = require("../webcrypto");
const { base64urlToBuffer  } = require("../util");
const validateCurveType = require("./validate-curve-type");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const bits = {
    "P-256": 256,
    "P-384": 384,
    "P-521": 521
};
exports.generateEphmeralKeyPair = async function(curve) {
    validateCurveType(Object.keys(bits), curve);
    const pair = await webcrypto.get().subtle.generateKey({
        name: "ECDH",
        namedCurve: curve
    }, true, [
        "deriveBits"
    ]);
    // forcePrivate is used for testing only
    const genSharedKey = async (theirPub, forcePrivate)=>{
        let privateKey;
        if (forcePrivate) privateKey = await webcrypto.get().subtle.importKey("jwk", unmarshalPrivateKey(curve, forcePrivate), {
            name: "ECDH",
            namedCurve: curve
        }, false, [
            "deriveBits"
        ]);
        else privateKey = pair.privateKey;
        const keys = [
            await webcrypto.get().subtle.importKey("jwk", unmarshalPublicKey(curve, theirPub), {
                name: "ECDH",
                namedCurve: curve
            }, false, []),
            privateKey
        ];
        const buffer = await webcrypto.get().subtle.deriveBits({
            name: "ECDH",
            namedCurve: curve,
            public: keys[0]
        }, keys[1], bits[curve]);
        return new Uint8Array(buffer, buffer.byteOffset, buffer.byteLength);
    };
    const publicKey = await webcrypto.get().subtle.exportKey("jwk", pair.publicKey);
    return {
        key: marshalPublicKey(publicKey),
        genSharedKey
    };
};
const curveLengths = {
    "P-256": 32,
    "P-384": 48,
    "P-521": 66
};
// Marshal converts a jwk encodec ECDH public key into the
// form specified in section 4.3.6 of ANSI X9.62. (This is the format
// go-ipfs uses)
function marshalPublicKey(jwk) {
    const byteLen = curveLengths[jwk.crv];
    return uint8ArrayConcat([
        Uint8Array.from([
            4
        ]),
        base64urlToBuffer(jwk.x, byteLen),
        base64urlToBuffer(jwk.y, byteLen)
    ], 1 + byteLen * 2);
}
// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key
function unmarshalPublicKey(curve, key) {
    const byteLen = curveLengths[curve];
    if (uint8ArrayEquals(!key.slice(0, 1), Uint8Array.from([
        4
    ]))) throw errcode(new Error("Cannot unmarshal public key - invalid key format"), "ERR_INVALID_KEY_FORMAT");
    return {
        kty: "EC",
        crv: curve,
        x: uint8ArrayToString(key.slice(1, byteLen + 1), "base64url"),
        y: uint8ArrayToString(key.slice(1 + byteLen), "base64url"),
        ext: true
    };
}
const unmarshalPrivateKey = (curve, key)=>({
        ...unmarshalPublicKey(curve, key.public),
        d: uint8ArrayToString(key.private, "base64url")
    });

},{"err-code":"dUrrM","../webcrypto":"8JvzZ","../util":"5tDCJ","./validate-curve-type":"iP9c7","uint8arrays/to-string":"w8mvE","uint8arrays/concat":"gqJ9u","uint8arrays/equals":"iZMnE"}],"iP9c7":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
module.exports = function(curveTypes, type) {
    if (!curveTypes.includes(type)) {
        const names = curveTypes.join(" / ");
        throw errcode(new Error(`Unknown curve: ${type}. Must be ${names}`), "ERR_INVALID_CURVE");
    }
};

},{"err-code":"dUrrM"}],"4sNm6":[function(require,module,exports) {
"use strict";
const forgePbkdf2 = require("node-forge/lib/pbkdf2");
const forgeUtil = require("node-forge/lib/util");
const errcode = require("err-code");
/**
 * Maps an IPFS hash name to its node-forge equivalent.
 *
 * See https://github.com/multiformats/multihash/blob/master/hashtable.csv
 *
 * @private
 */ const hashName = {
    sha1: "sha1",
    "sha2-256": "sha256",
    "sha2-512": "sha512"
};
/**
 * Computes the Password-Based Key Derivation Function 2.
 *
 * @param {string} password
 * @param {string} salt
 * @param {number} iterations
 * @param {number} keySize - (in bytes)
 * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)
 * @returns {string} - A new password
 */ function pbkdf2(password, salt, iterations, keySize, hash) {
    const hasher = hashName[hash];
    if (!hasher) {
        const types = Object.keys(hashName).join(" / ");
        throw errcode(new Error(`Hash '${hash}' is unknown or not supported. Must be ${types}`), "ERR_UNSUPPORTED_HASH_TYPE");
    }
    const dek = forgePbkdf2(password, salt, iterations, keySize, hasher);
    return forgeUtil.encode64(dek);
}
module.exports = pbkdf2;

},{"node-forge/lib/pbkdf2":"4oHZZ","node-forge/lib/util":"9XcEH","err-code":"dUrrM"}],"6I9sF":[function(require,module,exports) {
"use strict";
const cache = require("hashlru");
// @ts-ignore
const varint = require("varint");
const PeerId = require("peer-id");
const { Key  } = require("interface-datastore");
const { default: Queue  } = require("p-queue");
const c = require("./constants");
const utils = require("./utils");
/**
 * @typedef {import('multiformats/cid').CID} CID
 * @typedef {import('interface-datastore').Datastore} Datastore
 */ /**
 * This class manages known providers.
 * A provider is a peer that we know to have the content for a given CID.
 *
 * Every `cleanupInterval` providers are checked if they
 * are still valid, i.e. younger than the `provideValidity`.
 * If they are not, they are deleted.
 *
 * To ensure the list survives restarts of the daemon,
 * providers are stored in the datastore, but to ensure
 * access is fast there is an LRU cache in front of that.
 */ class Providers {
    /**
   * @param {Datastore} datastore
   * @param {PeerId} [self]
   * @param {number} [cacheSize=256]
   */ constructor(datastore, self, cacheSize){
        this.datastore = datastore;
        this._log = utils.logger(self, "providers");
        /**
     * How often invalid records are cleaned. (in seconds)
     *
     * @type {number}
     */ this.cleanupInterval = c.PROVIDERS_CLEANUP_INTERVAL;
        /**
     * How long is a provider valid for. (in seconds)
     *
     * @type {number}
     */ this.provideValidity = c.PROVIDERS_VALIDITY;
        /**
     * LRU cache size
     *
     * @type {number}
     */ this.lruCacheSize = cacheSize || c.PROVIDERS_LRU_CACHE_SIZE;
        // @ts-ignore hashlru types are wrong
        this.providers = cache(this.lruCacheSize);
        this.syncQueue = new Queue({
            concurrency: 1
        });
    }
    /**
   * Start the provider cleanup service
   */ start() {
        this._cleaner = setInterval(()=>this._cleanup(), this.cleanupInterval);
    }
    /**
   * Release any resources.
   */ stop() {
        if (this._cleaner) {
            clearInterval(this._cleaner);
            this._cleaner = null;
        }
    }
    /**
   * Check all providers if they are still valid, and if not delete them.
   *
   * @returns {Promise<void>}
   * @private
   */ _cleanup() {
        return this.syncQueue.add(async ()=>{
            this._log("start cleanup");
            const start = Date.now();
            let count = 0;
            let deleteCount = 0;
            const deleted = new Map();
            const batch = this.datastore.batch();
            // Get all provider entries from the datastore
            const query = this.datastore.query({
                prefix: c.PROVIDERS_KEY_PREFIX
            });
            for await (const entry of query)try {
                // Add a delete to the batch for each expired entry
                const { cid , peerId  } = parseProviderKey(entry.key);
                const time = readTime(entry.value);
                const now = Date.now();
                const delta = now - time;
                const expired = delta > this.provideValidity;
                this._log("comparing: %d - %d = %d > %d %s", now, time, delta, this.provideValidity, expired ? "(expired)" : "");
                if (expired) {
                    deleteCount++;
                    batch.delete(entry.key);
                    const peers = deleted.get(cid) || new Set();
                    peers.add(peerId);
                    deleted.set(cid, peers);
                }
                count++;
            } catch (err) {
                this._log.error(err.message);
            }
            this._log("deleting %d / %d entries", deleteCount, count);
            // Commit the deletes to the datastore
            if (deleted.size) await batch.commit();
            // Clear expired entries from the cache
            for (const [cid, peers] of deleted){
                const key = makeProviderKey(cid);
                const provs = this.providers.get(key);
                if (provs) {
                    for (const peerId of peers)provs.delete(peerId);
                    if (provs.size === 0) this.providers.remove(key);
                    else this.providers.set(key, provs);
                }
            }
            this._log("Cleanup successful (%dms)", Date.now() - start);
        });
    }
    /**
   * Get the currently known provider peer ids for a given CID.
   *
   * @param {CID} cid
   * @returns {Promise<Map<string, Date>>}
   *
   * @private
   */ async _getProvidersMap(cid) {
        const cacheKey = makeProviderKey(cid);
        let provs = this.providers.get(cacheKey);
        if (!provs) {
            provs = await loadProviders(this.datastore, cid);
            this.providers.set(cacheKey, provs);
        }
        return provs;
    }
    /**
   * Add a new provider for the given CID.
   *
   * @param {CID} cid
   * @param {PeerId} provider
   * @returns {Promise<void>}
   */ async addProvider(cid, provider) {
        return this.syncQueue.add(async ()=>{
            this._log("addProvider %s", cid.toString());
            const provs = await this._getProvidersMap(cid);
            this._log("loaded %s provs", provs.size);
            const now = new Date();
            provs.set(utils.encodeBase32(provider.id), now);
            const dsKey = makeProviderKey(cid);
            this.providers.set(dsKey, provs);
            return writeProviderEntry(this.datastore, cid, provider, now);
        });
    }
    /**
   * Get a list of providers for the given CID.
   *
   * @param {CID} cid
   * @returns {Promise<Array<PeerId>>}
   */ async getProviders(cid) {
        return this.syncQueue.add(async ()=>{
            this._log("getProviders %s", cid.toString());
            const provs = await this._getProvidersMap(cid);
            return [
                ...provs.keys()
            ].map((base32PeerId)=>{
                return new PeerId(utils.decodeBase32(base32PeerId));
            });
        });
    }
}
/**
 * Encode the given key its matching datastore key.
 *
 * @param {CID|string} cid - cid or base32 encoded string
 * @returns {string}
 *
 * @private
 */ function makeProviderKey(cid) {
    cid = typeof cid === "string" ? cid : utils.encodeBase32(cid.bytes);
    return c.PROVIDERS_KEY_PREFIX + cid;
}
/**
 * Write a provider into the given store.
 *
 * @param {Datastore} store
 * @param {CID} cid
 * @param {PeerId} peer
 * @param {Date} time
 */ async function writeProviderEntry(store, cid, peer, time) {
    const dsKey = [
        makeProviderKey(cid),
        "/",
        utils.encodeBase32(peer.id)
    ].join("");
    const key = new Key(dsKey);
    const buffer = Uint8Array.from(varint.encode(time.getTime()));
    return store.put(key, buffer);
}
/**
 * Parse the CID and provider peer id from the key
 *
 * @param {import('interface-datastore').Key} key
 */ function parseProviderKey(key) {
    const parts = key.toString().split("/");
    if (parts.length !== 4) throw new Error("incorrectly formatted provider entry key in datastore: " + key);
    return {
        cid: parts[2],
        peerId: parts[3]
    };
}
/**
 * Load providers for the given CID from the store.
 *
 * @param {Datastore} store
 * @param {CID} cid
 * @returns {Promise<Map<PeerId, Date>>}
 *
 * @private
 */ async function loadProviders(store, cid) {
    const providers = new Map();
    const query = store.query({
        prefix: makeProviderKey(cid)
    });
    for await (const entry of query){
        const { peerId  } = parseProviderKey(entry.key);
        providers.set(peerId, readTime(entry.value));
    }
    return providers;
}
/**
 * @param {Uint8Array} buf
 */ function readTime(buf) {
    return varint.decode(buf);
}
module.exports = Providers;

},{"hashlru":"8I0yq","varint":"9fMsR","peer-id":"etBKN","interface-datastore":"ijjFd","p-queue":"3KoWO","./constants":"ghCGZ","./utils":"1wrtw"}],"8I0yq":[function(require,module,exports) {
module.exports = function(max) {
    if (!max) throw Error("hashlru must have a max value, of type number, greater than 0");
    var size = 0, cache = Object.create(null), _cache = Object.create(null);
    function update(key, value) {
        cache[key] = value;
        size++;
        if (size >= max) {
            size = 0;
            _cache = cache;
            cache = Object.create(null);
        }
    }
    return {
        has: function(key) {
            return cache[key] !== undefined || _cache[key] !== undefined;
        },
        remove: function(key) {
            if (cache[key] !== undefined) cache[key] = undefined;
            if (_cache[key] !== undefined) _cache[key] = undefined;
        },
        get: function(key) {
            var v = cache[key];
            if (v !== undefined) return v;
            if ((v = _cache[key]) !== undefined) {
                update(key, v);
                return v;
            }
        },
        set: function(key, value) {
            if (cache[key] !== undefined) cache[key] = value;
            else update(key, value);
        },
        clear: function() {
            cache = Object.create(null);
            _cache = Object.create(null);
        }
    };
};

},{}],"3reOT":[function(require,module,exports) {
"use strict";
const crypto = require("libp2p-crypto");
const { sha256  } = require("multiformats/hashes/sha2");
const PeerId = require("peer-id");
const { AbortController  } = require("abort-controller");
const errcode = require("err-code");
const times = require("p-times");
const c = require("./constants");
const { logger  } = require("./utils");
/**
 * @typedef {import('./')} DHT
 * @typedef {import('./').RandomWalkOptions} RandomWalkOptions
 */ class RandomWalk {
    /**
   * @class
   * @param {DHT} dht
   * @param {RandomWalkOptions} options
   */ constructor(dht, options){
        if (!dht) throw new Error("Random Walk needs an instance of the Kademlia DHT");
        this._kadDHT = dht;
        this._options = {
            ...c.defaultRandomWalk,
            ...options
        };
        this.log = logger(dht.peerId, "random-walk");
        /** @type {*} */ this._timeoutId = undefined;
    }
    /**
   * Start the Random Walk process. This means running a number of queries
   * every interval requesting random data. This is done to keep the dht
   * healthy over time.
   *
   * @returns {void}
   */ start() {
        if (this._running) return;
        this._running = true;
        // Don't run twice
        if (this._timeoutId || !this._options.enabled) return;
        // Start doing random walks after `this._options.delay`
        this._timeoutId = setTimeout(()=>{
            // Start runner immediately
            this._runPeriodically();
        }, this._options.delay);
    }
    /**
   * Stop the random-walk process. Any active
   * queries will be aborted.
   *
   * @returns {void}
   */ stop() {
        this._running = false;
        if (this._timeoutId) {
            clearTimeout(this._timeoutId);
            this._timeoutId = undefined;
        }
        this._controller && this._controller.abort();
    }
    /**
   * Run function `randomWalk._walk` on every `options.interval` ms
   *
   * @private
   */ async _runPeriodically() {
        // run until the walk has been stopped
        while(this._timeoutId){
            try {
                await this._walk(this._options.queriesPerPeriod, this._options.timeout);
            } catch (err) {
                this._kadDHT._log.error("random-walk:error", err);
            }
            if (!this._running) return;
            // Each subsequent walk should run on a `this._options.interval` interval
            await new Promise((resolve)=>{
                this._timeoutId = setTimeout(resolve, this._options.interval);
            });
        }
    }
    /**
   * Do the random walk work.
   *
   * @param {number} queries
   * @param {number} walkTimeout
   *
   * @private
   */ async _walk(queries, walkTimeout) {
        this.log("start");
        this._controller = new AbortController();
        try {
            await times(queries, async (index)=>{
                this.log("running query %d", index);
                try {
                    const id = await this._randomPeerId();
                    // Check if we've happened to already abort
                    if (!this._controller) return;
                    await this._query(id, {
                        timeout: walkTimeout,
                        signal: this._controller.signal
                    });
                } catch (err) {
                    if (err && err.code !== "ETIMEDOUT") {
                        this.log.error("query %d finished with error", index, err);
                        throw err;
                    }
                }
                this.log("finished query %d", index);
            });
        } finally{
            this._controller = null;
            this.log("finished queries");
        }
    }
    /**
   * The query run during a random walk request.
   *
   * TODO: While query currently supports an abort controller, it is not
   * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82
   * is complete, and AbortController support has been added to the
   * DHT query functions, the abort here will just work, provided the
   * functions support `options.signal`. Once done, this todo should be
   * removed.
   *
   * @param {PeerId} id
   * @param {object} options
   * @param {number} options.timeout
   * @param {AbortSignal} options.signal
   *
   * @private
   */ async _query(id, options) {
        this.log("query:%s", id.toB58String());
        let peer;
        try {
            peer = await this._kadDHT.findPeer(id, options);
        } catch (err) {
            if (err && err.code === "ERR_NOT_FOUND") // expected case, we asked for random stuff after all
            return;
            throw err;
        }
        this.log("query:found", peer);
        // wait what, there was something found? Lucky day!
        throw errcode(new Error(`random-walk: ACTUALLY FOUND PEER: ${peer}, ${id.toB58String()}`), "ERR_FOUND_RANDOM_PEER");
    }
    /**
   * Generate a random peer id for random-walk purposes.
   *
   * @returns {Promise<PeerId>}
   *
   * @private
   */ async _randomPeerId() {
        const digest = await sha256.digest(crypto.randomBytes(16));
        return new PeerId(digest.bytes);
    }
}
module.exports = RandomWalk;

},{"libp2p-crypto":"djNY1","multiformats/hashes/sha2":"7U0mx","peer-id":"etBKN","abort-controller":"1naup","err-code":"dUrrM","p-times":"a6h2x","./constants":"ghCGZ","./utils":"1wrtw"}],"1naup":[function(require,module,exports) {
/*globals self, window */ "use strict";
/*eslint-disable @mysticatea/prettier */ const { AbortController , AbortSignal  } = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : /* otherwise */ undefined;
/*eslint-enable @mysticatea/prettier */ module.exports = AbortController;
module.exports.AbortSignal = AbortSignal;
module.exports.default = AbortController;

},{}],"a6h2x":[function(require,module,exports) {
"use strict";
const pMap = require("p-map");
const pTimes = async (count, mapper, options)=>pMap(new Array(count).fill(), (element, index)=>mapper(index), options);
module.exports = pTimes;
// TODO: Remove this for the next major release
module.exports.default = pTimes;

},{"p-map":"6cgrC"}],"fkomw":[function(require,module,exports) {
"use strict";
/**
 * @typedef {import('./query')} Query
 */ /**
 * Keeps track of all running queries.
 */ class QueryManager {
    /**
   * Creates a new QueryManager.
   */ constructor(){
        this.queries = new Set();
        this.running = false;
    }
    /**
   * Called when a query is started.
   *
   * @param {Query} query
   */ queryStarted(query) {
        this.queries.add(query);
    }
    /**
   * Called when a query completes.
   *
   * @param {Query} query
   */ queryCompleted(query) {
        this.queries.delete(query);
    }
    /**
   * Starts the query manager.
   */ start() {
        this.running = true;
    }
    /**
   * Stops all queries.
   */ stop() {
        this.running = false;
        for (const query of this.queries)query.stop();
        this.queries.clear();
    }
}
module.exports = QueryManager;

},{}],"dKsEo":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p"), {
    error: debug("libp2p:err")
});
const { EventEmitter  } = require("events");
const errCode = require("err-code");
const PeerId = require("peer-id");
const { Multiaddr  } = require("multiaddr");
const PeerRouting = require("./peer-routing");
const ContentRouting = require("./content-routing");
const getPeer = require("./get-peer");
const { validate: validateConfig  } = require("./config");
const { codes , messages  } = require("./errors");
const AddressManager = require("./address-manager");
const ConnectionManager = require("./connection-manager");
const Circuit = require("./circuit/transport");
const Relay = require("./circuit");
const Dialer = require("./dialer");
const Keychain = require("./keychain");
const Metrics = require("./metrics");
const TransportManager = require("./transport-manager");
const Upgrader = require("./upgrader");
const PeerStore = require("./peer-store");
const PubsubAdapter = require("./pubsub-adapter");
const PersistentPeerStore = require("./peer-store/persistent");
const Registrar = require("./registrar");
const ping = require("./ping");
const IdentifyService = require("./identify");
const NatManager = require("./nat-manager");
const { updateSelfPeerRecord  } = require("./record/utils");
/**
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 * @typedef {import('libp2p-interfaces/src/transport/types').TransportFactory<any, any>} TransportFactory
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxerFactory} MuxerFactory
 * @typedef {import('libp2p-interfaces/src/content-routing/types').ContentRouting} ContentRoutingModule
 * @typedef {import('libp2p-interfaces/src/peer-discovery/types').PeerDiscoveryFactory} PeerDiscoveryFactory
 * @typedef {import('libp2p-interfaces/src/peer-routing/types').PeerRouting} PeerRoutingModule
 * @typedef {import('libp2p-interfaces/src/crypto/types').Crypto} Crypto
 * @typedef {import('libp2p-interfaces/src/pubsub')} Pubsub
 * @typedef {import('libp2p-interfaces/src/pubsub').PubsubOptions} PubsubOptions
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('./pnet')} Protector
 */ /**
 * @typedef {Object} HandlerProps
 * @property {Connection} connection
 * @property {MuxedStream} stream
 * @property {string} protocol
 *
 * @typedef {Object} RandomWalkOptions
 * @property {boolean} [enabled = false]
 * @property {number} [queriesPerPeriod = 1]
 * @property {number} [interval = 300e3]
 * @property {number} [timeout = 10e3]
 *
 * @typedef {Object} DhtOptions
 * @property {boolean} [enabled = false]
 * @property {number} [kBucketSize = 20]
 * @property {RandomWalkOptions} [randomWalk]
 * @property {boolean} [clientMode]
 * @property {import('libp2p-interfaces/src/types').DhtSelectors} [selectors]
 * @property {import('libp2p-interfaces/src/types').DhtValidators} [validators]
 *
 * @typedef {Object} KeychainOptions
 * @property {Datastore} [datastore]
 *
 * @typedef {Object} PeerStoreOptions
 * @property {boolean} persistence
 *
 * @typedef {Object} PubsubLocalOptions
 * @property {boolean} enabled
 *
 * @typedef {Object} MetricsOptions
 * @property {boolean} enabled
 *
 * @typedef {Object} RelayOptions
 * @property {boolean} [enabled = true]
 * @property {import('./circuit').RelayAdvertiseOptions} [advertise]
 * @property {import('./circuit').HopOptions} [hop]
 * @property {import('./circuit').AutoRelayOptions} [autoRelay]
 *
 * @typedef {Object} Libp2pConfig
 * @property {DhtOptions} [dht] dht module options
 * @property {import('./nat-manager').NatManagerOptions} [nat]
 * @property {Record<string, Object|boolean>} [peerDiscovery]
 * @property {PubsubLocalOptions & PubsubOptions} [pubsub] pubsub module options
 * @property {RelayOptions} [relay]
 * @property {Record<string, Object>} [transport] transport options indexed by transport key
 *
 * @typedef {Object} Libp2pModules
 * @property {TransportFactory[]} transport
 * @property {MuxerFactory[]} streamMuxer
 * @property {Crypto[]} connEncryption
 * @property {PeerDiscoveryFactory[]} [peerDiscovery]
 * @property {PeerRoutingModule[]} [peerRouting]
 * @property {ContentRoutingModule[]} [contentRouting]
 * @property {Object} [dht]
 * @property {{new(...args: any[]): Pubsub}} [pubsub]
 * @property {Protector} [connProtector]
 *
 * @typedef {Object} Libp2pOptions
 * @property {Libp2pModules} modules libp2p modules to use
 * @property {import('./address-manager').AddressManagerOptions} [addresses]
 * @property {import('./connection-manager').ConnectionManagerOptions} [connectionManager]
 * @property {Datastore} [datastore]
 * @property {import('./dialer').DialerOptions} [dialer]
 * @property {import('./identify/index').HostProperties} [host] libp2p host
 * @property {KeychainOptions & import('./keychain/index').KeychainOptions} [keychain]
 * @property {MetricsOptions & import('./metrics').MetricsOptions} [metrics]
 * @property {import('./peer-routing').PeerRoutingOptions} [peerRouting]
 * @property {PeerStoreOptions & import('./peer-store/persistent').PersistentPeerStoreOptions} [peerStore]
 * @property {import('./transport-manager').TransportManagerOptions} [transportManager]
 * @property {Libp2pConfig} [config]
 *
 * @typedef {Object} constructorOptions
 * @property {PeerId} peerId
 *
 * @typedef {Object} CreateOptions
 * @property {PeerId} [peerId]
 *
 * @extends {EventEmitter}
 * @fires Libp2p#error Emitted when an error occurs
 * @fires Libp2p#peer:discovery Emitted when a peer is discovered
 */ class Libp2p extends EventEmitter {
    /**
   * Like `new Libp2p(options)` except it will create a `PeerId`
   * instance if one is not provided in options.
   *
   * @param {Libp2pOptions & CreateOptions} options - Libp2p configuration options
   * @returns {Promise<Libp2p>}
   */ static async create(options) {
        if (options.peerId) // @ts-ignore 'Libp2pOptions & CreateOptions' is not assignable to 'Libp2pOptions & constructorOptions'
        return new Libp2p(options);
        const peerId = await PeerId.create();
        options.peerId = peerId;
        // @ts-ignore 'Libp2pOptions & CreateOptions' is not assignable to 'Libp2pOptions & constructorOptions'
        return new Libp2p(options);
    }
    /**
   * Libp2p node.
   *
   * @class
   * @param {Libp2pOptions & constructorOptions} _options
   */ constructor(_options){
        super();
        // validateConfig will ensure the config is correct,
        // and add default values where appropriate
        this._options = validateConfig(_options);
        /** @type {PeerId} */ this.peerId = this._options.peerId;
        this.datastore = this._options.datastore;
        this.peerStore = this.datastore && this._options.peerStore.persistence ? new PersistentPeerStore({
            peerId: this.peerId,
            datastore: this.datastore,
            ...this._options.peerStore
        }) : new PeerStore({
            peerId: this.peerId
        });
        // Addresses {listen, announce, noAnnounce}
        this.addresses = this._options.addresses;
        this.addressManager = new AddressManager(this.peerId, this._options.addresses);
        // when addresses change, update our peer record
        this.addressManager.on("change:addresses", ()=>{
            updateSelfPeerRecord(this).catch((err)=>{
                log.error("Error updating self peer record", err);
            });
        });
        this._modules = this._options.modules;
        this._config = this._options.config;
        this._transport = [] // Transport instances/references
        ;
        this._discovery = new Map() // Discovery service instances/references
        ;
        // Create the Connection Manager
        this.connectionManager = new ConnectionManager(this, {
            autoDial: this._config.peerDiscovery.autoDial,
            ...this._options.connectionManager
        });
        // Create Metrics
        if (this._options.metrics.enabled) this.metrics = new Metrics({
            ...this._options.metrics,
            connectionManager: this.connectionManager
        });
        // Create keychain
        if (this._options.keychain && this._options.keychain.datastore) {
            log("creating keychain");
            const keychainOpts = Keychain.generateOptions();
            this.keychain = new Keychain(this._options.keychain.datastore, {
                ...keychainOpts,
                ...this._options.keychain
            });
            log("keychain constructed");
        }
        // Setup the Upgrader
        this.upgrader = new Upgrader({
            localPeer: this.peerId,
            metrics: this.metrics,
            onConnection: (connection)=>this.connectionManager.onConnect(connection),
            onConnectionEnd: (connection)=>this.connectionManager.onDisconnect(connection)
        });
        // Setup the transport manager
        this.transportManager = new TransportManager({
            libp2p: this,
            upgrader: this.upgrader,
            faultTolerance: this._options.transportManager.faultTolerance
        });
        // Create the Nat Manager
        this.natManager = new NatManager({
            peerId: this.peerId,
            addressManager: this.addressManager,
            transportManager: this.transportManager,
            // @ts-ignore Nat typedef is not understood as Object
            ...this._options.config.nat
        });
        // Create the Registrar
        this.registrar = new Registrar({
            peerStore: this.peerStore,
            connectionManager: this.connectionManager
        });
        this.handle = this.handle.bind(this);
        this.registrar.handle = this.handle;
        // Attach crypto channels
        if (!this._modules.connEncryption || !this._modules.connEncryption.length) throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED);
        const cryptos = this._modules.connEncryption;
        cryptos.forEach((crypto)=>{
            this.upgrader.cryptos.set(crypto.protocol, crypto);
        });
        this.dialer = new Dialer({
            transportManager: this.transportManager,
            peerStore: this.peerStore,
            ...this._options.dialer
        });
        this._modules.transport.forEach((Transport)=>{
            const key = Transport.prototype[Symbol.toStringTag];
            const transportOptions = this._config.transport[key];
            this.transportManager.add(key, Transport, transportOptions);
        });
        if (this._config.relay.enabled) {
            // @ts-ignore Circuit prototype
            this.transportManager.add(Circuit.prototype[Symbol.toStringTag], Circuit);
            this.relay = new Relay(this);
        }
        // Attach stream multiplexers
        if (this._modules.streamMuxer) {
            const muxers = this._modules.streamMuxer;
            muxers.forEach((muxer)=>{
                this.upgrader.muxers.set(muxer.multicodec, muxer);
            });
            // Add the identify service since we can multiplex
            this.identifyService = new IdentifyService({
                libp2p: this
            });
            this.handle(Object.values(IdentifyService.getProtocolStr(this)), this.identifyService.handleMessage);
        }
        // Attach private network protector
        if (this._modules.connProtector) this.upgrader.protector = this._modules.connProtector;
        else if (globalThis.process !== undefined && globalThis.process.env && globalThis.process.env.LIBP2P_FORCE_PNET) throw new Error("Private network is enforced, but no protector was provided");
        // dht provided components (peerRouting, contentRouting, dht)
        if (this._modules.dht) {
            const DHT = this._modules.dht;
            // @ts-ignore Object is not constructable
            this._dht = new DHT({
                libp2p: this,
                dialer: this.dialer,
                peerId: this.peerId,
                peerStore: this.peerStore,
                registrar: this.registrar,
                datastore: this.datastore,
                ...this._config.dht
            });
        }
        // Create pubsub if provided
        if (this._modules.pubsub) {
            const Pubsub = this._modules.pubsub;
            // using pubsub adapter with *DEPRECATED* handlers functionality
            /** @type {Pubsub} */ this.pubsub = PubsubAdapter(Pubsub, this, this._config.pubsub);
        }
        // Attach remaining APIs
        // peer and content routing will automatically get modules from _modules and _dht
        this.peerRouting = new PeerRouting(this);
        this.contentRouting = new ContentRouting(this);
        // Mount default protocols
        ping.mount(this);
        this._onDiscoveryPeer = this._onDiscoveryPeer.bind(this);
    }
    /**
   * Overrides EventEmitter.emit to conditionally emit errors
   * if there is a handler. If not, errors will be logged.
   *
   * @param {string} eventName
   * @param  {...any} args
   * @returns {boolean}
   */ emit(eventName, ...args) {
        // TODO: do we still need this?
        // @ts-ignore _events does not exist in libp2p
        if (eventName === "error" && !this._events.error) {
            log.error(args);
            return false;
        } else return super.emit(eventName, ...args);
    }
    /**
   * Starts the libp2p node and all its subsystems
   *
   * @returns {Promise<void>}
   */ async start() {
        log("libp2p is starting");
        try {
            await this._onStarting();
            await this._onDidStart();
            log("libp2p has started");
        } catch (err) {
            this.emit("error", err);
            log.error("An error occurred starting libp2p", err);
            await this.stop();
            throw err;
        }
    }
    /**
   * Stop the libp2p node by closing its listeners and open connections
   *
   * @async
   * @returns {Promise<void>}
   */ async stop() {
        log("libp2p is stopping");
        try {
            this._isStarted = false;
            this.relay && this.relay.stop();
            this.peerRouting.stop();
            for (const service of this._discovery.values())service.removeListener("peer", this._onDiscoveryPeer);
            await Promise.all(Array.from(this._discovery.values(), (s)=>s.stop()));
            this._discovery = new Map();
            await this.peerStore.stop();
            await this.connectionManager.stop();
            await Promise.all([
                this.pubsub && this.pubsub.stop(),
                this._dht && this._dht.stop(),
                this.metrics && this.metrics.stop()
            ]);
            await this.natManager.stop();
            await this.transportManager.close();
            ping.unmount(this);
            this.dialer.destroy();
        } catch (err) {
            if (err) {
                log.error(err);
                this.emit("error", err);
            }
        }
        log("libp2p has stopped");
    }
    /**
   * Load keychain keys from the datastore.
   * Imports the private key as 'self', if needed.
   *
   * @async
   * @returns {Promise<void>}
   */ async loadKeychain() {
        if (!this.keychain) return;
        try {
            await this.keychain.findKeyByName("self");
        } catch (err) {
            await this.keychain.importPeer("self", this.peerId);
        }
    }
    isStarted() {
        return this._isStarted;
    }
    /**
   * Gets a Map of the current connections. The keys are the stringified
   * `PeerId` of the peer. The value is an array of Connections to that peer.
   *
   * @returns {Map<string, Connection[]>}
   */ get connections() {
        return this.connectionManager.connections;
    }
    /**
   * Dials to the provided peer. If successful, the known metadata of the
   * peer will be added to the nodes `peerStore`
   *
   * @param {PeerId|Multiaddr|string} peer - The peer to dial
   * @param {object} [options]
   * @param {AbortSignal} [options.signal]
   * @returns {Promise<Connection>}
   */ dial(peer, options) {
        return this._dial(peer, options);
    }
    /**
   * Dials to the provided peer and tries to handshake with the given protocols in order.
   * If successful, the known metadata of the peer will be added to the nodes `peerStore`,
   * and the `MuxedStream` will be returned together with the successful negotiated protocol.
   *
   * @async
   * @param {PeerId|Multiaddr|string} peer - The peer to dial
   * @param {string[]|string} protocols
   * @param {object} [options]
   * @param {AbortSignal} [options.signal]
   */ async dialProtocol(peer, protocols, options) {
        if (!protocols || !protocols.length) throw errCode(new Error("no protocols were provided to open a stream"), codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);
        const connection = await this._dial(peer, options);
        return connection.newStream(protocols);
    }
    /**
   * @async
   * @param {PeerId|Multiaddr|string} peer - The peer to dial
   * @param {object} [options]
   * @returns {Promise<Connection>}
   */ async _dial(peer, options) {
        const { id , multiaddrs  } = getPeer(peer);
        if (id.equals(this.peerId)) throw errCode(new Error("Cannot dial self"), codes.ERR_DIALED_SELF);
        let connection = this.connectionManager.get(id);
        if (!connection) connection = await this.dialer.connectToPeer(peer, options);
        else if (multiaddrs) this.peerStore.addressBook.add(id, multiaddrs);
        return connection;
    }
    /**
   * Get a deduplicated list of peer advertising multiaddrs by concatenating
   * the listen addresses used by transports with any configured
   * announce addresses as well as observed addresses reported by peers.
   *
   * If Announce addrs are specified, configured listen addresses will be
   * ignored though observed addresses will still be included.
   *
   * @returns {Multiaddr[]}
   */ get multiaddrs() {
        let addrs = this.addressManager.getAnnounceAddrs().map((ma)=>ma.toString());
        if (!addrs.length) // no configured announce addrs, add configured listen addresses
        addrs = this.transportManager.getAddrs().map((ma)=>ma.toString());
        addrs = addrs.concat(this.addressManager.getObservedAddrs().map((ma)=>ma.toString()));
        const announceFilter = this._options.addresses.announceFilter;
        // dedupe multiaddrs
        const addrSet = new Set(addrs);
        // Create advertising list
        return announceFilter(Array.from(addrSet).map((str)=>new Multiaddr(str)));
    }
    /**
   * Disconnects all connections to the given `peer`
   *
   * @param {PeerId|Multiaddr|string} peer - the peer to close connections to
   * @returns {Promise<void>}
   */ async hangUp(peer) {
        const { id  } = getPeer(peer);
        const connections = this.connectionManager.connections.get(id.toB58String());
        if (!connections) return;
        await Promise.all(connections.map((connection)=>{
            return connection.close();
        }));
    }
    /**
   * Pings the given peer in order to obtain the operation latency.
   *
   * @param {PeerId|Multiaddr|string} peer - The peer to ping
   * @returns {Promise<number>}
   */ ping(peer) {
        const { id , multiaddrs  } = getPeer(peer);
        // If received multiaddr, ping it
        if (multiaddrs) return ping(this, multiaddrs[0]);
        return ping(this, id);
    }
    /**
   * Registers the `handler` for each protocol
   *
   * @param {string[]|string} protocols
   * @param {(props: HandlerProps) => void} handler
   */ handle(protocols, handler) {
        protocols = Array.isArray(protocols) ? protocols : [
            protocols
        ];
        protocols.forEach((protocol)=>{
            this.upgrader.protocols.set(protocol, handler);
        });
        // Add new protocols to self protocols in the Protobook
        this.peerStore.protoBook.add(this.peerId, protocols);
    }
    /**
   * Removes the handler for each protocol. The protocol
   * will no longer be supported on streams.
   *
   * @param {string[]|string} protocols
   */ unhandle(protocols) {
        protocols = Array.isArray(protocols) ? protocols : [
            protocols
        ];
        protocols.forEach((protocol)=>{
            this.upgrader.protocols.delete(protocol);
        });
        // Remove protocols from self protocols in the Protobook
        this.peerStore.protoBook.remove(this.peerId, protocols);
    }
    async _onStarting() {
        // Listen on the provided transports for the provided addresses
        const addrs = this.addressManager.getListenAddrs();
        await this.transportManager.listen(addrs);
        // Manage your NATs
        this.natManager.start();
        // Start PeerStore
        await this.peerStore.start();
        if (this._config.pubsub.enabled) this.pubsub && this.pubsub.start();
        // DHT subsystem
        if (this._config.dht.enabled) {
            this._dht && this._dht.start();
            // TODO: this should be modified once random-walk is used as
            // the other discovery modules
            this._dht.on("peer", this._onDiscoveryPeer);
        }
        // Start metrics if present
        this.metrics && this.metrics.start();
    }
    /**
   * Called when libp2p has started and before it returns
   *
   * @private
   */ async _onDidStart() {
        this._isStarted = true;
        this.peerStore.on("peer", (peerId)=>{
            this.emit("peer:discovery", peerId);
            this._maybeConnect(peerId);
        });
        // Once we start, emit any peers we may have already discovered
        // TODO: this should be removed, as we already discovered these peers in the past
        for (const peer of this.peerStore.peers.values())this.emit("peer:discovery", peer.id);
        this.connectionManager.start();
        // Peer discovery
        await this._setupPeerDiscovery();
        // Relay
        this.relay && this.relay.start();
        this.peerRouting.start();
    }
    /**
   * Called whenever peer discovery services emit `peer` events.
   * Known peers may be emitted.
   *
   * @private
   * @param {{ id: PeerId, multiaddrs: Multiaddr[], protocols: string[] }} peer
   */ _onDiscoveryPeer(peer) {
        if (peer.id.toB58String() === this.peerId.toB58String()) {
            log.error(new Error(codes.ERR_DISCOVERED_SELF));
            return;
        }
        peer.multiaddrs && this.peerStore.addressBook.add(peer.id, peer.multiaddrs);
        peer.protocols && this.peerStore.protoBook.set(peer.id, peer.protocols);
    }
    /**
   * Will dial to the given `peerId` if the current number of
   * connected peers is less than the configured `ConnectionManager`
   * minConnections.
   *
   * @private
   * @param {PeerId} peerId
   */ async _maybeConnect(peerId) {
        // If auto dialing is on and we have no connection to the peer, check if we should dial
        if (this._config.peerDiscovery.autoDial === true && !this.connectionManager.get(peerId)) {
            const minConnections = this._options.connectionManager.minConnections || 0;
            if (minConnections > this.connectionManager.size) {
                log("connecting to discovered peer %s", peerId.toB58String());
                try {
                    await this.dialer.connectToPeer(peerId);
                } catch (err) {
                    log.error(`could not connect to discovered peer ${peerId.toB58String()} with ${err}`);
                }
            }
        }
    }
    /**
   * Initializes and starts peer discovery services
   *
   * @async
   * @private
   */ async _setupPeerDiscovery() {
        /**
     * @param {PeerDiscoveryFactory} DiscoveryService
     */ const setupService = (DiscoveryService)=>{
            let config = {
                enabled: true // on by default
            };
            if (DiscoveryService.tag && this._config.peerDiscovery && this._config.peerDiscovery[DiscoveryService.tag]) // @ts-ignore PeerDiscovery not understood as an Object for spread
            config = {
                ...config,
                ...this._config.peerDiscovery[DiscoveryService.tag]
            };
            if (config.enabled && !this._discovery.has(DiscoveryService.tag)) {
                let discoveryService;
                if (typeof DiscoveryService === "function") // @ts-ignore DiscoveryService has no constructor type inferred
                discoveryService = new DiscoveryService(Object.assign({}, config, {
                    peerId: this.peerId,
                    libp2p: this
                }));
                else discoveryService = DiscoveryService;
                discoveryService.on("peer", this._onDiscoveryPeer);
                this._discovery.set(DiscoveryService.tag, discoveryService);
            }
        };
        // Discovery modules
        for (const DiscoveryService1 of this._modules.peerDiscovery || [])setupService(DiscoveryService1);
        // Transport modules with discovery
        for (const Transport of this.transportManager.getTransports())// @ts-ignore Transport interface does not include discovery
        if (Transport.discovery) // @ts-ignore Transport interface does not include discovery
        setupService(Transport.discovery);
        await Promise.all(Array.from(this._discovery.values(), (d)=>d.start()));
    }
}
module.exports = Libp2p;

},{"debug":"l0oUb","events":"1VQLm","err-code":"dUrrM","peer-id":"etBKN","multiaddr":"dOMJu","./peer-routing":"kDvJ9","./content-routing":"dwgBp","./get-peer":"hbran","./config":"cu4BR","./errors":"cFlaw","./address-manager":"cjazp","./connection-manager":"bfUKk","./circuit/transport":"9vRcK","./circuit":"UgIqX","./dialer":"ljs9Y","./keychain":"46LxL","./metrics":"joaAY","./transport-manager":"iiCD0","./upgrader":"9XtI7","./peer-store":"j2dY0","./pubsub-adapter":"9Nolq","./peer-store/persistent":"bfYsk","./registrar":"24BF8","./ping":"3BeXr","./identify":"b5qsB","./nat-manager":"6APCL","./record/utils":"egDjK"}],"kDvJ9":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:peer-routing"), {
    error: debug("libp2p:peer-routing:err")
});
const errCode = require("err-code");
const { storeAddresses , uniquePeers , requirePeers  } = require("./content-routing/utils");
const merge = require("it-merge");
const { pipe  } = require("it-pipe");
const first = require("it-first");
const drain = require("it-drain");
const filter = require("it-filter");
const { setDelayedInterval , clearDelayedInterval  } = require("set-delayed-interval");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {import('libp2p-interfaces/src/peer-routing/types').PeerRouting} PeerRoutingModule
 */ /**
 * @typedef {Object} RefreshManagerOptions
 * @property {boolean} [enabled = true] - Whether to enable the Refresh manager
 * @property {number} [bootDelay = 6e5] - Boot delay to start the Refresh Manager (in ms)
 * @property {number} [interval = 10e3] - Interval between each Refresh Manager run (in ms)
 *
 * @typedef {Object} PeerRoutingOptions
 * @property {RefreshManagerOptions} [refreshManager]
 */ class PeerRouting {
    /**
   * @class
   * @param {import('./')} libp2p
   */ constructor(libp2p){
        this._peerId = libp2p.peerId;
        this._peerStore = libp2p.peerStore;
        /** @type {PeerRoutingModule[]} */ this._routers = libp2p._modules.peerRouting || [];
        // If we have the dht, add it to the available peer routers
        if (libp2p._dht && libp2p._config.dht.enabled) this._routers.push(libp2p._dht);
        this._refreshManagerOptions = libp2p._options.peerRouting.refreshManager;
        this._findClosestPeersTask = this._findClosestPeersTask.bind(this);
    }
    /**
   * Start peer routing service.
   */ start() {
        if (!this._routers.length || this._timeoutId || !this._refreshManagerOptions.enabled) return;
        this._timeoutId = setDelayedInterval(this._findClosestPeersTask, this._refreshManagerOptions.interval, this._refreshManagerOptions.bootDelay);
    }
    /**
   * Recurrent task to find closest peers and add their addresses to the Address Book.
   */ async _findClosestPeersTask() {
        try {
            // nb getClosestPeers adds the addresses to the address book
            await drain(this.getClosestPeers(this._peerId.id));
        } catch (err) {
            log.error(err);
        }
    }
    /**
   * Stop peer routing service.
   */ stop() {
        clearDelayedInterval(this._timeoutId);
    }
    /**
   * Iterates over all peer routers in parallel to find the given peer.
   *
   * @param {PeerId} id - The id of the peer to find
   * @param {object} [options]
   * @param {number} [options.timeout] - How long the query should run
   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}
   */ async findPeer(id, options) {
        if (!this._routers.length) throw errCode(new Error("No peer routers available"), "NO_ROUTERS_AVAILABLE");
        if (id.toB58String() === this._peerId.toB58String()) throw errCode(new Error("Should not try to find self"), "ERR_FIND_SELF");
        const output = await pipe(merge(...this._routers.map((router)=>[
                router.findPeer(id, options)
            ])), (source)=>filter(source, Boolean), // @ts-ignore findPeer resolves a Promise
        (source)=>storeAddresses(source, this._peerStore), (source)=>first(source));
        if (output) return output;
        throw errCode(new Error("not found"), "NOT_FOUND");
    }
    /**
   * Attempt to find the closest peers on the network to the given key.
   *
   * @param {Uint8Array} key - A CID like key
   * @param {Object} [options]
   * @param {number} [options.timeout=30e3] - How long the query can take.
   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}
   */ async *getClosestPeers(key, options = {
        timeout: 30e3
    }) {
        if (!this._routers.length) throw errCode(new Error("No peer routers available"), "NO_ROUTERS_AVAILABLE");
        yield* pipe(merge(...this._routers.map((router)=>router.getClosestPeers(key, options))), (source)=>storeAddresses(source, this._peerStore), (source)=>uniquePeers(source), (source)=>requirePeers(source));
    }
}
module.exports = PeerRouting;

},{"debug":"l0oUb","err-code":"dUrrM","./content-routing/utils":"bK525","it-merge":"eVwcy","it-pipe":"jkWle","it-first":"kZCg9","it-drain":"5xgCg","it-filter":"SXQVc","set-delayed-interval":"8jeXM"}],"bK525":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
const filter = require("it-filter");
const map = require("it-map");
const take = require("it-take");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * Store the multiaddrs from every peer in the passed peer store
 *
 * @param {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} source
 * @param {import('../peer-store')} peerStore
 */ function storeAddresses(source, peerStore) {
    return map(source, (peer)=>{
        // ensure we have the addresses for a given peer
        peerStore.addressBook.add(peer.id, peer.multiaddrs);
        return peer;
    });
}
/**
 * Filter peers by unique peer id
 *
 * @param {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} source
 */ function uniquePeers(source) {
    /** @type Set<string> */ const seen = new Set();
    return filter(source, (peer)=>{
        // dedupe by peer id
        if (seen.has(peer.id.toString())) return false;
        seen.add(peer.id.toString());
        return true;
    });
}
/**
 * Require at least `min` peers to be yielded from `source`
 *
 * @param {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} source
 * @param {number} min
 */ async function* requirePeers(source, min = 1) {
    let seen = 0;
    for await (const peer of source){
        seen++;
        yield peer;
    }
    if (seen < min) throw errCode(new Error("not found"), "NOT_FOUND");
}
/**
 * If `max` is passed, only take that number of peers from the source
 * otherwise take all the peers
 *
 * @param {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} source
 * @param {number} [max]
 */ function maybeLimitSource(source, max) {
    if (max) return take(source, max);
    return source;
}
module.exports = {
    storeAddresses,
    uniquePeers,
    requirePeers,
    maybeLimitSource
};

},{"err-code":"dUrrM","it-filter":"SXQVc","it-map":"a4GLO","it-take":"4PIw8"}],"a4GLO":[function(require,module,exports) {
"use strict";
/**
 * Takes an (async) iterable and returns one with each item mapped by the passed
 * function.
 *
 * @template I,O
 * @param {AsyncIterable<I>|Iterable<I>} source
 * @param {function(I):O|Promise<O>} func
 * @returns {AsyncIterable<O>}
 */ const map = async function*(source, func) {
    for await (const val of source)yield func(val);
};
module.exports = map;

},{}],"eVwcy":[function(require,module,exports) {
"use strict";
const pushable = require("it-pushable");
/**
 * Treat one or more iterables as a single iterable.
 *
 * Nb. sources are iterated over in parallel so the
 * order of emitted items is not guaranteed.
 *
 * @template T
 * @param {...AsyncIterable<T>|Iterable<T>} sources
 * @returns {AsyncIterable<T>}
 */ const merge = async function*(...sources) {
    const output = pushable();
    setTimeout(async ()=>{
        try {
            await Promise.all(sources.map(async (source)=>{
                for await (const item of source)output.push(item);
            }));
            output.end();
        } catch (/** @type {any} */ err) {
            output.end(err);
        }
    }, 0);
    yield* output;
};
module.exports = merge;

},{"it-pushable":"fVlDP"}],"fVlDP":[function(require,module,exports) {
const FIFO = require("fast-fifo");
module.exports = (options)=>{
    options = options || {};
    let onEnd;
    if (typeof options === "function") {
        onEnd = options;
        options = {};
    } else onEnd = options.onEnd;
    let buffer = new FIFO();
    let pushable, onNext, ended;
    const waitNext = ()=>{
        if (!buffer.isEmpty()) {
            if (options.writev) {
                let next;
                const values = [];
                while(!buffer.isEmpty()){
                    next = buffer.shift();
                    if (next.error) throw next.error;
                    values.push(next.value);
                }
                return {
                    done: next.done,
                    value: values
                };
            }
            const next = buffer.shift();
            if (next.error) throw next.error;
            return next;
        }
        if (ended) return {
            done: true
        };
        return new Promise((resolve, reject)=>{
            onNext = (next)=>{
                onNext = null;
                if (next.error) reject(next.error);
                else if (options.writev && !next.done) resolve({
                    done: next.done,
                    value: [
                        next.value
                    ]
                });
                else resolve(next);
                return pushable;
            };
        });
    };
    const bufferNext = (next)=>{
        if (onNext) return onNext(next);
        buffer.push(next);
        return pushable;
    };
    const bufferError = (err)=>{
        buffer = new FIFO();
        if (onNext) return onNext({
            error: err
        });
        buffer.push({
            error: err
        });
        return pushable;
    };
    const push = (value)=>{
        if (ended) return pushable;
        return bufferNext({
            done: false,
            value
        });
    };
    const end = (err)=>{
        if (ended) return pushable;
        ended = true;
        return err ? bufferError(err) : bufferNext({
            done: true
        });
    };
    const _return = ()=>{
        buffer = new FIFO();
        end();
        return {
            done: true
        };
    };
    const _throw = (err)=>{
        end(err);
        return {
            done: true
        };
    };
    pushable = {
        [Symbol.asyncIterator] () {
            return this;
        },
        next: waitNext,
        return: _return,
        throw: _throw,
        push,
        end
    };
    if (!onEnd) return pushable;
    const _pushable = pushable;
    pushable = {
        [Symbol.asyncIterator] () {
            return this;
        },
        next () {
            return _pushable.next();
        },
        throw (err) {
            _pushable.throw(err);
            if (onEnd) {
                onEnd(err);
                onEnd = null;
            }
            return {
                done: true
            };
        },
        return () {
            _pushable.return();
            if (onEnd) {
                onEnd();
                onEnd = null;
            }
            return {
                done: true
            };
        },
        push,
        end (err) {
            _pushable.end(err);
            if (onEnd) {
                onEnd(err);
                onEnd = null;
            }
            return pushable;
        }
    };
    return pushable;
};

},{"fast-fifo":"hs2rS"}],"hs2rS":[function(require,module,exports) {
const FixedFIFO = require("./fixed-size");
module.exports = class FastFIFO {
    constructor(hwm){
        this.hwm = hwm || 16;
        this.head = new FixedFIFO(this.hwm);
        this.tail = this.head;
    }
    push(val) {
        if (!this.head.push(val)) {
            const prev = this.head;
            this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length);
            this.head.push(val);
        }
    }
    shift() {
        const val = this.tail.shift();
        if (val === undefined && this.tail.next) {
            const next = this.tail.next;
            this.tail.next = null;
            this.tail = next;
            return this.tail.shift();
        }
        return val;
    }
    peek() {
        return this.tail.peek();
    }
    isEmpty() {
        return this.head.isEmpty();
    }
};

},{"./fixed-size":"h5pg1"}],"h5pg1":[function(require,module,exports) {
module.exports = class FixedFIFO {
    constructor(hwm){
        if (!(hwm > 0) || (hwm - 1 & hwm) !== 0) throw new Error("Max size for a FixedFIFO should be a power of two");
        this.buffer = new Array(hwm);
        this.mask = hwm - 1;
        this.top = 0;
        this.btm = 0;
        this.next = null;
    }
    push(data) {
        if (this.buffer[this.top] !== undefined) return false;
        this.buffer[this.top] = data;
        this.top = this.top + 1 & this.mask;
        return true;
    }
    shift() {
        const last = this.buffer[this.btm];
        if (last === undefined) return undefined;
        this.buffer[this.btm] = undefined;
        this.btm = this.btm + 1 & this.mask;
        return last;
    }
    peek() {
        return this.buffer[this.btm];
    }
    isEmpty() {
        return this.buffer[this.btm] === undefined;
    }
};

},{}],"8jeXM":[function(require,module,exports) {
"use strict";
const intervals = new Map();
const _generateId = ()=>`${Date.now()}:${Math.floor(Math.random() * 1000000)}`;
/**
 * Run a given task each {interval} ms
 *
 * @param {() => Promise} task
 * @param {number} interval
 * @param {string} id
 */ async function _runPeriodically(task, interval, id) {
    while(intervals.get(id)){
        try {
            await task();
        } catch (err) {
            // Throw global context error if handler throws
            setTimeout(()=>{
                throw err;
            }, 1);
            break;
        }
        if (!intervals.get(id)) break;
        await new Promise((resolve)=>{
            const _timeout = setTimeout(resolve, interval);
            intervals.set(id, _timeout);
        });
    }
}
/**
 * Asynchronous setInterval that is properly delayed using promises and can be delayed on boot.
 *
 * @param {() => Promise} task
 * @param {number} interval
 * @param {number} [delay = interval]
 * @returns {string}
 */ function setDelayedInterval(task, interval, delay) {
    delay = delay || interval;
    const id = _generateId();
    const _timeout = setTimeout(()=>{
        _runPeriodically(task, interval, id);
    }, delay);
    intervals.set(id, _timeout);
    return id;
}
/**
 * Clear delayed interval.
 *
 * @param {string} id
 */ function clearDelayedInterval(id) {
    const _timeout = intervals.get(id);
    if (_timeout) {
        clearTimeout(_timeout);
        intervals.delete(id);
    }
}
module.exports = {
    setDelayedInterval,
    clearDelayedInterval
};

},{}],"dwgBp":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
const { messages , codes  } = require("../errors");
const { storeAddresses , uniquePeers , requirePeers , maybeLimitSource  } = require("./utils");
const merge = require("it-merge");
const { pipe  } = require("it-pipe");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {import('multiformats/cid').CID} CID
 * @typedef {import('libp2p-interfaces/src/content-routing/types').ContentRouting} ContentRoutingModule
 */ /**
 * @typedef {Object} GetData
 * @property {PeerId} from
 * @property {Uint8Array} val
 */ class ContentRouting {
    /**
   * @class
   * @param {import('..')} libp2p
   */ constructor(libp2p){
        this.libp2p = libp2p;
        /** @type {ContentRoutingModule[]} */ this.routers = libp2p._modules.contentRouting || [];
        this.dht = libp2p._dht;
        // If we have the dht, add it to the available content routers
        if (this.dht && libp2p._config.dht.enabled) this.routers.push(this.dht);
    }
    /**
   * Iterates over all content routers in parallel to find providers of the given key.
   *
   * @param {CID} key - The CID key of the content to find
   * @param {object} [options]
   * @param {number} [options.timeout] - How long the query should run
   * @param {number} [options.maxNumProviders] - maximum number of providers to find
   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}
   */ async *findProviders(key, options = {}) {
        if (!this.routers.length) throw errCode(new Error("No content this.routers available"), "NO_ROUTERS_AVAILABLE");
        yield* pipe(merge(...this.routers.map((router)=>router.findProviders(key, options))), (source)=>storeAddresses(source, this.libp2p.peerStore), (source)=>uniquePeers(source), (source)=>maybeLimitSource(source, options.maxNumProviders), (source)=>requirePeers(source));
    }
    /**
   * Iterates over all content routers in parallel to notify it is
   * a provider of the given key.
   *
   * @param {CID} key - The CID key of the content to find
   * @returns {Promise<void>}
   */ async provide(key) {
        if (!this.routers.length) throw errCode(new Error("No content routers available"), "NO_ROUTERS_AVAILABLE");
        await Promise.all(this.routers.map((router)=>router.provide(key)));
    }
    /**
   * Store the given key/value pair in the DHT.
   *
   * @param {Uint8Array} key
   * @param {Uint8Array} value
   * @param {Object} [options] - put options
   * @param {number} [options.minPeers] - minimum number of peers required to successfully put
   * @returns {Promise<void>}
   */ put(key, value, options) {
        if (!this.libp2p.isStarted() || !this.dht.isStarted) throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);
        return this.dht.put(key, value, options);
    }
    /**
   * Get the value to the given key.
   * Times out after 1 minute by default.
   *
   * @param {Uint8Array} key
   * @param {Object} [options] - get options
   * @param {number} [options.timeout] - optional timeout (default: 60000)
   * @returns {Promise<GetData>}
   */ get(key, options) {
        if (!this.libp2p.isStarted() || !this.dht.isStarted) throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);
        return this.dht.get(key, options);
    }
    /**
   * Get the `n` values to the given key without sorting.
   *
   * @param {Uint8Array} key
   * @param {number} nVals
   * @param {Object} [options] - get options
   * @param {number} [options.timeout] - optional timeout (default: 60000)
   * @returns {Promise<GetData[]>}
   */ async getMany(key, nVals, options) {
        if (!this.libp2p.isStarted() || !this.dht.isStarted) throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);
        return this.dht.getMany(key, nVals, options);
    }
}
module.exports = ContentRouting;

},{"err-code":"dUrrM","../errors":"cFlaw","./utils":"bK525","it-merge":"eVwcy","it-pipe":"jkWle"}],"cFlaw":[function(require,module,exports) {
"use strict";
exports.messages = {
    NOT_STARTED_YET: "The libp2p node is not started yet",
    DHT_DISABLED: "DHT is not available",
    CONN_ENCRYPTION_REQUIRED: "At least one connection encryption module is required"
};
exports.codes = {
    DHT_DISABLED: "ERR_DHT_DISABLED",
    PUBSUB_NOT_STARTED: "ERR_PUBSUB_NOT_STARTED",
    DHT_NOT_STARTED: "ERR_DHT_NOT_STARTED",
    CONN_ENCRYPTION_REQUIRED: "ERR_CONN_ENCRYPTION_REQUIRED",
    ERR_INVALID_PROTOCOLS_FOR_STREAM: "ERR_INVALID_PROTOCOLS_FOR_STREAM",
    ERR_CONNECTION_ENDED: "ERR_CONNECTION_ENDED",
    ERR_CONNECTION_FAILED: "ERR_CONNECTION_FAILED",
    ERR_NODE_NOT_STARTED: "ERR_NODE_NOT_STARTED",
    ERR_ALREADY_ABORTED: "ERR_ALREADY_ABORTED",
    ERR_TOO_MANY_ADDRESSES: "ERR_TOO_MANY_ADDRESSES",
    ERR_NO_VALID_ADDRESSES: "ERR_NO_VALID_ADDRESSES",
    ERR_RELAYED_DIAL: "ERR_RELAYED_DIAL",
    ERR_DIALED_SELF: "ERR_DIALED_SELF",
    ERR_DISCOVERED_SELF: "ERR_DISCOVERED_SELF",
    ERR_DUPLICATE_TRANSPORT: "ERR_DUPLICATE_TRANSPORT",
    ERR_ENCRYPTION_FAILED: "ERR_ENCRYPTION_FAILED",
    ERR_HOP_REQUEST_FAILED: "ERR_HOP_REQUEST_FAILED",
    ERR_INVALID_KEY: "ERR_INVALID_KEY",
    ERR_INVALID_MESSAGE: "ERR_INVALID_MESSAGE",
    ERR_INVALID_PARAMETERS: "ERR_INVALID_PARAMETERS",
    ERR_INVALID_PEER: "ERR_INVALID_PEER",
    ERR_MUXER_UNAVAILABLE: "ERR_MUXER_UNAVAILABLE",
    ERR_TIMEOUT: "ERR_TIMEOUT",
    ERR_TRANSPORT_UNAVAILABLE: "ERR_TRANSPORT_UNAVAILABLE",
    ERR_TRANSPORT_DIAL_FAILED: "ERR_TRANSPORT_DIAL_FAILED",
    ERR_UNSUPPORTED_PROTOCOL: "ERR_UNSUPPORTED_PROTOCOL",
    ERR_INVALID_MULTIADDR: "ERR_INVALID_MULTIADDR",
    ERR_SIGNATURE_NOT_VALID: "ERR_SIGNATURE_NOT_VALID"
};

},{}],"hbran":[function(require,module,exports) {
"use strict";
const PeerId = require("peer-id");
const { Multiaddr  } = require("multiaddr");
const errCode = require("err-code");
const { codes  } = require("./errors");
/**
 * Converts the given `peer` to a `Peer` object.
 * If a multiaddr is received, the addressBook is updated.
 *
 * @param {PeerId|Multiaddr|string} peer
 * @returns {{ id: PeerId, multiaddrs: Multiaddr[]|undefined }}
 */ function getPeer(peer) {
    if (typeof peer === "string") peer = new Multiaddr(peer);
    let addr;
    if (Multiaddr.isMultiaddr(peer)) {
        addr = peer;
        const idStr = peer.getPeerId();
        if (!idStr) throw errCode(new Error(`${peer} does not have a valid peer type`), codes.ERR_INVALID_MULTIADDR);
        try {
            peer = PeerId.createFromB58String(idStr);
        } catch (err) {
            throw errCode(new Error(`${peer} is not a valid peer type`), codes.ERR_INVALID_MULTIADDR);
        }
    }
    return {
        id: peer,
        multiaddrs: addr ? [
            addr
        ] : undefined
    };
}
module.exports = getPeer;

},{"peer-id":"etBKN","multiaddr":"dOMJu","err-code":"dUrrM","./errors":"cFlaw"}],"cu4BR":[function(require,module,exports) {
"use strict";
const mergeOptions = require("merge-options");
// @ts-ignore no types in multiaddr path
const { dnsaddrResolver  } = require("multiaddr/src/resolvers");
const Constants = require("./constants");
const { AGENT_VERSION  } = require("./identify/consts");
const RelayConstants = require("./circuit/constants");
const { publicAddressesFirst  } = require("libp2p-utils/src/address-sort");
const { FaultTolerance  } = require("./transport-manager");
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {import('.').Libp2pOptions} Libp2pOptions
 * @typedef {import('.').constructorOptions} constructorOptions
 */ const DefaultConfig = {
    addresses: {
        listen: [],
        announce: [],
        noAnnounce: [],
        announceFilter: (/** @type {Multiaddr[]} */ multiaddrs)=>multiaddrs
    },
    connectionManager: {
        minConnections: 25
    },
    transportManager: {
        faultTolerance: FaultTolerance.FATAL_ALL
    },
    dialer: {
        maxParallelDials: Constants.MAX_PARALLEL_DIALS,
        maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,
        dialTimeout: Constants.DIAL_TIMEOUT,
        resolvers: {
            dnsaddr: dnsaddrResolver
        },
        addressSorter: publicAddressesFirst
    },
    host: {
        agentVersion: AGENT_VERSION
    },
    metrics: {
        enabled: false
    },
    peerStore: {
        persistence: false,
        threshold: 5
    },
    peerRouting: {
        refreshManager: {
            enabled: true,
            interval: 6e5,
            bootDelay: 10e3
        }
    },
    config: {
        protocolPrefix: "ipfs",
        dht: {
            enabled: false,
            kBucketSize: 20,
            randomWalk: {
                enabled: false,
                queriesPerPeriod: 1,
                interval: 300e3,
                timeout: 10e3
            }
        },
        nat: {
            enabled: true,
            ttl: 7200,
            keepAlive: true,
            gateway: null,
            externalIp: null,
            pmp: {
                enabled: false
            }
        },
        peerDiscovery: {
            autoDial: true
        },
        pubsub: {
            enabled: true
        },
        relay: {
            enabled: true,
            advertise: {
                bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,
                enabled: false,
                ttl: RelayConstants.ADVERTISE_TTL
            },
            hop: {
                enabled: false,
                active: false
            },
            autoRelay: {
                enabled: false,
                maxListeners: 2
            }
        },
        transport: {}
    }
};
/**
 * @param {Libp2pOptions} opts
 * @returns {DefaultConfig & Libp2pOptions & constructorOptions}
 */ module.exports.validate = (opts)=>{
    /** @type {DefaultConfig & Libp2pOptions & constructorOptions} */ const resultingOptions = mergeOptions(DefaultConfig, opts);
    if (resultingOptions.modules.transport.length < 1) throw new Error("'options.modules.transport' must contain at least 1 transport");
    return resultingOptions;
};

},{"merge-options":"4XlQf","multiaddr/src/resolvers":"gv5CZ","./constants":"8KiNk","./identify/consts":"bXpq8","./circuit/constants":"3qN8b","libp2p-utils/src/address-sort":"fdxjB","./transport-manager":"iiCD0"}],"4XlQf":[function(require,module,exports) {
"use strict";
const isOptionObject = require("is-plain-obj");
const { hasOwnProperty  } = Object.prototype;
const { propertyIsEnumerable  } = Object;
const defineProperty = (object, name, value)=>Object.defineProperty(object, name, {
        value,
        writable: true,
        enumerable: true,
        configurable: true
    });
const globalThis = this;
const defaultMergeOptions = {
    concatArrays: false,
    ignoreUndefined: false
};
const getEnumerableOwnPropertyKeys = (value)=>{
    const keys = [];
    for(const key in value)if (hasOwnProperty.call(value, key)) keys.push(key);
    /* istanbul ignore else  */ if (Object.getOwnPropertySymbols) {
        const symbols = Object.getOwnPropertySymbols(value);
        for (const symbol of symbols)if (propertyIsEnumerable.call(value, symbol)) keys.push(symbol);
    }
    return keys;
};
function clone(value) {
    if (Array.isArray(value)) return cloneArray(value);
    if (isOptionObject(value)) return cloneOptionObject(value);
    return value;
}
function cloneArray(array) {
    const result = array.slice(0, 0);
    getEnumerableOwnPropertyKeys(array).forEach((key)=>{
        defineProperty(result, key, clone(array[key]));
    });
    return result;
}
function cloneOptionObject(object) {
    const result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};
    getEnumerableOwnPropertyKeys(object).forEach((key)=>{
        defineProperty(result, key, clone(object[key]));
    });
    return result;
}
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {string[]} keys keys to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 */ const mergeKeys = (merged, source, keys, config)=>{
    keys.forEach((key)=>{
        if (typeof source[key] === "undefined" && config.ignoreUndefined) return;
        // Do not recurse into prototype chain of merged
        if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) defineProperty(merged, key, merge(merged[key], source[key], config));
        else defineProperty(merged, key, clone(source[key]));
    });
    return merged;
};
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 *
 * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)
 */ const concatArrays = (merged, source, config)=>{
    let result = merged.slice(0, 0);
    let resultIndex = 0;
    [
        merged,
        source
    ].forEach((array)=>{
        const indices = [];
        // `result.concat(array)` with cloning
        for(let k = 0; k < array.length; k++){
            if (!hasOwnProperty.call(array, k)) continue;
            indices.push(String(k));
            if (array === merged) // Already cloned
            defineProperty(result, resultIndex++, array[k]);
            else defineProperty(result, resultIndex++, clone(array[k]));
        }
        // Merge non-index keys
        result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter((key)=>!indices.includes(key)), config);
    });
    return result;
};
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 */ function merge(merged, source, config) {
    if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) return concatArrays(merged, source, config);
    if (!isOptionObject(source) || !isOptionObject(merged)) return clone(source);
    return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);
}
module.exports = function(...options) {
    const config = merge(clone(defaultMergeOptions), this !== globalThis && this || {}, defaultMergeOptions);
    let merged = {
        _: {}
    };
    for (const option of options){
        if (option === undefined) continue;
        if (!isOptionObject(option)) throw new TypeError("`" + option + "` is not an Option Object");
        merged = merge(merged, {
            _: option
        }, config);
    }
    return merged._;
};

},{"is-plain-obj":"9Wkhz"}],"9Wkhz":[function(require,module,exports) {
"use strict";
module.exports = (value)=>{
    if (Object.prototype.toString.call(value) !== "[object Object]") return false;
    const prototype = Object.getPrototypeOf(value);
    return prototype === null || prototype === Object.prototype;
};

},{}],"gv5CZ":[function(require,module,exports) {
"use strict";
const protocols = require("../protocols-table");
const { code: dnsaddrCode  } = protocols("dnsaddr");
/**
 * @typedef {import('..').Multiaddr} Multiaddr
 */ /**
 * Resolver for dnsaddr addresses.
 *
 * @param {Multiaddr} addr
 * @returns {Promise<string[]>}
 */ async function dnsaddrResolver(addr) {
    const Resolver = require("./dns");
    const resolver = new Resolver();
    const peerId = addr.getPeerId();
    const [, hostname] = addr.stringTuples().find(([proto])=>proto === dnsaddrCode) || [];
    const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`);
    let addresses = records.flat().map((a)=>a.split("=")[1]);
    if (peerId) addresses = addresses.filter((entry)=>entry.includes(peerId));
    return addresses;
}
module.exports = {
    dnsaddrResolver
};

},{"../protocols-table":"j1p40","./dns":"fChMJ"}],"fChMJ":[function(require,module,exports) {
"use strict";
/** @type {import('dns').promises.Resolver} */ // @ts-ignore - has no types
const dns = require("dns-over-http-resolver");
module.exports = dns;

},{"dns-over-http-resolver":"jzD4O"}],"jzD4O":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = debug("dns-over-http-resolver");
log.error = debug("dns-over-http-resolver:error");
const Receptacle = require("receptacle");
const utils = require("./utils");
/**
 * DNS over HTTP resolver.
 * Uses a list of servers to resolve DNS records with HTTP requests.
 */ class Resolver {
    /**
   * @class
   * @param {object} [properties]
   * @param {number} [properties.maxCache = 100] - maximum number of cached dns records.
   */ constructor({ maxCache =100  } = {}){
        this._cache = new Receptacle({
            max: maxCache
        });
        this._servers = [
            "https://cloudflare-dns.com/dns-query",
            "https://dns.google/resolve"
        ];
    }
    /**
   * Get an array of the IP addresses currently configured for DNS resolution.
   * These addresses are formatted according to RFC 5952. It can include a custom port.
   *
   * @returns {Array<string>}
   */ getServers() {
        return this._servers;
    }
    /**
   * Get a shuffled array of the IP addresses currently configured for DNS resolution.
   * These addresses are formatted according to RFC 5952. It can include a custom port.
   *
   * @returns {Array<string>}
   */ _getShuffledServers() {
        const newServers = [].concat(this._servers);
        for(let i = newServers.length - 1; i > 0; i--){
            const j = Math.floor(Math.random() * i);
            const temp = newServers[i];
            newServers[i] = newServers[j];
            newServers[j] = temp;
        }
        return newServers;
    }
    /**
   * Sets the IP address and port of servers to be used when performing DNS resolution.
   *
   * @param {Array<string>} servers - array of RFC 5952 formatted addresses.
   */ setServers(servers) {
        this._servers = servers;
    }
    /**
   * Uses the DNS protocol to resolve the given host name into the appropriate DNS record.
   *
   * @param {string} hostname - host name to resolve.
   * @param {string} [rrType = 'A'] - resource record type.
   * @returns {Promise<*>}
   */ resolve(hostname, rrType = "A") {
        switch(rrType){
            case "A":
                return this.resolve4(hostname);
            case "AAAA":
                return this.resolve6(hostname);
            case "TXT":
                return this.resolveTxt(hostname);
            default:
                throw new Error(`${rrType} is not supported`);
        }
    }
    /**
   * Uses the DNS protocol to resolve the given host name into IPv4 addresses.
   *
   * @param {string} hostname - host name to resolve.
   * @returns {Promise<Array<string>>}
   */ async resolve4(hostname) {
        const recordType = "A";
        const cached = this._cache.get(utils.getCacheKey(hostname, recordType));
        if (cached) return cached;
        for (const server of this._getShuffledServers())try {
            const response = await utils.fetch(utils.buildResource({
                serverResolver: server,
                hostname,
                recordType
            }));
            const d = await response.json();
            const data = d.Answer.map((a)=>a.data);
            const ttl = Math.min(d.Answer.map((a)=>a.TTL));
            this._cache.set(utils.getCacheKey(hostname, recordType), data, {
                ttl
            });
            return data;
        } catch (err) {
            log.error(`${server} could not resolve ${hostname} record ${recordType}`);
        }
        throw new Error(`Could not resolve ${hostname} record ${recordType}`);
    }
    /**
   * Uses the DNS protocol to resolve the given host name into IPv6 addresses.
   *
   * @param {string} hostname - host name to resolve.
   * @returns {Promise<Array<string>>}
   */ async resolve6(hostname) {
        const recordType = "AAAA";
        const cached = this._cache.get(utils.getCacheKey(hostname, recordType));
        if (cached) return cached;
        for (const server of this._getShuffledServers())try {
            const response = await utils.fetch(utils.buildResource({
                serverResolver: server,
                hostname,
                recordType
            }));
            const d = await response.json();
            const data = d.Answer.map((a)=>a.data);
            const ttl = Math.min(d.Answer.map((a)=>a.TTL));
            this._cache.set(utils.getCacheKey(hostname, recordType), data, {
                ttl
            });
            return data;
        } catch (err) {
            log.error(`${server} could not resolve ${hostname} record ${recordType}`);
        }
        throw new Error(`Could not resolve ${hostname} record ${recordType}`);
    }
    /**
   * Uses the DNS protocol to resolve the given host name into a Text record.
   *
   * @param {string} hostname - host name to resolve.
   * @returns {Promise<Array<Array<string>>>}
   */ async resolveTxt(hostname) {
        const recordType = "TXT";
        const cached = this._cache.get(utils.getCacheKey(hostname, recordType));
        if (cached) return cached;
        for (const server of this._getShuffledServers())try {
            const response = await utils.fetch(utils.buildResource({
                serverResolver: server,
                hostname,
                recordType
            }));
            const d = await response.json();
            const data = d.Answer.map((a)=>[
                    a.data.replace(/['"]+/g, "")
                ]);
            const ttl = Math.min(d.Answer.map((a)=>a.TTL));
            this._cache.set(utils.getCacheKey(hostname, recordType), data, {
                ttl
            });
            return data;
        } catch (err) {
            log.error(`${server} could not resolve ${hostname} record ${recordType}`);
        }
        throw new Error(`Could not resolve ${hostname} record ${recordType}`);
    }
}
Resolver.Resolver = Resolver;
module.exports = Resolver;

},{"debug":"l0oUb","receptacle":"9MUpS","./utils":"fajnA"}],"9MUpS":[function(require,module,exports) {
"use strict";
module.exports = Receptacle;
var toMS = require("ms");
var cache = Receptacle.prototype;
var counter = new Date() % 1e9;
function getUID() {
    return (Math.random() * 1e9 >>> 0) + counter++;
}
/**
 * Creates a cache with a maximum key size.
 *
 * @constructor
 * @param {Object} options
 * @param {Number} [options.max=Infinity] the maximum number of keys allowed in the cache (lru).
 * @param {Array} [options.items=[]] the default items in the cache.
 */ function Receptacle(options) {
    options = options || {};
    this.id = options.id || getUID();
    this.max = options.max || Infinity;
    this.items = options.items || [];
    this._lookup = {};
    this.size = this.items.length;
    this.lastModified = new Date(options.lastModified || new Date());
    // Setup initial timers and indexes for the cache.
    for(var item, ttl, i = this.items.length; i--;){
        item = this.items[i];
        ttl = new Date(item.expires) - new Date();
        this._lookup[item.key] = item;
        if (ttl > 0) this.expire(item.key, ttl);
        else if (ttl <= 0) this.delete(item.key);
    }
}
/**
 * Tests if a key is currently in the cache.
 * Does not check if slot is empty.
 *
 * @param {String} key - the key to retrieve from the cache.
 * @return {Boolean}
 */ cache.has = function(key) {
    return key in this._lookup;
};
/**
 * Retrieves a key from the cache and marks it as recently used.
 *
 * @param {String} key - the key to retrieve from the cache.
 * @return {*}
 */ cache.get = function(key) {
    if (!this.has(key)) return null;
    var record = this._lookup[key];
    // Update expiry for "refresh" keys
    if (record.refresh) this.expire(key, record.refresh);
    // Move to front of the line.
    this.items.splice(this.items.indexOf(record), 1);
    this.items.push(record);
    return record.value;
};
/**
 * Retrieves user meta data for a cached item.
 *
 * @param {String} key - the key to retrieve meta data from the cache.
 * @return {*}
 */ cache.meta = function(key) {
    if (!this.has(key)) return null;
    var record = this._lookup[key];
    if (!("meta" in record)) return null;
    return record.meta;
};
/**
 * Puts a key into the cache with an optional expiry time.
 *
 * @param {String} key - the key for the value in the cache.
 * @param {*} value - the value to place at the key.
 * @param {Number} [options.ttl] - a time after which the key will be removed.
 * @return {Receptacle}
 */ cache.set = function(key, value, options) {
    var oldRecord = this._lookup[key];
    var record = this._lookup[key] = {
        key: key,
        value: value
    };
    // Mark cache as modified.
    this.lastModified = new Date();
    if (oldRecord) {
        // Replace an old key.
        clearTimeout(oldRecord.timeout);
        this.items.splice(this.items.indexOf(oldRecord), 1, record);
    } else {
        // Remove least used item if needed.
        if (this.size >= this.max) this.delete(this.items[0].key);
        // Add a new key.
        this.items.push(record);
        this.size++;
    }
    if (options) {
        // Setup key expiry.
        if ("ttl" in options) this.expire(key, options.ttl);
        // Store user options in the record.
        if ("meta" in options) record.meta = options.meta;
        // Mark a auto refresh key.
        if (options.refresh) record.refresh = options.ttl;
    }
    return this;
};
/**
 * Deletes an item from the cache.
 *
 * @param {String} key - the key to remove.
 * @return {Receptacle}
 */ cache.delete = function(key) {
    var record = this._lookup[key];
    if (!record) return false;
    this.lastModified = new Date();
    this.items.splice(this.items.indexOf(record), 1);
    clearTimeout(record.timeout);
    delete this._lookup[key];
    this.size--;
    return this;
};
/**
 * Utility to register a key that will be removed after some time.
 *
 * @param {String} key - the key to remove.
 * @param {Number} [ms] - the timeout before removal.
 * @return {Receptacle}
 */ cache.expire = function(key, ttl) {
    var ms = ttl || 0;
    var record = this._lookup[key];
    if (!record) return this;
    if (typeof ms === "string") ms = toMS(ttl);
    if (typeof ms !== "number") throw new TypeError("Expiration time must be a string or number.");
    clearTimeout(record.timeout);
    record.timeout = setTimeout(this.delete.bind(this, record.key), ms);
    record.expires = Number(new Date()) + ms;
    return this;
};
/**
 * Deletes all items from the cache.
 * @return {Receptacle}
 */ cache.clear = function() {
    for(var i = this.items.length; i--;)this.delete(this.items[i].key);
    return this;
};
/**
 * Fixes serialization issues in polyfilled environments.
 * Ensures non-cyclical serialized object.
 */ cache.toJSON = function() {
    var items = new Array(this.items.length);
    var item;
    for(var i = items.length; i--;){
        item = this.items[i];
        items[i] = {
            key: item.key,
            meta: item.meta,
            value: item.value,
            expires: item.expires,
            refresh: item.refresh
        };
    }
    return {
        id: this.id,
        max: isFinite(this.max) ? this.max : undefined,
        lastModified: this.lastModified,
        items: items
    };
};

},{"ms":"jauEe"}],"fajnA":[function(require,module,exports) {
"use strict";
const { default: nativeFetch , Headers  } = require("native-fetch");
/**
 * Build fetch resource for request.
 *
 * @param {object} properties
 * @param {string} properties.serverResolver
 * @param {string} properties.hostname
 * @param {string} properties.recordType
 * @returns {string}
 */ function buildResource({ serverResolver , hostname , recordType  }) {
    return `${serverResolver}?name=${hostname}&type=${recordType}`;
}
/**
 * Use fetch to find the record.
 *
 * @param {object} resource
 * @returns {Promise}
 */ function fetch(resource) {
    return nativeFetch(resource, {
        headers: new Headers({
            accept: "application/dns-json"
        })
    });
}
/**
 * Creates cache key composed by recordType and hostname.
 *
 * @param {string} hostname
 * @param {string} recordType
 * @returns {string}
 */ function getCacheKey(hostname, recordType) {
    return `${recordType}_${hostname}`;
}
module.exports = {
    buildResource,
    fetch,
    getCacheKey
};

},{"native-fetch":"eHRxJ"}],"eHRxJ":[function(require,module,exports) {
"use strict";
if (globalThis.fetch && globalThis.Headers && globalThis.Request && globalThis.Response) module.exports = {
    default: globalThis.fetch,
    Headers: globalThis.Headers,
    Request: globalThis.Request,
    Response: globalThis.Response
};
else module.exports = {
    default: require("node-fetch").default,
    Headers: require("node-fetch").Headers,
    Request: require("node-fetch").Request,
    Response: require("node-fetch").Response
};

},{"node-fetch":"biJx9"}],"biJx9":[function(require,module,exports) {
"use strict";
// ref: https://github.com/tc39/proposal-global
var getGlobal = function() {
    // the only reliable means to get the global object is
    // `Function('return this')()`
    // However, this causes CSP violations in Chrome apps.
    if (typeof self !== "undefined") return self;
    if (typeof window !== "undefined") return window;
    if (typeof global !== "undefined") return global;
    throw new Error("unable to locate global object");
};
var global = getGlobal();
module.exports = exports = global.fetch;
// Needed for TypeScript and Webpack.
if (global.fetch) exports.default = global.fetch.bind(global);
exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

},{}],"8KiNk":[function(require,module,exports) {
"use strict";
module.exports = {
    DIAL_TIMEOUT: 30e3,
    MAX_PARALLEL_DIALS: 100,
    MAX_PER_PEER_DIALS: 4,
    MAX_ADDRS_TO_DIAL: 25,
    METRICS: {
        computeThrottleMaxQueueSize: 1000,
        computeThrottleTimeout: 2000,
        movingAverageIntervals: [
            60000,
            300000,
            900000 // 15 minutes
        ],
        maxOldPeersRetention: 50
    }
};

},{}],"bXpq8":[function(require,module,exports) {
"use strict";
// @ts-ignore file not listed within the file list of projects
const libp2pVersion = require("../../package.json").version;
module.exports.PROTOCOL_VERSION = "ipfs/0.1.0" // deprecated
;
module.exports.AGENT_VERSION = `js-libp2p/${libp2pVersion}`;
module.exports.MULTICODEC_IDENTIFY = "/ipfs/id/1.0.0" // deprecated
;
module.exports.MULTICODEC_IDENTIFY_PUSH = "/ipfs/id/push/1.0.0" // deprecated
;
module.exports.IDENTIFY_PROTOCOL_VERSION = "0.1.0";
module.exports.MULTICODEC_IDENTIFY_PROTOCOL_NAME = "id";
module.exports.MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME = "id/push";
module.exports.MULTICODEC_IDENTIFY_PROTOCOL_VERSION = "1.0.0";
module.exports.MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION = "1.0.0";

},{"../../package.json":"i9M7t"}],"i9M7t":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"libp2p","version":"0.32.5","description":"JavaScript implementation of libp2p, a modular peer to peer network stack","leadMaintainer":"Jacob Heun <jacobheun@gmail.com>","main":"src/index.js","types":"dist/src/index.d.ts","typesVersions":{"*":{"src/*":["dist/src/*","dist/src/*/index"]}},"files":["dist","src"],"scripts":{"lint":"aegir lint","build":"aegir build","build:proto":"npm run build:proto:circuit && npm run build:proto:identify && npm run build:proto:plaintext && npm run build:proto:address-book && npm run build:proto:proto-book && npm run build:proto:peer-record && npm run build:proto:envelope","build:proto:circuit":"pbjs -t static-module -w commonjs -r libp2p-circuit --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/circuit/protocol/index.js ./src/circuit/protocol/index.proto","build:proto:identify":"pbjs -t static-module -w commonjs -r libp2p-identify --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/identify/message.js ./src/identify/message.proto","build:proto:plaintext":"pbjs -t static-module -w commonjs -r libp2p-plaintext --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/insecure/proto.js ./src/insecure/proto.proto","build:proto:address-book":"pbjs -t static-module -w commonjs -r libp2p-address-book --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/peer-store/persistent/pb/address-book.js ./src/peer-store/persistent/pb/address-book.proto","build:proto:proto-book":"pbjs -t static-module -w commonjs -r libp2p-proto-book --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/peer-store/persistent/pb/proto-book.js ./src/peer-store/persistent/pb/proto-book.proto","build:proto:peer-record":"pbjs -t static-module -w commonjs -r libp2p-peer-record --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/record/peer-record/peer-record.js ./src/record/peer-record/peer-record.proto","build:proto:envelope":"pbjs -t static-module -w commonjs -r libp2p-envelope --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/record/envelope/envelope.js ./src/record/envelope/envelope.proto","build:proto-types":"npm run build:proto-types:circuit && npm run build:proto-types:identify && npm run build:proto-types:plaintext && npm run build:proto-types:address-book && npm run build:proto-types:proto-book && npm run build:proto-types:peer-record && npm run build:proto-types:envelope","build:proto-types:circuit":"pbts -o src/circuit/protocol/index.d.ts src/circuit/protocol/index.js","build:proto-types:identify":"pbts -o src/identify/message.d.ts src/identify/message.js","build:proto-types:plaintext":"pbts -o src/insecure/proto.d.ts src/insecure/proto.js","build:proto-types:address-book":"pbts -o src/peer-store/persistent/pb/address-book.d.ts src/peer-store/persistent/pb/address-book.js","build:proto-types:proto-book":"pbts -o src/peer-store/persistent/pb/proto-book.d.ts src/peer-store/persistent/pb/proto-book.js","build:proto-types:peer-record":"pbts -o src/record/peer-record/peer-record.d.ts src/record/peer-record/peer-record.js","build:proto-types:envelope":"pbts -o src/record/envelope/envelope.d.ts src/record/envelope/envelope.js","test":"aegir test","test:ts":"aegir build --no-bundle && npm run test --prefix test/ts-use","test:node":"aegir test -t node -f \\"./test/**/*.{node,spec}.js\\"","test:browser":"aegir test -t browser","test:examples":"cd examples && npm run test:all","prepare":"aegir build --no-bundle","release":"aegir release -t node -t browser","release-minor":"aegir release --type minor -t node -t browser","release-major":"aegir release --type major -t node -t browser","coverage":"nyc --reporter=text --reporter=lcov npm run test:node"},"repository":{"type":"git","url":"https://github.com/libp2p/js-libp2p.git"},"keywords":["libp2p","network","p2p","peer","peer-to-peer","IPFS"],"bugs":{"url":"https://github.com/libp2p/js-libp2p/issues"},"homepage":"https://libp2p.io","license":"MIT","engines":{"node":">=14.0.0"},"browser":{"@motrix/nat-api":false},"eslintConfig":{"extends":"ipfs","ignorePatterns":["!.aegir.js","test/ts-use"]},"dependencies":{"abortable-iterator":"^3.0.0","@motrix/nat-api":"^0.3.1","@vascosantos/moving-average":"^1.1.0","abort-controller":"^3.0.0","aggregate-error":"^3.1.0","any-signal":"^2.1.1","bignumber.js":"^9.0.1","class-is":"^1.1.0","debug":"^4.3.1","err-code":"^3.0.0","es6-promisify":"^7.0.0","events":"^3.3.0","hashlru":"^2.3.0","interface-datastore":"^5.1.1","it-all":"^1.0.4","it-buffer":"^0.1.2","it-drain":"^1.0.3","it-filter":"^1.0.1","it-first":"^1.0.4","it-handshake":"^2.0.0","it-length-prefixed":"^5.0.2","it-map":"^1.0.4","it-merge":"^1.0.0","it-pipe":"^1.1.0","it-take":"^1.0.0","libp2p-crypto":"^0.19.4","libp2p-interfaces":"^1.0.0","libp2p-utils":"^0.4.0","mafmt":"^10.0.0","merge-options":"^3.0.4","multiaddr":"^10.0.0","multiformats":"^9.0.0","multistream-select":"^2.0.0","mutable-proxy":"^1.0.0","node-forge":"^0.10.0","p-any":"^3.0.0","p-fifo":"^1.0.0","p-retry":"^4.4.0","p-settle":"^4.1.1","peer-id":"^0.15.0","private-ip":"^2.1.0","protobufjs":"^6.10.2","retimer":"^3.0.0","sanitize-filename":"^1.6.3","set-delayed-interval":"^1.0.0","streaming-iterables":"^6.0.0","timeout-abort-controller":"^1.1.1","uint8arrays":"^3.0.0","varint":"^6.0.0","wherearewe":"^1.0.0","xsalsa20":"^1.1.0"},"devDependencies":{"@chainsafe/libp2p-noise":"^4.0.0","@nodeutils/defaults-deep":"^1.1.0","@types/es6-promisify":"^6.0.0","@types/node":"^16.0.1","@types/node-forge":"^0.10.1","@types/varint":"^6.0.0","aegir":"^33.1.1","buffer":"^6.0.3","delay":"^5.0.0","interop-libp2p":"^0.4.0","into-stream":"^7.0.0","ipfs-http-client":"^52.0.2","it-concat":"^2.0.0","it-pair":"^1.0.0","it-pushable":"^1.4.0","libp2p":".","libp2p-bootstrap":"^0.13.0","libp2p-delegated-content-routing":"^0.11.0","libp2p-delegated-peer-routing":"^0.10.0","libp2p-floodsub":"^0.27.0","libp2p-gossipsub":"^0.11.0","libp2p-interfaces-compliance-tests":"^1.0.0","libp2p-kad-dht":"^0.24.2","libp2p-mdns":"^0.17.0","libp2p-mplex":"^0.10.1","libp2p-tcp":"^0.17.0","libp2p-webrtc-star":"^0.23.0","libp2p-websockets":"^0.16.0","nock":"^13.0.3","p-defer":"^3.0.0","p-times":"^3.0.0","p-wait-for":"^3.2.0","rimraf":"^3.0.2","sinon":"^11.1.1","util":"^0.12.3"},"contributors":["Vasco Santos <vasco.santos@moxy.studio>","David Dias <daviddias.p@gmail.com>","Jacob Heun <jacobheun@gmail.com>","Alex Potsides <alex@achingbrain.net>","Alan Shaw <alan@tableflip.io>","Cayman <caymannava@gmail.com>","Pedro Teixeira <i@pgte.me>","Friedel Ziegelmayer <dignifiedquire@gmail.com>","Maciej Kr\xfcger <mkg20001@gmail.com>","Hugo Dias <mail@hugodias.me>","Chris Dostert <chrisdostert@users.noreply.github.com>","dirkmc <dirkmdev@gmail.com>","Volker Mische <volker.mische@gmail.com>","zeim839 <50573884+zeim839@users.noreply.github.com>","Richard Littauer <richard.littauer@gmail.com>","a1300 <matthias-knopp@gmx.net>","Ryan Bell <ryan@piing.net>","\u1D20\u026A\u1D04\u1D1B\u1D0F\u0280 \u0299\u1D0A\u1D07\u029F\u1D0B\u029C\u1D0F\u029F\u1D0D <victorbjelkholm@gmail.com>","Franck Royer <franck@royer.one>","Thomas Eizinger <thomas@eizinger.io>","Giovanni T. Parra <fiatjaf@gmail.com>","acolytec3 <17355484+acolytec3@users.noreply.github.com>","Elven <mon.samuel@qq.com>","Andrew Nesbitt <andrewnez@gmail.com>","Samlior <samlior@foxmail.com>","Didrik Nordstr\xf6m <didrik.nordstrom@gmail.com>","RasmusErik Voel Jensen <github@solsort.com>","Robert Kiel <robert.kiel@hoprnet.org>","Smite Chow <xiaopengyou@live.com>","Soeren <nikorpoulsen@gmail.com>","S\xf6nke Hahn <soenkehahn@gmail.com>","TJKoury <TJKoury@gmail.com>","Tiago Alves <alvesjtiago@gmail.com>","XiaoZhang <zxinmyth@gmail.com>","Yusef Napora <yusef@napora.org>","Zane Starr <zcstarr@gmail.com>","ebinks <elizabethjbinks@gmail.com>","Aditya Bose <13054902+adbose@users.noreply.github.com>","isan_rivkin <isanrivkin@gmail.com>","mayerwin <mayerwin@users.noreply.github.com>","mcclure <andi.m.mcclure@gmail.com>","phillmac <phillmac@users.noreply.github.com>","robertkiel <robert.kiel@validitylabs.org>","shresthagrawal <34920931+shresthagrawal@users.noreply.github.com>","swedneck <40505480+swedneck@users.noreply.github.com>","greenSnot <greenSnot@users.noreply.github.com>","Aleksei <vozhdb@gmail.com>","Bernd Strehl <bernd.strehl@gmail.com>","Chris Bratlien <chrisbratlien@gmail.com>","Cindy Wu <ciindy.wu@gmail.com>","Daijiro Wachi <daijiro.wachi@gmail.com>","Diogo Silva <fsdiogo@gmail.com>","Dmitriy Ryajov <dryajov@gmail.com>","Ethan Lam <elmemphis2000@gmail.com>","Fei Liu <liu.feiwood@gmail.com>","Felipe Martins <felipebrasil93@gmail.com>","Florian-Merle <florian.david.merle@gmail.com>","Francis Gulotta <wizard@roborooter.com>","Guy Sviry <32539816+guysv@users.noreply.github.com>","Henrique Dias <hacdias@gmail.com>","Irakli Gozalishvili <rfobic@gmail.com>","Joel Gustafson <joelg@mit.edu>","John Rees <johnrees@users.noreply.github.com>","Jo\xe3o Santos <joaosantos15@users.noreply.github.com>","Julien Bouquillon <contact@revolunet.com>","Kevin Kwok <antimatter15@gmail.com>","Kevin Lacker <lacker@gmail.com>","Lars Gierth <lgierth@users.noreply.github.com>","Leask Wong <i@leaskh.com>","Marcin Tojek <mtojek@users.noreply.github.com>","Michael Burns <5170+mburns@users.noreply.github.com>","Miguel Mota <miguelmota2@gmail.com>","Nuno Nogueira <nunofmn@gmail.com>","Philipp Muens <raute1337@gmx.de>"]}');

},{}],"3qN8b":[function(require,module,exports) {
"use strict";
const minute = 60000;
module.exports = {
    ADVERTISE_BOOT_DELAY: 15 * minute,
    ADVERTISE_TTL: 30 * minute,
    CIRCUIT_PROTO_CODE: 290,
    HOP_METADATA_KEY: "hop_relay",
    HOP_METADATA_VALUE: "true",
    RELAY_RENDEZVOUS_NS: "/libp2p/relay" // Relay HOP relay service namespace for discovery
};

},{}],"fdxjB":[function(require,module,exports) {
"use strict";
const isPrivate = require("./multiaddr/is-private");
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * @typedef {Object} Address
 * @property {Multiaddr} multiaddr peer multiaddr.
 * @property {boolean} isCertified obtained from a signed peer record.
 */ /**
 * Compare function for array.sort().
 * This sort aims to move the private adresses to the end of the array.
 * In case of equality, a certified address will come first.
 *
 * @param {Address} a
 * @param {Address} b
 * @returns {number}
 */ function addressesPublicFirstCompareFunction(a, b) {
    const isAPrivate = isPrivate(a.multiaddr);
    const isBPrivate = isPrivate(b.multiaddr);
    if (isAPrivate && !isBPrivate) return 1;
    else if (!isAPrivate && isBPrivate) return -1;
    // Check certified?
    if (a.isCertified && !b.isCertified) return -1;
    else if (!a.isCertified && b.isCertified) return 1;
    return 0;
}
/**
 * Sort given addresses by putting public addresses first.
 * In case of equality, a certified address will come first.
 *
 * @param {Array<Address>} addresses
 * @returns {Array<Address>}
 */ function publicAddressesFirst(addresses) {
    return [
        ...addresses
    ].sort(addressesPublicFirstCompareFunction);
}
module.exports.publicAddressesFirst = publicAddressesFirst;

},{"./multiaddr/is-private":"lXPNt"}],"lXPNt":[function(require,module,exports) {
"use strict";
// @ts-ignore private-ip does not publish types
const isIpPrivate = require("private-ip");
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * Check if a given multiaddr has a private address.
 *
 * @param {Multiaddr} ma
 * @returns {boolean}
 */ function isPrivate(ma) {
    const { address  } = ma.nodeAddress();
    return isIpPrivate(address);
}
module.exports = isPrivate;

},{"private-ip":"5LQv4"}],"5LQv4":[function(require,module,exports) {
"use strict";
module.exports = require("./lib").default;

},{"./lib":"5p5H7"}],"5p5H7":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const netmask_1 = require("netmask");
const ip_regex_1 = __importDefault(require("ip-regex"));
const is_ip_1 = __importDefault(require("is-ip"));
const ipaddr_js_1 = require("ipaddr.js");
const PRIVATE_IP_RANGES = [
    "0.0.0.0/8",
    "10.0.0.0/8",
    "100.64.0.0/10",
    "127.0.0.0/8",
    "169.254.0.0/16",
    "172.16.0.0/12",
    "192.0.0.0/24",
    "192.0.0.0/29",
    "192.0.0.8/32",
    "192.0.0.9/32",
    "192.0.0.10/32",
    "192.0.0.170/32",
    "192.0.0.171/32",
    "192.0.2.0/24",
    "192.31.196.0/24",
    "192.52.193.0/24",
    "192.88.99.0/24",
    "192.168.0.0/16",
    "192.175.48.0/24",
    "198.18.0.0/15",
    "198.51.100.0/24",
    "203.0.113.0/24",
    "240.0.0.0/4",
    "255.255.255.255/32"
];
const NETMASK_RANGES = PRIVATE_IP_RANGES.map((ip_range)=>new netmask_1.Netmask(ip_range));
function ipv4_check(ip_addr) {
    for (let r of NETMASK_RANGES){
        if (r.contains(ip_addr)) return true;
    }
    return false;
}
function ipv6_check(ip_addr) {
    return /^::$/.test(ip_addr) || /^::1$/.test(ip_addr) || /^::f{4}:([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) || /^::f{4}:0.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) || /^64:ff9b::([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) || /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) || /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) || /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr);
}
exports.default = (ip)=>{
    if (ipaddr_js_1.isValid(ip)) {
        const parsed = ipaddr_js_1.parse(ip);
        if (parsed.kind() === "ipv4") return ipv4_check(parsed.toNormalizedString());
        else if (parsed.kind() === "ipv6") return ipv6_check(ip);
    } else if (is_ip_1.default(ip) && ip_regex_1.default.v6().test(ip)) return ipv6_check(ip);
    return undefined;
};

},{"netmask":"am2bo","ip-regex":"atjxC","is-ip":"026DS","ipaddr.js":"3Kog8"}],"am2bo":[function(require,module,exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    var Netmask1, atob, chr, chr0, chrA, chra, ip2long, long2ip;
    long2ip = function(long) {
        var a, b, c, d;
        a = (long & -16777216) >>> 24;
        b = (long & 16711680) >>> 16;
        c = (long & 65280) >>> 8;
        d = long & 0xff;
        return [
            a,
            b,
            c,
            d
        ].join(".");
    };
    ip2long = function(ip) {
        var b, c, i, j, n, ref;
        b = [];
        for(i = j = 0; j <= 3; i = ++j){
            if (ip.length === 0) break;
            if (i > 0) {
                if (ip[0] !== ".") throw new Error("Invalid IP");
                ip = ip.substring(1);
            }
            ref = atob(ip), n = ref[0], c = ref[1];
            ip = ip.substring(c);
            b.push(n);
        }
        if (ip.length !== 0) throw new Error("Invalid IP");
        switch(b.length){
            case 1:
                if (b[0] > 0xFFFFFFFF) throw new Error("Invalid IP");
                return b[0] >>> 0;
            case 2:
                if (b[0] > 0xFF || b[1] > 0xFFFFFF) throw new Error("Invalid IP");
                return (b[0] << 24 | b[1]) >>> 0;
            case 3:
                if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFFFF) throw new Error("Invalid IP");
                return (b[0] << 24 | b[1] << 16 | b[2]) >>> 0;
            case 4:
                if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFF || b[3] > 0xFF) throw new Error("Invalid IP");
                return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0;
            default:
                throw new Error("Invalid IP");
        }
    };
    chr = function(b) {
        return b.charCodeAt(0);
    };
    chr0 = chr("0");
    chra = chr("a");
    chrA = chr("A");
    atob = function(s) {
        var base, dmax, i, n, start;
        n = 0;
        base = 10;
        dmax = "9";
        i = 0;
        if (s.length > 1 && s[i] === "0") {
            if (s[i + 1] === "x" || s[i + 1] === "X") {
                i += 2;
                base = 16;
            } else if ("0" <= s[i + 1] && s[i + 1] <= "9") {
                i++;
                base = 8;
                dmax = "7";
            }
        }
        start = i;
        while(i < s.length){
            if ("0" <= s[i] && s[i] <= dmax) n = n * base + (chr(s[i]) - chr0) >>> 0;
            else if (base === 16) {
                if ("a" <= s[i] && s[i] <= "f") n = n * base + (10 + chr(s[i]) - chra) >>> 0;
                else if ("A" <= s[i] && s[i] <= "F") n = n * base + (10 + chr(s[i]) - chrA) >>> 0;
                else break;
            } else break;
            if (n > 0xFFFFFFFF) throw new Error("too large");
            i++;
        }
        if (i === start) throw new Error("empty octet");
        return [
            n,
            i
        ];
    };
    Netmask1 = function() {
        function Netmask(net, mask) {
            var error, i, j, ref;
            if (typeof net !== "string") throw new Error("Missing `net' parameter");
            if (!mask) ref = net.split("/", 2), net = ref[0], mask = ref[1];
            if (!mask) mask = 32;
            if (typeof mask === "string" && mask.indexOf(".") > -1) {
                try {
                    this.maskLong = ip2long(mask);
                } catch (error1) {
                    error = error1;
                    throw new Error("Invalid mask: " + mask);
                }
                for(i = j = 32; j >= 0; i = --j)if (this.maskLong === 0xffffffff << 32 - i >>> 0) {
                    this.bitmask = i;
                    break;
                }
            } else if (mask || mask === 0) {
                this.bitmask = parseInt(mask, 10);
                this.maskLong = 0;
                if (this.bitmask > 0) this.maskLong = 0xffffffff << 32 - this.bitmask >>> 0;
            } else throw new Error("Invalid mask: empty");
            try {
                this.netLong = (ip2long(net) & this.maskLong) >>> 0;
            } catch (error1) {
                error = error1;
                throw new Error("Invalid net address: " + net);
            }
            if (!(this.bitmask <= 32)) throw new Error("Invalid mask for ip4: " + mask);
            this.size = Math.pow(2, 32 - this.bitmask);
            this.base = long2ip(this.netLong);
            this.mask = long2ip(this.maskLong);
            this.hostmask = long2ip(~this.maskLong);
            this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;
            this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);
            this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;
        }
        Netmask.prototype.contains = function(ip) {
            if (typeof ip === "string" && (ip.indexOf("/") > 0 || ip.split(".").length !== 4)) ip = new Netmask(ip);
            if (ip instanceof Netmask) return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);
            else return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;
        };
        Netmask.prototype.next = function(count) {
            if (count == null) count = 1;
            return new Netmask(long2ip(this.netLong + this.size * count), this.mask);
        };
        Netmask.prototype.forEach = function(fn) {
            var index, lastLong, long;
            long = ip2long(this.first);
            lastLong = ip2long(this.last);
            index = 0;
            while(long <= lastLong){
                fn(long2ip(long), long, index);
                index++;
                long++;
            }
        };
        Netmask.prototype.toString = function() {
            return this.base + "/" + this.bitmask;
        };
        return Netmask;
    }();
    exports.ip2long = ip2long;
    exports.long2ip = long2ip;
    exports.Netmask = Netmask1;
}).call(this);

},{}],"3Kog8":[function(require,module,exports) {
(function(root) {
    "use strict";
    // A list of regular expressions that match arbitrary IPv4 addresses,
    // for which a number of weird notations exist.
    // Note that an address like 0010.0xa5.1.1 is considered legal.
    const ipv4Part = "(0?\\d+|0x[a-f0-9]+)";
    const ipv4Regexes = {
        fourOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}$`, "i"),
        threeOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}$`, "i"),
        twoOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}$`, "i"),
        longValue: new RegExp(`^${ipv4Part}$`, "i")
    };
    // Regular Expression for checking Octal numbers
    const octalRegex = new RegExp(`^0[0-7]+$`, "i");
    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, "i");
    const zoneIndex = "%[0-9a-z]{1,}";
    // IPv6-matching regular expressions.
    // For IPv6, the task is simpler: it is enough to match the colon-delimited
    // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at
    // the end.
    const ipv6Part = "(?:[0-9a-f]+::?)+";
    const ipv6Regexes = {
        zoneIndex: new RegExp(zoneIndex, "i"),
        "native": new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, "i"),
        deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}(${zoneIndex})?)$`, "i"),
        transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}(${zoneIndex})?$`, "i")
    };
    // Expand :: in an IPv6 address or address part consisting of `parts` groups.
    function expandIPv6(string, parts) {
        // More than one '::' means invalid adddress
        if (string.indexOf("::") !== string.lastIndexOf("::")) return null;
        let colonCount = 0;
        let lastColon = -1;
        let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];
        let replacement, replacementCount;
        // Remove zone index and save it for later
        if (zoneId) {
            zoneId = zoneId.substring(1);
            string = string.replace(/%.+$/, "");
        }
        // How many parts do we already have?
        while((lastColon = string.indexOf(":", lastColon + 1)) >= 0)colonCount++;
        // 0::0 is two parts more than ::
        if (string.substr(0, 2) === "::") colonCount--;
        if (string.substr(-2, 2) === "::") colonCount--;
        // The following loop would hang if colonCount > parts
        if (colonCount > parts) return null;
        // replacement = ':' + '0:' * (parts - colonCount)
        replacementCount = parts - colonCount;
        replacement = ":";
        while(replacementCount--)replacement += "0:";
        // Insert the missing zeroes
        string = string.replace("::", replacement);
        // Trim any garbage which may be hanging around if :: was at the edge in
        // the source strin
        if (string[0] === ":") string = string.slice(1);
        if (string[string.length - 1] === ":") string = string.slice(0, -1);
        parts = function() {
            const ref = string.split(":");
            const results = [];
            for(let i = 0; i < ref.length; i++)results.push(parseInt(ref[i], 16));
            return results;
        }();
        return {
            parts: parts,
            zoneId: zoneId
        };
    }
    // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.
    function matchCIDR(first, second, partSize, cidrBits) {
        if (first.length !== second.length) throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
        let part = 0;
        let shift;
        while(cidrBits > 0){
            shift = partSize - cidrBits;
            if (shift < 0) shift = 0;
            if (first[part] >> shift !== second[part] >> shift) return false;
            cidrBits -= partSize;
            part += 1;
        }
        return true;
    }
    function parseIntAuto(string) {
        // Hexadedimal base 16 (0x#)
        if (hexRegex.test(string)) return parseInt(string, 16);
        // While octal representation is discouraged by ECMAScript 3
        // and forbidden by ECMAScript 5, we silently allow it to
        // work only if the rest of the string has numbers less than 8.
        if (string[0] === "0" && !isNaN(parseInt(string[1], 10))) {
            if (octalRegex.test(string)) return parseInt(string, 8);
            throw new Error(`ipaddr: cannot parse ${string} as octal`);
        }
        // Always include the base 10 radix!
        return parseInt(string, 10);
    }
    function padPart(part, length) {
        while(part.length < length)part = `0${part}`;
        return part;
    }
    const ipaddr = {};
    // An IPv4 address (RFC791).
    ipaddr.IPv4 = function() {
        // Constructs a new IPv4 address from an array of four octets
        // in network order (MSB first)
        // Verifies the input.
        function IPv4(octets) {
            if (octets.length !== 4) throw new Error("ipaddr: ipv4 octet count should be 4");
            let i, octet;
            for(i = 0; i < octets.length; i++){
                octet = octets[i];
                if (!(0 <= octet && octet <= 255)) throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
            }
            this.octets = octets;
        }
        // Special IPv4 address ranges.
        // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses
        IPv4.prototype.SpecialRanges = {
            unspecified: [
                [
                    new IPv4([
                        0,
                        0,
                        0,
                        0
                    ]),
                    8
                ]
            ],
            broadcast: [
                [
                    new IPv4([
                        255,
                        255,
                        255,
                        255
                    ]),
                    32
                ]
            ],
            // RFC3171
            multicast: [
                [
                    new IPv4([
                        224,
                        0,
                        0,
                        0
                    ]),
                    4
                ]
            ],
            // RFC3927
            linkLocal: [
                [
                    new IPv4([
                        169,
                        254,
                        0,
                        0
                    ]),
                    16
                ]
            ],
            // RFC5735
            loopback: [
                [
                    new IPv4([
                        127,
                        0,
                        0,
                        0
                    ]),
                    8
                ]
            ],
            // RFC6598
            carrierGradeNat: [
                [
                    new IPv4([
                        100,
                        64,
                        0,
                        0
                    ]),
                    10
                ]
            ],
            // RFC1918
            "private": [
                [
                    new IPv4([
                        10,
                        0,
                        0,
                        0
                    ]),
                    8
                ],
                [
                    new IPv4([
                        172,
                        16,
                        0,
                        0
                    ]),
                    12
                ],
                [
                    new IPv4([
                        192,
                        168,
                        0,
                        0
                    ]),
                    16
                ]
            ],
            // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700
            reserved: [
                [
                    new IPv4([
                        192,
                        0,
                        0,
                        0
                    ]),
                    24
                ],
                [
                    new IPv4([
                        192,
                        0,
                        2,
                        0
                    ]),
                    24
                ],
                [
                    new IPv4([
                        192,
                        88,
                        99,
                        0
                    ]),
                    24
                ],
                [
                    new IPv4([
                        198,
                        51,
                        100,
                        0
                    ]),
                    24
                ],
                [
                    new IPv4([
                        203,
                        0,
                        113,
                        0
                    ]),
                    24
                ],
                [
                    new IPv4([
                        240,
                        0,
                        0,
                        0
                    ]),
                    4
                ]
            ]
        };
        // The 'kind' method exists on both IPv4 and IPv6 classes.
        IPv4.prototype.kind = function() {
            return "ipv4";
        };
        // Checks if this address matches other one within given CIDR range.
        IPv4.prototype.match = function(other, cidrRange) {
            let ref;
            if (cidrRange === undefined) {
                ref = other;
                other = ref[0];
                cidrRange = ref[1];
            }
            if (other.kind() !== "ipv4") throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
            return matchCIDR(this.octets, other.octets, 8, cidrRange);
        };
        // returns a number of leading ones in IPv4 address, making sure that
        // the rest is a solid sequence of 0's (valid netmask)
        // returns either the CIDR length or null if mask is not valid
        IPv4.prototype.prefixLengthFromSubnetMask = function() {
            let cidr = 0;
            // non-zero encountered stop scanning for zeroes
            let stop = false;
            // number of zeroes in octet
            const zerotable = {
                0: 8,
                128: 7,
                192: 6,
                224: 5,
                240: 4,
                248: 3,
                252: 2,
                254: 1,
                255: 0
            };
            let i, octet, zeros;
            for(i = 3; i >= 0; i -= 1){
                octet = this.octets[i];
                if (octet in zerotable) {
                    zeros = zerotable[octet];
                    if (stop && zeros !== 0) return null;
                    if (zeros !== 8) stop = true;
                    cidr += zeros;
                } else return null;
            }
            return 32 - cidr;
        };
        // Checks if the address corresponds to one of the special ranges.
        IPv4.prototype.range = function() {
            return ipaddr.subnetMatch(this, this.SpecialRanges);
        };
        // Returns an array of byte-sized values in network order (MSB first)
        IPv4.prototype.toByteArray = function() {
            return this.octets.slice(0);
        };
        // Converts this IPv4 address to an IPv4-mapped IPv6 address.
        IPv4.prototype.toIPv4MappedAddress = function() {
            return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);
        };
        // Symmetrical method strictly for aligning with the IPv6 methods.
        IPv4.prototype.toNormalizedString = function() {
            return this.toString();
        };
        // Returns the address in convenient, decimal-dotted format.
        IPv4.prototype.toString = function() {
            return this.octets.join(".");
        };
        return IPv4;
    }();
    // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation
    ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
        try {
            const cidr = this.parseCIDR(string);
            const ipInterfaceOctets = cidr[0].toByteArray();
            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
            const octets = [];
            let i = 0;
            while(i < 4){
                // Broadcast address is bitwise OR between ip interface and inverted mask
                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
                i++;
            }
            return new this(octets);
        } catch (e) {
            throw new Error("ipaddr: the address does not have IPv4 CIDR format");
        }
    };
    // Checks if a given string is formatted like IPv4 address.
    ipaddr.IPv4.isIPv4 = function(string) {
        return this.parser(string) !== null;
    };
    // Checks if a given string is a valid IPv4 address.
    ipaddr.IPv4.isValid = function(string) {
        try {
            new this(this.parser(string));
            return true;
        } catch (e) {
            return false;
        }
    };
    // Checks if a given string is a full four-part IPv4 Address.
    ipaddr.IPv4.isValidFourPartDecimal = function(string) {
        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) return true;
        else return false;
    };
    // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation
    ipaddr.IPv4.networkAddressFromCIDR = function(string) {
        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
        try {
            cidr = this.parseCIDR(string);
            ipInterfaceOctets = cidr[0].toByteArray();
            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
            octets = [];
            i = 0;
            while(i < 4){
                // Network address is bitwise AND between ip interface and mask
                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
                i++;
            }
            return new this(octets);
        } catch (e) {
            throw new Error("ipaddr: the address does not have IPv4 CIDR format");
        }
    };
    // Tries to parse and validate a string with IPv4 address.
    // Throws an error if it fails.
    ipaddr.IPv4.parse = function(string) {
        const parts = this.parser(string);
        if (parts === null) throw new Error("ipaddr: string is not formatted like an IPv4 Address");
        return new this(parts);
    };
    // Parses the string as an IPv4 Address with CIDR Notation.
    ipaddr.IPv4.parseCIDR = function(string) {
        let match;
        if (match = string.match(/^(.+)\/(\d+)$/)) {
            const maskLength = parseInt(match[2]);
            if (maskLength >= 0 && maskLength <= 32) {
                const parsed = [
                    this.parse(match[1]),
                    maskLength
                ];
                Object.defineProperty(parsed, "toString", {
                    value: function() {
                        return this.join("/");
                    }
                });
                return parsed;
            }
        }
        throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
    };
    // Classful variants (like a.b, where a is an octet, and b is a 24-bit
    // value representing last three octets; this corresponds to a class C
    // address) are omitted due to classless nature of modern Internet.
    ipaddr.IPv4.parser = function(string) {
        let match, part, value;
        // parseInt recognizes all that octal & hexadecimal weirdness for us
        if (match = string.match(ipv4Regexes.fourOctet)) return function() {
            const ref = match.slice(1, 6);
            const results = [];
            for(let i = 0; i < ref.length; i++){
                part = ref[i];
                results.push(parseIntAuto(part));
            }
            return results;
        }();
        else if (match = string.match(ipv4Regexes.longValue)) {
            value = parseIntAuto(match[1]);
            if (value > 0xffffffff || value < 0) throw new Error("ipaddr: address outside defined range");
            return (function() {
                const results = [];
                let shift;
                for(shift = 0; shift <= 24; shift += 8)results.push(value >> shift & 0xff);
                return results;
            })().reverse();
        } else if (match = string.match(ipv4Regexes.twoOctet)) return function() {
            const ref = match.slice(1, 4);
            const results = [];
            value = parseIntAuto(ref[1]);
            if (value > 0xffffff || value < 0) throw new Error("ipaddr: address outside defined range");
            results.push(parseIntAuto(ref[0]));
            results.push(value >> 16 & 0xff);
            results.push(value >> 8 & 0xff);
            results.push(value & 0xff);
            return results;
        }();
        else if (match = string.match(ipv4Regexes.threeOctet)) return function() {
            const ref = match.slice(1, 5);
            const results = [];
            value = parseIntAuto(ref[2]);
            if (value > 0xffff || value < 0) throw new Error("ipaddr: address outside defined range");
            results.push(parseIntAuto(ref[0]));
            results.push(parseIntAuto(ref[1]));
            results.push(value >> 8 & 0xff);
            results.push(value & 0xff);
            return results;
        }();
        else return null;
    };
    // A utility function to return subnet mask in IPv4 format given the prefix length
    ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
        prefix = parseInt(prefix);
        if (prefix < 0 || prefix > 32) throw new Error("ipaddr: invalid IPv4 prefix length");
        const octets = [
            0,
            0,
            0,
            0
        ];
        let j = 0;
        const filledOctetCount = Math.floor(prefix / 8);
        while(j < filledOctetCount){
            octets[j] = 255;
            j++;
        }
        if (filledOctetCount < 4) octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
        return new this(octets);
    };
    // An IPv6 address (RFC2460)
    ipaddr.IPv6 = function() {
        // Constructs an IPv6 address from an array of eight 16 - bit parts
        // or sixteen 8 - bit parts in network order(MSB first).
        // Throws an error if the input is invalid.
        function IPv6(parts, zoneId) {
            let i, part;
            if (parts.length === 16) {
                this.parts = [];
                for(i = 0; i <= 14; i += 2)this.parts.push(parts[i] << 8 | parts[i + 1]);
            } else if (parts.length === 8) this.parts = parts;
            else throw new Error("ipaddr: ipv6 part count should be 8 or 16");
            for(i = 0; i < this.parts.length; i++){
                part = this.parts[i];
                if (!(0 <= part && part <= 0xffff)) throw new Error("ipaddr: ipv6 part should fit in 16 bits");
            }
            if (zoneId) this.zoneId = zoneId;
        }
        // Special IPv6 ranges
        IPv6.prototype.SpecialRanges = {
            // RFC4291, here and after
            unspecified: [
                new IPv6([
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]),
                128
            ],
            linkLocal: [
                new IPv6([
                    0xfe80,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]),
                10
            ],
            multicast: [
                new IPv6([
                    0xff00,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]),
                8
            ],
            loopback: [
                new IPv6([
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                ]),
                128
            ],
            uniqueLocal: [
                new IPv6([
                    0xfc00,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]),
                7
            ],
            ipv4Mapped: [
                new IPv6([
                    0,
                    0,
                    0,
                    0,
                    0,
                    0xffff,
                    0,
                    0
                ]),
                96
            ],
            // RFC6145
            rfc6145: [
                new IPv6([
                    0,
                    0,
                    0,
                    0,
                    0xffff,
                    0,
                    0,
                    0
                ]),
                96
            ],
            // RFC6052
            rfc6052: [
                new IPv6([
                    0x64,
                    0xff9b,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]),
                96
            ],
            // RFC3056
            "6to4": [
                new IPv6([
                    0x2002,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]),
                16
            ],
            // RFC6052, RFC6146
            teredo: [
                new IPv6([
                    0x2001,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]),
                32
            ],
            // RFC4291
            reserved: [
                [
                    new IPv6([
                        0x2001,
                        0xdb8,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]),
                    32
                ]
            ]
        };
        // Checks if this address is an IPv4-mapped IPv6 address.
        IPv6.prototype.isIPv4MappedAddress = function() {
            return this.range() === "ipv4Mapped";
        };
        // The 'kind' method exists on both IPv4 and IPv6 classes.
        IPv6.prototype.kind = function() {
            return "ipv6";
        };
        // Checks if this address matches other one within given CIDR range.
        IPv6.prototype.match = function(other, cidrRange) {
            let ref;
            if (cidrRange === undefined) {
                ref = other;
                other = ref[0];
                cidrRange = ref[1];
            }
            if (other.kind() !== "ipv6") throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
            return matchCIDR(this.parts, other.parts, 16, cidrRange);
        };
        // returns a number of leading ones in IPv6 address, making sure that
        // the rest is a solid sequence of 0's (valid netmask)
        // returns either the CIDR length or null if mask is not valid
        IPv6.prototype.prefixLengthFromSubnetMask = function() {
            let cidr = 0;
            // non-zero encountered stop scanning for zeroes
            let stop = false;
            // number of zeroes in octet
            const zerotable = {
                0: 16,
                32768: 15,
                49152: 14,
                57344: 13,
                61440: 12,
                63488: 11,
                64512: 10,
                65024: 9,
                65280: 8,
                65408: 7,
                65472: 6,
                65504: 5,
                65520: 4,
                65528: 3,
                65532: 2,
                65534: 1,
                65535: 0
            };
            let part, zeros;
            for(let i = 7; i >= 0; i -= 1){
                part = this.parts[i];
                if (part in zerotable) {
                    zeros = zerotable[part];
                    if (stop && zeros !== 0) return null;
                    if (zeros !== 16) stop = true;
                    cidr += zeros;
                } else return null;
            }
            return 128 - cidr;
        };
        // Checks if the address corresponds to one of the special ranges.
        IPv6.prototype.range = function() {
            return ipaddr.subnetMatch(this, this.SpecialRanges);
        };
        // Returns an array of byte-sized values in network order (MSB first)
        IPv6.prototype.toByteArray = function() {
            let part;
            const bytes = [];
            const ref = this.parts;
            for(let i = 0; i < ref.length; i++){
                part = ref[i];
                bytes.push(part >> 8);
                bytes.push(part & 0xff);
            }
            return bytes;
        };
        // Returns the address in expanded format with all zeroes included, like
        // 2001:0db8:0008:0066:0000:0000:0000:0001
        IPv6.prototype.toFixedLengthString = function() {
            const addr = (function() {
                const results = [];
                for(let i = 0; i < this.parts.length; i++)results.push(padPart(this.parts[i].toString(16), 4));
                return results;
            }).call(this).join(":");
            let suffix = "";
            if (this.zoneId) suffix = `%${this.zoneId}`;
            return addr + suffix;
        };
        // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.
        // Throws an error otherwise.
        IPv6.prototype.toIPv4Address = function() {
            if (!this.isIPv4MappedAddress()) throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
            const ref = this.parts.slice(-2);
            const high = ref[0];
            const low = ref[1];
            return new ipaddr.IPv4([
                high >> 8,
                high & 0xff,
                low >> 8,
                low & 0xff
            ]);
        };
        // Returns the address in expanded format with all zeroes included, like
        // 2001:db8:8:66:0:0:0:1
        //
        // Deprecated: use toFixedLengthString() instead.
        IPv6.prototype.toNormalizedString = function() {
            const addr = (function() {
                const results = [];
                for(let i = 0; i < this.parts.length; i++)results.push(this.parts[i].toString(16));
                return results;
            }).call(this).join(":");
            let suffix = "";
            if (this.zoneId) suffix = `%${this.zoneId}`;
            return addr + suffix;
        };
        // Returns the address in compact, human-readable format like
        // 2001:db8:8:66::1
        // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)
        IPv6.prototype.toRFC5952String = function() {
            const regex = /((^|:)(0(:|$)){2,})/g;
            const string = this.toNormalizedString();
            let bestMatchIndex = 0;
            let bestMatchLength = -1;
            let match;
            while(match = regex.exec(string))if (match[0].length > bestMatchLength) {
                bestMatchIndex = match.index;
                bestMatchLength = match[0].length;
            }
            if (bestMatchLength < 0) return string;
            return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;
        };
        // Returns the address in compact, human-readable format like
        // 2001:db8:8:66::1
        //
        // Deprecated: use toRFC5952String() instead.
        IPv6.prototype.toString = function() {
            // Replace the first sequence of 1 or more '0' parts with '::'
            return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, "::");
        };
        return IPv6;
    }();
    // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation
    ipaddr.IPv6.broadcastAddressFromCIDR = function(string) {
        try {
            const cidr = this.parseCIDR(string);
            const ipInterfaceOctets = cidr[0].toByteArray();
            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
            const octets = [];
            let i = 0;
            while(i < 16){
                // Broadcast address is bitwise OR between ip interface and inverted mask
                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
                i++;
            }
            return new this(octets);
        } catch (e) {
            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);
        }
    };
    // Checks if a given string is formatted like IPv6 address.
    ipaddr.IPv6.isIPv6 = function(string) {
        return this.parser(string) !== null;
    };
    // Checks to see if string is a valid IPv6 Address
    ipaddr.IPv6.isValid = function(string) {
        // Since IPv6.isValid is always called first, this shortcut
        // provides a substantial performance gain.
        if (typeof string === "string" && string.indexOf(":") === -1) return false;
        try {
            const addr = this.parser(string);
            new this(addr.parts, addr.zoneId);
            return true;
        } catch (e) {
            return false;
        }
    };
    // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation
    ipaddr.IPv6.networkAddressFromCIDR = function(string) {
        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
        try {
            cidr = this.parseCIDR(string);
            ipInterfaceOctets = cidr[0].toByteArray();
            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
            octets = [];
            i = 0;
            while(i < 16){
                // Network address is bitwise AND between ip interface and mask
                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
                i++;
            }
            return new this(octets);
        } catch (e) {
            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);
        }
    };
    // Tries to parse and validate a string with IPv6 address.
    // Throws an error if it fails.
    ipaddr.IPv6.parse = function(string) {
        const addr = this.parser(string);
        if (addr.parts === null) throw new Error("ipaddr: string is not formatted like an IPv6 Address");
        return new this(addr.parts, addr.zoneId);
    };
    ipaddr.IPv6.parseCIDR = function(string) {
        let maskLength, match, parsed;
        if (match = string.match(/^(.+)\/(\d+)$/)) {
            maskLength = parseInt(match[2]);
            if (maskLength >= 0 && maskLength <= 128) {
                parsed = [
                    this.parse(match[1]),
                    maskLength
                ];
                Object.defineProperty(parsed, "toString", {
                    value: function() {
                        return this.join("/");
                    }
                });
                return parsed;
            }
        }
        throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
    };
    // Parse an IPv6 address.
    ipaddr.IPv6.parser = function(string) {
        let addr, i, match, octet, octets, zoneId;
        if (match = string.match(ipv6Regexes.deprecatedTransitional)) return this.parser(`::ffff:${match[1]}`);
        if (ipv6Regexes.native.test(string)) return expandIPv6(string, 8);
        if (match = string.match(ipv6Regexes.transitional)) {
            zoneId = match[6] || "";
            addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
            if (addr.parts) {
                octets = [
                    parseInt(match[2]),
                    parseInt(match[3]),
                    parseInt(match[4]),
                    parseInt(match[5])
                ];
                for(i = 0; i < octets.length; i++){
                    octet = octets[i];
                    if (!(0 <= octet && octet <= 255)) return null;
                }
                addr.parts.push(octets[0] << 8 | octets[1]);
                addr.parts.push(octets[2] << 8 | octets[3]);
                return {
                    parts: addr.parts,
                    zoneId: addr.zoneId
                };
            }
        }
        return null;
    };
    // A utility function to return subnet mask in IPv6 format given the prefix length
    ipaddr.IPv6.subnetMaskFromPrefixLength = function(prefix) {
        prefix = parseInt(prefix);
        if (prefix < 0 || prefix > 128) throw new Error("ipaddr: invalid IPv6 prefix length");
        const octets = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ];
        let j = 0;
        const filledOctetCount = Math.floor(prefix / 8);
        while(j < filledOctetCount){
            octets[j] = 255;
            j++;
        }
        if (filledOctetCount < 16) octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
        return new this(octets);
    };
    // Try to parse an array in network order (MSB first) for IPv4 and IPv6
    ipaddr.fromByteArray = function(bytes) {
        const length = bytes.length;
        if (length === 4) return new ipaddr.IPv4(bytes);
        else if (length === 16) return new ipaddr.IPv6(bytes);
        else throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
    };
    // Checks if the address is valid IP address
    ipaddr.isValid = function(string) {
        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
    };
    // Attempts to parse an IP Address, first through IPv6 then IPv4.
    // Throws an error if it could not be parsed.
    ipaddr.parse = function(string) {
        if (ipaddr.IPv6.isValid(string)) return ipaddr.IPv6.parse(string);
        else if (ipaddr.IPv4.isValid(string)) return ipaddr.IPv4.parse(string);
        else throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
    };
    // Attempt to parse CIDR notation, first through IPv6 then IPv4.
    // Throws an error if it could not be parsed.
    ipaddr.parseCIDR = function(string) {
        try {
            return ipaddr.IPv6.parseCIDR(string);
        } catch (e) {
            try {
                return ipaddr.IPv4.parseCIDR(string);
            } catch (e2) {
                throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
            }
        }
    };
    // Parse an address and return plain IPv4 address if it is an IPv4-mapped address
    ipaddr.process = function(string) {
        const addr = this.parse(string);
        if (addr.kind() === "ipv6" && addr.isIPv4MappedAddress()) return addr.toIPv4Address();
        else return addr;
    };
    // An utility function to ease named range matching. See examples below.
    // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors
    // on matching IPv4 addresses to IPv6 ranges or vice versa.
    ipaddr.subnetMatch = function(address, rangeList, defaultName) {
        let i, rangeName, rangeSubnets, subnet;
        if (defaultName === undefined || defaultName === null) defaultName = "unicast";
        for(rangeName in rangeList)if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {
            rangeSubnets = rangeList[rangeName];
            // ECMA5 Array.isArray isn't available everywhere
            if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) rangeSubnets = [
                rangeSubnets
            ];
            for(i = 0; i < rangeSubnets.length; i++){
                subnet = rangeSubnets[i];
                if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) return rangeName;
            }
        }
        return defaultName;
    };
    // Export for both the CommonJS and browser-like environment
    if (module.exports) module.exports = ipaddr;
    else root.ipaddr = ipaddr;
})(this);

},{}],"iiCD0":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:transports"), {
    error: debug("libp2p:transports:err")
});
const pSettle = require("p-settle");
const { codes  } = require("./errors");
const errCode = require("err-code");
const { updateSelfPeerRecord  } = require("./record/utils");
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('libp2p-interfaces/src/transport/types').TransportFactory<any, any>} TransportFactory
 * @typedef {import('libp2p-interfaces/src/transport/types').Transport<any, any>} Transport
 *
 * @typedef {Object} TransportManagerProperties
 * @property {import('./')} libp2p
 * @property {import('./upgrader')} upgrader
 *
 * @typedef {Object} TransportManagerOptions
 * @property {number} [faultTolerance = FAULT_TOLERANCE.FATAL_ALL] - Address listen error tolerance.
 */ class TransportManager {
    /**
   * @class
   * @param {TransportManagerProperties & TransportManagerOptions} options
   */ constructor({ libp2p , upgrader , faultTolerance =FAULT_TOLERANCE.FATAL_ALL  }){
        this.libp2p = libp2p;
        this.upgrader = upgrader;
        /** @type {Map<string, Transport>} */ this._transports = new Map();
        this._listeners = new Map();
        this._listenerOptions = new Map();
        this.faultTolerance = faultTolerance;
    }
    /**
   * Adds a `Transport` to the manager
   *
   * @param {string} key
   * @param {TransportFactory} Transport
   * @param {*} transportOptions - Additional options to pass to the transport
   * @returns {void}
   */ add(key, Transport, transportOptions = {}) {
        log("adding %s", key);
        if (!key) throw errCode(new Error(`Transport must have a valid key, was given '${key}'`), codes.ERR_INVALID_KEY);
        if (this._transports.has(key)) throw errCode(new Error("There is already a transport with this key"), codes.ERR_DUPLICATE_TRANSPORT);
        const transport = new Transport({
            ...transportOptions,
            libp2p: this.libp2p,
            upgrader: this.upgrader
        });
        this._transports.set(key, transport);
        this._listenerOptions.set(key, transportOptions.listenerOptions || {});
        if (!this._listeners.has(key)) this._listeners.set(key, []);
    }
    /**
   * Stops all listeners
   *
   * @async
   */ async close() {
        const tasks = [];
        for (const [key, listeners] of this._listeners){
            log("closing listeners for %s", key);
            while(listeners.length){
                const listener = listeners.pop();
                listener.removeAllListeners("listening");
                listener.removeAllListeners("close");
                tasks.push(listener.close());
            }
        }
        await Promise.all(tasks);
        log("all listeners closed");
        for (const key1 of this._listeners.keys())this._listeners.set(key1, []);
    }
    /**
   * Dials the given Multiaddr over it's supported transport
   *
   * @param {Multiaddr} ma
   * @param {*} options
   * @returns {Promise<Connection>}
   */ async dial(ma, options) {
        const transport = this.transportForMultiaddr(ma);
        if (!transport) throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE);
        try {
            return await transport.dial(ma, options);
        } catch (err) {
            if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED;
            throw err;
        }
    }
    /**
   * Returns all Multiaddr's the listeners are using
   *
   * @returns {Multiaddr[]}
   */ getAddrs() {
        /** @type {Multiaddr[]} */ let addrs = [];
        for (const listeners of this._listeners.values())for (const listener of listeners)addrs = [
            ...addrs,
            ...listener.getAddrs()
        ];
        return addrs;
    }
    /**
   * Returns all the transports instances.
   *
   * @returns {IterableIterator<Transport>}
   */ getTransports() {
        return this._transports.values();
    }
    /**
   * Finds a transport that matches the given Multiaddr
   *
   * @param {Multiaddr} ma
   * @returns {Transport|null}
   */ transportForMultiaddr(ma) {
        for (const transport of this._transports.values()){
            const addrs = transport.filter([
                ma
            ]);
            if (addrs.length) return transport;
        }
        return null;
    }
    /**
   * Starts listeners for each listen Multiaddr.
   *
   * @async
   * @param {Multiaddr[]} addrs - addresses to attempt to listen on
   */ async listen(addrs) {
        if (!addrs || addrs.length === 0) {
            log("no addresses were provided for listening, this node is dial only");
            return;
        }
        const couldNotListen = [];
        for (const [key, transport] of this._transports.entries()){
            const supportedAddrs = transport.filter(addrs);
            const tasks = [];
            // For each supported multiaddr, create a listener
            for (const addr of supportedAddrs){
                log("creating listener for %s on %s", key, addr);
                const listener = transport.createListener(this._listenerOptions.get(key));
                this._listeners.get(key).push(listener);
                // Track listen/close events
                listener.on("listening", ()=>updateSelfPeerRecord(this.libp2p));
                listener.on("close", ()=>updateSelfPeerRecord(this.libp2p));
                // We need to attempt to listen on everything
                tasks.push(listener.listen(addr));
            }
            // Keep track of transports we had no addresses for
            if (tasks.length === 0) {
                couldNotListen.push(key);
                continue;
            }
            const results = await pSettle(tasks);
            // If we are listening on at least 1 address, succeed.
            // TODO: we should look at adding a retry (`p-retry`) here to better support
            // listening on remote addresses as they may be offline. We could then potentially
            // just wait for any (`p-any`) listener to succeed on each transport before returning
            const isListening = results.find((r)=>r.isFulfilled === true);
            if (!isListening && this.faultTolerance !== FAULT_TOLERANCE.NO_FATAL) throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES);
        }
        // If no transports were able to listen, throw an error. This likely
        // means we were given addresses we do not have transports for
        if (couldNotListen.length === this._transports.size) {
            const message = `no valid addresses were provided for transports [${couldNotListen}]`;
            if (this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL) throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);
            log(`libp2p in dial mode only: ${message}`);
        }
    }
    /**
   * Removes the given transport from the manager.
   * If a transport has any running listeners, they will be closed.
   *
   * @async
   * @param {string} key
   */ async remove(key) {
        log("removing %s", key);
        if (this._listeners.has(key)) // Close any running listeners
        for (const listener of this._listeners.get(key)){
            listener.removeAllListeners("listening");
            listener.removeAllListeners("close");
            await listener.close();
        }
        this._transports.delete(key);
        this._listeners.delete(key);
    }
    /**
   * Removes all transports from the manager.
   * If any listeners are running, they will be closed.
   *
   * @async
   */ async removeAll() {
        const tasks = [];
        for (const key of this._transports.keys())tasks.push(this.remove(key));
        await Promise.all(tasks);
    }
}
/**
 * Enum Transport Manager Fault Tolerance values.
 * FATAL_ALL should be used for failing in any listen circumstance.
 * NO_FATAL should be used for not failing when not listening.
 *
 * @readonly
 * @enum {number}
 */ const FAULT_TOLERANCE = {
    FATAL_ALL: 0,
    NO_FATAL: 1
};
TransportManager.FaultTolerance = FAULT_TOLERANCE;
module.exports = TransportManager;

},{"debug":"l0oUb","p-settle":"px8I8","./errors":"cFlaw","err-code":"dUrrM","./record/utils":"egDjK"}],"px8I8":[function(require,module,exports) {
"use strict";
const pReflect = require("p-reflect");
const pLimit = require("p-limit");
module.exports = async (array, options = {})=>{
    const { concurrency =Infinity  } = options;
    const limit = pLimit(concurrency);
    return Promise.all(array.map((element)=>{
        if (element && typeof element.then === "function") return pReflect(element);
        if (typeof element === "function") return pReflect(limit(()=>element()));
        return pReflect(Promise.resolve(element));
    }));
};

},{"p-reflect":"fIhMK","p-limit":"c0myX"}],"fIhMK":[function(require,module,exports) {
"use strict";
const pReflect = async (promise)=>{
    try {
        const value = await promise;
        return {
            isFulfilled: true,
            isRejected: false,
            value
        };
    } catch (error) {
        return {
            isFulfilled: false,
            isRejected: true,
            reason: error
        };
    }
};
module.exports = pReflect;
// TODO: Remove this for the next major release
module.exports.default = pReflect;

},{}],"c0myX":[function(require,module,exports) {
"use strict";
const pTry = require("p-try");
const pLimit = (concurrency)=>{
    if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
    const queue = [];
    let activeCount = 0;
    const next = ()=>{
        activeCount--;
        if (queue.length > 0) queue.shift()();
    };
    const run = (fn, resolve, ...args)=>{
        activeCount++;
        const result = pTry(fn, ...args);
        resolve(result);
        result.then(next, next);
    };
    const enqueue = (fn, resolve, ...args)=>{
        if (activeCount < concurrency) run(fn, resolve, ...args);
        else queue.push(run.bind(null, fn, resolve, ...args));
    };
    const generator = (fn, ...args)=>new Promise((resolve)=>enqueue(fn, resolve, ...args));
    Object.defineProperties(generator, {
        activeCount: {
            get: ()=>activeCount
        },
        pendingCount: {
            get: ()=>queue.length
        },
        clearQueue: {
            value: ()=>{
                queue.length = 0;
            }
        }
    });
    return generator;
};
module.exports = pLimit;
module.exports.default = pLimit;

},{"p-try":"fTH8E"}],"fTH8E":[function(require,module,exports) {
"use strict";
const pTry = (fn, ...arguments_)=>new Promise((resolve)=>{
        resolve(fn(...arguments_));
    });
module.exports = pTry;
// TODO: remove this in the next major version
module.exports.default = pTry;

},{}],"egDjK":[function(require,module,exports) {
"use strict";
const Envelope = require("./envelope");
const PeerRecord = require("./peer-record");
/**
 * @typedef {import('../')} Libp2p
 */ /**
 * Create (or update if existing) self peer record and store it in the AddressBook.
 *
 * @param {Libp2p} libp2p
 * @returns {Promise<void>}
 */ async function updateSelfPeerRecord(libp2p) {
    const peerRecord = new PeerRecord({
        peerId: libp2p.peerId,
        multiaddrs: libp2p.multiaddrs
    });
    const envelope = await Envelope.seal(peerRecord, libp2p.peerId);
    libp2p.peerStore.addressBook.consumePeerRecord(envelope);
}
module.exports.updateSelfPeerRecord = updateSelfPeerRecord;

},{"./envelope":"9BIql","./peer-record":"c2J6v"}],"9BIql":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
const { concat: uint8arraysConcat  } = require("uint8arrays/concat");
const { fromString: uint8arraysFromString  } = require("uint8arrays/from-string");
// @ts-ignore libp2p-crypto does not support types
const cryptoKeys = require("libp2p-crypto/src/keys");
const PeerId = require("peer-id");
const varint = require("varint");
const { equals: uint8arraysEquals  } = require("uint8arrays/equals");
const { codes  } = require("../../errors");
const { Envelope: Protobuf  } = require("./envelope");
/**
 * @typedef {import('libp2p-interfaces/src/record/types').Record} Record
 */ class Envelope {
    /**
   * The Envelope is responsible for keeping an arbitrary signed record
   * by a libp2p peer.
   *
   * @class
   * @param {object} params
   * @param {PeerId} params.peerId
   * @param {Uint8Array} params.payloadType
   * @param {Uint8Array} params.payload - marshaled record
   * @param {Uint8Array} params.signature - signature of the domain string :: type hint :: payload.
   */ constructor({ peerId , payloadType , payload , signature  }){
        this.peerId = peerId;
        this.payloadType = payloadType;
        this.payload = payload;
        this.signature = signature;
        // Cache
        this._marshal = undefined;
    }
    /**
   * Marshal the envelope content.
   *
   * @returns {Uint8Array}
   */ marshal() {
        if (this._marshal) return this._marshal;
        const publicKey = cryptoKeys.marshalPublicKey(this.peerId.pubKey);
        this._marshal = Protobuf.encode({
            publicKey: publicKey,
            payloadType: this.payloadType,
            payload: this.payload,
            signature: this.signature
        }).finish();
        return this._marshal;
    }
    /**
   * Verifies if the other Envelope is identical to this one.
   *
   * @param {Envelope} other
   * @returns {boolean}
   */ equals(other) {
        return uint8arraysEquals(this.peerId.pubKey.bytes, other.peerId.pubKey.bytes) && uint8arraysEquals(this.payloadType, other.payloadType) && uint8arraysEquals(this.payload, other.payload) && uint8arraysEquals(this.signature, other.signature);
    }
    /**
   * Validate envelope data signature for the given domain.
   *
   * @param {string} domain
   * @returns {Promise<boolean>}
   */ validate(domain) {
        const signData = formatSignaturePayload(domain, this.payloadType, this.payload);
        return this.peerId.pubKey.verify(signData, this.signature);
    }
}
/**
 * Helper function that prepares a Uint8Array to sign or verify a signature.
 *
 * @param {string} domain
 * @param {Uint8Array} payloadType
 * @param {Uint8Array} payload
 * @returns {Uint8Array}
 */ const formatSignaturePayload = (domain, payloadType, payload)=>{
    // When signing, a peer will prepare a Uint8Array by concatenating the following:
    // - The length of the domain separation string string in bytes
    // - The domain separation string, encoded as UTF-8
    // - The length of the payload_type field in bytes
    // - The value of the payload_type field
    // - The length of the payload field in bytes
    // - The value of the payload field
    const domainUint8Array = uint8arraysFromString(domain);
    const domainLength = varint.encode(domainUint8Array.byteLength);
    const payloadTypeLength = varint.encode(payloadType.length);
    const payloadLength = varint.encode(payload.length);
    return uint8arraysConcat([
        new Uint8Array(domainLength),
        domainUint8Array,
        new Uint8Array(payloadTypeLength),
        payloadType,
        new Uint8Array(payloadLength),
        payload
    ]);
};
/**
 * Unmarshal a serialized Envelope protobuf message.
 *
 * @param {Uint8Array} data
 * @returns {Promise<Envelope>}
 */ Envelope.createFromProtobuf = async (data)=>{
    const envelopeData = Protobuf.decode(data);
    const peerId = await PeerId.createFromPubKey(envelopeData.publicKey);
    return new Envelope({
        peerId,
        payloadType: envelopeData.payloadType,
        payload: envelopeData.payload,
        signature: envelopeData.signature
    });
};
/**
 * Seal marshals the given Record, places the marshaled bytes inside an Envelope
 * and signs it with the given peerId's private key.
 *
 * @async
 * @param {Record} record
 * @param {PeerId} peerId
 * @returns {Promise<Envelope>}
 */ Envelope.seal = async (record, peerId)=>{
    const domain = record.domain;
    const payloadType = record.codec;
    const payload = record.marshal();
    const signData = formatSignaturePayload(domain, payloadType, payload);
    const signature = await peerId.privKey.sign(signData);
    return new Envelope({
        peerId,
        payloadType,
        payload,
        signature
    });
};
/**
 * Open and certify a given marshalled envelope.
 * Data is unmarshalled and the signature validated for the given domain.
 *
 * @param {Uint8Array} data
 * @param {string} domain
 * @returns {Promise<Envelope>}
 */ Envelope.openAndCertify = async (data, domain)=>{
    const envelope = await Envelope.createFromProtobuf(data);
    const valid = await envelope.validate(domain);
    if (!valid) throw errCode(new Error("envelope signature is not valid for the given domain"), codes.ERR_SIGNATURE_NOT_VALID);
    return envelope;
};
module.exports = Envelope;

},{"err-code":"dUrrM","uint8arrays/concat":"gqJ9u","uint8arrays/from-string":"7qjkp","libp2p-crypto/src/keys":"42c0B","peer-id":"etBKN","varint":"9fMsR","uint8arrays/equals":"iZMnE","../../errors":"cFlaw","./envelope":"55VdX"}],"55VdX":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-envelope"] || ($protobuf.roots["libp2p-envelope"] = {});
$root.Envelope = function() {
    /**
     * Properties of an Envelope.
     * @exports IEnvelope
     * @interface IEnvelope
     * @property {Uint8Array|null} [publicKey] Envelope publicKey
     * @property {Uint8Array|null} [payloadType] Envelope payloadType
     * @property {Uint8Array|null} [payload] Envelope payload
     * @property {Uint8Array|null} [signature] Envelope signature
     */ /**
     * Constructs a new Envelope.
     * @exports Envelope
     * @classdesc Represents an Envelope.
     * @implements IEnvelope
     * @constructor
     * @param {IEnvelope=} [p] Properties to set
     */ function Envelope(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * Envelope publicKey.
     * @member {Uint8Array} publicKey
     * @memberof Envelope
     * @instance
     */ Envelope.prototype.publicKey = $util.newBuffer([]);
    /**
     * Envelope payloadType.
     * @member {Uint8Array} payloadType
     * @memberof Envelope
     * @instance
     */ Envelope.prototype.payloadType = $util.newBuffer([]);
    /**
     * Envelope payload.
     * @member {Uint8Array} payload
     * @memberof Envelope
     * @instance
     */ Envelope.prototype.payload = $util.newBuffer([]);
    /**
     * Envelope signature.
     * @member {Uint8Array} signature
     * @memberof Envelope
     * @instance
     */ Envelope.prototype.signature = $util.newBuffer([]);
    /**
     * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.
     * @function encode
     * @memberof Envelope
     * @static
     * @param {IEnvelope} m Envelope message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ Envelope.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.publicKey != null && Object.hasOwnProperty.call(m, "publicKey")) w.uint32(10).bytes(m.publicKey);
        if (m.payloadType != null && Object.hasOwnProperty.call(m, "payloadType")) w.uint32(18).bytes(m.payloadType);
        if (m.payload != null && Object.hasOwnProperty.call(m, "payload")) w.uint32(26).bytes(m.payload);
        if (m.signature != null && Object.hasOwnProperty.call(m, "signature")) w.uint32(42).bytes(m.signature);
        return w;
    };
    /**
     * Decodes an Envelope message from the specified reader or buffer.
     * @function decode
     * @memberof Envelope
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {Envelope} Envelope
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ Envelope.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Envelope();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.publicKey = r.bytes();
                    break;
                case 2:
                    m.payloadType = r.bytes();
                    break;
                case 3:
                    m.payload = r.bytes();
                    break;
                case 5:
                    m.signature = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates an Envelope message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Envelope
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {Envelope} Envelope
     */ Envelope.fromObject = function fromObject(d) {
        if (d instanceof $root.Envelope) return d;
        var m = new $root.Envelope();
        if (d.publicKey != null) {
            if (typeof d.publicKey === "string") $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);
            else if (d.publicKey.length) m.publicKey = d.publicKey;
        }
        if (d.payloadType != null) {
            if (typeof d.payloadType === "string") $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);
            else if (d.payloadType.length) m.payloadType = d.payloadType;
        }
        if (d.payload != null) {
            if (typeof d.payload === "string") $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);
            else if (d.payload.length) m.payload = d.payload;
        }
        if (d.signature != null) {
            if (typeof d.signature === "string") $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);
            else if (d.signature.length) m.signature = d.signature;
        }
        return m;
    };
    /**
     * Creates a plain object from an Envelope message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Envelope
     * @static
     * @param {Envelope} m Envelope
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ Envelope.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            if (o.bytes === String) d.publicKey = "";
            else {
                d.publicKey = [];
                if (o.bytes !== Array) d.publicKey = $util.newBuffer(d.publicKey);
            }
            if (o.bytes === String) d.payloadType = "";
            else {
                d.payloadType = [];
                if (o.bytes !== Array) d.payloadType = $util.newBuffer(d.payloadType);
            }
            if (o.bytes === String) d.payload = "";
            else {
                d.payload = [];
                if (o.bytes !== Array) d.payload = $util.newBuffer(d.payload);
            }
            if (o.bytes === String) d.signature = "";
            else {
                d.signature = [];
                if (o.bytes !== Array) d.signature = $util.newBuffer(d.signature);
            }
        }
        if (m.publicKey != null && m.hasOwnProperty("publicKey")) d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;
        if (m.payloadType != null && m.hasOwnProperty("payloadType")) d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;
        if (m.payload != null && m.hasOwnProperty("payload")) d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;
        if (m.signature != null && m.hasOwnProperty("signature")) d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
        return d;
    };
    /**
     * Converts this Envelope to JSON.
     * @function toJSON
     * @memberof Envelope
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ Envelope.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Envelope;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"c2J6v":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const PeerId = require("peer-id");
const arrayEquals = require("libp2p-utils/src/array-equals");
const { PeerRecord: Protobuf  } = require("./peer-record");
const { ENVELOPE_DOMAIN_PEER_RECORD , ENVELOPE_PAYLOAD_TYPE_PEER_RECORD  } = require("./consts");
/**
 * @typedef {import('../../peer-store/address-book.js').Address} Address
 * @typedef {import('libp2p-interfaces/src/record/types').Record} Record
 */ /**
 * @implements {Record}
 */ class PeerRecord {
    /**
   * The PeerRecord is used for distributing peer routing records across the network.
   * It contains the peer's reachable listen addresses.
   *
   * @class
   * @param {Object} params
   * @param {PeerId} params.peerId
   * @param {Multiaddr[]} params.multiaddrs - addresses of the associated peer.
   * @param {number} [params.seqNumber] - monotonically-increasing sequence counter that's used to order PeerRecords in time.
   */ constructor({ peerId , multiaddrs =[] , seqNumber =Date.now()  }){
        this.domain = ENVELOPE_DOMAIN_PEER_RECORD;
        this.codec = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;
        this.peerId = peerId;
        this.multiaddrs = multiaddrs;
        this.seqNumber = seqNumber;
        // Cache
        this._marshal = undefined;
    }
    /**
   * Marshal a record to be used in an envelope.
   *
   * @returns {Uint8Array}
   */ marshal() {
        if (this._marshal) return this._marshal;
        this._marshal = Protobuf.encode({
            peerId: this.peerId.toBytes(),
            seq: this.seqNumber,
            addresses: this.multiaddrs.map((m)=>({
                    multiaddr: m.bytes
                }))
        }).finish();
        return this._marshal;
    }
    /**
   * Returns true if `this` record equals the `other`.
   *
   * @param {unknown} other
   * @returns {boolean}
   */ equals(other) {
        if (!(other instanceof PeerRecord)) return false;
        // Validate PeerId
        if (!this.peerId.equals(other.peerId)) return false;
        // Validate seqNumber
        if (this.seqNumber !== other.seqNumber) return false;
        // Validate multiaddrs
        if (!arrayEquals(this.multiaddrs, other.multiaddrs)) return false;
        return true;
    }
}
/**
 * Unmarshal Peer Record Protobuf.
 *
 * @param {Uint8Array} buf - marshaled peer record.
 * @returns {PeerRecord}
 */ PeerRecord.createFromProtobuf = (buf)=>{
    const peerRecord = Protobuf.decode(buf);
    const peerId = PeerId.createFromBytes(peerRecord.peerId);
    const multiaddrs = (peerRecord.addresses || []).map((a)=>new Multiaddr(a.multiaddr));
    const seqNumber = Number(peerRecord.seq);
    return new PeerRecord({
        peerId,
        multiaddrs,
        seqNumber
    });
};
PeerRecord.DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD;
module.exports = PeerRecord;

},{"multiaddr":"dOMJu","peer-id":"etBKN","libp2p-utils/src/array-equals":"jdT4P","./peer-record":"WY3qK","./consts":"2h2F2"}],"jdT4P":[function(require,module,exports) {
"use strict";
/**
 * Verify if two arrays of non primitive types with the "equals" function are equal.
 * Compatible with multiaddr, peer-id and others.
 *
 * @param {Array<*>} a
 * @param {Array<*>} b
 * @returns {boolean}
 */ function arrayEquals(a, b) {
    return a.length === b.length && b.sort() && a.sort().every((item, index)=>b[index].equals(item));
}
module.exports = arrayEquals;

},{}],"WY3qK":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-peer-record"] || ($protobuf.roots["libp2p-peer-record"] = {});
$root.PeerRecord = function() {
    /**
     * Properties of a PeerRecord.
     * @exports IPeerRecord
     * @interface IPeerRecord
     * @property {Uint8Array|null} [peerId] PeerRecord peerId
     * @property {number|null} [seq] PeerRecord seq
     * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses
     */ /**
     * Constructs a new PeerRecord.
     * @exports PeerRecord
     * @classdesc Represents a PeerRecord.
     * @implements IPeerRecord
     * @constructor
     * @param {IPeerRecord=} [p] Properties to set
     */ function PeerRecord(p) {
        this.addresses = [];
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * PeerRecord peerId.
     * @member {Uint8Array} peerId
     * @memberof PeerRecord
     * @instance
     */ PeerRecord.prototype.peerId = $util.newBuffer([]);
    /**
     * PeerRecord seq.
     * @member {number} seq
     * @memberof PeerRecord
     * @instance
     */ PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    /**
     * PeerRecord addresses.
     * @member {Array.<PeerRecord.IAddressInfo>} addresses
     * @memberof PeerRecord
     * @instance
     */ PeerRecord.prototype.addresses = $util.emptyArray;
    /**
     * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.
     * @function encode
     * @memberof PeerRecord
     * @static
     * @param {IPeerRecord} m PeerRecord message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ PeerRecord.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.peerId != null && Object.hasOwnProperty.call(m, "peerId")) w.uint32(10).bytes(m.peerId);
        if (m.seq != null && Object.hasOwnProperty.call(m, "seq")) w.uint32(16).uint64(m.seq);
        if (m.addresses != null && m.addresses.length) for(var i = 0; i < m.addresses.length; ++i)$root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();
        return w;
    };
    /**
     * Decodes a PeerRecord message from the specified reader or buffer.
     * @function decode
     * @memberof PeerRecord
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {PeerRecord} PeerRecord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ PeerRecord.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.peerId = r.bytes();
                    break;
                case 2:
                    m.seq = r.uint64();
                    break;
                case 3:
                    if (!(m.addresses && m.addresses.length)) m.addresses = [];
                    m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PeerRecord
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {PeerRecord} PeerRecord
     */ PeerRecord.fromObject = function fromObject(d) {
        if (d instanceof $root.PeerRecord) return d;
        var m = new $root.PeerRecord();
        if (d.peerId != null) {
            if (typeof d.peerId === "string") $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);
            else if (d.peerId.length) m.peerId = d.peerId;
        }
        if (d.seq != null) {
            if ($util.Long) (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;
            else if (typeof d.seq === "string") m.seq = parseInt(d.seq, 10);
            else if (typeof d.seq === "number") m.seq = d.seq;
            else if (typeof d.seq === "object") m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);
        }
        if (d.addresses) {
            if (!Array.isArray(d.addresses)) throw TypeError(".PeerRecord.addresses: array expected");
            m.addresses = [];
            for(var i = 0; i < d.addresses.length; ++i){
                if (typeof d.addresses[i] !== "object") throw TypeError(".PeerRecord.addresses: object expected");
                m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);
            }
        }
        return m;
    };
    /**
     * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PeerRecord
     * @static
     * @param {PeerRecord} m PeerRecord
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ PeerRecord.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.arrays || o.defaults) d.addresses = [];
        if (o.defaults) {
            if (o.bytes === String) d.peerId = "";
            else {
                d.peerId = [];
                if (o.bytes !== Array) d.peerId = $util.newBuffer(d.peerId);
            }
            if ($util.Long) {
                var n = new $util.Long(0, 0, true);
                d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
            } else d.seq = o.longs === String ? "0" : 0;
        }
        if (m.peerId != null && m.hasOwnProperty("peerId")) d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;
        if (m.seq != null && m.hasOwnProperty("seq")) {
            if (typeof m.seq === "number") d.seq = o.longs === String ? String(m.seq) : m.seq;
            else d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;
        }
        if (m.addresses && m.addresses.length) {
            d.addresses = [];
            for(var j = 0; j < m.addresses.length; ++j)d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);
        }
        return d;
    };
    /**
     * Converts this PeerRecord to JSON.
     * @function toJSON
     * @memberof PeerRecord
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ PeerRecord.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    PeerRecord.AddressInfo = function() {
        /**
         * Properties of an AddressInfo.
         * @memberof PeerRecord
         * @interface IAddressInfo
         * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr
         */ /**
         * Constructs a new AddressInfo.
         * @memberof PeerRecord
         * @classdesc Represents an AddressInfo.
         * @implements IAddressInfo
         * @constructor
         * @param {PeerRecord.IAddressInfo=} [p] Properties to set
         */ function AddressInfo(p) {
            if (p) {
                for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
        }
        /**
         * AddressInfo multiaddr.
         * @member {Uint8Array} multiaddr
         * @memberof PeerRecord.AddressInfo
         * @instance
         */ AddressInfo.prototype.multiaddr = $util.newBuffer([]);
        /**
         * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.
         * @function encode
         * @memberof PeerRecord.AddressInfo
         * @static
         * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */ AddressInfo.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.multiaddr != null && Object.hasOwnProperty.call(m, "multiaddr")) w.uint32(10).bytes(m.multiaddr);
            return w;
        };
        /**
         * Decodes an AddressInfo message from the specified reader or buffer.
         * @function decode
         * @memberof PeerRecord.AddressInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {PeerRecord.AddressInfo} AddressInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */ AddressInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord.AddressInfo();
            while(r.pos < c){
                var t = r.uint32();
                switch(t >>> 3){
                    case 1:
                        m.multiaddr = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };
        /**
         * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PeerRecord.AddressInfo
         * @static
         * @param {Object.<string,*>} d Plain object
         * @returns {PeerRecord.AddressInfo} AddressInfo
         */ AddressInfo.fromObject = function fromObject(d) {
            if (d instanceof $root.PeerRecord.AddressInfo) return d;
            var m = new $root.PeerRecord.AddressInfo();
            if (d.multiaddr != null) {
                if (typeof d.multiaddr === "string") $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);
                else if (d.multiaddr.length) m.multiaddr = d.multiaddr;
            }
            return m;
        };
        /**
         * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PeerRecord.AddressInfo
         * @static
         * @param {PeerRecord.AddressInfo} m AddressInfo
         * @param {$protobuf.IConversionOptions} [o] Conversion options
         * @returns {Object.<string,*>} Plain object
         */ AddressInfo.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};
            if (o.defaults) {
                if (o.bytes === String) d.multiaddr = "";
                else {
                    d.multiaddr = [];
                    if (o.bytes !== Array) d.multiaddr = $util.newBuffer(d.multiaddr);
                }
            }
            if (m.multiaddr != null && m.hasOwnProperty("multiaddr")) d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;
            return d;
        };
        /**
         * Converts this AddressInfo to JSON.
         * @function toJSON
         * @memberof PeerRecord.AddressInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */ AddressInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return AddressInfo;
    }();
    return PeerRecord;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"2h2F2":[function(require,module,exports) {
"use strict";
// The domain string used for peer records contained in a Envelope.
const domain = "libp2p-peer-record";
// The type hint used to identify peer records in a Envelope.
// Defined in https://github.com/multiformats/multicodec/blob/master/table.csv
// with name "libp2p-peer-record"
const payloadType = Uint8Array.from([
    3,
    1
]);
module.exports = {
    ENVELOPE_DOMAIN_PEER_RECORD: domain,
    ENVELOPE_PAYLOAD_TYPE_PEER_RECORD: payloadType
};

},{}],"cjazp":[function(require,module,exports) {
"use strict";
const { EventEmitter  } = require("events");
const { Multiaddr  } = require("multiaddr");
const PeerId = require("peer-id");
/**
 * @typedef {Object} AddressManagerOptions
 * @property {string[]} [listen = []] - list of multiaddrs string representation to listen.
 * @property {string[]} [announce = []] - list of multiaddrs string representation to announce.
 */ /**
 * @fires AddressManager#change:addresses Emitted when a addresses change.
 */ class AddressManager extends EventEmitter {
    /**
   * Responsible for managing the peer addresses.
   * Peers can specify their listen and announce addresses.
   * The listen addresses will be used by the libp2p transports to listen for new connections,
   * while the announce addresses will be used for the peer addresses' to other peers in the network.
   *
   * @class
   * @param {PeerId} peerId - The Peer ID of the node
   * @param {object} [options]
   * @param {Array<string>} [options.listen = []] - list of multiaddrs string representation to listen.
   * @param {Array<string>} [options.announce = []] - list of multiaddrs string representation to announce.
   */ constructor(peerId, { listen =[] , announce =[]  } = {}){
        super();
        this.peerId = peerId;
        this.listen = new Set(listen.map((ma)=>ma.toString()));
        this.announce = new Set(announce.map((ma)=>ma.toString()));
        this.observed = new Set();
    }
    /**
   * Get peer listen multiaddrs.
   *
   * @returns {Multiaddr[]}
   */ getListenAddrs() {
        return Array.from(this.listen).map((a)=>new Multiaddr(a));
    }
    /**
   * Get peer announcing multiaddrs.
   *
   * @returns {Multiaddr[]}
   */ getAnnounceAddrs() {
        return Array.from(this.announce).map((a)=>new Multiaddr(a));
    }
    /**
   * Get observed multiaddrs.
   *
   * @returns {Array<Multiaddr>}
   */ getObservedAddrs() {
        return Array.from(this.observed).map((a)=>new Multiaddr(a));
    }
    /**
   * Add peer observed addresses
   *
   * @param {string | Multiaddr} addr
   */ addObservedAddr(addr) {
        let ma = new Multiaddr(addr);
        const remotePeer = ma.getPeerId();
        // strip our peer id if it has been passed
        if (remotePeer) {
            const remotePeerId = PeerId.createFromB58String(remotePeer);
            // use same encoding for comparison
            if (remotePeerId.equals(this.peerId)) ma = ma.decapsulate(new Multiaddr(`/p2p/${this.peerId}`));
        }
        const addrString = ma.toString();
        // do not trigger the change:addresses event if we already know about this address
        if (this.observed.has(addrString)) return;
        this.observed.add(addrString);
        this.emit("change:addresses");
    }
}
module.exports = AddressManager;

},{"events":"1VQLm","multiaddr":"dOMJu","peer-id":"etBKN"}],"bfUKk":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:connection-manager"), {
    error: debug("libp2p:connection-manager:err")
});
const errcode = require("err-code");
const mergeOptions = require("merge-options");
const LatencyMonitor = require("./latency-monitor");
// @ts-ignore retimer does not have types
const retimer = require("retimer");
const { EventEmitter  } = require("events");
const PeerId = require("peer-id");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("../errors");
const defaultOptions = {
    maxConnections: Infinity,
    minConnections: 0,
    maxData: Infinity,
    maxSentData: Infinity,
    maxReceivedData: Infinity,
    maxEventLoopDelay: Infinity,
    pollInterval: 2000,
    autoDialInterval: 10000,
    movingAverageInterval: 60000,
    defaultPeerValue: 1
};
/**
 * @typedef {import('../')} Libp2p
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 */ /**
 * @typedef {Object} ConnectionManagerOptions
 * @property {number} [maxConnections = Infinity] - The maximum number of connections allowed.
 * @property {number} [minConnections = 0] - The minimum number of connections to avoid pruning.
 * @property {number} [maxData = Infinity] - The max data (in and out), per average interval to allow.
 * @property {number} [maxSentData = Infinity] - The max outgoing data, per average interval to allow.
 * @property {number} [maxReceivedData = Infinity] - The max incoming data, per average interval to allow.
 * @property {number} [maxEventLoopDelay = Infinity] - The upper limit the event loop can take to run.
 * @property {number} [pollInterval = 2000] - How often, in milliseconds, metrics and latency should be checked.
 * @property {number} [movingAverageInterval = 60000] - How often, in milliseconds, to compute averages.
 * @property {number} [defaultPeerValue = 1] - The value of the peer.
 * @property {boolean} [autoDial = true] - Should preemptively guarantee connections are above the low watermark.
 * @property {number} [autoDialInterval = 10000] - How often, in milliseconds, it should preemptively guarantee connections are above the low watermark.
 */ /**
 *
 * @fires ConnectionManager#peer:connect Emitted when a new peer is connected.
 * @fires ConnectionManager#peer:disconnect Emitted when a peer is disconnected.
 */ class ConnectionManager extends EventEmitter {
    /**
   * Responsible for managing known connections.
   *
   * @class
   * @param {Libp2p} libp2p
   * @param {ConnectionManagerOptions} options
   */ constructor(libp2p, options = {}){
        super();
        this._libp2p = libp2p;
        this._peerId = libp2p.peerId.toB58String();
        this._options = mergeOptions.call({
            ignoreUndefined: true
        }, defaultOptions, options);
        if (this._options.maxConnections < this._options.minConnections) throw errcode(new Error("Connection Manager maxConnections must be greater than minConnections"), ERR_INVALID_PARAMETERS);
        log("options: %j", this._options);
        /**
     * Map of peer identifiers to their peer value for pruning connections.
     *
     * @type {Map<string, number>}
     */ this._peerValues = new Map();
        /**
     * Map of connections per peer
     *
     * @type {Map<string, Connection[]>}
     */ this.connections = new Map();
        this._started = false;
        this._timer = null;
        this._autoDialTimeout = null;
        this._checkMetrics = this._checkMetrics.bind(this);
        this._autoDial = this._autoDial.bind(this);
        this._latencyMonitor = new LatencyMonitor({
            latencyCheckIntervalMs: this._options.pollInterval,
            dataEmitIntervalMs: this._options.pollInterval
        });
    }
    /**
   * Get current number of open connections.
   */ get size() {
        return Array.from(this.connections.values()).reduce((accumulator, value)=>accumulator + value.length, 0);
    }
    /**
   * Starts the Connection Manager. If Metrics are not enabled on libp2p
   * only event loop and connection limits will be monitored.
   */ start() {
        if (this._libp2p.metrics) this._timer = this._timer || retimer(this._checkMetrics, this._options.pollInterval);
        // latency monitor
        this._latencyMonitor.start();
        this._onLatencyMeasure = this._onLatencyMeasure.bind(this);
        this._latencyMonitor.on("data", this._onLatencyMeasure);
        this._started = true;
        log("started");
        this._options.autoDial && this._autoDial();
    }
    /**
   * Stops the Connection Manager
   *
   * @async
   */ async stop() {
        this._autoDialTimeout && this._autoDialTimeout.clear();
        this._timer && this._timer.clear();
        this._latencyMonitor.removeListener("data", this._onLatencyMeasure);
        this._latencyMonitor.stop();
        this._started = false;
        await this._close();
        log("stopped");
    }
    /**
   * Cleans up the connections
   *
   * @async
   */ async _close() {
        // Close all connections we're tracking
        const tasks = [];
        for (const connectionList of this.connections.values())for (const connection of connectionList)tasks.push(connection.close());
        await Promise.all(tasks);
        this.connections.clear();
    }
    /**
   * Sets the value of the given peer. Peers with lower values
   * will be disconnected first.
   *
   * @param {PeerId} peerId
   * @param {number} value - A number between 0 and 1
   * @returns {void}
   */ setPeerValue(peerId, value) {
        if (value < 0 || value > 1) throw new Error("value should be a number between 0 and 1");
        this._peerValues.set(peerId.toB58String(), value);
    }
    /**
   * Checks the libp2p metrics to determine if any values have exceeded
   * the configured maximums.
   *
   * @private
   */ _checkMetrics() {
        if (this._libp2p.metrics) {
            const movingAverages = this._libp2p.metrics.global.movingAverages;
            // @ts-ignore moving averages object types
            const received = movingAverages.dataReceived[this._options.movingAverageInterval].movingAverage();
            this._checkMaxLimit("maxReceivedData", received);
            // @ts-ignore moving averages object types
            const sent = movingAverages.dataSent[this._options.movingAverageInterval].movingAverage();
            this._checkMaxLimit("maxSentData", sent);
            const total = received + sent;
            this._checkMaxLimit("maxData", total);
            log("metrics update", total);
            this._timer = retimer(this._checkMetrics, this._options.pollInterval);
        }
    }
    /**
   * Tracks the incoming connection and check the connection limit
   *
   * @param {Connection} connection
   * @returns {void}
   */ onConnect(connection) {
        const peerId = connection.remotePeer;
        const peerIdStr = peerId.toB58String();
        const storedConn = this.connections.get(peerIdStr);
        this.emit("peer:connect", connection);
        if (storedConn) storedConn.push(connection);
        else this.connections.set(peerIdStr, [
            connection
        ]);
        this._libp2p.peerStore.keyBook.set(peerId, peerId.pubKey);
        if (!this._peerValues.has(peerIdStr)) this._peerValues.set(peerIdStr, this._options.defaultPeerValue);
        this._checkMaxLimit("maxConnections", this.size);
    }
    /**
   * Removes the connection from tracking
   *
   * @param {Connection} connection
   * @returns {void}
   */ onDisconnect(connection) {
        const peerId = connection.remotePeer.toB58String();
        let storedConn = this.connections.get(peerId);
        if (storedConn && storedConn.length > 1) {
            storedConn = storedConn.filter((conn)=>conn.id !== connection.id);
            this.connections.set(peerId, storedConn);
        } else if (storedConn) {
            this.connections.delete(peerId);
            this._peerValues.delete(connection.remotePeer.toB58String());
            this.emit("peer:disconnect", connection);
        }
    }
    /**
   * Get a connection with a peer.
   *
   * @param {PeerId} peerId
   * @returns {Connection|null}
   */ get(peerId) {
        const connections = this.getAll(peerId);
        if (connections.length) return connections[0];
        return null;
    }
    /**
   * Get all open connections with a peer.
   *
   * @param {PeerId} peerId
   * @returns {Connection[]}
   */ getAll(peerId) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        const id = peerId.toB58String();
        const connections = this.connections.get(id);
        // Return all open connections
        if (connections) return connections.filter((connection)=>connection.stat.status === "open");
        return [];
    }
    /**
   * If the event loop is slow, maybe close a connection
   *
   * @private
   * @param {*} summary - The LatencyMonitor summary
   */ _onLatencyMeasure(summary) {
        this._checkMaxLimit("maxEventLoopDelay", summary.avgMs);
    }
    /**
   * If the `value` of `name` has exceeded its limit, maybe close a connection
   *
   * @private
   * @param {string} name - The name of the field to check limits for
   * @param {number} value - The current value of the field
   */ _checkMaxLimit(name, value) {
        const limit = this._options[name];
        log("checking limit of %s. current value: %d of %d", name, value, limit);
        if (value > limit) {
            log("%s: limit exceeded: %s, %d", this._peerId, name, value);
            this._maybeDisconnectOne();
        }
    }
    /**
   * Proactively tries to connect to known peers stored in the PeerStore.
   * It will keep the number of connections below the upper limit and sort
   * the peers to connect based on wether we know their keys and protocols.
   *
   * @async
   * @private
   */ async _autoDial() {
        const minConnections = this._options.minConnections;
        // Already has enough connections
        if (this.size >= minConnections) {
            this._autoDialTimeout = retimer(this._autoDial, this._options.autoDialInterval);
            return;
        }
        // Sort peers on wether we know protocols of public keys for them
        const peers = Array.from(this._libp2p.peerStore.peers.values()).sort((a, b)=>{
            if (b.protocols && b.protocols.length && (!a.protocols || !a.protocols.length)) return 1;
            else if (b.id.pubKey && !a.id.pubKey) return 1;
            return -1;
        });
        for(let i = 0; i < peers.length && this.size < minConnections; i++)if (!this.get(peers[i].id)) {
            log("connecting to a peerStore stored peer %s", peers[i].id.toB58String());
            try {
                await this._libp2p.dialer.connectToPeer(peers[i].id);
                // Connection Manager was stopped
                if (!this._started) return;
            } catch (err) {
                log.error("could not connect to peerStore stored peer", err);
            }
        }
        this._autoDialTimeout = retimer(this._autoDial, this._options.autoDialInterval);
    }
    /**
   * If we have more connections than our maximum, close a connection
   * to the lowest valued peer.
   *
   * @private
   */ _maybeDisconnectOne() {
        if (this._options.minConnections < this.connections.size) {
            const peerValues = Array.from(new Map([
                ...this._peerValues.entries()
            ].sort((a, b)=>a[1] - b[1])));
            log("%s: sorted peer values: %j", this._peerId, peerValues);
            const disconnectPeer = peerValues[0];
            if (disconnectPeer) {
                const peerId = disconnectPeer[0];
                log("%s: lowest value peer is %s", this._peerId, peerId);
                log("%s: closing a connection to %j", this._peerId, peerId);
                for (const connections of this.connections.values())if (connections[0].remotePeer.toB58String() === peerId) {
                    connections[0].close();
                    break;
                }
            }
        }
    }
}
module.exports = ConnectionManager;

},{"debug":"l0oUb","err-code":"dUrrM","merge-options":"4XlQf","./latency-monitor":"49Xaz","retimer":"c9ebJ","events":"1VQLm","peer-id":"etBKN","../errors":"cFlaw"}],"49Xaz":[function(require,module,exports) {
// @ts-nocheck
"use strict";
/**
 * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)
 */ const { EventEmitter  } = require("events");
const VisibilityChangeEmitter = require("./visibility-change-emitter");
const debug = require("debug")("latency-monitor:LatencyMonitor");
/**
 * @typedef {Object} SummaryObject
 * @property {number} events How many events were called
 * @property {number} minMS What was the min time for a cb to be called
 * @property {number} maxMS What was the max time for a cb to be called
 * @property {number} avgMs What was the average time for a cb to be called
 * @property {number} lengthMs How long this interval was in ms
 *
 * @typedef {Object} LatencyMonitorOptions
 * @property {number} [latencyCheckIntervalMs=500] - How often to add a latency check event (ms)
 * @property {number} [dataEmitIntervalMs=5000] - How often to summarize latency check events. null or 0 disables event firing
 * @property {Function} [asyncTestFn] - What cb-style async function to use
 * @property {number} [latencyRandomPercentage=5] - What percent (+/-) of latencyCheckIntervalMs should we randomly use? This helps avoid alignment to other events.
 */ /**
 * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling
 * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.
 * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.
 *
 * @extends {EventEmitter}
 *
 * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop
 * and timing how long it takes to get back.
 *
 * @example
 * const monitor = new LatencyMonitor();
 * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));
 *
 * @example
 * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});
 * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));
 */ class LatencyMonitor extends EventEmitter {
    /**
   * @class
   * @param {LatencyMonitorOptions} [options]
   */ constructor({ latencyCheckIntervalMs , dataEmitIntervalMs , asyncTestFn , latencyRandomPercentage  } = {}){
        super();
        const that = this;
        // 0 isn't valid here, so its ok to use ||
        that.latencyCheckIntervalMs = latencyCheckIntervalMs || 500 // 0.5s
        ;
        that.latencyRandomPercentage = latencyRandomPercentage || 10;
        that._latecyCheckMultiply = 2 * (that.latencyRandomPercentage / 100.0) * that.latencyCheckIntervalMs;
        that._latecyCheckSubtract = that._latecyCheckMultiply / 2;
        that.dataEmitIntervalMs = dataEmitIntervalMs === null || dataEmitIntervalMs === 0 ? undefined : dataEmitIntervalMs || 5000 // 5s
        ;
        debug("latencyCheckIntervalMs: %s dataEmitIntervalMs: %s", that.latencyCheckIntervalMs, that.dataEmitIntervalMs);
        if (that.dataEmitIntervalMs) debug("Expecting ~%s events per summary", that.latencyCheckIntervalMs / that.dataEmitIntervalMs);
        else debug("Not emitting summaries");
        that.asyncTestFn = asyncTestFn // If there is no asyncFn, we measure latency
        ;
    }
    start() {
        // If process: use high resolution timer
        if (globalThis.process && globalThis.process.hrtime) {
            debug("Using process.hrtime for timing");
            this.now = globalThis.process.hrtime // eslint-disable-line no-undef
            ;
            this.getDeltaMS = (startTime)=>{
                const hrtime = this.now(startTime);
                return hrtime[0] * 1000 + hrtime[1] / 1000000;
            };
        // Let's try for a timer that only monotonically increases
        } else if (typeof window !== "undefined" && window.performance && window.performance.now) {
            debug("Using performance.now for timing");
            this.now = window.performance.now.bind(window.performance);
            this.getDeltaMS = (startTime)=>Math.round(this.now() - startTime);
        } else {
            debug("Using Date.now for timing");
            this.now = Date.now;
            this.getDeltaMS = (startTime)=>this.now() - startTime;
        }
        this._latencyData = this._initLatencyData();
        // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,
        // so we fall back to another library
        // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs
        if (isBrowser()) {
            this._visibilityChangeEmitter = new VisibilityChangeEmitter();
            this._visibilityChangeEmitter.on("visibilityChange", (pageInFocus)=>{
                if (pageInFocus) this._startTimers();
                else {
                    this._emitSummary();
                    this._stopTimers();
                }
            });
        }
        if (!this._visibilityChangeEmitter || this._visibilityChangeEmitter.isVisible()) this._startTimers();
    }
    stop() {
        this._stopTimers();
    }
    /**
   * Start internal timers
   *
   * @private
   */ _startTimers() {
        // Timer already started, ignore this
        if (this._checkLatencyID) return;
        this._checkLatency();
        if (this.dataEmitIntervalMs) {
            this._emitIntervalID = setInterval(()=>this._emitSummary(), this.dataEmitIntervalMs);
            if (typeof this._emitIntervalID.unref === "function") this._emitIntervalID.unref() // Doesn't block exit
            ;
        }
    }
    /**
   * Stop internal timers
   *
   * @private
   */ _stopTimers() {
        if (this._checkLatencyID) {
            clearTimeout(this._checkLatencyID);
            this._checkLatencyID = undefined;
        }
        if (this._emitIntervalID) {
            clearInterval(this._emitIntervalID);
            this._emitIntervalID = undefined;
        }
    }
    /**
   * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show
   *
   * @private
   */ _emitSummary() {
        const summary = this.getSummary();
        if (summary.events > 0) this.emit("data", summary);
    }
    /**
   * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,
   * it will not count for this time period
   *
   * @returns {SummaryObject}
   */ getSummary() {
        // We might want to adjust for the number of expected events
        // Example: first 1 event it comes back, then such a long blocker that the next emit check comes
        // Then this fires - looks like no latency!!
        const latency = {
            events: this._latencyData.events,
            minMs: this._latencyData.minMs,
            maxMs: this._latencyData.maxMs,
            avgMs: this._latencyData.events ? this._latencyData.totalMs / this._latencyData.events : Number.POSITIVE_INFINITY,
            lengthMs: this.getDeltaMS(this._latencyData.startTime)
        };
        this._latencyData = this._initLatencyData() // Clear
        ;
        debug("Summary: %O", latency);
        return latency;
    }
    /**
   * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,
   * it will simply report on event loop latency.
   *
   * @private
   */ _checkLatency() {
        const that = this;
        // Randomness is needed to avoid alignment by accident to regular things in the event loop
        const randomness = Math.random() * that._latecyCheckMultiply - that._latecyCheckSubtract;
        // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset
        const localData = {
            deltaOffset: Math.ceil(that.latencyCheckIntervalMs + randomness),
            startTime: that.now()
        };
        const cb = ()=>{
            // We are already stopped, ignore this datapoint
            if (!this._checkLatencyID) return;
            const deltaMS = that.getDeltaMS(localData.startTime) - localData.deltaOffset;
            that._checkLatency() // Start again ASAP
            ;
            // Add the data point. If this gets complex, refactor it
            that._latencyData.events++;
            that._latencyData.minMs = Math.min(that._latencyData.minMs, deltaMS);
            that._latencyData.maxMs = Math.max(that._latencyData.maxMs, deltaMS);
            that._latencyData.totalMs += deltaMS;
            debug("MS: %s Data: %O", deltaMS, that._latencyData);
        };
        debug("localData: %O", localData);
        this._checkLatencyID = setTimeout(()=>{
            // This gets rid of including event loop
            if (that.asyncTestFn) {
                // Clear timing related things
                localData.deltaOffset = 0;
                localData.startTime = that.now();
                that.asyncTestFn(cb);
            } else {
                // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.
                // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.
                localData.deltaOffset -= 1;
                // If there is no function to test, we mean check latency which is a special case that is really cb => cb()
                // We avoid that for the few extra function all overheads. Also, we want to keep the timers different
                cb();
            }
        }, localData.deltaOffset);
        if (typeof this._checkLatencyID.unref === "function") this._checkLatencyID.unref() // Doesn't block exit
        ;
    }
    _initLatencyData() {
        return {
            startTime: this.now(),
            minMs: Number.POSITIVE_INFINITY,
            maxMs: Number.NEGATIVE_INFINITY,
            events: 0,
            totalMs: 0
        };
    }
}
function isBrowser() {
    return typeof window !== "undefined";
}
module.exports = LatencyMonitor;

},{"events":"1VQLm","./visibility-change-emitter":"egEBq","debug":"l0oUb"}],"egEBq":[function(require,module,exports) {
// @ts-nocheck
/* global document */ /**
 * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)
 */ "use strict";
const { EventEmitter  } = require("events");
const debug = require("debug")("latency-monitor:VisibilityChangeEmitter");
/**
 * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.
 *
 * Warning: This does not work on all browsers, but should work on all modern browsers
 *
 * @example
 *
 *     const myVisibilityEmitter = new VisibilityChangeEmitter();
 *
 *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {
 *        if ( pageInFocus ){
 *            // Page is in focus
 *            console.log('In focus');
 *        }
 *        else {
 *            // Page is blurred
 *            console.log('Out of focus');
 *        }
 *     });
 *     // To access the visibility state directly, call:
 *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());
 */ class VisibilityChangeEmitter extends EventEmitter {
    /**
   * Creates a VisibilityChangeEmitter
   *
   * @class
   */ constructor(){
        super();
        if (typeof document === "undefined") {
            debug('This is not a browser, no "document" found. Stopping.');
            return;
        }
        this._initializeVisibilityVarNames();
        this._addVisibilityChangeListener();
    }
    /**
   * document.hidden and document.visibilityChange are the two variables we need to check for;
   * Since these variables are named differently in different browsers, this function sets
   * the appropriate name based on the browser being used. Once executed, tha actual names of
   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange
   * respectively
   *
   * @private
   */ _initializeVisibilityVarNames() {
        let hidden;
        let visibilityChange;
        if (typeof document.hidden !== "undefined") {
            hidden = "hidden";
            visibilityChange = "visibilitychange";
        } else if (typeof document.mozHidden !== "undefined") {
            hidden = "mozHidden";
            visibilityChange = "mozvisibilitychange";
        } else if (typeof document.msHidden !== "undefined") {
            hidden = "msHidden";
            visibilityChange = "msvisibilitychange";
        } else if (typeof document.webkitHidden !== "undefined") {
            hidden = "webkitHidden";
            visibilityChange = "webkitvisibilitychange";
        }
        this._hidden = hidden;
        this._visibilityChange = visibilityChange;
    }
    /**
   * Adds an event listener on the document that listens to changes in document.visibilityChange
   * (or whatever name by which the visibilityChange variable is known in the browser)
   *
   * @private
   */ _addVisibilityChangeListener() {
        if (typeof document.addEventListener === "undefined" || typeof document[this._hidden] === "undefined") debug("Checking page visibility requires a browser that supports the Page Visibility API.");
        else // Handle page visibility change
        document.addEventListener(this._visibilityChange, this._handleVisibilityChange.bind(this), false);
    }
    /**
   * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and
   * ```undefined``` if the page visibility API is not supported by the browser.
   *
   * @returns {boolean | void} whether the page is now visible or not (undefined is unknown)
   */ isVisible() {
        if (this._hidden === undefined || document[this._hidden] === undefined) return undefined;
        return !document[this._hidden];
    }
    /**
   * The function that is called when document.visibilityChange has changed
   * It emits an event called visibilityChange and sends the value of document.hidden as a
   * parameter
   *
   * @private
   */ _handleVisibilityChange() {
        const visible = !document[this._hidden];
        debug(visible ? "Page Visible" : "Page Hidden");
        // Emit the event
        this.emit("visibilityChange", visible);
    }
}
module.exports = VisibilityChangeEmitter;

},{"events":"1VQLm","debug":"l0oUb"}],"c9ebJ":[function(require,module,exports) {
"use strict";
const getTime = require("./time");
class Retimer {
    constructor(callback, timeout, args){
        const that = this;
        this._started = getTime();
        this._rescheduled = 0;
        this._scheduled = timeout;
        this._args = args;
        this._triggered = false;
        this._timerWrapper = ()=>{
            if (that._rescheduled > 0) {
                that._scheduled = that._rescheduled - (getTime() - that._started);
                that._schedule(that._scheduled);
            } else {
                that._triggered = true;
                callback.apply(null, that._args);
            }
        };
        this._timer = setTimeout(this._timerWrapper, timeout);
    }
    reschedule(timeout) {
        if (!timeout) timeout = this._scheduled;
        const now = getTime();
        if (now + timeout - (this._started + this._scheduled) < 0) {
            clearTimeout(this._timer);
            this._schedule(timeout);
        } else if (!this._triggered) {
            this._started = now;
            this._rescheduled = timeout;
        } else this._schedule(timeout);
    }
    _schedule(timeout) {
        this._triggered = false;
        this._started = getTime();
        this._rescheduled = 0;
        this._scheduled = timeout;
        this._timer = setTimeout(this._timerWrapper, timeout);
    }
    clear() {
        clearTimeout(this._timer);
    }
}
function retimer() {
    if (typeof arguments[0] !== "function") throw new Error("callback needed");
    if (typeof arguments[1] !== "number") throw new Error("timeout needed");
    let args;
    if (arguments.length > 0) {
        args = new Array(arguments.length - 2);
        /* eslint-disable no-var */ for(var i = 0; i < args.length; i++)args[i] = arguments[i + 2];
    }
    return new Retimer(arguments[0], arguments[1], args);
}
module.exports = retimer;

},{"./time":"iNXKr"}],"iNXKr":[function(require,module,exports) {
"use strict";
module.exports = function getTime() {
    return Date.now();
};

},{}],"9vRcK":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:circuit"), {
    error: debug("libp2p:circuit:err")
});
const errCode = require("err-code");
const mafmt = require("mafmt");
const { Multiaddr  } = require("multiaddr");
const PeerId = require("peer-id");
const { CircuitRelay: CircuitPB  } = require("./protocol");
const { codes  } = require("../errors");
const toConnection = require("libp2p-utils/src/stream-to-ma-conn");
const { relay: multicodec  } = require("./multicodec");
const createListener = require("./listener");
const { handleCanHop , handleHop , hop  } = require("./circuit/hop");
const { handleStop  } = require("./circuit/stop");
const StreamHandler = require("./circuit/stream-handler");
const transportSymbol = Symbol.for("@libp2p/js-libp2p-circuit/circuit");
/**
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 */ class Circuit {
    /**
   * Creates an instance of the Circuit Transport.
   *
   * @class
   * @param {object} options
   * @param {import('../')} options.libp2p
   * @param {import('../upgrader')} options.upgrader
   */ constructor({ libp2p , upgrader  }){
        this._dialer = libp2p.dialer;
        this._registrar = libp2p.registrar;
        this._connectionManager = libp2p.connectionManager;
        this._upgrader = upgrader;
        this._options = libp2p._config.relay;
        this._libp2p = libp2p;
        this.peerId = libp2p.peerId;
        this._registrar.handle(multicodec, this._onProtocol.bind(this));
    }
    /**
   * @param {Object} props
   * @param {Connection} props.connection
   * @param {MuxedStream} props.stream
   */ async _onProtocol({ connection , stream  }) {
        /** @type {import('./circuit/stream-handler')} */ const streamHandler = new StreamHandler({
            stream
        });
        const request = await streamHandler.read();
        if (!request) return;
        const circuit = this;
        let virtualConnection;
        switch(request.type){
            case CircuitPB.Type.CAN_HOP:
                log("received CAN_HOP request from %s", connection.remotePeer.toB58String());
                await handleCanHop({
                    circuit,
                    connection,
                    streamHandler
                });
                break;
            case CircuitPB.Type.HOP:
                log("received HOP request from %s", connection.remotePeer.toB58String());
                virtualConnection = await handleHop({
                    connection,
                    request,
                    streamHandler,
                    circuit
                });
                break;
            case CircuitPB.Type.STOP:
                log("received STOP request from %s", connection.remotePeer.toB58String());
                virtualConnection = await handleStop({
                    connection,
                    request,
                    streamHandler
                });
                break;
            default:
                log("Request of type %s not supported", request.type);
        }
        if (virtualConnection) {
            // @ts-ignore dst peer will not be undefined
            const remoteAddr = new Multiaddr(request.dstPeer.addrs[0]);
            // @ts-ignore src peer will not be undefined
            const localAddr = new Multiaddr(request.srcPeer.addrs[0]);
            const maConn = toConnection({
                stream: virtualConnection,
                remoteAddr,
                localAddr
            });
            const type = request.type === CircuitPB.Type.HOP ? "relay" : "inbound";
            log("new %s connection %s", type, maConn.remoteAddr);
            const conn = await this._upgrader.upgradeInbound(maConn);
            log("%s connection %s upgraded", type, maConn.remoteAddr);
            this.handler && this.handler(conn);
        }
    }
    /**
   * Dial a peer over a relay
   *
   * @param {Multiaddr} ma - the multiaddr of the peer to dial
   * @param {Object} options - dial options
   * @param {AbortSignal} [options.signal] - An optional abort signal
   * @returns {Promise<Connection>} - the connection
   */ async dial(ma, options) {
        // Check the multiaddr to see if it contains a relay and a destination peer
        const addrs = ma.toString().split("/p2p-circuit");
        const relayAddr = new Multiaddr(addrs[0]);
        const destinationAddr = new Multiaddr(addrs[addrs.length - 1]);
        const relayId = relayAddr.getPeerId();
        const destinationId = destinationAddr.getPeerId();
        if (!relayId || !destinationId) {
            const errMsg = "Circuit relay dial failed as addresses did not have peer id";
            log.error(errMsg);
            throw errCode(new Error(errMsg), codes.ERR_RELAYED_DIAL);
        }
        const relayPeer = PeerId.createFromB58String(relayId);
        const destinationPeer = PeerId.createFromB58String(destinationId);
        let disconnectOnFailure = false;
        let relayConnection = this._connectionManager.get(relayPeer);
        if (!relayConnection) {
            relayConnection = await this._dialer.connectToPeer(relayAddr, options);
            disconnectOnFailure = true;
        }
        try {
            const virtualConnection = await hop({
                connection: relayConnection,
                request: {
                    type: CircuitPB.Type.HOP,
                    srcPeer: {
                        id: this.peerId.toBytes(),
                        addrs: this._libp2p.multiaddrs.map((addr)=>addr.bytes)
                    },
                    dstPeer: {
                        id: destinationPeer.toBytes(),
                        addrs: [
                            new Multiaddr(destinationAddr).bytes
                        ]
                    }
                }
            });
            const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${this.peerId.toB58String()}`);
            const maConn = toConnection({
                stream: virtualConnection,
                remoteAddr: ma,
                localAddr
            });
            log("new outbound connection %s", maConn.remoteAddr);
            return this._upgrader.upgradeOutbound(maConn);
        } catch (err) {
            log.error("Circuit relay dial failed", err);
            disconnectOnFailure && await relayConnection.close();
            throw err;
        }
    }
    /**
   * Create a listener
   *
   * @param {any} options
   * @param {Function} handler
   * @returns {import('libp2p-interfaces/src/transport/types').Listener}
   */ createListener(options, handler) {
        if (typeof options === "function") {
            handler = options;
            options = {};
        }
        // Called on successful HOP and STOP requests
        this.handler = handler;
        return createListener(this._libp2p);
    }
    /**
   * Filter check for all Multiaddrs that this transport can dial on
   *
   * @param {Multiaddr[]} multiaddrs
   * @returns {Multiaddr[]}
   */ filter(multiaddrs) {
        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [
            multiaddrs
        ];
        return multiaddrs.filter((ma)=>{
            return mafmt.Circuit.matches(ma);
        });
    }
    get [Symbol.toStringTag]() {
        return "Circuit";
    }
    /**
   * Checks if the given value is a Transport instance.
   *
   * @param {any} other
   * @returns {other is Transport}
   */ static isTransport(other) {
        return Boolean(other && other[transportSymbol]);
    }
}
module.exports = Circuit;

},{"debug":"l0oUb","err-code":"dUrrM","mafmt":"04arZ","multiaddr":"dOMJu","peer-id":"etBKN","./protocol":"2tRg6","../errors":"cFlaw","libp2p-utils/src/stream-to-ma-conn":"5trgv","./multicodec":"2W2O8","./listener":"cqhhI","./circuit/hop":"dF8lV","./circuit/stop":"9S4Xj","./circuit/stream-handler":"6ELSq"}],"04arZ":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
/**
 * @typedef {import('./types').MatchesFunction} MatchesFunction
 * @typedef {import('./types').PartialMatchesFunction} PartialMatchesFunction
 * @typedef {import('./types').Mafmt} Mafmt
 */ /*
 * Valid combinations
 */ const DNS4 = base("dns4");
const DNS6 = base("dns6");
const DNSADDR = base("dnsaddr");
const DNS = or(base("dns"), DNSADDR, DNS4, DNS6);
const IP = or(base("ip4"), base("ip6"));
const TCP = or(and(IP, base("tcp")), and(DNS, base("tcp")));
const UDP = and(IP, base("udp"));
const UTP = and(UDP, base("utp"));
const QUIC = and(UDP, base("quic"));
const WebSockets = or(and(TCP, base("ws")), and(DNS, base("ws")));
const WebSocketsSecure = or(and(TCP, base("wss")), and(DNS, base("wss")));
const HTTP = or(and(TCP, base("http")), and(IP, base("http")), and(DNS, base("http")));
const HTTPS = or(and(TCP, base("https")), and(IP, base("https")), and(DNS, base("https")));
const WebRTCStar = or(and(WebSockets, base("p2p-webrtc-star"), base("p2p")), and(WebSocketsSecure, base("p2p-webrtc-star"), base("p2p")), and(WebSockets, base("p2p-webrtc-star")), and(WebSocketsSecure, base("p2p-webrtc-star")));
const WebSocketStar = or(and(WebSockets, base("p2p-websocket-star"), base("p2p")), and(WebSocketsSecure, base("p2p-websocket-star"), base("p2p")), and(WebSockets, base("p2p-websocket-star")), and(WebSocketsSecure, base("p2p-websocket-star")));
const WebRTCDirect = or(and(HTTP, base("p2p-webrtc-direct"), base("p2p")), and(HTTPS, base("p2p-webrtc-direct"), base("p2p")), and(HTTP, base("p2p-webrtc-direct")), and(HTTPS, base("p2p-webrtc-direct")));
const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP, QUIC, DNS);
// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )
const Stardust = or(and(Reliable, base("p2p-stardust"), base("p2p")), and(Reliable, base("p2p-stardust")));
const _P2P = or(and(Reliable, base("p2p")), WebRTCStar, WebRTCDirect, base("p2p"));
const _Circuit = or(and(_P2P, base("p2p-circuit"), _P2P), and(_P2P, base("p2p-circuit")), and(base("p2p-circuit"), _P2P), and(Reliable, base("p2p-circuit")), and(base("p2p-circuit"), Reliable), base("p2p-circuit"));
const CircuitRecursive = ()=>or(and(_Circuit, CircuitRecursive), _Circuit);
const Circuit = CircuitRecursive();
const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);
module.exports = {
    DNS,
    DNS4,
    DNS6,
    DNSADDR,
    IP,
    TCP,
    UDP,
    QUIC,
    UTP,
    HTTP,
    HTTPS,
    WebSockets,
    WebSocketsSecure,
    WebSocketStar,
    WebRTCStar,
    WebRTCDirect,
    Reliable,
    Stardust,
    Circuit,
    P2P,
    IPFS: P2P
};
/*
 * Validation funcs
 */ /**
 * @param {PartialMatchesFunction} partialMatch
 */ function makeMatchesFunction(partialMatch) {
    /**
   * @type {MatchesFunction}
   */ function matches(a) {
        if (!Multiaddr.isMultiaddr(a)) try {
            a = new Multiaddr(a);
        } catch (err) {
            return false // also if it's invalid it's propably not matching as well so return false
            ;
        }
        const out = partialMatch(a.protoNames());
        if (out === null) return false;
        if (out === true || out === false) return out;
        return out.length === 0;
    }
    return matches;
}
/**
 * @param {Array<Mafmt | (() => Mafmt)>} args
 * @returns {Mafmt}
 */ function and(...args) {
    /**
   * @type {PartialMatchesFunction}
   */ function partialMatch(a) {
        if (a.length < args.length) return null;
        /** @type {boolean | string[] | null} */ let out = a;
        args.some((arg)=>{
            out = typeof arg === "function" ? arg().partialMatch(a) : arg.partialMatch(a);
            if (Array.isArray(out)) a = out;
            if (out === null) return true;
            return false;
        });
        return out;
    }
    return {
        toString: function() {
            return "{ " + args.join(" ") + " }";
        },
        input: args,
        matches: makeMatchesFunction(partialMatch),
        partialMatch: partialMatch
    };
}
/**
 * @param {Array<Mafmt | (() => Mafmt)>} args
 * @returns {Mafmt}
 */ function or(...args) {
    /**
   * @type {PartialMatchesFunction}
   */ function partialMatch(a) {
        let out = null;
        args.some((arg)=>{
            const res = typeof arg === "function" ? arg().partialMatch(a) : arg.partialMatch(a);
            if (res) {
                out = res;
                return true;
            }
            return false;
        });
        return out;
    }
    const result = {
        toString: function() {
            return "{ " + args.join(" ") + " }";
        },
        input: args,
        matches: makeMatchesFunction(partialMatch),
        partialMatch: partialMatch
    };
    return result;
}
/**
 * @param {string} n
 * @returns {Mafmt}
 */ function base(n) {
    const name = n;
    /**
   * @type {MatchesFunction}
   */ function matches(a) {
        let ma;
        if (typeof a === "string" || a instanceof Uint8Array) try {
            ma = new Multiaddr(a);
        } catch (err) {
            return false // also if it's invalid it's probably not matching as well so return false
            ;
        }
        else ma = a;
        const pnames = ma.protoNames();
        if (pnames.length === 1 && pnames[0] === name) return true;
        return false;
    }
    /**
   * @type {PartialMatchesFunction}
   */ function partialMatch(protos) {
        if (protos.length === 0) return null;
        if (protos[0] === name) return protos.slice(1);
        return null;
    }
    return {
        toString: function() {
            return name;
        },
        matches: matches,
        partialMatch: partialMatch
    };
}

},{"multiaddr":"dOMJu"}],"2tRg6":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-circuit"] || ($protobuf.roots["libp2p-circuit"] = {});
$root.CircuitRelay = function() {
    /**
     * Properties of a CircuitRelay.
     * @exports ICircuitRelay
     * @interface ICircuitRelay
     * @property {CircuitRelay.Type|null} [type] CircuitRelay type
     * @property {CircuitRelay.IPeer|null} [srcPeer] CircuitRelay srcPeer
     * @property {CircuitRelay.IPeer|null} [dstPeer] CircuitRelay dstPeer
     * @property {CircuitRelay.Status|null} [code] CircuitRelay code
     */ /**
     * Constructs a new CircuitRelay.
     * @exports CircuitRelay
     * @classdesc Represents a CircuitRelay.
     * @implements ICircuitRelay
     * @constructor
     * @param {ICircuitRelay=} [p] Properties to set
     */ function CircuitRelay(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * CircuitRelay type.
     * @member {CircuitRelay.Type} type
     * @memberof CircuitRelay
     * @instance
     */ CircuitRelay.prototype.type = 1;
    /**
     * CircuitRelay srcPeer.
     * @member {CircuitRelay.IPeer|null|undefined} srcPeer
     * @memberof CircuitRelay
     * @instance
     */ CircuitRelay.prototype.srcPeer = null;
    /**
     * CircuitRelay dstPeer.
     * @member {CircuitRelay.IPeer|null|undefined} dstPeer
     * @memberof CircuitRelay
     * @instance
     */ CircuitRelay.prototype.dstPeer = null;
    /**
     * CircuitRelay code.
     * @member {CircuitRelay.Status} code
     * @memberof CircuitRelay
     * @instance
     */ CircuitRelay.prototype.code = 100;
    /**
     * Encodes the specified CircuitRelay message. Does not implicitly {@link CircuitRelay.verify|verify} messages.
     * @function encode
     * @memberof CircuitRelay
     * @static
     * @param {ICircuitRelay} m CircuitRelay message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ CircuitRelay.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
        if (m.srcPeer != null && Object.hasOwnProperty.call(m, "srcPeer")) $root.CircuitRelay.Peer.encode(m.srcPeer, w.uint32(18).fork()).ldelim();
        if (m.dstPeer != null && Object.hasOwnProperty.call(m, "dstPeer")) $root.CircuitRelay.Peer.encode(m.dstPeer, w.uint32(26).fork()).ldelim();
        if (m.code != null && Object.hasOwnProperty.call(m, "code")) w.uint32(32).int32(m.code);
        return w;
    };
    /**
     * Decodes a CircuitRelay message from the specified reader or buffer.
     * @function decode
     * @memberof CircuitRelay
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {CircuitRelay} CircuitRelay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ CircuitRelay.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.CircuitRelay();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.srcPeer = $root.CircuitRelay.Peer.decode(r, r.uint32());
                    break;
                case 3:
                    m.dstPeer = $root.CircuitRelay.Peer.decode(r, r.uint32());
                    break;
                case 4:
                    m.code = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates a CircuitRelay message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CircuitRelay
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {CircuitRelay} CircuitRelay
     */ CircuitRelay.fromObject = function fromObject(d) {
        if (d instanceof $root.CircuitRelay) return d;
        var m = new $root.CircuitRelay();
        switch(d.type){
            case "HOP":
            case 1:
                m.type = 1;
                break;
            case "STOP":
            case 2:
                m.type = 2;
                break;
            case "STATUS":
            case 3:
                m.type = 3;
                break;
            case "CAN_HOP":
            case 4:
                m.type = 4;
                break;
        }
        if (d.srcPeer != null) {
            if (typeof d.srcPeer !== "object") throw TypeError(".CircuitRelay.srcPeer: object expected");
            m.srcPeer = $root.CircuitRelay.Peer.fromObject(d.srcPeer);
        }
        if (d.dstPeer != null) {
            if (typeof d.dstPeer !== "object") throw TypeError(".CircuitRelay.dstPeer: object expected");
            m.dstPeer = $root.CircuitRelay.Peer.fromObject(d.dstPeer);
        }
        switch(d.code){
            case "SUCCESS":
            case 100:
                m.code = 100;
                break;
            case "HOP_SRC_ADDR_TOO_LONG":
            case 220:
                m.code = 220;
                break;
            case "HOP_DST_ADDR_TOO_LONG":
            case 221:
                m.code = 221;
                break;
            case "HOP_SRC_MULTIADDR_INVALID":
            case 250:
                m.code = 250;
                break;
            case "HOP_DST_MULTIADDR_INVALID":
            case 251:
                m.code = 251;
                break;
            case "HOP_NO_CONN_TO_DST":
            case 260:
                m.code = 260;
                break;
            case "HOP_CANT_DIAL_DST":
            case 261:
                m.code = 261;
                break;
            case "HOP_CANT_OPEN_DST_STREAM":
            case 262:
                m.code = 262;
                break;
            case "HOP_CANT_SPEAK_RELAY":
            case 270:
                m.code = 270;
                break;
            case "HOP_CANT_RELAY_TO_SELF":
            case 280:
                m.code = 280;
                break;
            case "STOP_SRC_ADDR_TOO_LONG":
            case 320:
                m.code = 320;
                break;
            case "STOP_DST_ADDR_TOO_LONG":
            case 321:
                m.code = 321;
                break;
            case "STOP_SRC_MULTIADDR_INVALID":
            case 350:
                m.code = 350;
                break;
            case "STOP_DST_MULTIADDR_INVALID":
            case 351:
                m.code = 351;
                break;
            case "STOP_RELAY_REFUSED":
            case 390:
                m.code = 390;
                break;
            case "MALFORMED_MESSAGE":
            case 400:
                m.code = 400;
                break;
        }
        return m;
    };
    /**
     * Creates a plain object from a CircuitRelay message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CircuitRelay
     * @static
     * @param {CircuitRelay} m CircuitRelay
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ CircuitRelay.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            d.type = o.enums === String ? "HOP" : 1;
            d.srcPeer = null;
            d.dstPeer = null;
            d.code = o.enums === String ? "SUCCESS" : 100;
        }
        if (m.type != null && m.hasOwnProperty("type")) d.type = o.enums === String ? $root.CircuitRelay.Type[m.type] : m.type;
        if (m.srcPeer != null && m.hasOwnProperty("srcPeer")) d.srcPeer = $root.CircuitRelay.Peer.toObject(m.srcPeer, o);
        if (m.dstPeer != null && m.hasOwnProperty("dstPeer")) d.dstPeer = $root.CircuitRelay.Peer.toObject(m.dstPeer, o);
        if (m.code != null && m.hasOwnProperty("code")) d.code = o.enums === String ? $root.CircuitRelay.Status[m.code] : m.code;
        return d;
    };
    /**
     * Converts this CircuitRelay to JSON.
     * @function toJSON
     * @memberof CircuitRelay
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ CircuitRelay.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    /**
     * Status enum.
     * @name CircuitRelay.Status
     * @enum {number}
     * @property {number} SUCCESS=100 SUCCESS value
     * @property {number} HOP_SRC_ADDR_TOO_LONG=220 HOP_SRC_ADDR_TOO_LONG value
     * @property {number} HOP_DST_ADDR_TOO_LONG=221 HOP_DST_ADDR_TOO_LONG value
     * @property {number} HOP_SRC_MULTIADDR_INVALID=250 HOP_SRC_MULTIADDR_INVALID value
     * @property {number} HOP_DST_MULTIADDR_INVALID=251 HOP_DST_MULTIADDR_INVALID value
     * @property {number} HOP_NO_CONN_TO_DST=260 HOP_NO_CONN_TO_DST value
     * @property {number} HOP_CANT_DIAL_DST=261 HOP_CANT_DIAL_DST value
     * @property {number} HOP_CANT_OPEN_DST_STREAM=262 HOP_CANT_OPEN_DST_STREAM value
     * @property {number} HOP_CANT_SPEAK_RELAY=270 HOP_CANT_SPEAK_RELAY value
     * @property {number} HOP_CANT_RELAY_TO_SELF=280 HOP_CANT_RELAY_TO_SELF value
     * @property {number} STOP_SRC_ADDR_TOO_LONG=320 STOP_SRC_ADDR_TOO_LONG value
     * @property {number} STOP_DST_ADDR_TOO_LONG=321 STOP_DST_ADDR_TOO_LONG value
     * @property {number} STOP_SRC_MULTIADDR_INVALID=350 STOP_SRC_MULTIADDR_INVALID value
     * @property {number} STOP_DST_MULTIADDR_INVALID=351 STOP_DST_MULTIADDR_INVALID value
     * @property {number} STOP_RELAY_REFUSED=390 STOP_RELAY_REFUSED value
     * @property {number} MALFORMED_MESSAGE=400 MALFORMED_MESSAGE value
     */ CircuitRelay.Status = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[100] = "SUCCESS"] = 100;
        values[valuesById[220] = "HOP_SRC_ADDR_TOO_LONG"] = 220;
        values[valuesById[221] = "HOP_DST_ADDR_TOO_LONG"] = 221;
        values[valuesById[250] = "HOP_SRC_MULTIADDR_INVALID"] = 250;
        values[valuesById[251] = "HOP_DST_MULTIADDR_INVALID"] = 251;
        values[valuesById[260] = "HOP_NO_CONN_TO_DST"] = 260;
        values[valuesById[261] = "HOP_CANT_DIAL_DST"] = 261;
        values[valuesById[262] = "HOP_CANT_OPEN_DST_STREAM"] = 262;
        values[valuesById[270] = "HOP_CANT_SPEAK_RELAY"] = 270;
        values[valuesById[280] = "HOP_CANT_RELAY_TO_SELF"] = 280;
        values[valuesById[320] = "STOP_SRC_ADDR_TOO_LONG"] = 320;
        values[valuesById[321] = "STOP_DST_ADDR_TOO_LONG"] = 321;
        values[valuesById[350] = "STOP_SRC_MULTIADDR_INVALID"] = 350;
        values[valuesById[351] = "STOP_DST_MULTIADDR_INVALID"] = 351;
        values[valuesById[390] = "STOP_RELAY_REFUSED"] = 390;
        values[valuesById[400] = "MALFORMED_MESSAGE"] = 400;
        return values;
    }();
    /**
     * Type enum.
     * @name CircuitRelay.Type
     * @enum {number}
     * @property {number} HOP=1 HOP value
     * @property {number} STOP=2 STOP value
     * @property {number} STATUS=3 STATUS value
     * @property {number} CAN_HOP=4 CAN_HOP value
     */ CircuitRelay.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "HOP"] = 1;
        values[valuesById[2] = "STOP"] = 2;
        values[valuesById[3] = "STATUS"] = 3;
        values[valuesById[4] = "CAN_HOP"] = 4;
        return values;
    }();
    CircuitRelay.Peer = function() {
        /**
         * Properties of a Peer.
         * @memberof CircuitRelay
         * @interface IPeer
         * @property {Uint8Array} id Peer id
         * @property {Array.<Uint8Array>|null} [addrs] Peer addrs
         */ /**
         * Constructs a new Peer.
         * @memberof CircuitRelay
         * @classdesc Represents a Peer.
         * @implements IPeer
         * @constructor
         * @param {CircuitRelay.IPeer=} [p] Properties to set
         */ function Peer(p) {
            this.addrs = [];
            if (p) {
                for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
        }
        /**
         * Peer id.
         * @member {Uint8Array} id
         * @memberof CircuitRelay.Peer
         * @instance
         */ Peer.prototype.id = $util.newBuffer([]);
        /**
         * Peer addrs.
         * @member {Array.<Uint8Array>} addrs
         * @memberof CircuitRelay.Peer
         * @instance
         */ Peer.prototype.addrs = $util.emptyArray;
        /**
         * Encodes the specified Peer message. Does not implicitly {@link CircuitRelay.Peer.verify|verify} messages.
         * @function encode
         * @memberof CircuitRelay.Peer
         * @static
         * @param {CircuitRelay.IPeer} m Peer message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */ Peer.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            w.uint32(10).bytes(m.id);
            if (m.addrs != null && m.addrs.length) for(var i = 0; i < m.addrs.length; ++i)w.uint32(18).bytes(m.addrs[i]);
            return w;
        };
        /**
         * Decodes a Peer message from the specified reader or buffer.
         * @function decode
         * @memberof CircuitRelay.Peer
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {CircuitRelay.Peer} Peer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */ Peer.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.CircuitRelay.Peer();
            while(r.pos < c){
                var t = r.uint32();
                switch(t >>> 3){
                    case 1:
                        m.id = r.bytes();
                        break;
                    case 2:
                        if (!(m.addrs && m.addrs.length)) m.addrs = [];
                        m.addrs.push(r.bytes());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            if (!m.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
                instance: m
            });
            return m;
        };
        /**
         * Creates a Peer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CircuitRelay.Peer
         * @static
         * @param {Object.<string,*>} d Plain object
         * @returns {CircuitRelay.Peer} Peer
         */ Peer.fromObject = function fromObject(d) {
            if (d instanceof $root.CircuitRelay.Peer) return d;
            var m = new $root.CircuitRelay.Peer();
            if (d.id != null) {
                if (typeof d.id === "string") $util.base64.decode(d.id, m.id = $util.newBuffer($util.base64.length(d.id)), 0);
                else if (d.id.length) m.id = d.id;
            }
            if (d.addrs) {
                if (!Array.isArray(d.addrs)) throw TypeError(".CircuitRelay.Peer.addrs: array expected");
                m.addrs = [];
                for(var i = 0; i < d.addrs.length; ++i){
                    if (typeof d.addrs[i] === "string") $util.base64.decode(d.addrs[i], m.addrs[i] = $util.newBuffer($util.base64.length(d.addrs[i])), 0);
                    else if (d.addrs[i].length) m.addrs[i] = d.addrs[i];
                }
            }
            return m;
        };
        /**
         * Creates a plain object from a Peer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CircuitRelay.Peer
         * @static
         * @param {CircuitRelay.Peer} m Peer
         * @param {$protobuf.IConversionOptions} [o] Conversion options
         * @returns {Object.<string,*>} Plain object
         */ Peer.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};
            if (o.arrays || o.defaults) d.addrs = [];
            if (o.defaults) {
                if (o.bytes === String) d.id = "";
                else {
                    d.id = [];
                    if (o.bytes !== Array) d.id = $util.newBuffer(d.id);
                }
            }
            if (m.id != null && m.hasOwnProperty("id")) d.id = o.bytes === String ? $util.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;
            if (m.addrs && m.addrs.length) {
                d.addrs = [];
                for(var j = 0; j < m.addrs.length; ++j)d.addrs[j] = o.bytes === String ? $util.base64.encode(m.addrs[j], 0, m.addrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.addrs[j]) : m.addrs[j];
            }
            return d;
        };
        /**
         * Converts this Peer to JSON.
         * @function toJSON
         * @memberof CircuitRelay.Peer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */ Peer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Peer;
    }();
    return CircuitRelay;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"5trgv":[function(require,module,exports) {
"use strict";
const { source: abortable  } = require("abortable-iterator");
const debug = require("debug");
const log = debug("libp2p:stream:converter");
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 *
 * @typedef {Object} Timeline
 * @property {number} open - connection opening timestamp.
 * @property {number} [upgraded] - connection upgraded timestamp.
 * @property {number} [close]
 */ /**
 * Convert a duplex iterable into a MultiaddrConnection.
 * https://github.com/libp2p/interface-transport#multiaddrconnection
 *
 * @param {object} streamProperties
 * @param {MuxedStream} streamProperties.stream
 * @param {Multiaddr} streamProperties.remoteAddr
 * @param {Multiaddr} streamProperties.localAddr
 * @param {object} [options]
 * @param {AbortSignal} [options.signal]
 * @returns {import('libp2p-interfaces/src/transport/types').MultiaddrConnection}
 */ function streamToMaConnection({ stream , remoteAddr , localAddr  }, options = {}) {
    const { sink , source: source1  } = stream;
    const maConn = {
        /**
     * @param {Uint8Array} source
     */ async sink (source) {
            if (options.signal) // @ts-ignore ts infers source template will be a number
            source = abortable(source, options.signal);
            try {
                await sink(source);
            } catch (err) {
                // If aborted we can safely ignore
                if (err.type !== "aborted") // If the source errored the socket will already have been destroyed by
                // toIterable.duplex(). If the socket errored it will already be
                // destroyed. There's nothing to do here except log the error & return.
                log(err);
            }
            close();
        },
        source: options.signal ? abortable(source1, options.signal) : source1,
        conn: stream,
        localAddr,
        remoteAddr,
        /** @type {Timeline} */ timeline: {
            open: Date.now(),
            close: undefined
        },
        close () {
            sink(new Uint8Array(0));
            return close();
        }
    };
    function close() {
        if (!maConn.timeline.close) maConn.timeline.close = Date.now();
        return Promise.resolve();
    }
    return maConn;
}
module.exports = streamToMaConnection;

},{"abortable-iterator":"jIHDo","debug":"l0oUb"}],"jIHDo":[function(require,module,exports) {
const getIterator = require("get-iterator");
const AbortError = require("./AbortError");
// Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort
const toAbortableSource = (source, signal, options)=>toMultiAbortableSource(source, Array.isArray(signal) ? signal : [
        {
            signal,
            options
        }
    ]);
const toMultiAbortableSource = (source, signals)=>{
    source = getIterator(source);
    signals = signals.map(({ signal , options  })=>({
            signal,
            options: options || {}
        }));
    async function* abortable() {
        let nextAbortHandler;
        const abortHandler = ()=>{
            if (nextAbortHandler) nextAbortHandler();
        };
        for (const { signal  } of signals)signal.addEventListener("abort", abortHandler);
        while(true){
            let result;
            try {
                for (const { signal: signal2 , options: options1  } of signals)if (signal2.aborted) {
                    const { abortMessage , abortCode  } = options1;
                    throw new AbortError(abortMessage, abortCode);
                }
                const abort = new Promise((resolve, reject)=>{
                    nextAbortHandler = ()=>{
                        const { options  } = signals.find(({ signal  })=>signal.aborted);
                        const { abortMessage , abortCode  } = options;
                        reject(new AbortError(abortMessage, abortCode));
                    };
                });
                // Race the iterator and the abort signals
                result = await Promise.race([
                    abort,
                    source.next()
                ]);
                nextAbortHandler = null;
            } catch (err1) {
                for (const { signal: signal4  } of signals)signal4.removeEventListener("abort", abortHandler);
                // Might not have been aborted by a known signal
                const aborter = signals.find(({ signal  })=>signal.aborted);
                const isKnownAborter = err1.type === "aborted" && aborter;
                if (isKnownAborter && aborter.options.onAbort) // Do any custom abort handling for the iterator
                await aborter.options.onAbort(source);
                // End the iterator if it is a generator
                if (typeof source.return === "function") try {
                    const p = source.return();
                    if (p instanceof Promise) p.catch((err)=>{
                        if (aborter.options.onReturnError != null) aborter.options.onReturnError(err);
                    });
                } catch (err) {
                    if (aborter.options.onReturnError != null) aborter.options.onReturnError(err);
                }
                if (isKnownAborter && aborter.options.returnOnAbort) return;
                throw err1;
            }
            if (result.done) break;
            yield result.value;
        }
        for (const { signal: signal1  } of signals)signal1.removeEventListener("abort", abortHandler);
    }
    return abortable();
};
const toAbortableSink = (sink, signal, options)=>toMultiAbortableSink(sink, Array.isArray(signal) ? signal : [
        {
            signal,
            options
        }
    ]);
const toMultiAbortableSink = (sink, signals)=>(source)=>sink(toMultiAbortableSource(source, signals));
const toAbortableDuplex = (duplex, signal, options)=>toMultiAbortableDuplex(duplex, Array.isArray(signal) ? signal : [
        {
            signal,
            options
        }
    ]);
const toMultiAbortableDuplex = (duplex, signals)=>({
        sink: toMultiAbortableSink(duplex.sink, signals),
        source: toMultiAbortableSource(duplex.source, signals)
    });
module.exports = toAbortableSource;
module.exports.AbortError = AbortError;
module.exports.source = toAbortableSource;
module.exports.sink = toAbortableSink;
module.exports.transform = toAbortableSink;
module.exports.duplex = toAbortableDuplex;

},{"get-iterator":"bU9aM","./AbortError":"eGunD"}],"bU9aM":[function(require,module,exports) {
// If the passed object is an (async) iterable, then get the iterator
// If it's probably an iterator already (i.e. has next function) return it
// else throw
module.exports = function getIterator(obj) {
    if (obj) {
        if (typeof obj[Symbol.iterator] === "function") return obj[Symbol.iterator]();
        if (typeof obj[Symbol.asyncIterator] === "function") return obj[Symbol.asyncIterator]();
        if (typeof obj.next === "function") return obj // probably an iterator
        ;
    }
    throw new Error("argument is not an iterator or iterable");
};

},{}],"eGunD":[function(require,module,exports) {
module.exports = class AbortError extends Error {
    constructor(message, code){
        super(message || "The operation was aborted");
        this.type = "aborted";
        this.code = code || "ABORT_ERR";
    }
};

},{}],"2W2O8":[function(require,module,exports) {
"use strict";
module.exports = {
    relay: "/libp2p/circuit/relay/0.1.0"
};

},{}],"cqhhI":[function(require,module,exports) {
"use strict";
const { EventEmitter  } = require("events");
const { Multiaddr  } = require("multiaddr");
/**
 * @typedef {import('libp2p-interfaces/src/transport/types').Listener} Listener
 */ /**
 * @param {import('../')} libp2p
 * @returns {Listener} a transport listener
 */ module.exports = (libp2p)=>{
    const listeningAddrs = new Map();
    /**
   * Add swarm handler and listen for incoming connections
   *
   * @param {Multiaddr} addr
   * @returns {Promise<void>}
   */ async function listen(addr) {
        const addrString = String(addr).split("/p2p-circuit").find((a)=>a !== "");
        const relayConn = await libp2p.dial(new Multiaddr(addrString));
        const relayedAddr = relayConn.remoteAddr.encapsulate("/p2p-circuit");
        listeningAddrs.set(relayConn.remotePeer.toB58String(), relayedAddr);
        listener.emit("listening");
    }
    /**
   * Get fixed up multiaddrs
   *
   * NOTE: This method will grab the peers multiaddrs and expand them such that:
   *
   * a) If it's an existing /p2p-circuit address for a specific relay i.e.
   * `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the
   * address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where
   * `QmPeer` is this peers id
   * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit
   * addr, such when dialing over a relay with this address, it will create the circuit using
   * the encapsulated transport address. This is useful when for example, a peer should only
   * be dialed over TCP rather than any other transport
   *
   * @returns {Multiaddr[]}
   */ function getAddrs() {
        const addrs = [];
        for (const addr of listeningAddrs.values())addrs.push(addr);
        return addrs;
    }
    /** @type Listener */ const listener = Object.assign(new EventEmitter(), {
        close: ()=>Promise.resolve(),
        listen,
        getAddrs
    });
    // Remove listeningAddrs when a peer disconnects
    libp2p.connectionManager.on("peer:disconnect", (connection)=>{
        const deleted = listeningAddrs.delete(connection.remotePeer.toB58String());
        if (deleted) // Announce listen addresses change
        listener.emit("close");
    });
    return listener;
};

},{"events":"1VQLm","multiaddr":"dOMJu"}],"dF8lV":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:circuit:hop"), {
    error: debug("libp2p:circuit:hop:err")
});
const errCode = require("err-code");
const PeerId = require("peer-id");
const { validateAddrs  } = require("./utils");
const StreamHandler = require("./stream-handler");
const { CircuitRelay: CircuitPB  } = require("../protocol");
const { pipe  } = require("it-pipe");
const { codes: Errors  } = require("../../errors");
const { stop  } = require("./stop");
const multicodec = require("./../multicodec");
/**
 * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 * @typedef {import('../transport')} Transport
 */ /**
 * @typedef {Object} HopRequest
 * @property {Connection} connection
 * @property {ICircuitRelay} request
 * @property {StreamHandler} streamHandler
 * @property {Transport} circuit
 */ /**
 * @param {HopRequest} options
 * @returns {Promise<void>}
 */ async function handleHop({ connection , request , streamHandler , circuit  }) {
    // Ensure hop is enabled
    if (!circuit._options.hop.enabled) {
        log("HOP request received but we are not acting as a relay");
        return streamHandler.end({
            type: CircuitPB.Type.STATUS,
            code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY
        });
    }
    // Validate the HOP request has the required input
    try {
        validateAddrs(request, streamHandler);
    } catch (err) {
        return log.error("invalid hop request via peer %s", connection.remotePeer.toB58String(), err);
    }
    if (!request.dstPeer) {
        log("HOP request received but we do not receive a dstPeer");
        return;
    }
    // Get the connection to the destination (stop) peer
    const destinationPeer = new PeerId(request.dstPeer.id);
    const destinationConnection = circuit._connectionManager.get(destinationPeer);
    if (!destinationConnection && !circuit._options.hop.active) {
        log("HOP request received but we are not connected to the destination peer");
        return streamHandler.end({
            type: CircuitPB.Type.STATUS,
            code: CircuitPB.Status.HOP_NO_CONN_TO_DST
        });
    }
    // TODO: Handle being an active relay
    if (!destinationConnection) return;
    // Handle the incoming HOP request by performing a STOP request
    const stopRequest = {
        type: CircuitPB.Type.STOP,
        dstPeer: request.dstPeer,
        srcPeer: request.srcPeer
    };
    let destinationStream;
    try {
        destinationStream = await stop({
            connection: destinationConnection,
            request: stopRequest
        });
    } catch (err1) {
        return log.error(err1);
    }
    log("hop request from %s is valid", connection.remotePeer.toB58String());
    streamHandler.write({
        type: CircuitPB.Type.STATUS,
        code: CircuitPB.Status.SUCCESS
    });
    const sourceStream = streamHandler.rest();
    // Short circuit the two streams to create the relayed connection
    return pipe(sourceStream, destinationStream, sourceStream);
}
/**
 * Performs a HOP request to a relay peer, to request a connection to another
 * peer. A new, virtual, connection will be created between the two via the relay.
 *
 * @param {object} options
 * @param {Connection} options.connection - Connection to the relay
 * @param {ICircuitRelay} options.request
 * @returns {Promise<MuxedStream>}
 */ async function hop({ connection , request  }) {
    // Create a new stream to the relay
    const { stream  } = await connection.newStream([
        multicodec.relay
    ]);
    // Send the HOP request
    const streamHandler = new StreamHandler({
        stream
    });
    streamHandler.write(request);
    const response = await streamHandler.read();
    if (!response) throw errCode(new Error("HOP request had no response"), Errors.ERR_HOP_REQUEST_FAILED);
    if (response.code === CircuitPB.Status.SUCCESS) {
        log("hop request was successful");
        return streamHandler.rest();
    }
    log("hop request failed with code %d, closing stream", response.code);
    streamHandler.close();
    throw errCode(new Error(`HOP request failed with code ${response.code}`), Errors.ERR_HOP_REQUEST_FAILED);
}
/**
 * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities.
 *
 * @param {object} options
 * @param {Connection} options.connection - Connection to the relay
 * @returns {Promise<boolean>}
 */ async function canHop({ connection  }) {
    // Create a new stream to the relay
    const { stream  } = await connection.newStream([
        multicodec.relay
    ]);
    // Send the HOP request
    const streamHandler = new StreamHandler({
        stream
    });
    streamHandler.write({
        type: CircuitPB.Type.CAN_HOP
    });
    const response = await streamHandler.read();
    await streamHandler.close();
    if (!response || response.code !== CircuitPB.Status.SUCCESS) return false;
    return true;
}
/**
 * Creates an unencoded CAN_HOP response based on the Circuits configuration
 *
 * @param {Object} options
 * @param {Connection} options.connection
 * @param {StreamHandler} options.streamHandler
 * @param {Transport} options.circuit
 * @private
 */ function handleCanHop({ connection , streamHandler , circuit  }) {
    const canHop1 = circuit._options.hop.enabled;
    log("can hop (%s) request from %s", canHop1, connection.remotePeer.toB58String());
    streamHandler.end({
        type: CircuitPB.Type.STATUS,
        code: canHop1 ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY
    });
}
module.exports = {
    handleHop,
    hop,
    canHop,
    handleCanHop
};

},{"debug":"l0oUb","err-code":"dUrrM","peer-id":"etBKN","./utils":"lC6Us","./stream-handler":"6ELSq","../protocol":"2tRg6","it-pipe":"jkWle","../../errors":"cFlaw","./stop":"9S4Xj","./../multicodec":"2W2O8"}],"lC6Us":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const { CircuitRelay  } = require("../protocol");
/**
 * @typedef {import('./stream-handler')} StreamHandler
 * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay
 */ /**
 * Write a response
 *
 * @param {StreamHandler} streamHandler
 * @param {import('../protocol').CircuitRelay.Status} status
 */ function writeResponse(streamHandler, status) {
    streamHandler.write({
        type: CircuitRelay.Type.STATUS,
        code: status
    });
}
/**
 * Validate incomming HOP/STOP message
 *
 * @param {ICircuitRelay} msg - A CircuitRelay unencoded protobuf message
 * @param {StreamHandler} streamHandler
 */ function validateAddrs(msg, streamHandler) {
    try {
        if (msg.dstPeer && msg.dstPeer.addrs) msg.dstPeer.addrs.forEach((addr)=>{
            return new Multiaddr(addr);
        });
    } catch (err) {
        writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID);
        throw err;
    }
    try {
        if (msg.srcPeer && msg.srcPeer.addrs) msg.srcPeer.addrs.forEach((addr)=>{
            return new Multiaddr(addr);
        });
    } catch (err1) {
        writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID);
        throw err1;
    }
}
module.exports = {
    validateAddrs
};

},{"multiaddr":"dOMJu","../protocol":"2tRg6"}],"6ELSq":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:circuit:stream-handler"), {
    error: debug("libp2p:circuit:stream-handler:err")
});
const lp = require("it-length-prefixed");
// @ts-ignore it-handshake does not export types
const handshake = require("it-handshake");
const { CircuitRelay  } = require("../protocol");
/**
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay
 */ class StreamHandler {
    /**
   * Create a stream handler for connection
   *
   * @class
   * @param {object} options
   * @param {MuxedStream} options.stream - A duplex iterable
   * @param {number} [options.maxLength = 4096] - max bytes length of message
   */ constructor({ stream , maxLength =4096  }){
        this.stream = stream;
        this.shake = handshake(this.stream);
        // @ts-ignore options are not optional
        this.decoder = lp.decode.fromReader(this.shake.reader, {
            maxDataLength: maxLength
        });
    }
    /**
   * Read and decode message
   *
   * @async
   */ async read() {
        const msg = await this.decoder.next();
        if (msg.value) {
            const value = CircuitRelay.decode(msg.value.slice());
            log("read message type", value.type);
            return value;
        }
        log("read received no value, closing stream");
        // End the stream, we didn't get data
        this.close();
    }
    /**
   * Encode and write array of buffers
   *
   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message
   * @returns {void}
   */ write(msg) {
        log("write message type %s", msg.type);
        // @ts-ignore lp.encode expects type type 'Buffer | BufferList', not 'Uint8Array'
        this.shake.write(lp.encode.single(CircuitRelay.encode(msg).finish()));
    }
    /**
   * Return the handshake rest stream and invalidate handler
   *
   * @returns {*} A duplex iterable
   */ rest() {
        this.shake.rest();
        return this.shake.stream;
    }
    /**
   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message
   */ end(msg) {
        this.write(msg);
        this.close();
    }
    /**
   * Close the stream
   *
   * @returns {void}
   */ close() {
        log("closing the stream");
        this.rest().sink([]);
    }
}
module.exports = StreamHandler;

},{"debug":"l0oUb","it-length-prefixed":"31lGp","it-handshake":"kpk2i","../protocol":"2tRg6"}],"kpk2i":[function(require,module,exports) {
"use strict";
const Reader = require("it-reader");
const Writer = require("it-pushable");
const defer = require("p-defer");
// Convert a duplex stream into a reader and writer and rest stream
module.exports = (stream)=>{
    const writer = Writer() // Write bytes on demand to the sink
    ;
    const reader = Reader(stream.source) // Read bytes on demand from the source
    ;
    // Waits for a source to be passed to the rest stream's sink
    const sourcePromise = defer();
    let sinkErr;
    const sinkPromise = stream.sink(async function*() {
        yield* writer;
        const source = await sourcePromise.promise;
        yield* source;
    }());
    sinkPromise.catch((err)=>{
        sinkErr = err;
    });
    const rest = {
        sink: (source)=>{
            if (sinkErr) return Promise.reject(sinkErr);
            sourcePromise.resolve(source);
            return sinkPromise;
        },
        source: reader
    };
    return {
        reader,
        writer,
        stream: rest,
        rest: ()=>writer.end(),
        write: writer.push,
        read: async ()=>{
            return (await reader.next()).value;
        }
    };
};

},{"it-reader":"giids","it-pushable":"fVlDP","p-defer":"cWx93"}],"giids":[function(require,module,exports) {
const BufferList = require("bl/BufferList");
module.exports = (source)=>{
    const reader = async function*() {
        let bytes = yield // Allows us to receive 8 when reader.next(8) is called
        ;
        let bl = new BufferList();
        for await (const chunk of source){
            if (!bytes) {
                bytes = yield bl.append(chunk);
                bl = new BufferList();
                continue;
            }
            bl.append(chunk);
            while(bl.length >= bytes){
                const data = bl.shallowSlice(0, bytes);
                bl.consume(bytes);
                bytes = yield data;
                // If we no longer want a specific byte length, we yield the rest now
                if (!bytes) {
                    if (bl.length) {
                        bytes = yield bl;
                        bl = new BufferList();
                    }
                    break; // bytes is null and/or no more buffer to yield
                }
            }
        }
        // Consumer wants more bytes but the source has ended and our buffer
        // is not big enough to satisfy.
        if (bytes) throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), {
            code: "ERR_UNDER_READ",
            buffer: bl
        });
    }();
    reader.next();
    return reader;
};

},{"bl/BufferList":"cf0Az"}],"cWx93":[function(require,module,exports) {
"use strict";
const pDefer = ()=>{
    const deferred = {};
    deferred.promise = new Promise((resolve, reject)=>{
        deferred.resolve = resolve;
        deferred.reject = reject;
    });
    return deferred;
};
module.exports = pDefer;

},{}],"9S4Xj":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:circuit:stop"), {
    error: debug("libp2p:circuit:stop:err")
});
const { CircuitRelay: CircuitPB  } = require("../protocol");
const multicodec = require("../multicodec");
const StreamHandler = require("./stream-handler");
const { validateAddrs  } = require("./utils");
/**
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay
 */ /**
 * Handles incoming STOP requests
 *
 * @private
 * @param {Object} options
 * @param {Connection} options.connection
 * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)
 * @param {StreamHandler} options.streamHandler
 * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable
 */ module.exports.handleStop = function handleStop({ connection , request , streamHandler  }) {
    // Validate the STOP request has the required input
    try {
        validateAddrs(request, streamHandler);
    } catch (err) {
        return log.error("invalid stop request via peer %s", connection.remotePeer.toB58String(), err);
    }
    // The request is valid
    log("stop request is valid");
    streamHandler.write({
        type: CircuitPB.Type.STATUS,
        code: CircuitPB.Status.SUCCESS
    });
    return streamHandler.rest();
};
/**
 * Creates a STOP request
 *
 * @private
 * @param {Object} options
 * @param {Connection} options.connection
 * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)
 * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable
 */ module.exports.stop = async function stop({ connection , request  }) {
    const { stream  } = await connection.newStream([
        multicodec.relay
    ]);
    log("starting stop request to %s", connection.remotePeer.toB58String());
    const streamHandler = new StreamHandler({
        stream
    });
    streamHandler.write(request);
    const response = await streamHandler.read();
    if (!response) return streamHandler.close();
    if (response.code === CircuitPB.Status.SUCCESS) {
        log("stop request to %s was successful", connection.remotePeer.toB58String());
        return streamHandler.rest();
    }
    log("stop request failed with code %d", response.code);
    streamHandler.close();
};

},{"debug":"l0oUb","../protocol":"2tRg6","../multicodec":"2W2O8","./stream-handler":"6ELSq","./utils":"lC6Us"}],"UgIqX":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:relay"), {
    error: debug("libp2p:relay:err")
});
const { setDelayedInterval , clearDelayedInterval  } = require("set-delayed-interval");
const AutoRelay = require("./auto-relay");
const { namespaceToCid  } = require("./utils");
const { RELAY_RENDEZVOUS_NS  } = require("./constants");
/**
 * @typedef {import('../')} Libp2p
 *
 * @typedef {Object} RelayAdvertiseOptions
 * @property {number} [bootDelay = ADVERTISE_BOOT_DELAY]
 * @property {boolean} [enabled = true]
 * @property {number} [ttl = ADVERTISE_TTL]
 *
 * @typedef {Object} HopOptions
 * @property {boolean} [enabled = false]
 * @property {boolean} [active = false]
 *
 * @typedef {Object} AutoRelayOptions
 * @property {number} [maxListeners = 2] - maximum number of relays to listen.
 * @property {boolean} [enabled = false]
 */ class Relay {
    /**
   * Creates an instance of Relay.
   *
   * @class
   * @param {Libp2p} libp2p
   */ constructor(libp2p){
        this._libp2p = libp2p;
        this._options = {
            ...libp2p._config.relay
        };
        // Create autoRelay if enabled
        this._autoRelay = this._options.autoRelay.enabled && new AutoRelay({
            libp2p,
            ...this._options.autoRelay
        });
        this._advertiseService = this._advertiseService.bind(this);
    }
    /**
   * Start Relay service.
   *
   * @returns {void}
   */ start() {
        // Advertise service if HOP enabled
        const canHop = this._options.hop.enabled;
        if (canHop && this._options.advertise.enabled) this._timeout = setDelayedInterval(this._advertiseService, this._options.advertise.ttl, this._options.advertise.bootDelay);
    }
    /**
   * Stop Relay service.
   *
   * @returns {void}
   */ stop() {
        clearDelayedInterval(this._timeout);
    }
    /**
   * Advertise hop relay service in the network.
   *
   * @returns {Promise<void>}
   */ async _advertiseService() {
        try {
            const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);
            await this._libp2p.contentRouting.provide(cid);
        } catch (err) {
            if (err.code === "NO_ROUTERS_AVAILABLE") {
                log.error("a content router, such as a DHT, must be provided in order to advertise the relay service", err);
                // Stop the advertise
                this.stop();
            } else log.error(err);
        }
    }
}
module.exports = Relay;

},{"debug":"l0oUb","set-delayed-interval":"8jeXM","./auto-relay":"EUsI1","./utils":"k4oeE","./constants":"3qN8b"}],"EUsI1":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:auto-relay"), {
    error: debug("libp2p:auto-relay:err")
});
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { Multiaddr  } = require("multiaddr");
const PeerId = require("peer-id");
const { relay: multicodec  } = require("./multicodec");
const { canHop  } = require("./circuit/hop");
const { namespaceToCid  } = require("./utils");
const { CIRCUIT_PROTO_CODE , HOP_METADATA_KEY , HOP_METADATA_VALUE , RELAY_RENDEZVOUS_NS  } = require("./constants");
/**
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('../peer-store/address-book').Address} Address
 */ /**
 * @typedef {Object} AutoRelayProperties
 * @property {import('../')} libp2p
 *
 * @typedef {Object} AutoRelayOptions
 * @property {number} [maxListeners = 1] - maximum number of relays to listen.
 * @property {(error: Error, msg?: string) => {}} [onError]
 */ class AutoRelay {
    /**
   * Creates an instance of AutoRelay.
   *
   * @class
   * @param {AutoRelayProperties & AutoRelayOptions} props
   */ constructor({ libp2p , maxListeners =1 , onError  }){
        this._libp2p = libp2p;
        this._peerId = libp2p.peerId;
        this._peerStore = libp2p.peerStore;
        this._connectionManager = libp2p.connectionManager;
        this._transportManager = libp2p.transportManager;
        this._addressSorter = libp2p.dialer.addressSorter;
        this.maxListeners = maxListeners;
        /**
     * @type {Set<string>}
     */ this._listenRelays = new Set();
        this._onProtocolChange = this._onProtocolChange.bind(this);
        this._onPeerDisconnected = this._onPeerDisconnected.bind(this);
        this._peerStore.on("change:protocols", this._onProtocolChange);
        this._connectionManager.on("peer:disconnect", this._onPeerDisconnected);
        /**
     * @param {Error} error
     * @param {string} [msg]
     */ this._onError = (error, msg)=>{
            log.error(msg || error);
            onError && onError(error, msg);
        };
    }
    /**
   * Check if a peer supports the relay protocol.
   * If the protocol is not supported, check if it was supported before and remove it as a listen relay.
   * If the protocol is supported, check if the peer supports **HOP** and add it as a listener if
   * inside the threshold.
   *
   * @param {Object} props
   * @param {PeerId} props.peerId
   * @param {string[]} props.protocols
   * @returns {Promise<void>}
   */ async _onProtocolChange({ peerId , protocols  }) {
        const id = peerId.toB58String();
        // Check if it has the protocol
        const hasProtocol = protocols.find((protocol)=>protocol === multicodec);
        // If no protocol, check if we were keeping the peer before as a listenRelay
        if (!hasProtocol && this._listenRelays.has(id)) {
            this._removeListenRelay(id);
            return;
        } else if (!hasProtocol || this._listenRelays.has(id)) return;
        // If protocol, check if can hop, store info in the metadataBook and listen on it
        try {
            const connection = this._connectionManager.get(peerId);
            if (!connection) return;
            // Do not hop on a relayed connection
            if (connection.remoteAddr.protoCodes().includes(CIRCUIT_PROTO_CODE)) {
                log(`relayed connection to ${id} will not be used to hop on`);
                return;
            }
            const supportsHop = await canHop({
                connection
            });
            if (supportsHop) {
                this._peerStore.metadataBook.set(peerId, HOP_METADATA_KEY, uint8ArrayFromString(HOP_METADATA_VALUE));
                await this._addListenRelay(connection, id);
            }
        } catch (err) {
            this._onError(err);
        }
    }
    /**
   * Peer disconnects.
   *
   * @param {Connection} connection - connection to the peer
   * @returns {void}
   */ _onPeerDisconnected(connection) {
        const peerId = connection.remotePeer;
        const id = peerId.toB58String();
        // Not listening on this relay
        if (!this._listenRelays.has(id)) return;
        this._removeListenRelay(id);
    }
    /**
   * Attempt to listen on the given relay connection.
   *
   * @private
   * @param {Connection} connection - connection to the peer
   * @param {string} id - peer identifier string
   * @returns {Promise<void>}
   */ async _addListenRelay(connection, id) {
        // Check if already listening on enough relays
        if (this._listenRelays.size >= this.maxListeners) return;
        // Get peer known addresses and sort them per public addresses first
        const remoteAddrs = this._peerStore.addressBook.getMultiaddrsForPeer(connection.remotePeer, this._addressSorter);
        if (!remoteAddrs || !remoteAddrs.length) return;
        const listenAddr = `${remoteAddrs[0].toString()}/p2p-circuit`;
        this._listenRelays.add(id);
        // Attempt to listen on relay
        try {
            await this._transportManager.listen([
                new Multiaddr(listenAddr)
            ]);
        // Announce multiaddrs will update on listen success by TransportManager event being triggered
        } catch (err) {
            this._onError(err);
            this._listenRelays.delete(id);
        }
    }
    /**
   * Remove listen relay.
   *
   * @private
   * @param {string} id - peer identifier string.
   * @returns {void}
   */ _removeListenRelay(id) {
        if (this._listenRelays.delete(id)) // TODO: this should be responsibility of the connMgr
        this._listenOnAvailableHopRelays([
            id
        ]);
    }
    /**
   * Try to listen on available hop relay connections.
   * The following order will happen while we do not have enough relays.
   * 1. Check the metadata store for known relays, try to listen on the ones we are already connected.
   * 2. Dial and try to listen on the peers we know that support hop but are not connected.
   * 3. Search the network.
   *
   * @param {string[]} [peersToIgnore]
   * @returns {Promise<void>}
   */ async _listenOnAvailableHopRelays(peersToIgnore = []) {
        // TODO: The peer redial issue on disconnect should be handled by connection gating
        // Check if already listening on enough relays
        if (this._listenRelays.size >= this.maxListeners) return;
        const knownHopsToDial = [];
        // Check if we have known hop peers to use and attempt to listen on the already connected
        for (const [id, metadataMap] of this._peerStore.metadataBook.data.entries()){
            // Continue to next if listening on this or peer to ignore
            if (this._listenRelays.has(id) || peersToIgnore.includes(id)) continue;
            const supportsHop = metadataMap.get(HOP_METADATA_KEY);
            // Continue to next if it does not support Hop
            if (!supportsHop || uint8ArrayToString(supportsHop) !== HOP_METADATA_VALUE) continue;
            const peerId = PeerId.createFromB58String(id);
            const connection = this._connectionManager.get(peerId);
            // If not connected, store for possible later use.
            if (!connection) {
                knownHopsToDial.push(peerId);
                continue;
            }
            await this._addListenRelay(connection, id);
            // Check if already listening on enough relays
            if (this._listenRelays.size >= this.maxListeners) return;
        }
        // Try to listen on known peers that are not connected
        for (const peerId of knownHopsToDial){
            await this._tryToListenOnRelay(peerId);
            // Check if already listening on enough relays
            if (this._listenRelays.size >= this.maxListeners) return;
        }
        // Try to find relays to hop on the network
        try {
            const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);
            for await (const provider of this._libp2p.contentRouting.findProviders(cid)){
                if (!provider.multiaddrs.length) continue;
                const peerId = provider.id;
                this._peerStore.addressBook.add(peerId, provider.multiaddrs);
                await this._tryToListenOnRelay(peerId);
                // Check if already listening on enough relays
                if (this._listenRelays.size >= this.maxListeners) return;
            }
        } catch (err) {
            this._onError(err);
        }
    }
    /**
   * @param {PeerId} peerId
   */ async _tryToListenOnRelay(peerId) {
        try {
            const connection = await this._libp2p.dial(peerId);
            await this._addListenRelay(connection, peerId.toB58String());
        } catch (err) {
            this._onError(err, `could not connect and listen on known hop relay ${peerId.toB58String()}`);
        }
    }
}
module.exports = AutoRelay;

},{"debug":"l0oUb","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE","multiaddr":"dOMJu","peer-id":"etBKN","./multicodec":"2W2O8","./circuit/hop":"dF8lV","./utils":"k4oeE","./constants":"3qN8b"}],"k4oeE":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const { sha256  } = require("multiformats/hashes/sha2");
/**
 * Convert a namespace string into a cid.
 *
 * @param {string} namespace
 * @returns {Promise<CID>}
 */ module.exports.namespaceToCid = async (namespace)=>{
    const bytes = new TextEncoder().encode(namespace);
    const hash = await sha256.digest(bytes);
    return CID.createV0(hash);
};

},{"multiformats/cid":"4uoBU","multiformats/hashes/sha2":"7U0mx"}],"ljs9Y":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:dialer"), {
    error: debug("libp2p:dialer:err")
});
const errCode = require("err-code");
const { Multiaddr  } = require("multiaddr");
// @ts-ignore timeout-abourt-controles does not export types
const TimeoutController = require("timeout-abort-controller");
const { AbortError  } = require("abortable-iterator");
const { anySignal  } = require("any-signal");
const DialRequest = require("./dial-request");
const { publicAddressesFirst  } = require("libp2p-utils/src/address-sort");
const getPeer = require("../get-peer");
const { codes  } = require("../errors");
const { DIAL_TIMEOUT , MAX_PARALLEL_DIALS , MAX_PER_PEER_DIALS , MAX_ADDRS_TO_DIAL  } = require("../constants");
/**
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../peer-store')} PeerStore
 * @typedef {import('../peer-store/address-book').Address} Address
 * @typedef {import('../transport-manager')} TransportManager
 */ /**
 * @typedef {Object} DialerProperties
 * @property {PeerStore} peerStore
 * @property {TransportManager} transportManager
 *
 * @typedef {(addr:Multiaddr) => Promise<string[]>} Resolver
 *
 * @typedef {Object} DialerOptions
 * @property {(addresses: Address[]) => Address[]} [options.addressSorter = publicAddressesFirst] - Sort the known addresses of a peer before trying to dial.
 * @property {number} [maxParallelDials = MAX_PARALLEL_DIALS] - Number of max concurrent dials.
 * @property {number} [maxAddrsToDial = MAX_ADDRS_TO_DIAL] - Number of max addresses to dial for a given peer.
 * @property {number} [maxDialsPerPeer = MAX_PER_PEER_DIALS] - Number of max concurrent dials per peer.
 * @property {number} [dialTimeout = DIAL_TIMEOUT] - How long a dial attempt is allowed to take.
 * @property {Record<string, Resolver>} [resolvers = {}] - multiaddr resolvers to use when dialing
 *
 * @typedef DialTarget
 * @property {string} id
 * @property {Multiaddr[]} addrs
 *
 * @typedef PendingDial
 * @property {DialRequest} dialRequest
 * @property {TimeoutController} controller
 * @property {Promise<Connection>} promise
 * @property {function():void} destroy
 */ class Dialer {
    /**
   * @class
   * @param {DialerProperties & DialerOptions} options
   */ constructor({ transportManager , peerStore , addressSorter =publicAddressesFirst , maxParallelDials =MAX_PARALLEL_DIALS , maxAddrsToDial =MAX_ADDRS_TO_DIAL , dialTimeout =DIAL_TIMEOUT , maxDialsPerPeer =MAX_PER_PEER_DIALS , resolvers ={}  }){
        this.transportManager = transportManager;
        this.peerStore = peerStore;
        this.addressSorter = addressSorter;
        this.maxParallelDials = maxParallelDials;
        this.maxAddrsToDial = maxAddrsToDial;
        this.timeout = dialTimeout;
        this.maxDialsPerPeer = maxDialsPerPeer;
        this.tokens = [
            ...new Array(maxParallelDials)
        ].map((_, index)=>index);
        this._pendingDials = new Map();
        this._pendingDialTargets = new Map();
        for (const [key, value] of Object.entries(resolvers))Multiaddr.resolvers.set(key, value);
    }
    /**
   * Clears any pending dials
   */ destroy() {
        for (const dial of this._pendingDials.values())try {
            dial.controller.abort();
        } catch (err) {
            log.error(err);
        }
        this._pendingDials.clear();
        for (const pendingTarget of this._pendingDialTargets.values())pendingTarget.reject(new AbortError("Dialer was destroyed"));
        this._pendingDialTargets.clear();
    }
    /**
   * Connects to a given `peer` by dialing all of its known addresses.
   * The dial to the first address that is successfully able to upgrade a connection
   * will be used.
   *
   * @param {PeerId|Multiaddr|string} peer - The peer to dial
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] - An AbortController signal
   * @returns {Promise<Connection>}
   */ async connectToPeer(peer, options = {}) {
        const dialTarget = await this._createCancellableDialTarget(peer);
        if (!dialTarget.addrs.length) throw errCode(new Error("The dial request has no valid addresses"), codes.ERR_NO_VALID_ADDRESSES);
        const pendingDial = this._pendingDials.get(dialTarget.id) || this._createPendingDial(dialTarget, options);
        try {
            const connection = await pendingDial.promise;
            log("dial succeeded to %s", dialTarget.id);
            return connection;
        } catch (err) {
            // Error is a timeout
            if (pendingDial.controller.signal.aborted) err.code = codes.ERR_TIMEOUT;
            log.error(err);
            throw err;
        } finally{
            pendingDial.destroy();
        }
    }
    /**
   * Connects to a given `peer` by dialing all of its known addresses.
   * The dial to the first address that is successfully able to upgrade a connection
   * will be used.
   *
   * @param {PeerId|Multiaddr|string} peer - The peer to dial
   * @returns {Promise<DialTarget>}
   */ async _createCancellableDialTarget(peer) {
        // Make dial target promise cancellable
        const id = `${parseInt(String(Math.random() * 1e9), 10).toString() + Date.now()}`;
        const cancellablePromise = new Promise((resolve, reject)=>{
            this._pendingDialTargets.set(id, {
                resolve,
                reject
            });
        });
        const dialTarget = await Promise.race([
            this._createDialTarget(peer),
            cancellablePromise
        ]);
        this._pendingDialTargets.delete(id);
        return dialTarget;
    }
    /**
   * Creates a DialTarget. The DialTarget is used to create and track
   * the DialRequest to a given peer.
   * If a multiaddr is received it should be the first address attempted.
   * Multiaddrs not supported by the available transports will be filtered out.
   *
   * @private
   * @param {PeerId|Multiaddr|string} peer - A PeerId or Multiaddr
   * @returns {Promise<DialTarget>}
   */ async _createDialTarget(peer) {
        const { id , multiaddrs  } = getPeer(peer);
        if (multiaddrs) this.peerStore.addressBook.add(id, multiaddrs);
        let knownAddrs = this.peerStore.addressBook.getMultiaddrsForPeer(id, this.addressSorter) || [];
        // If received a multiaddr to dial, it should be the first to use
        // But, if we know other multiaddrs for the peer, we should try them too.
        if (Multiaddr.isMultiaddr(peer)) {
            knownAddrs = knownAddrs.filter((addr)=>!peer.equals(addr));
            knownAddrs.unshift(peer);
        }
        /** @type {Multiaddr[]} */ const addrs = [];
        for (const a1 of knownAddrs){
            const resolvedAddrs = await this._resolve(a1);
            resolvedAddrs.forEach((ra)=>addrs.push(ra));
        }
        // Multiaddrs not supported by the available transports will be filtered out.
        const supportedAddrs = addrs.filter((a)=>this.transportManager.transportForMultiaddr(a));
        if (supportedAddrs.length > this.maxAddrsToDial) {
            this.peerStore.delete(id);
            throw errCode(new Error("dial with more addresses than allowed"), codes.ERR_TOO_MANY_ADDRESSES);
        }
        return {
            id: id.toB58String(),
            addrs: supportedAddrs
        };
    }
    /**
   * Creates a PendingDial that wraps the underlying DialRequest
   *
   * @private
   * @param {DialTarget} dialTarget
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] - An AbortController signal
   * @returns {PendingDial}
   */ _createPendingDial(dialTarget, options1 = {}) {
        /**
     * @param {Multiaddr} addr
     * @param {{ signal: { aborted: any; }; }} options
     */ const dialAction = (addr, options)=>{
            if (options.signal.aborted) throw errCode(new Error("already aborted"), codes.ERR_ALREADY_ABORTED);
            return this.transportManager.dial(addr, options);
        };
        const dialRequest = new DialRequest({
            addrs: dialTarget.addrs,
            dialAction,
            dialer: this
        });
        // Combine the timeout signal and options.signal, if provided
        const timeoutController = new TimeoutController(this.timeout);
        const signals = [
            timeoutController.signal
        ];
        options1.signal && signals.push(options1.signal);
        const signal = anySignal(signals);
        const pendingDial = {
            dialRequest,
            controller: timeoutController,
            promise: dialRequest.run({
                ...options1,
                signal
            }),
            destroy: ()=>{
                timeoutController.clear();
                this._pendingDials.delete(dialTarget.id);
            }
        };
        this._pendingDials.set(dialTarget.id, pendingDial);
        return pendingDial;
    }
    /**
   * @param {number} num
   */ getTokens(num) {
        const total = Math.min(num, this.maxDialsPerPeer, this.tokens.length);
        const tokens = this.tokens.splice(0, total);
        log("%d tokens request, returning %d, %d remaining", num, total, this.tokens.length);
        return tokens;
    }
    /**
   * @param {number} token
   */ releaseToken(token) {
        // Guard against duplicate releases
        if (this.tokens.indexOf(token) > -1) return;
        log("token %d released", token);
        this.tokens.push(token);
    }
    /**
   * Resolve multiaddr recursively.
   *
   * @param {Multiaddr} ma
   * @returns {Promise<Multiaddr[]>}
   */ async _resolve(ma) {
        // TODO: recursive logic should live in multiaddr once dns4/dns6 support is in place
        // Now only supporting resolve for dnsaddr
        const resolvableProto = ma.protoNames().includes("dnsaddr");
        // Multiaddr is not resolvable? End recursion!
        if (!resolvableProto) return [
            ma
        ];
        const resolvedMultiaddrs = await this._resolveRecord(ma);
        const recursiveMultiaddrs = await Promise.all(resolvedMultiaddrs.map((nm)=>{
            return this._resolve(nm);
        }));
        const addrs = recursiveMultiaddrs.flat();
        return addrs.reduce((array, newM)=>{
            if (!array.find((m)=>m.equals(newM))) array.push(newM);
            return array;
        }, []);
    }
    /**
   * Resolve a given multiaddr. If this fails, an empty array will be returned
   *
   * @param {Multiaddr} ma
   * @returns {Promise<Multiaddr[]>}
   */ async _resolveRecord(ma) {
        try {
            ma = new Multiaddr(ma.toString()) // Use current multiaddr module
            ;
            const multiaddrs = await ma.resolve();
            return multiaddrs;
        } catch (_) {
            log.error(`multiaddr ${ma} could not be resolved`);
            return [];
        }
    }
}
module.exports = Dialer;

},{"debug":"l0oUb","err-code":"dUrrM","multiaddr":"dOMJu","timeout-abort-controller":"boqBH","abortable-iterator":"jIHDo","any-signal":"fXfV7","./dial-request":"8lEhx","libp2p-utils/src/address-sort":"fdxjB","../get-peer":"hbran","../errors":"cFlaw","../constants":"8KiNk"}],"boqBH":[function(require,module,exports) {
/* globals self, window */ "use strict";
// Get around https://github.com/mysticatea/abort-controller/pull/22
const { AbortController  } = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : require("abort-controller");
const retimer = require("retimer");
class TimeoutController extends AbortController {
    /**
   * @constructor
   * @param {number} ms milliseconds
   */ constructor(ms){
        super();
        this._ms = ms;
        this._timer = retimer(()=>this.abort(), ms);
        // Patch for safari not supported extending built in classes
        Object.setPrototypeOf(this, TimeoutController.prototype);
    }
    /**
   * Aborts the controller and clears the timer
   */ abort() {
        this._timer.clear();
        return super.abort();
    }
    /**
   * Clears the timer
   */ clear() {
        this._timer.clear();
    }
    /**
   * Resets the timer
   */ reset() {
        this._timer.clear();
        this._timer = retimer(()=>this.abort(), this._ms);
    }
}
module.exports = TimeoutController;
module.exports.TimeoutController = TimeoutController;

},{"abort-controller":"1naup","retimer":"dqjoR"}],"dqjoR":[function(require,module,exports) {
"use strict";
var getTime = require("./time");
function Retimer(callback, timeout, args) {
    var that = this;
    this._started = getTime();
    this._rescheduled = 0;
    this._scheduled = timeout;
    this._args = args;
    this._timer = setTimeout(timerWrapper, timeout);
    function timerWrapper() {
        if (that._rescheduled > 0) {
            that._scheduled = that._rescheduled - (getTime() - that._started);
            that._timer = setTimeout(timerWrapper, that._scheduled);
            that._rescheduled = 0;
        } else callback.apply(null, that._args);
    }
}
Retimer.prototype.reschedule = function(timeout) {
    var now = getTime();
    if (now + timeout - (this._started + this._scheduled) < 0) return false;
    else {
        this._started = now;
        this._rescheduled = timeout;
        return true;
    }
};
Retimer.prototype.clear = function() {
    clearTimeout(this._timer);
};
function retimer() {
    if (typeof arguments[0] !== "function") throw new Error("callback needed");
    if (typeof arguments[1] !== "number") throw new Error("timeout needed");
    var args;
    if (arguments.length > 0) {
        args = new Array(arguments.length - 2);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i + 2];
    }
    return new Retimer(arguments[0], arguments[1], args);
}
module.exports = retimer;

},{"./time":"f9rqm"}],"f9rqm":[function(require,module,exports) {
"use strict";
module.exports = function getTime() {
    return Date.now();
};

},{}],"fXfV7":[function(require,module,exports) {
const { AbortController  } = require("native-abort-controller");
/**
 * Takes an array of AbortSignals and returns a single signal.
 * If any signals are aborted, the returned signal will be aborted.
 * @param {Array<AbortSignal>} signals
 * @returns {AbortSignal}
 */ function anySignal(signals) {
    const controller = new AbortController();
    function onAbort() {
        controller.abort();
        for (const signal of signals){
            if (!signal || !signal.removeEventListener) continue;
            signal.removeEventListener("abort", onAbort);
        }
    }
    for (const signal1 of signals){
        if (!signal1 || !signal1.addEventListener) continue;
        if (signal1.aborted) {
            onAbort();
            break;
        }
        signal1.addEventListener("abort", onAbort);
    }
    return controller.signal;
}
module.exports = anySignal;
module.exports.anySignal = anySignal;

},{"native-abort-controller":"8rhv7"}],"8rhv7":[function(require,module,exports) {
"use strict";
let impl;
if (globalThis.AbortController && globalThis.AbortSignal) impl = globalThis;
else impl = require("abort-controller");
module.exports.AbortSignal = impl.AbortSignal;
module.exports.AbortController = impl.AbortController;

},{"abort-controller":"1naup"}],"8lEhx":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
const AbortController = require("abort-controller").default;
const { anySignal  } = require("any-signal");
// @ts-ignore p-fifo does not export types
const FIFO = require("p-fifo");
const pAny = require("p-any");
/**
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('./')} Dialer
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * @typedef {Object} DialOptions
 * @property {AbortSignal} signal
 *
 * @typedef {Object} DialRequestOptions
 * @property {Multiaddr[]} addrs
 * @property {(m: Multiaddr, options: DialOptions) => Promise<Connection>} dialAction
 * @property {Dialer} dialer
 */ class DialRequest {
    /**
   * Manages running the `dialAction` on multiple provided `addrs` in parallel
   * up to a maximum determined by the number of tokens returned
   * from `dialer.getTokens`. Once a DialRequest is created, it can be
   * started using `DialRequest.run(options)`. Once a single dial has succeeded,
   * all other dials in the request will be cancelled.
   *
   * @class
   * @param {DialRequestOptions} options
   */ constructor({ addrs , dialAction , dialer  }){
        this.addrs = addrs;
        this.dialer = dialer;
        this.dialAction = dialAction;
    }
    /**
   * @async
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] - An AbortController signal
   * @returns {Promise<Connection>}
   */ async run(options = {}) {
        const tokens = this.dialer.getTokens(this.addrs.length);
        // If no tokens are available, throw
        if (tokens.length < 1) throw errCode(new Error("No dial tokens available"), "ERR_NO_DIAL_TOKENS");
        const tokenHolder = new FIFO();
        tokens.forEach((token)=>tokenHolder.push(token));
        const dialAbortControllers = this.addrs.map(()=>new AbortController());
        let completedDials = 0;
        try {
            return await pAny(this.addrs.map(async (addr, i)=>{
                const token = await tokenHolder.shift() // get token
                ;
                let conn;
                try {
                    const signal = dialAbortControllers[i].signal;
                    conn = await this.dialAction(addr, {
                        ...options,
                        signal: options.signal ? anySignal([
                            signal,
                            options.signal
                        ]) : signal
                    });
                    // Remove the successful AbortController so it is not aborted
                    dialAbortControllers.splice(i, 1);
                } finally{
                    completedDials++;
                    // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it
                    if (this.addrs.length - completedDials >= tokens.length) tokenHolder.push(token);
                    else this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);
                }
                return conn;
            }));
        } finally{
            dialAbortControllers.map((c)=>c.abort()) // success/failure happened, abort everything else
            ;
            tokens.forEach((token)=>this.dialer.releaseToken(token)) // release tokens back to the dialer
            ;
        }
    }
}
module.exports = DialRequest;

},{"err-code":"dUrrM","abort-controller":"1naup","any-signal":"fXfV7","p-fifo":"3JhZ3","p-any":"sfhHm"}],"3JhZ3":[function(require,module,exports) {
const Fifo = require("fast-fifo");
const defer = require("p-defer");
module.exports = class PFifo {
    constructor(){
        this._buffer = new Fifo();
        this._waitingConsumers = new Fifo();
    }
    push(chunk) {
        const { promise , resolve  } = defer();
        this._buffer.push({
            chunk,
            resolve
        });
        this._consume();
        return promise;
    }
    _consume() {
        while(!this._waitingConsumers.isEmpty() && !this._buffer.isEmpty()){
            const nextConsumer = this._waitingConsumers.shift();
            const nextChunk = this._buffer.shift();
            nextConsumer.resolve(nextChunk.chunk);
            nextChunk.resolve();
        }
    }
    shift() {
        const { promise , resolve  } = defer();
        this._waitingConsumers.push({
            resolve
        });
        this._consume();
        return promise;
    }
    isEmpty() {
        return this._buffer.isEmpty();
    }
};

},{"fast-fifo":"hs2rS","p-defer":"cWx93"}],"sfhHm":[function(require,module,exports) {
"use strict";
const pSome = require("p-some");
const PCancelable = require("p-cancelable");
module.exports = (iterable, options)=>{
    const anyCancelable = pSome(iterable, {
        ...options,
        count: 1
    });
    return PCancelable.fn(async (onCancel)=>{
        onCancel(()=>{
            anyCancelable.cancel();
        });
        const [value] = await anyCancelable;
        return value;
    })();
};
module.exports.AggregateError = pSome.AggregateError;

},{"p-some":"gvVV3","p-cancelable":"7Y0hH"}],"gvVV3":[function(require,module,exports) {
"use strict";
const AggregateError = require("aggregate-error");
const PCancelable = require("p-cancelable");
class FilterError extends Error {
}
const pSome = (iterable, options)=>new PCancelable((resolve, reject, onCancel)=>{
        const { count , filter =()=>true  } = options;
        if (!Number.isFinite(count)) {
            reject(new TypeError(`Expected a finite number, got ${typeof options.count}`));
            return;
        }
        const values = [];
        const errors = [];
        let elementCount = 0;
        let isSettled = false;
        const completed = new Set();
        const maybeSettle = ()=>{
            if (values.length === count) {
                resolve(values);
                isSettled = true;
            }
            if (elementCount - errors.length < count) {
                reject(new AggregateError(errors));
                isSettled = true;
            }
            return isSettled;
        };
        const cancelPending = ()=>{
            for (const promise of iterable)if (!completed.has(promise) && typeof promise.cancel === "function") promise.cancel();
        };
        onCancel(cancelPending);
        for (const element of iterable){
            elementCount++;
            (async ()=>{
                try {
                    const value = await element;
                    if (isSettled) return;
                    if (!filter(value)) throw new FilterError("Value does not satisfy filter");
                    values.push(value);
                } catch (error) {
                    errors.push(error);
                } finally{
                    completed.add(element);
                    if (!isSettled && maybeSettle()) cancelPending();
                }
            })();
        }
        if (count > elementCount) {
            reject(new RangeError(`Expected input to contain at least ${options.count} items, but contains ${elementCount} items`));
            cancelPending();
        }
    });
module.exports = pSome;
module.exports.AggregateError = AggregateError;
module.exports.FilterError = FilterError;

},{"aggregate-error":"f0pKK","p-cancelable":"7Y0hH"}],"7Y0hH":[function(require,module,exports) {
"use strict";
class CancelError extends Error {
    constructor(reason){
        super(reason || "Promise was canceled");
        this.name = "CancelError";
    }
    get isCanceled() {
        return true;
    }
}
class PCancelable {
    static fn(userFn) {
        return (...arguments_)=>{
            return new PCancelable((resolve, reject, onCancel)=>{
                arguments_.push(onCancel);
                // eslint-disable-next-line promise/prefer-await-to-then
                userFn(...arguments_).then(resolve, reject);
            });
        };
    }
    constructor(executor){
        this._cancelHandlers = [];
        this._isPending = true;
        this._isCanceled = false;
        this._rejectOnCancel = true;
        this._promise = new Promise((resolve, reject)=>{
            this._reject = reject;
            const onResolve = (value)=>{
                if (!this._isCanceled || !onCancel.shouldReject) {
                    this._isPending = false;
                    resolve(value);
                }
            };
            const onReject = (error)=>{
                this._isPending = false;
                reject(error);
            };
            const onCancel = (handler)=>{
                if (!this._isPending) throw new Error("The `onCancel` handler was attached after the promise settled.");
                this._cancelHandlers.push(handler);
            };
            Object.defineProperties(onCancel, {
                shouldReject: {
                    get: ()=>this._rejectOnCancel,
                    set: (boolean)=>{
                        this._rejectOnCancel = boolean;
                    }
                }
            });
            return executor(onResolve, onReject, onCancel);
        });
    }
    then(onFulfilled, onRejected) {
        // eslint-disable-next-line promise/prefer-await-to-then
        return this._promise.then(onFulfilled, onRejected);
    }
    catch(onRejected) {
        return this._promise.catch(onRejected);
    }
    finally(onFinally) {
        return this._promise.finally(onFinally);
    }
    cancel(reason) {
        if (!this._isPending || this._isCanceled) return;
        this._isCanceled = true;
        if (this._cancelHandlers.length > 0) try {
            for (const handler of this._cancelHandlers)handler();
        } catch (error) {
            this._reject(error);
            return;
        }
        if (this._rejectOnCancel) this._reject(new CancelError(reason));
    }
    get isCanceled() {
        return this._isCanceled;
    }
}
Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);
module.exports = PCancelable;
module.exports.CancelError = CancelError;

},{}],"46LxL":[function(require,module,exports) {
/* eslint max-nested-callbacks: ["error", 5] */ "use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:keychain"), {
    error: debug("libp2p:keychain:err")
});
const sanitize = require("sanitize-filename");
const mergeOptions = require("merge-options");
const crypto = require("libp2p-crypto");
const { Key  } = require("interface-datastore");
const CMS = require("./cms");
const errcode = require("err-code");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
// @ts-ignore node-forge sha512 types not exported
require("node-forge/lib/sha512");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('interface-datastore').Datastore} Datastore
 */ /**
 * @typedef {Object} DekOptions
 * @property {string} hash
 * @property {string} salt
 * @property {number} iterationCount
 * @property {number} keyLength
 *
 * @typedef {Object} KeychainOptions
 * @property {string} [pass]
 * @property {DekOptions} [dek]
 */ /**
 * Information about a key.
 *
 * @typedef {Object} KeyInfo
 * @property {string} id - The universally unique key id.
 * @property {string} name - The local key name.
 */ const keyPrefix = "/pkcs8/";
const infoPrefix = "/info/";
const privates = new WeakMap();
// NIST SP 800-132
const NIST = {
    minKeyLength: 14,
    minSaltLength: 16,
    minIterationCount: 1000
};
const defaultOptions = {
    // See https://cryptosense.com/parametesr-choice-for-pbkdf2/
    dek: {
        keyLength: 64,
        iterationCount: 10000,
        salt: "you should override this value with a crypto secure random number",
        hash: "sha2-512"
    }
};
/**
 * @param {string} name
 */ function validateKeyName(name) {
    if (!name) return false;
    if (typeof name !== "string") return false;
    return name === sanitize(name.trim());
}
/**
 * Throws an error after a delay
 *
 * This assumes than an error indicates that the keychain is under attack. Delay returning an
 * error to make brute force attacks harder.
 *
 * @param {string|Error} err - The error
 * @returns {Promise<never>}
 * @private
 */ async function throwDelayed(err) {
    const min = 200;
    const max = 1000;
    const delay = Math.random() * (max - min) + min;
    await new Promise((resolve)=>setTimeout(resolve, delay));
    throw err;
}
/**
 * Converts a key name into a datastore name.
 *
 * @param {string} name
 * @returns {Key}
 * @private
 */ function DsName(name) {
    return new Key(keyPrefix + name);
}
/**
 * Converts a key name into a datastore info name.
 *
 * @param {string} name
 * @returns {Key}
 * @private
 */ function DsInfoName(name) {
    return new Key(infoPrefix + name);
}
/**
 * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.
 *
 * A key in the store has two entries
 * - '/info/*key-name*', contains the KeyInfo for the key
 * - '/pkcs8/*key-name*', contains the PKCS #8 for the key
 *
 */ class Keychain {
    /**
   * Creates a new instance of a key chain.
   *
   * @param {Datastore} store - where the key are.
   * @param {KeychainOptions} options
   * @class
   */ constructor(store, options){
        if (!store) throw new Error("store is required");
        this.store = store;
        this.opts = mergeOptions(defaultOptions, options);
        // Enforce NIST SP 800-132
        if (this.opts.pass && this.opts.pass.length < 20) throw new Error("pass must be least 20 characters");
        if (this.opts.dek.keyLength < NIST.minKeyLength) throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`);
        if (this.opts.dek.salt.length < NIST.minSaltLength) throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`);
        if (this.opts.dek.iterationCount < NIST.minIterationCount) throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`);
        const dek = this.opts.pass ? crypto.pbkdf2(this.opts.pass, this.opts.dek.salt, this.opts.dek.iterationCount, this.opts.dek.keyLength, this.opts.dek.hash) : "";
        privates.set(this, {
            dek
        });
    }
    /**
   * Gets an object that can encrypt/decrypt protected data
   * using the Cryptographic Message Syntax (CMS).
   *
   * CMS describes an encapsulation syntax for data protection. It
   * is used to digitally sign, digest, authenticate, or encrypt
   * arbitrary message content.
   *
   * @returns {CMS}
   */ get cms() {
        return new CMS(this, privates.get(this).dek);
    }
    /**
   * Generates the options for a keychain.  A random salt is produced.
   *
   * @returns {Object}
   */ static generateOptions() {
        const options = Object.assign({}, defaultOptions);
        const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3 // no base64 padding
        ;
        options.dek.salt = uint8ArrayToString(crypto.randomBytes(saltLength), "base64");
        return options;
    }
    /**
   * Gets an object that can encrypt/decrypt protected data.
   * The default options for a keychain.
   *
   * @returns {Object}
   */ static get options() {
        return defaultOptions;
    }
    /**
   * Create a new key.
   *
   * @param {string} name - The local key name; cannot already exist.
   * @param {string} type - One of the key types; 'rsa'.
   * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only.
   * @returns {Promise<KeyInfo>}
   */ async createKey(name, type, size = 2048) {
        const self = this;
        if (!validateKeyName(name) || name === "self") return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), "ERR_INVALID_KEY_NAME"));
        if (typeof type !== "string") return throwDelayed(errcode(new Error(`Invalid key type '${type}'`), "ERR_INVALID_KEY_TYPE"));
        const dsname = DsName(name);
        const exists = await self.store.has(dsname);
        if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), "ERR_KEY_ALREADY_EXISTS"));
        switch(type.toLowerCase()){
            case "rsa":
                if (!Number.isSafeInteger(size) || size < 2048) return throwDelayed(errcode(new Error(`Invalid RSA key size ${size}`), "ERR_INVALID_KEY_SIZE"));
                break;
            default:
                break;
        }
        let keyInfo;
        try {
            // @ts-ignore Differences between several crypto return types need to be fixed in libp2p-crypto
            const keypair = await crypto.keys.generateKeyPair(type, size);
            const kid = await keypair.id();
            /** @type {string} */ const dek = privates.get(this).dek;
            const pem = await keypair.export(dek);
            keyInfo = {
                name: name,
                id: kid
            };
            const batch = self.store.batch();
            batch.put(dsname, uint8ArrayFromString(pem));
            batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));
            await batch.commit();
        } catch (err) {
            return throwDelayed(err);
        }
        return keyInfo;
    }
    /**
   * List all the keys.
   *
   * @returns {Promise<KeyInfo[]>}
   */ async listKeys() {
        const self = this;
        const query = {
            prefix: infoPrefix
        };
        const info = [];
        for await (const value of self.store.query(query))info.push(JSON.parse(uint8ArrayToString(value.value)));
        return info;
    }
    /**
   * Find a key by it's id.
   *
   * @param {string} id - The universally unique key identifier.
   * @returns {Promise<KeyInfo|undefined>}
   */ async findKeyById(id) {
        try {
            const keys = await this.listKeys();
            return keys.find((k)=>k.id === id);
        } catch (err) {
            return throwDelayed(err);
        }
    }
    /**
   * Find a key by it's name.
   *
   * @param {string} name - The local key name.
   * @returns {Promise<KeyInfo>}
   */ async findKeyByName(name) {
        if (!validateKeyName(name)) return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), "ERR_INVALID_KEY_NAME"));
        const dsname = DsInfoName(name);
        try {
            const res = await this.store.get(dsname);
            return JSON.parse(uint8ArrayToString(res));
        } catch (err) {
            return throwDelayed(errcode(new Error(`Key '${name}' does not exist. ${err.message}`), "ERR_KEY_NOT_FOUND"));
        }
    }
    /**
   * Remove an existing key.
   *
   * @param {string} name - The local key name; must already exist.
   * @returns {Promise<KeyInfo>}
   */ async removeKey(name) {
        const self = this;
        if (!validateKeyName(name) || name === "self") return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), "ERR_INVALID_KEY_NAME"));
        const dsname = DsName(name);
        const keyInfo = await self.findKeyByName(name);
        const batch = self.store.batch();
        batch.delete(dsname);
        batch.delete(DsInfoName(name));
        await batch.commit();
        return keyInfo;
    }
    /**
   * Rename a key
   *
   * @param {string} oldName - The old local key name; must already exist.
   * @param {string} newName - The new local key name; must not already exist.
   * @returns {Promise<KeyInfo>}
   */ async renameKey(oldName, newName) {
        const self = this;
        if (!validateKeyName(oldName) || oldName === "self") return throwDelayed(errcode(new Error(`Invalid old key name '${oldName}'`), "ERR_OLD_KEY_NAME_INVALID"));
        if (!validateKeyName(newName) || newName === "self") return throwDelayed(errcode(new Error(`Invalid new key name '${newName}'`), "ERR_NEW_KEY_NAME_INVALID"));
        const oldDsname = DsName(oldName);
        const newDsname = DsName(newName);
        const oldInfoName = DsInfoName(oldName);
        const newInfoName = DsInfoName(newName);
        const exists = await self.store.has(newDsname);
        if (exists) return throwDelayed(errcode(new Error(`Key '${newName}' already exists`), "ERR_KEY_ALREADY_EXISTS"));
        try {
            const pem = await self.store.get(oldDsname);
            const res = await self.store.get(oldInfoName);
            const keyInfo = JSON.parse(uint8ArrayToString(res));
            keyInfo.name = newName;
            const batch = self.store.batch();
            batch.put(newDsname, pem);
            batch.put(newInfoName, uint8ArrayFromString(JSON.stringify(keyInfo)));
            batch.delete(oldDsname);
            batch.delete(oldInfoName);
            await batch.commit();
            return keyInfo;
        } catch (err) {
            return throwDelayed(err);
        }
    }
    /**
   * Export an existing key as a PEM encrypted PKCS #8 string
   *
   * @param {string} name - The local key name; must already exist.
   * @param {string} password - The password
   * @returns {Promise<string>}
   */ async exportKey(name, password) {
        if (!validateKeyName(name)) return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), "ERR_INVALID_KEY_NAME"));
        if (!password) return throwDelayed(errcode(new Error("Password is required"), "ERR_PASSWORD_REQUIRED"));
        const dsname = DsName(name);
        try {
            const res = await this.store.get(dsname);
            const pem = uint8ArrayToString(res);
            /** @type {string} */ const dek = privates.get(this).dek;
            const privateKey = await crypto.keys.import(pem, dek);
            return privateKey.export(password);
        } catch (err) {
            return throwDelayed(err);
        }
    }
    /**
   * Import a new key from a PEM encoded PKCS #8 string
   *
   * @param {string} name - The local key name; must not already exist.
   * @param {string} pem - The PEM encoded PKCS #8 string
   * @param {string} password - The password.
   * @returns {Promise<KeyInfo>}
   */ async importKey(name, pem, password) {
        const self = this;
        if (!validateKeyName(name) || name === "self") return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), "ERR_INVALID_KEY_NAME"));
        if (!pem) return throwDelayed(errcode(new Error("PEM encoded key is required"), "ERR_PEM_REQUIRED"));
        const dsname = DsName(name);
        const exists = await self.store.has(dsname);
        if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), "ERR_KEY_ALREADY_EXISTS"));
        let privateKey;
        try {
            privateKey = await crypto.keys.import(pem, password);
        } catch (err) {
            return throwDelayed(errcode(new Error("Cannot read the key, most likely the password is wrong"), "ERR_CANNOT_READ_KEY"));
        }
        let kid;
        try {
            kid = await privateKey.id();
            /** @type {string} */ const dek = privates.get(this).dek;
            pem = await privateKey.export(dek);
        } catch (err1) {
            return throwDelayed(err1);
        }
        const keyInfo = {
            name: name,
            id: kid
        };
        const batch = self.store.batch();
        batch.put(dsname, uint8ArrayFromString(pem));
        batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));
        await batch.commit();
        return keyInfo;
    }
    /**
   * Import a peer key
   *
   * @param {string} name - The local key name; must not already exist.
   * @param {PeerId} peer - The PEM encoded PKCS #8 string
   * @returns {Promise<KeyInfo>}
   */ async importPeer(name, peer) {
        const self = this;
        if (!validateKeyName(name)) return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), "ERR_INVALID_KEY_NAME"));
        if (!peer || !peer.privKey) return throwDelayed(errcode(new Error("Peer.privKey is required"), "ERR_MISSING_PRIVATE_KEY"));
        const privateKey = peer.privKey;
        const dsname = DsName(name);
        const exists = await self.store.has(dsname);
        if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), "ERR_KEY_ALREADY_EXISTS"));
        try {
            const kid = await privateKey.id();
            /** @type {string} */ const dek = privates.get(this).dek;
            const pem = await privateKey.export(dek);
            const keyInfo = {
                name: name,
                id: kid
            };
            const batch = self.store.batch();
            batch.put(dsname, uint8ArrayFromString(pem));
            batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));
            await batch.commit();
            return keyInfo;
        } catch (err) {
            return throwDelayed(err);
        }
    }
    /**
   * Gets the private key as PEM encoded PKCS #8 string.
   *
   * @param {string} name
   * @returns {Promise<string>}
   */ async _getPrivateKey(name) {
        if (!validateKeyName(name)) return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), "ERR_INVALID_KEY_NAME"));
        try {
            const dsname = DsName(name);
            const res = await this.store.get(dsname);
            return uint8ArrayToString(res);
        } catch (err) {
            return throwDelayed(errcode(new Error(`Key '${name}' does not exist. ${err.message}`), "ERR_KEY_NOT_FOUND"));
        }
    }
    /**
   * Rotate keychain password and re-encrypt all assosciated keys
   *
   * @param {string} oldPass - The old local keychain password
   * @param {string} newPass - The new local keychain password
   */ async rotateKeychainPass(oldPass, newPass) {
        if (typeof oldPass !== "string") return throwDelayed(errcode(new Error(`Invalid old pass type '${typeof oldPass}'`), "ERR_INVALID_OLD_PASS_TYPE"));
        if (typeof newPass !== "string") return throwDelayed(errcode(new Error(`Invalid new pass type '${typeof newPass}'`), "ERR_INVALID_NEW_PASS_TYPE"));
        if (newPass.length < 20) return throwDelayed(errcode(new Error(`Invalid pass length ${newPass.length}`), "ERR_INVALID_PASS_LENGTH"));
        log("recreating keychain");
        const oldDek = privates.get(this).dek;
        this.opts.pass = newPass;
        const newDek = newPass ? crypto.pbkdf2(newPass, this.opts.dek.salt, this.opts.dek.iterationCount, this.opts.dek.keyLength, this.opts.dek.hash) : "";
        privates.set(this, {
            dek: newDek
        });
        const keys = await this.listKeys();
        for (const key of keys){
            const res = await this.store.get(DsName(key.name));
            const pem = uint8ArrayToString(res);
            const privateKey = await crypto.keys.import(pem, oldDek);
            const password = newDek.toString();
            const keyAsPEM = await privateKey.export(password);
            // Update stored key
            const batch = this.store.batch();
            const keyInfo = {
                name: key.name,
                id: key.id
            };
            batch.put(DsName(key.name), uint8ArrayFromString(keyAsPEM));
            batch.put(DsInfoName(key.name), uint8ArrayFromString(JSON.stringify(keyInfo)));
            await batch.commit();
        }
        log("keychain reconstructed");
    }
}
module.exports = Keychain;

},{"debug":"l0oUb","sanitize-filename":"agmww","merge-options":"4XlQf","libp2p-crypto":"djNY1","interface-datastore":"ijjFd","./cms":"deyp8","err-code":"dUrrM","uint8arrays/to-string":"w8mvE","uint8arrays/from-string":"7qjkp","node-forge/lib/sha512":"ATXY0"}],"agmww":[function(require,module,exports) {
/*jshint node:true*/ "use strict";
/**
 * Replaces characters in strings that are illegal/unsafe for filenames.
 * Unsafe characters are either removed or replaced by a substitute set
 * in the optional `options` object.
 *
 * Illegal Characters on Various Operating Systems
 * / ? < > \ : * | "
 * https://kb.acronis.com/content/39790
 *
 * Unicode Control codes
 * C0 0x00-0x1f & C1 (0x80-0x9f)
 * http://en.wikipedia.org/wiki/C0_and_C1_control_codes
 *
 * Reserved filenames on Unix-based systems (".", "..")
 * Reserved filenames in Windows ("CON", "PRN", "AUX", "NUL", "COM1",
 * "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9",
 * "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", and
 * "LPT9") case-insesitively and with or without filename extensions.
 *
 * Capped at 255 characters in length.
 * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs
 *
 * @param  {String} input   Original filename
 * @param  {Object} options {replacement: String | Function }
 * @return {String}         Sanitized filename
 */ var truncate = require("truncate-utf8-bytes");
var illegalRe = /[\/\?<>\\:\*\|"]/g;
var controlRe = /[\x00-\x1f\x80-\x9f]/g;
var reservedRe = /^\.+$/;
var windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
var windowsTrailingRe = /[\. ]+$/;
function sanitize(input, replacement) {
    if (typeof input !== "string") throw new Error("Input must be string");
    var sanitized = input.replace(illegalRe, replacement).replace(controlRe, replacement).replace(reservedRe, replacement).replace(windowsReservedRe, replacement).replace(windowsTrailingRe, replacement);
    return truncate(sanitized, 255);
}
module.exports = function(input, options) {
    var replacement = options && options.replacement || "";
    var output = sanitize(input, replacement);
    if (replacement === "") return output;
    return sanitize(output, "");
};

},{"truncate-utf8-bytes":"5EwH1"}],"5EwH1":[function(require,module,exports) {
"use strict";
var truncate = require("./lib/truncate");
var getLength = require("utf8-byte-length/browser");
module.exports = truncate.bind(null, getLength);

},{"./lib/truncate":"9chFG","utf8-byte-length/browser":"iEbRP"}],"9chFG":[function(require,module,exports) {
"use strict";
function isHighSurrogate(codePoint) {
    return codePoint >= 0xd800 && codePoint <= 0xdbff;
}
function isLowSurrogate(codePoint) {
    return codePoint >= 0xdc00 && codePoint <= 0xdfff;
}
// Truncate string by size in bytes
module.exports = function truncate(getLength, string, byteLength) {
    if (typeof string !== "string") throw new Error("Input must be string");
    var charLength = string.length;
    var curByteLength = 0;
    var codePoint;
    var segment;
    for(var i = 0; i < charLength; i += 1){
        codePoint = string.charCodeAt(i);
        segment = string[i];
        if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {
            i += 1;
            segment += string[i];
        }
        curByteLength += getLength(segment);
        if (curByteLength === byteLength) return string.slice(0, i + 1);
        else if (curByteLength > byteLength) return string.slice(0, i - segment.length + 1);
    }
    return string;
};

},{}],"iEbRP":[function(require,module,exports) {
"use strict";
function isHighSurrogate(codePoint) {
    return codePoint >= 0xd800 && codePoint <= 0xdbff;
}
function isLowSurrogate(codePoint) {
    return codePoint >= 0xdc00 && codePoint <= 0xdfff;
}
// Truncate string by size in bytes
module.exports = function getByteLength(string) {
    if (typeof string !== "string") throw new Error("Input must be string");
    var charLength = string.length;
    var byteLength = 0;
    var codePoint = null;
    var prevCodePoint = null;
    for(var i = 0; i < charLength; i++){
        codePoint = string.charCodeAt(i);
        // handle 4-byte non-BMP chars
        // low surrogate
        if (isLowSurrogate(codePoint)) {
            // when parsing previous hi-surrogate, 3 is added to byteLength
            if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) byteLength += 1;
            else byteLength += 3;
        } else if (codePoint <= 0x7f) byteLength += 1;
        else if (codePoint >= 0x80 && codePoint <= 0x7ff) byteLength += 2;
        else if (codePoint >= 0x800 && codePoint <= 0xffff) byteLength += 3;
        prevCodePoint = codePoint;
    }
    return byteLength;
};

},{}],"deyp8":[function(require,module,exports) {
"use strict";
// @ts-ignore node-forge types not exported
require("node-forge/lib/pkcs7");
// @ts-ignore node-forge types not exported
require("node-forge/lib/pbe");
// @ts-ignore node-forge types not exported
const forge = require("node-forge/lib/forge");
const { certificateForKey , findAsync  } = require("./util");
const errcode = require("err-code");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const privates = new WeakMap();
/**
 * Cryptographic Message Syntax (aka PKCS #7)
 *
 * CMS describes an encapsulation syntax for data protection. It
 * is used to digitally sign, digest, authenticate, or encrypt
 * arbitrary message content.
 *
 * See RFC 5652 for all the details.
 */ class CMS {
    /**
   * Creates a new instance with a keychain
   *
   * @param {import('./index')} keychain - the available keys
   * @param {string} dek
   */ constructor(keychain, dek){
        if (!keychain) throw errcode(new Error("keychain is required"), "ERR_KEYCHAIN_REQUIRED");
        this.keychain = keychain;
        privates.set(this, {
            dek
        });
    }
    /**
   * Creates some protected data.
   *
   * The output Uint8Array contains the PKCS #7 message in DER.
   *
   * @param {string} name - The local key name.
   * @param {Uint8Array} plain - The data to encrypt.
   * @returns {Promise<Uint8Array>}
   */ async encrypt(name, plain) {
        if (!(plain instanceof Uint8Array)) throw errcode(new Error("Plain data must be a Uint8Array"), "ERR_INVALID_PARAMS");
        const key = await this.keychain.findKeyByName(name);
        const pem = await this.keychain._getPrivateKey(name);
        /** @type {string} */ const dek = privates.get(this).dek;
        const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);
        const certificate = await certificateForKey(key, privateKey);
        // create a p7 enveloped message
        const p7 = forge.pkcs7.createEnvelopedData();
        p7.addRecipient(certificate);
        p7.content = forge.util.createBuffer(plain);
        p7.encrypt();
        // convert message to DER
        const der = forge.asn1.toDer(p7.toAsn1()).getBytes();
        return uint8ArrayFromString(der, "ascii");
    }
    /**
   * Reads some protected data.
   *
   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys
   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.
   *
   * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.
   * @returns {Promise<Uint8Array>}
   */ async decrypt(cmsData) {
        if (!(cmsData instanceof Uint8Array)) throw errcode(new Error("CMS data is required"), "ERR_INVALID_PARAMS");
        let cms;
        try {
            const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, "ascii"));
            const obj = forge.asn1.fromDer(buf);
            // @ts-ignore not defined
            cms = forge.pkcs7.messageFromAsn1(obj);
        } catch (err) {
            throw errcode(new Error("Invalid CMS: " + err.message), "ERR_INVALID_CMS");
        }
        // Find a recipient whose key we hold. We only deal with recipient certs
        // issued by ipfs (O=ipfs).
        const recipients = cms.recipients// @ts-ignore cms types not defined
        .filter((r)=>r.issuer.find((a)=>a.shortName === "O" && a.value === "ipfs"))// @ts-ignore cms types not defined
        .filter((r)=>r.issuer.find((a)=>a.shortName === "CN"))// @ts-ignore cms types not defined
        .map((r)=>{
            return {
                recipient: r,
                // @ts-ignore cms types not defined
                keyId: r.issuer.find((a)=>a.shortName === "CN").value
            };
        });
        const r1 = await findAsync(recipients, async (recipient)=>{
            try {
                const key = await this.keychain.findKeyById(recipient.keyId);
                if (key) return true;
            } catch (err) {
                return false;
            }
            return false;
        });
        if (!r1) {
            // @ts-ignore cms types not defined
            const missingKeys = recipients.map((r)=>r.keyId);
            throw errcode(new Error("Decryption needs one of the key(s): " + missingKeys.join(", ")), "ERR_MISSING_KEYS", {
                missingKeys
            });
        }
        const key1 = await this.keychain.findKeyById(r1.keyId);
        if (!key1) throw errcode(new Error("No key available to decrypto"), "ERR_NO_KEY");
        const pem = await this.keychain._getPrivateKey(key1.name);
        const dek = privates.get(this).dek;
        const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);
        cms.decrypt(r1.recipient, privateKey);
        return uint8ArrayFromString(cms.content.getBytes(), "ascii");
    }
}
module.exports = CMS;

},{"node-forge/lib/pkcs7":"hSJaa","node-forge/lib/pbe":"AvWMf","node-forge/lib/forge":"9OMxz","./util":"5nb4L","err-code":"dUrrM","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE"}],"hSJaa":[function(require,module,exports) {
/**
 * Javascript implementation of PKCS#7 v1.5.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 *
 * Currently this implementation only supports ContentType of EnvelopedData,
 * EncryptedData, or SignedData at the root level. The top level elements may
 * contain only a ContentInfo of ContentType Data, i.e. plain data. Further
 * nesting is not (yet) supported.
 *
 * The Forge validators for PKCS #7's ASN.1 structures are available from
 * a separate file pkcs7asn1.js, since those are referenced from other
 * PKCS standards like PKCS #12.
 */ var forge = require("./forge");
require("./aes");
require("./asn1");
require("./des");
require("./oids");
require("./pem");
require("./pkcs7asn1");
require("./random");
require("./util");
require("./x509");
// shortcut for ASN.1 API
var asn1 = forge.asn1;
// shortcut for PKCS#7 API
var p7 = module.exports = forge.pkcs7 = forge.pkcs7 || {};
/**
 * Converts a PKCS#7 message from PEM format.
 *
 * @param pem the PEM-formatted PKCS#7 message.
 *
 * @return the PKCS#7 message.
 */ p7.messageFromPem = function(pem) {
    var msg = forge.pem.decode(pem)[0];
    if (msg.type !== "PKCS7") {
        var error = new Error('Could not convert PKCS#7 message from PEM; PEM header type is not "PKCS#7".');
        error.headerType = msg.type;
        throw error;
    }
    if (msg.procType && msg.procType.type === "ENCRYPTED") throw new Error("Could not convert PKCS#7 message from PEM; PEM is encrypted.");
    // convert DER to ASN.1 object
    var obj = asn1.fromDer(msg.body);
    return p7.messageFromAsn1(obj);
};
/**
 * Converts a PKCS#7 message to PEM format.
 *
 * @param msg The PKCS#7 message object
 * @param maxline The maximum characters per line, defaults to 64.
 *
 * @return The PEM-formatted PKCS#7 message.
 */ p7.messageToPem = function(msg, maxline) {
    // convert to ASN.1, then DER, then PEM-encode
    var pemObj = {
        type: "PKCS7",
        body: asn1.toDer(msg.toAsn1()).getBytes()
    };
    return forge.pem.encode(pemObj, {
        maxline: maxline
    });
};
/**
 * Converts a PKCS#7 message from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a ContentInfo.
 *
 * @return the PKCS#7 message.
 */ p7.messageFromAsn1 = function(obj) {
    // validate root level ContentInfo and capture data
    var capture = {};
    var errors = [];
    if (!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors)) {
        var error = new Error("Cannot read PKCS#7 message. ASN.1 object is not an PKCS#7 ContentInfo.");
        error.errors = errors;
        throw error;
    }
    var contentType = asn1.derToOid(capture.contentType);
    var msg;
    switch(contentType){
        case forge.pki.oids.envelopedData:
            msg = p7.createEnvelopedData();
            break;
        case forge.pki.oids.encryptedData:
            msg = p7.createEncryptedData();
            break;
        case forge.pki.oids.signedData:
            msg = p7.createSignedData();
            break;
        default:
            throw new Error("Cannot read PKCS#7 message. ContentType with OID " + contentType + " is not (yet) supported.");
    }
    msg.fromAsn1(capture.content.value[0]);
    return msg;
};
p7.createSignedData = function() {
    var msg = null;
    msg = {
        type: forge.pki.oids.signedData,
        version: 1,
        certificates: [],
        crls: [],
        // TODO: add json-formatted signer stuff here?
        signers: [],
        // populated during sign()
        digestAlgorithmIdentifiers: [],
        contentInfo: null,
        signerInfos: [],
        fromAsn1: function(obj) {
            // validate SignedData content block and capture data.
            _fromAsn1(msg, obj, p7.asn1.signedDataValidator);
            msg.certificates = [];
            msg.crls = [];
            msg.digestAlgorithmIdentifiers = [];
            msg.contentInfo = null;
            msg.signerInfos = [];
            if (msg.rawCapture.certificates) {
                var certs = msg.rawCapture.certificates.value;
                for(var i = 0; i < certs.length; ++i)msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));
            }
        // TODO: parse crls
        },
        toAsn1: function() {
            // degenerate case with no content
            if (!msg.contentInfo) msg.sign();
            var certs = [];
            for(var i = 0; i < msg.certificates.length; ++i)certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));
            var crls = [];
            // TODO: implement CRLs
            // [0] SignedData
            var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    // Version
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(msg.version).getBytes()),
                    // DigestAlgorithmIdentifiers
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, msg.digestAlgorithmIdentifiers),
                    // ContentInfo
                    msg.contentInfo
                ])
            ]);
            if (certs.length > 0) // [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL
            signedData.value[0].value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs));
            if (crls.length > 0) // [1] IMPLICIT CertificateRevocationLists OPTIONAL
            signedData.value[0].value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls));
            // SignerInfos
            signedData.value[0].value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, msg.signerInfos));
            // ContentInfo
            return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // ContentType
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(msg.type).getBytes()),
                // [0] SignedData
                signedData
            ]);
        },
        /**
     * Add (another) entity to list of signers.
     *
     * Note: If authenticatedAttributes are provided, then, per RFC 2315,
     * they must include at least two attributes: content type and
     * message digest. The message digest attribute value will be
     * auto-calculated during signing and will be ignored if provided.
     *
     * Here's an example of providing these two attributes:
     *
     * forge.pkcs7.createSignedData();
     * p7.addSigner({
     *   issuer: cert.issuer.attributes,
     *   serialNumber: cert.serialNumber,
     *   key: privateKey,
     *   digestAlgorithm: forge.pki.oids.sha1,
     *   authenticatedAttributes: [{
     *     type: forge.pki.oids.contentType,
     *     value: forge.pki.oids.data
     *   }, {
     *     type: forge.pki.oids.messageDigest
     *   }]
     * });
     *
     * TODO: Support [subjectKeyIdentifier] as signer's ID.
     *
     * @param signer the signer information:
     *          key the signer's private key.
     *          [certificate] a certificate containing the public key
     *            associated with the signer's private key; use this option as
     *            an alternative to specifying signer.issuer and
     *            signer.serialNumber.
     *          [issuer] the issuer attributes (eg: cert.issuer.attributes).
     *          [serialNumber] the signer's certificate's serial number in
     *           hexadecimal (eg: cert.serialNumber).
     *          [digestAlgorithm] the message digest OID, as a string, to use
     *            (eg: forge.pki.oids.sha1).
     *          [authenticatedAttributes] an optional array of attributes
     *            to also sign along with the content.
     */ addSigner: function(signer) {
            var issuer = signer.issuer;
            var serialNumber = signer.serialNumber;
            if (signer.certificate) {
                var cert = signer.certificate;
                if (typeof cert === "string") cert = forge.pki.certificateFromPem(cert);
                issuer = cert.issuer.attributes;
                serialNumber = cert.serialNumber;
            }
            var key = signer.key;
            if (!key) throw new Error("Could not add PKCS#7 signer; no private key specified.");
            if (typeof key === "string") key = forge.pki.privateKeyFromPem(key);
            // ensure OID known for digest algorithm
            var digestAlgorithm = signer.digestAlgorithm || forge.pki.oids.sha1;
            switch(digestAlgorithm){
                case forge.pki.oids.sha1:
                case forge.pki.oids.sha256:
                case forge.pki.oids.sha384:
                case forge.pki.oids.sha512:
                case forge.pki.oids.md5:
                    break;
                default:
                    throw new Error("Could not add PKCS#7 signer; unknown message digest algorithm: " + digestAlgorithm);
            }
            // if authenticatedAttributes is present, then the attributes
            // must contain at least PKCS #9 content-type and message-digest
            var authenticatedAttributes = signer.authenticatedAttributes || [];
            if (authenticatedAttributes.length > 0) {
                var contentType = false;
                var messageDigest = false;
                for(var i = 0; i < authenticatedAttributes.length; ++i){
                    var attr = authenticatedAttributes[i];
                    if (!contentType && attr.type === forge.pki.oids.contentType) {
                        contentType = true;
                        if (messageDigest) break;
                        continue;
                    }
                    if (!messageDigest && attr.type === forge.pki.oids.messageDigest) {
                        messageDigest = true;
                        if (contentType) break;
                        continue;
                    }
                }
                if (!contentType || !messageDigest) throw new Error("Invalid signer.authenticatedAttributes. If signer.authenticatedAttributes is specified, then it must contain at least two attributes, PKCS #9 content-type and PKCS #9 message-digest.");
            }
            msg.signers.push({
                key: key,
                version: 1,
                issuer: issuer,
                serialNumber: serialNumber,
                digestAlgorithm: digestAlgorithm,
                signatureAlgorithm: forge.pki.oids.rsaEncryption,
                signature: null,
                authenticatedAttributes: authenticatedAttributes,
                unauthenticatedAttributes: []
            });
        },
        /**
     * Signs the content.
     * @param options Options to apply when signing:
     *    [detached] boolean. If signing should be done in detached mode. Defaults to false.
     */ sign: function(options) {
            options = options || {};
            // auto-generate content info
            if (typeof msg.content !== "object" || msg.contentInfo === null) {
                // use Data ContentInfo
                msg.contentInfo = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    // ContentType
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(forge.pki.oids.data).getBytes())
                ]);
                // add actual content, if present
                if ("content" in msg) {
                    var content;
                    if (msg.content instanceof forge.util.ByteBuffer) content = msg.content.bytes();
                    else if (typeof msg.content === "string") content = forge.util.encodeUtf8(msg.content);
                    if (options.detached) msg.detachedContent = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content);
                    else msg.contentInfo.value.push(// [0] EXPLICIT content
                    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content)
                    ]));
                }
            }
            // no signers, return early (degenerate case for certificate container)
            if (msg.signers.length === 0) return;
            // generate digest algorithm identifiers
            var mds = addDigestAlgorithmIds();
            // generate signerInfos
            addSignerInfos(mds);
        },
        verify: function() {
            throw new Error("PKCS#7 signature verification not yet implemented.");
        },
        /**
     * Add a certificate.
     *
     * @param cert the certificate to add.
     */ addCertificate: function(cert) {
            // convert from PEM
            if (typeof cert === "string") cert = forge.pki.certificateFromPem(cert);
            msg.certificates.push(cert);
        },
        /**
     * Add a certificate revokation list.
     *
     * @param crl the certificate revokation list to add.
     */ addCertificateRevokationList: function(crl) {
            throw new Error("PKCS#7 CRL support not yet implemented.");
        }
    };
    return msg;
    function addDigestAlgorithmIds() {
        var mds = {};
        for(var i = 0; i < msg.signers.length; ++i){
            var signer = msg.signers[i];
            var oid = signer.digestAlgorithm;
            if (!(oid in mds)) {
                // content digest
                mds[oid] = forge.md[forge.pki.oids[oid]].create();
            }
            if (signer.authenticatedAttributes.length === 0) {
                // no custom attributes to digest; use content message digest
                signer.md = mds[oid];
            } else {
                // custom attributes to be digested; use own message digest
                // TODO: optimize to just copy message digest state if that
                // feature is ever supported with message digests
                signer.md = forge.md[forge.pki.oids[oid]].create();
            }
        }
        // add unique digest algorithm identifiers
        msg.digestAlgorithmIdentifiers = [];
        for(var oid in mds){
            msg.digestAlgorithmIdentifiers.push(// AlgorithmIdentifier
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // algorithm
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oid).getBytes()),
                // parameters (null)
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
            ]));
        }
        return mds;
    }
    function addSignerInfos(mds) {
        var content;
        if (msg.detachedContent) {
            // Signature has been made in detached mode.
            content = msg.detachedContent;
        } else {
            // Note: ContentInfo is a SEQUENCE with 2 values, second value is
            // the content field and is optional for a ContentInfo but required here
            // since signers are present
            // get ContentInfo content
            content = msg.contentInfo.value[1];
            // skip [0] EXPLICIT content wrapper
            content = content.value[0];
        }
        if (!content) {
            throw new Error("Could not sign PKCS#7 message; there is no content to sign.");
        }
        // get ContentInfo content type
        var contentType = asn1.derToOid(msg.contentInfo.value[0].value);
        // serialize content
        var bytes = asn1.toDer(content);
        // skip identifier and length per RFC 2315 9.3
        // skip identifier (1 byte)
        bytes.getByte();
        // read and discard length bytes
        asn1.getBerValueLength(bytes);
        bytes = bytes.getBytes();
        // digest content DER value bytes
        for(var oid in mds){
            mds[oid].start().update(bytes);
        }
        // sign content
        var signingTime = new Date();
        for(var i = 0; i < msg.signers.length; ++i){
            var signer = msg.signers[i];
            if (signer.authenticatedAttributes.length === 0) {
                // if ContentInfo content type is not "Data", then
                // authenticatedAttributes must be present per RFC 2315
                if (contentType !== forge.pki.oids.data) {
                    throw new Error("Invalid signer; authenticatedAttributes must be present when the ContentInfo content type is not PKCS#7 Data.");
                }
            } else {
                // process authenticated attributes
                // [0] IMPLICIT
                signer.authenticatedAttributesAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);
                // per RFC 2315, attributes are to be digested using a SET container
                // not the above [0] IMPLICIT container
                var attrsAsn1 = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, []);
                for(var ai = 0; ai < signer.authenticatedAttributes.length; ++ai){
                    var attr = signer.authenticatedAttributes[ai];
                    if (attr.type === forge.pki.oids.messageDigest) {
                        // use content message digest as value
                        attr.value = mds[signer.digestAlgorithm].digest();
                    } else if (attr.type === forge.pki.oids.signingTime) {
                        // auto-populate signing time if not already set
                        if (!attr.value) {
                            attr.value = signingTime;
                        }
                    }
                    // convert to ASN.1 and push onto Attributes SET (for signing) and
                    // onto authenticatedAttributesAsn1 to complete SignedData ASN.1
                    // TODO: optimize away duplication
                    attrsAsn1.value.push(_attributeToAsn1(attr));
                    signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));
                }
                // DER-serialize and digest SET OF attributes only
                bytes = asn1.toDer(attrsAsn1).getBytes();
                signer.md.start().update(bytes);
            }
            // sign digest
            signer.signature = signer.key.sign(signer.md, "RSASSA-PKCS1-V1_5");
        }
        // add signer info
        msg.signerInfos = _signersToAsn1(msg.signers);
    }
};
/**
 * Creates an empty PKCS#7 message of type EncryptedData.
 *
 * @return the message.
 */ p7.createEncryptedData = function() {
    var msg = null;
    msg = {
        type: forge.pki.oids.encryptedData,
        version: 0,
        encryptedContent: {
            algorithm: forge.pki.oids["aes256-CBC"]
        },
        /**
     * Reads an EncryptedData content block (in ASN.1 format)
     *
     * @param obj The ASN.1 representation of the EncryptedData content block
     */ fromAsn1: function(obj) {
            // Validate EncryptedData content block and capture data.
            _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);
        },
        /**
     * Decrypt encrypted content
     *
     * @param key The (symmetric) key as a byte buffer
     */ decrypt: function(key) {
            if (key !== undefined) msg.encryptedContent.key = key;
            _decryptContent(msg);
        }
    };
    return msg;
};
/**
 * Creates an empty PKCS#7 message of type EnvelopedData.
 *
 * @return the message.
 */ p7.createEnvelopedData = function() {
    var msg = null;
    msg = {
        type: forge.pki.oids.envelopedData,
        version: 0,
        recipients: [],
        encryptedContent: {
            algorithm: forge.pki.oids["aes256-CBC"]
        },
        /**
     * Reads an EnvelopedData content block (in ASN.1 format)
     *
     * @param obj the ASN.1 representation of the EnvelopedData content block.
     */ fromAsn1: function(obj) {
            // validate EnvelopedData content block and capture data
            var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);
            msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);
        },
        toAsn1: function() {
            // ContentInfo
            return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // ContentType
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(msg.type).getBytes()),
                // [0] EnvelopedData
                asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                        // Version
                        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(msg.version).getBytes()),
                        // RecipientInfos
                        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, _recipientsToAsn1(msg.recipients)),
                        // EncryptedContentInfo
                        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, _encryptedContentToAsn1(msg.encryptedContent))
                    ])
                ])
            ]);
        },
        /**
     * Find recipient by X.509 certificate's issuer.
     *
     * @param cert the certificate with the issuer to look for.
     *
     * @return the recipient object.
     */ findRecipient: function(cert) {
            var sAttr = cert.issuer.attributes;
            for(var i = 0; i < msg.recipients.length; ++i){
                var r = msg.recipients[i];
                var rAttr = r.issuer;
                if (r.serialNumber !== cert.serialNumber) continue;
                if (rAttr.length !== sAttr.length) continue;
                var match = true;
                for(var j = 0; j < sAttr.length; ++j)if (rAttr[j].type !== sAttr[j].type || rAttr[j].value !== sAttr[j].value) {
                    match = false;
                    break;
                }
                if (match) return r;
            }
            return null;
        },
        /**
     * Decrypt enveloped content
     *
     * @param recipient The recipient object related to the private key
     * @param privKey The (RSA) private key object
     */ decrypt: function(recipient, privKey) {
            if (msg.encryptedContent.key === undefined && recipient !== undefined && privKey !== undefined) switch(recipient.encryptedContent.algorithm){
                case forge.pki.oids.rsaEncryption:
                case forge.pki.oids.desCBC:
                    var key = privKey.decrypt(recipient.encryptedContent.content);
                    msg.encryptedContent.key = forge.util.createBuffer(key);
                    break;
                default:
                    throw new Error("Unsupported asymmetric cipher, OID " + recipient.encryptedContent.algorithm);
            }
            _decryptContent(msg);
        },
        /**
     * Add (another) entity to list of recipients.
     *
     * @param cert The certificate of the entity to add.
     */ addRecipient: function(cert) {
            msg.recipients.push({
                version: 0,
                issuer: cert.issuer.attributes,
                serialNumber: cert.serialNumber,
                encryptedContent: {
                    // We simply assume rsaEncryption here, since forge.pki only
                    // supports RSA so far.  If the PKI module supports other
                    // ciphers one day, we need to modify this one as well.
                    algorithm: forge.pki.oids.rsaEncryption,
                    key: cert.publicKey
                }
            });
        },
        /**
     * Encrypt enveloped content.
     *
     * This function supports two optional arguments, cipher and key, which
     * can be used to influence symmetric encryption.  Unless cipher is
     * provided, the cipher specified in encryptedContent.algorithm is used
     * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key
     * is (re-)used.  If that one's not set, a random key will be generated
     * automatically.
     *
     * @param [key] The key to be used for symmetric encryption.
     * @param [cipher] The OID of the symmetric cipher to use.
     */ encrypt: function(key, cipher) {
            // Part 1: Symmetric encryption
            if (msg.encryptedContent.content === undefined) {
                cipher = cipher || msg.encryptedContent.algorithm;
                key = key || msg.encryptedContent.key;
                var keyLen, ivLen, ciphFn;
                switch(cipher){
                    case forge.pki.oids["aes128-CBC"]:
                        keyLen = 16;
                        ivLen = 16;
                        ciphFn = forge.aes.createEncryptionCipher;
                        break;
                    case forge.pki.oids["aes192-CBC"]:
                        keyLen = 24;
                        ivLen = 16;
                        ciphFn = forge.aes.createEncryptionCipher;
                        break;
                    case forge.pki.oids["aes256-CBC"]:
                        keyLen = 32;
                        ivLen = 16;
                        ciphFn = forge.aes.createEncryptionCipher;
                        break;
                    case forge.pki.oids["des-EDE3-CBC"]:
                        keyLen = 24;
                        ivLen = 8;
                        ciphFn = forge.des.createEncryptionCipher;
                        break;
                    default:
                        throw new Error("Unsupported symmetric cipher, OID " + cipher);
                }
                if (key === undefined) key = forge.util.createBuffer(forge.random.getBytes(keyLen));
                else if (key.length() != keyLen) throw new Error("Symmetric key has wrong length; got " + key.length() + " bytes, expected " + keyLen + ".");
                // Keep a copy of the key & IV in the object, so the caller can
                // use it for whatever reason.
                msg.encryptedContent.algorithm = cipher;
                msg.encryptedContent.key = key;
                msg.encryptedContent.parameter = forge.util.createBuffer(forge.random.getBytes(ivLen));
                var ciph = ciphFn(key);
                ciph.start(msg.encryptedContent.parameter.copy());
                ciph.update(msg.content);
                // The finish function does PKCS#7 padding by default, therefore
                // no action required by us.
                if (!ciph.finish()) throw new Error("Symmetric encryption failed.");
                msg.encryptedContent.content = ciph.output;
            }
            // Part 2: asymmetric encryption for each recipient
            for(var i = 0; i < msg.recipients.length; ++i){
                var recipient = msg.recipients[i];
                // Nothing to do, encryption already done.
                if (recipient.encryptedContent.content !== undefined) continue;
                switch(recipient.encryptedContent.algorithm){
                    case forge.pki.oids.rsaEncryption:
                        recipient.encryptedContent.content = recipient.encryptedContent.key.encrypt(msg.encryptedContent.key.data);
                        break;
                    default:
                        throw new Error("Unsupported asymmetric cipher, OID " + recipient.encryptedContent.algorithm);
                }
            }
        }
    };
    return msg;
};
/**
 * Converts a single recipient from an ASN.1 object.
 *
 * @param obj the ASN.1 RecipientInfo.
 *
 * @return the recipient object.
 */ function _recipientFromAsn1(obj) {
    // validate EnvelopedData content block and capture data
    var capture = {};
    var errors = [];
    if (!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {
        var error = new Error("Cannot read PKCS#7 RecipientInfo. ASN.1 object is not an PKCS#7 RecipientInfo.");
        error.errors = errors;
        throw error;
    }
    return {
        version: capture.version.charCodeAt(0),
        issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
        serialNumber: forge.util.createBuffer(capture.serial).toHex(),
        encryptedContent: {
            algorithm: asn1.derToOid(capture.encAlgorithm),
            parameter: capture.encParameter.value,
            content: capture.encKey
        }
    };
}
/**
 * Converts a single recipient object to an ASN.1 object.
 *
 * @param obj the recipient object.
 *
 * @return the ASN.1 RecipientInfo.
 */ function _recipientToAsn1(obj) {
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // Version
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(obj.version).getBytes()),
        // IssuerAndSerialNumber
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // Name
            forge.pki.distinguishedNameToAsn1({
                attributes: obj.issuer
            }),
            // Serial
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(obj.serialNumber))
        ]),
        // KeyEncryptionAlgorithmIdentifier
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // Algorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()),
            // Parameter, force NULL, only RSA supported for now.
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
        ]),
        // EncryptedKey
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.encryptedContent.content)
    ]);
}
/**
 * Map a set of RecipientInfo ASN.1 objects to recipient objects.
 *
 * @param infos an array of ASN.1 representations RecipientInfo (i.e. SET OF).
 *
 * @return an array of recipient objects.
 */ function _recipientsFromAsn1(infos) {
    var ret = [];
    for(var i = 0; i < infos.length; ++i)ret.push(_recipientFromAsn1(infos[i]));
    return ret;
}
/**
 * Map an array of recipient objects to ASN.1 RecipientInfo objects.
 *
 * @param recipients an array of recipientInfo objects.
 *
 * @return an array of ASN.1 RecipientInfos.
 */ function _recipientsToAsn1(recipients) {
    var ret = [];
    for(var i = 0; i < recipients.length; ++i)ret.push(_recipientToAsn1(recipients[i]));
    return ret;
}
/**
 * Converts a single signer from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a SignerInfo.
 *
 * @return the signer object.
 */ function _signerFromAsn1(obj) {
    // validate EnvelopedData content block and capture data
    var capture = {};
    var errors = [];
    if (!asn1.validate(obj, p7.asn1.signerInfoValidator, capture, errors)) {
        var error = new Error("Cannot read PKCS#7 SignerInfo. ASN.1 object is not an PKCS#7 SignerInfo.");
        error.errors = errors;
        throw error;
    }
    var rval = {
        version: capture.version.charCodeAt(0),
        issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
        serialNumber: forge.util.createBuffer(capture.serial).toHex(),
        digestAlgorithm: asn1.derToOid(capture.digestAlgorithm),
        signatureAlgorithm: asn1.derToOid(capture.signatureAlgorithm),
        signature: capture.signature,
        authenticatedAttributes: [],
        unauthenticatedAttributes: []
    };
    // TODO: convert attributes
    var authenticatedAttributes = capture.authenticatedAttributes || [];
    var unauthenticatedAttributes = capture.unauthenticatedAttributes || [];
    return rval;
}
/**
 * Converts a single signerInfo object to an ASN.1 object.
 *
 * @param obj the signerInfo object.
 *
 * @return the ASN.1 representation of a SignerInfo.
 */ function _signerToAsn1(obj) {
    // SignerInfo
    var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(obj.version).getBytes()),
        // issuerAndSerialNumber
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // name
            forge.pki.distinguishedNameToAsn1({
                attributes: obj.issuer
            }),
            // serial
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(obj.serialNumber))
        ]),
        // digestAlgorithm
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // algorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(obj.digestAlgorithm).getBytes()),
            // parameters (null)
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
        ])
    ]);
    // authenticatedAttributes (OPTIONAL)
    if (obj.authenticatedAttributesAsn1) // add ASN.1 previously generated during signing
    rval.value.push(obj.authenticatedAttributesAsn1);
    // digestEncryptionAlgorithm
    rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // algorithm
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(obj.signatureAlgorithm).getBytes()),
        // parameters (null)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
    ]));
    // encryptedDigest
    rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.signature));
    // unauthenticatedAttributes (OPTIONAL)
    if (obj.unauthenticatedAttributes.length > 0) {
        // [1] IMPLICIT
        var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);
        for(var i = 0; i < obj.unauthenticatedAttributes.length; ++i){
            var attr = obj.unauthenticatedAttributes[i];
            attrsAsn1.values.push(_attributeToAsn1(attr));
        }
        rval.value.push(attrsAsn1);
    }
    return rval;
}
/**
 * Map a set of SignerInfo ASN.1 objects to an array of signer objects.
 *
 * @param signerInfoAsn1s an array of ASN.1 SignerInfos (i.e. SET OF).
 *
 * @return an array of signers objects.
 */ function _signersFromAsn1(signerInfoAsn1s) {
    var ret = [];
    for(var i = 0; i < signerInfoAsn1s.length; ++i)ret.push(_signerFromAsn1(signerInfoAsn1s[i]));
    return ret;
}
/**
 * Map an array of signer objects to ASN.1 objects.
 *
 * @param signers an array of signer objects.
 *
 * @return an array of ASN.1 SignerInfos.
 */ function _signersToAsn1(signers) {
    var ret = [];
    for(var i = 0; i < signers.length; ++i)ret.push(_signerToAsn1(signers[i]));
    return ret;
}
/**
 * Convert an attribute object to an ASN.1 Attribute.
 *
 * @param attr the attribute object.
 *
 * @return the ASN.1 Attribute.
 */ function _attributeToAsn1(attr) {
    var value;
    // TODO: generalize to support more attributes
    if (attr.type === forge.pki.oids.contentType) value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.value).getBytes());
    else if (attr.type === forge.pki.oids.messageDigest) value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, attr.value.bytes());
    else if (attr.type === forge.pki.oids.signingTime) {
        /* Note per RFC 2985: Dates between 1 January 1950 and 31 December 2049
      (inclusive) MUST be encoded as UTCTime. Any dates with year values
      before 1950 or after 2049 MUST be encoded as GeneralizedTime. [Further,]
      UTCTime values MUST be expressed in Greenwich Mean Time (Zulu) and MUST
      include seconds (i.e., times are YYMMDDHHMMSSZ), even where the
      number of seconds is zero.  Midnight (GMT) must be represented as
      "YYMMDD000000Z". */ // TODO: make these module-level constants
        var jan_1_1950 = new Date("1950-01-01T00:00:00Z");
        var jan_1_2050 = new Date("2050-01-01T00:00:00Z");
        var date = attr.value;
        if (typeof date === "string") {
            // try to parse date
            var timestamp = Date.parse(date);
            if (!isNaN(timestamp)) date = new Date(timestamp);
            else if (date.length === 13) // YYMMDDHHMMSSZ (13 chars for UTCTime)
            date = asn1.utcTimeToDate(date);
            else // assume generalized time
            date = asn1.generalizedTimeToDate(date);
        }
        if (date >= jan_1_1950 && date < jan_1_2050) value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false, asn1.dateToUtcTime(date));
        else value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false, asn1.dateToGeneralizedTime(date));
    }
    // TODO: expose as common API call
    // create a RelativeDistinguishedName set
    // each value in the set is an AttributeTypeAndValue first
    // containing the type (an OID) and second the value
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // AttributeType
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.type).getBytes()),
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
            // AttributeValue
            value
        ])
    ]);
}
/**
 * Map messages encrypted content to ASN.1 objects.
 *
 * @param ec The encryptedContent object of the message.
 *
 * @return ASN.1 representation of the encryptedContent object (SEQUENCE).
 */ function _encryptedContentToAsn1(ec) {
    return [
        // ContentType, always Data for the moment
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(forge.pki.oids.data).getBytes()),
        // ContentEncryptionAlgorithmIdentifier
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // Algorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(ec.algorithm).getBytes()),
            // Parameters (IV)
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ec.parameter.getBytes())
        ]),
        // [0] EncryptedContent
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ec.content.getBytes())
        ])
    ];
}
/**
 * Reads the "common part" of an PKCS#7 content block (in ASN.1 format)
 *
 * This function reads the "common part" of the PKCS#7 content blocks
 * EncryptedData and EnvelopedData, i.e. version number and symmetrically
 * encrypted content block.
 *
 * The result of the ASN.1 validate and capture process is returned
 * to allow the caller to extract further data, e.g. the list of recipients
 * in case of a EnvelopedData object.
 *
 * @param msg the PKCS#7 object to read the data to.
 * @param obj the ASN.1 representation of the content block.
 * @param validator the ASN.1 structure validator object to use.
 *
 * @return the value map captured by validator object.
 */ function _fromAsn1(msg, obj, validator) {
    var capture = {};
    var errors = [];
    if (!asn1.validate(obj, validator, capture, errors)) {
        var error = new Error("Cannot read PKCS#7 message. ASN.1 object is not a supported PKCS#7 message.");
        error.errors = error;
        throw error;
    }
    // Check contentType, so far we only support (raw) Data.
    var contentType = asn1.derToOid(capture.contentType);
    if (contentType !== forge.pki.oids.data) throw new Error("Unsupported PKCS#7 message. Only wrapped ContentType Data supported.");
    if (capture.encryptedContent) {
        var content = "";
        if (forge.util.isArray(capture.encryptedContent)) for(var i = 0; i < capture.encryptedContent.length; ++i){
            if (capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) throw new Error("Malformed PKCS#7 message, expecting encrypted content constructed of only OCTET STRING objects.");
            content += capture.encryptedContent[i].value;
        }
        else content = capture.encryptedContent;
        msg.encryptedContent = {
            algorithm: asn1.derToOid(capture.encAlgorithm),
            parameter: forge.util.createBuffer(capture.encParameter.value),
            content: forge.util.createBuffer(content)
        };
    }
    if (capture.content) {
        var content = "";
        if (forge.util.isArray(capture.content)) for(var i = 0; i < capture.content.length; ++i){
            if (capture.content[i].type !== asn1.Type.OCTETSTRING) throw new Error("Malformed PKCS#7 message, expecting content constructed of only OCTET STRING objects.");
            content += capture.content[i].value;
        }
        else content = capture.content;
        msg.content = forge.util.createBuffer(content);
    }
    msg.version = capture.version.charCodeAt(0);
    msg.rawCapture = capture;
    return capture;
}
/**
 * Decrypt the symmetrically encrypted content block of the PKCS#7 message.
 *
 * Decryption is skipped in case the PKCS#7 message object already has a
 * (decrypted) content attribute.  The algorithm, key and cipher parameters
 * (probably the iv) are taken from the encryptedContent attribute of the
 * message object.
 *
 * @param The PKCS#7 message object.
 */ function _decryptContent(msg) {
    if (msg.encryptedContent.key === undefined) throw new Error("Symmetric key not available.");
    if (msg.content === undefined) {
        var ciph;
        switch(msg.encryptedContent.algorithm){
            case forge.pki.oids["aes128-CBC"]:
            case forge.pki.oids["aes192-CBC"]:
            case forge.pki.oids["aes256-CBC"]:
                ciph = forge.aes.createDecryptionCipher(msg.encryptedContent.key);
                break;
            case forge.pki.oids["desCBC"]:
            case forge.pki.oids["des-EDE3-CBC"]:
                ciph = forge.des.createDecryptionCipher(msg.encryptedContent.key);
                break;
            default:
                throw new Error("Unsupported symmetric cipher, OID " + msg.encryptedContent.algorithm);
        }
        ciph.start(msg.encryptedContent.parameter);
        ciph.update(msg.encryptedContent.content);
        if (!ciph.finish()) throw new Error("Symmetric decryption failed.");
        msg.content = ciph.output;
    }
}

},{"./forge":"9OMxz","./aes":"9Bdb3","./asn1":"G8i2L","./des":"iMVWl","./oids":"4xWOI","./pem":"hMZVk","./pkcs7asn1":"fVplG","./random":"fOMS2","./util":"9XcEH","./x509":"046UQ"}],"fVplG":[function(require,module,exports) {
/**
 * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.
 *
 * @author Dave Longley
 * @author Stefan Siegl
 *
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#7 is as follows
 * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):
 *
 * A PKCS#7 message consists of a ContentInfo on root level, which may
 * contain any number of further ContentInfo nested into it.
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType                ContentType,
 *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * EnvelopedData ::= SEQUENCE {
 *   version                    Version,
 *   recipientInfos             RecipientInfos,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * EncryptedData ::= SEQUENCE {
 *   version                    Version,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
 *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
 *
 * SignedData ::= SEQUENCE {
 *   version           INTEGER,
 *   digestAlgorithms  DigestAlgorithmIdentifiers,
 *   contentInfo       ContentInfo,
 *   certificates      [0] IMPLICIT Certificates OPTIONAL,
 *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,
 *   signerInfos       SignerInfos
 * }
 *
 * SignerInfos ::= SET OF SignerInfo
 *
 * SignerInfo ::= SEQUENCE {
 *   version                    Version,
 *   issuerAndSerialNumber      IssuerAndSerialNumber,
 *   digestAlgorithm            DigestAlgorithmIdentifier,
 *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,
 *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,
 *   encryptedDigest            EncryptedDigest,
 *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL
 * }
 *
 * EncryptedDigest ::= OCTET STRING
 *
 * Attributes ::= SET OF Attribute
 *
 * Attribute ::= SEQUENCE {
 *   attrType    OBJECT IDENTIFIER,
 *   attrValues  SET OF AttributeValue
 * }
 *
 * AttributeValue ::= ANY
 *
 * Version ::= INTEGER
 *
 * RecipientInfos ::= SET OF RecipientInfo
 *
 * EncryptedContentInfo ::= SEQUENCE {
 *   contentType                 ContentType,
 *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
 *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL
 * }
 *
 * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of AES and DES3, there is only one,
 * the IV.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * EncryptedContent ::= OCTET STRING
 *
 * RecipientInfo ::= SEQUENCE {
 *   version                     Version,
 *   issuerAndSerialNumber       IssuerAndSerialNumber,
 *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,
 *   encryptedKey                EncryptedKey
 * }
 *
 * IssuerAndSerialNumber ::= SEQUENCE {
 *   issuer                      Name,
 *   serialNumber                CertificateSerialNumber
 * }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedKey ::= OCTET STRING
 */ var forge = require("./forge");
require("./asn1");
require("./util");
// shortcut for ASN.1 API
var asn1 = forge.asn1;
// shortcut for PKCS#7 API
var p7v = module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};
forge.pkcs7 = forge.pkcs7 || {};
forge.pkcs7.asn1 = p7v;
var contentInfoValidator = {
    name: "ContentInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "ContentInfo.ContentType",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OID,
            constructed: false,
            capture: "contentType"
        },
        {
            name: "ContentInfo.content",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 0,
            constructed: true,
            optional: true,
            captureAsn1: "content"
        }
    ]
};
p7v.contentInfoValidator = contentInfoValidator;
var encryptedContentInfoValidator = {
    name: "EncryptedContentInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "EncryptedContentInfo.contentType",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OID,
            constructed: false,
            capture: "contentType"
        },
        {
            name: "EncryptedContentInfo.contentEncryptionAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "EncryptedContentInfo.contentEncryptionAlgorithm.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "encAlgorithm"
                },
                {
                    name: "EncryptedContentInfo.contentEncryptionAlgorithm.parameter",
                    tagClass: asn1.Class.UNIVERSAL,
                    captureAsn1: "encParameter"
                }
            ]
        },
        {
            name: "EncryptedContentInfo.encryptedContent",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 0,
            /* The PKCS#7 structure output by OpenSSL somewhat differs from what
     * other implementations do generate.
     *
     * OpenSSL generates a structure like this:
     * SEQUENCE {
     *    ...
     *    [0]
     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *       ...
     * }
     *
     * Whereas other implementations (and this PKCS#7 module) generate:
     * SEQUENCE {
     *    ...
     *    [0] {
     *       OCTET STRING
     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *          ...
     *    }
     * }
     *
     * In order to support both, we just capture the context specific
     * field here.  The OCTET STRING bit is removed below.
     */ capture: "encryptedContent",
            captureAsn1: "encryptedContentAsn1"
        }
    ]
};
p7v.envelopedDataValidator = {
    name: "EnvelopedData",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "EnvelopedData.Version",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "version"
        },
        {
            name: "EnvelopedData.RecipientInfos",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SET,
            constructed: true,
            captureAsn1: "recipientInfos"
        }
    ].concat(encryptedContentInfoValidator)
};
p7v.encryptedDataValidator = {
    name: "EncryptedData",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "EncryptedData.Version",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "version"
        }
    ].concat(encryptedContentInfoValidator)
};
var signerValidator = {
    name: "SignerInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "SignerInfo.version",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false
        },
        {
            name: "SignerInfo.issuerAndSerialNumber",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "SignerInfo.issuerAndSerialNumber.issuer",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    captureAsn1: "issuer"
                },
                {
                    name: "SignerInfo.issuerAndSerialNumber.serialNumber",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.INTEGER,
                    constructed: false,
                    capture: "serial"
                }
            ]
        },
        {
            name: "SignerInfo.digestAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "SignerInfo.digestAlgorithm.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "digestAlgorithm"
                },
                {
                    name: "SignerInfo.digestAlgorithm.parameter",
                    tagClass: asn1.Class.UNIVERSAL,
                    constructed: false,
                    captureAsn1: "digestParameter",
                    optional: true
                }
            ]
        },
        {
            name: "SignerInfo.authenticatedAttributes",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 0,
            constructed: true,
            optional: true,
            capture: "authenticatedAttributes"
        },
        {
            name: "SignerInfo.digestEncryptionAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            capture: "signatureAlgorithm"
        },
        {
            name: "SignerInfo.encryptedDigest",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OCTETSTRING,
            constructed: false,
            capture: "signature"
        },
        {
            name: "SignerInfo.unauthenticatedAttributes",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 1,
            constructed: true,
            optional: true,
            capture: "unauthenticatedAttributes"
        }
    ]
};
p7v.signedDataValidator = {
    name: "SignedData",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "SignedData.Version",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "version"
        },
        {
            name: "SignedData.DigestAlgorithms",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SET,
            constructed: true,
            captureAsn1: "digestAlgorithms"
        },
        contentInfoValidator,
        {
            name: "SignedData.Certificates",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 0,
            optional: true,
            captureAsn1: "certificates"
        },
        {
            name: "SignedData.CertificateRevocationLists",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 1,
            optional: true,
            captureAsn1: "crls"
        },
        {
            name: "SignedData.SignerInfos",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SET,
            capture: "signerInfos",
            optional: true,
            value: [
                signerValidator
            ]
        }
    ]
};
p7v.recipientInfoValidator = {
    name: "RecipientInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "RecipientInfo.version",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "version"
        },
        {
            name: "RecipientInfo.issuerAndSerial",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "RecipientInfo.issuerAndSerial.issuer",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    captureAsn1: "issuer"
                },
                {
                    name: "RecipientInfo.issuerAndSerial.serialNumber",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.INTEGER,
                    constructed: false,
                    capture: "serial"
                }
            ]
        },
        {
            name: "RecipientInfo.keyEncryptionAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    name: "RecipientInfo.keyEncryptionAlgorithm.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "encAlgorithm"
                },
                {
                    name: "RecipientInfo.keyEncryptionAlgorithm.parameter",
                    tagClass: asn1.Class.UNIVERSAL,
                    constructed: false,
                    captureAsn1: "encParameter"
                }
            ]
        },
        {
            name: "RecipientInfo.encryptedKey",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OCTETSTRING,
            constructed: false,
            capture: "encKey"
        }
    ]
};

},{"./forge":"9OMxz","./asn1":"G8i2L","./util":"9XcEH"}],"046UQ":[function(require,module,exports) {
/**
 * Javascript implementation of X.509 and related components (such as
 * Certification Signing Requests) of a Public Key Infrastructure.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The ASN.1 representation of an X.509v3 certificate is as follows
 * (see RFC 2459):
 *
 * Certificate ::= SEQUENCE {
 *   tbsCertificate       TBSCertificate,
 *   signatureAlgorithm   AlgorithmIdentifier,
 *   signatureValue       BIT STRING
 * }
 *
 * TBSCertificate ::= SEQUENCE {
 *   version         [0]  EXPLICIT Version DEFAULT v1,
 *   serialNumber         CertificateSerialNumber,
 *   signature            AlgorithmIdentifier,
 *   issuer               Name,
 *   validity             Validity,
 *   subject              Name,
 *   subjectPublicKeyInfo SubjectPublicKeyInfo,
 *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   extensions      [3]  EXPLICIT Extensions OPTIONAL
 *                        -- If present, version shall be v3
 * }
 *
 * Version ::= INTEGER  { v1(0), v2(1), v3(2) }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * Name ::= CHOICE {
 *   // only one possible choice for now
 *   RDNSequence
 * }
 *
 * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 *
 * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
 *
 * AttributeTypeAndValue ::= SEQUENCE {
 *   type     AttributeType,
 *   value    AttributeValue
 * }
 * AttributeType ::= OBJECT IDENTIFIER
 * AttributeValue ::= ANY DEFINED BY AttributeType
 *
 * Validity ::= SEQUENCE {
 *   notBefore      Time,
 *   notAfter       Time
 * }
 *
 * Time ::= CHOICE {
 *   utcTime        UTCTime,
 *   generalTime    GeneralizedTime
 * }
 *
 * UniqueIdentifier ::= BIT STRING
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm            AlgorithmIdentifier,
 *   subjectPublicKey     BIT STRING
 * }
 *
 * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension
 *
 * Extension ::= SEQUENCE {
 *   extnID      OBJECT IDENTIFIER,
 *   critical    BOOLEAN DEFAULT FALSE,
 *   extnValue   OCTET STRING
 * }
 *
 * The only key algorithm currently supported for PKI is RSA.
 *
 * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.
 *
 * PKCS#10 v1.7 describes certificate signing requests:
 *
 * CertificationRequestInfo:
 *
 * CertificationRequestInfo ::= SEQUENCE {
 *   version       INTEGER { v1(0) } (v1,...),
 *   subject       Name,
 *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
 *   attributes    [0] Attributes{{ CRIAttributes }}
 * }
 *
 * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
 *
 * CRIAttributes  ATTRIBUTE  ::= {
 *   ... -- add any locally defined attributes here -- }
 *
 * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
 *   type   ATTRIBUTE.&id({IOSet}),
 *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
 * }
 *
 * CertificationRequest ::= SEQUENCE {
 *   certificationRequestInfo CertificationRequestInfo,
 *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
 *   signature          BIT STRING
 * }
 */ var forge = require("./forge");
require("./aes");
require("./asn1");
require("./des");
require("./md");
require("./mgf");
require("./oids");
require("./pem");
require("./pss");
require("./rsa");
require("./util");
// shortcut for asn.1 API
var asn1 = forge.asn1;
/* Public Key Infrastructure (PKI) implementation. */ var pki = module.exports = forge.pki = forge.pki || {};
var oids = pki.oids;
// short name OID mappings
var _shortNames = {};
_shortNames["CN"] = oids["commonName"];
_shortNames["commonName"] = "CN";
_shortNames["C"] = oids["countryName"];
_shortNames["countryName"] = "C";
_shortNames["L"] = oids["localityName"];
_shortNames["localityName"] = "L";
_shortNames["ST"] = oids["stateOrProvinceName"];
_shortNames["stateOrProvinceName"] = "ST";
_shortNames["O"] = oids["organizationName"];
_shortNames["organizationName"] = "O";
_shortNames["OU"] = oids["organizationalUnitName"];
_shortNames["organizationalUnitName"] = "OU";
_shortNames["E"] = oids["emailAddress"];
_shortNames["emailAddress"] = "E";
// validator for an SubjectPublicKeyInfo structure
// Note: Currently only works with an RSA public key
var publicKeyValidator = forge.pki.rsa.publicKeyValidator;
// validator for an X.509v3 certificate
var x509CertificateValidator = {
    name: "Certificate",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "Certificate.TBSCertificate",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            captureAsn1: "tbsCertificate",
            value: [
                {
                    name: "Certificate.TBSCertificate.version",
                    tagClass: asn1.Class.CONTEXT_SPECIFIC,
                    type: 0,
                    constructed: true,
                    optional: true,
                    value: [
                        {
                            name: "Certificate.TBSCertificate.version.integer",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.INTEGER,
                            constructed: false,
                            capture: "certVersion"
                        }
                    ]
                },
                {
                    name: "Certificate.TBSCertificate.serialNumber",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.INTEGER,
                    constructed: false,
                    capture: "certSerialNumber"
                },
                {
                    name: "Certificate.TBSCertificate.signature",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    value: [
                        {
                            name: "Certificate.TBSCertificate.signature.algorithm",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.OID,
                            constructed: false,
                            capture: "certinfoSignatureOid"
                        },
                        {
                            name: "Certificate.TBSCertificate.signature.parameters",
                            tagClass: asn1.Class.UNIVERSAL,
                            optional: true,
                            captureAsn1: "certinfoSignatureParams"
                        }
                    ]
                },
                {
                    name: "Certificate.TBSCertificate.issuer",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    captureAsn1: "certIssuer"
                },
                {
                    name: "Certificate.TBSCertificate.validity",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    // Note: UTC and generalized times may both appear so the capture
                    // names are based on their detected order, the names used below
                    // are only for the common case, which validity time really means
                    // "notBefore" and which means "notAfter" will be determined by order
                    value: [
                        {
                            // notBefore (Time) (UTC time case)
                            name: "Certificate.TBSCertificate.validity.notBefore (utc)",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.UTCTIME,
                            constructed: false,
                            optional: true,
                            capture: "certValidity1UTCTime"
                        },
                        {
                            // notBefore (Time) (generalized time case)
                            name: "Certificate.TBSCertificate.validity.notBefore (generalized)",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.GENERALIZEDTIME,
                            constructed: false,
                            optional: true,
                            capture: "certValidity2GeneralizedTime"
                        },
                        {
                            // notAfter (Time) (only UTC time is supported)
                            name: "Certificate.TBSCertificate.validity.notAfter (utc)",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.UTCTIME,
                            constructed: false,
                            optional: true,
                            capture: "certValidity3UTCTime"
                        },
                        {
                            // notAfter (Time) (only UTC time is supported)
                            name: "Certificate.TBSCertificate.validity.notAfter (generalized)",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.GENERALIZEDTIME,
                            constructed: false,
                            optional: true,
                            capture: "certValidity4GeneralizedTime"
                        }
                    ]
                },
                {
                    // Name (subject) (RDNSequence)
                    name: "Certificate.TBSCertificate.subject",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    captureAsn1: "certSubject"
                },
                // SubjectPublicKeyInfo
                publicKeyValidator,
                {
                    // issuerUniqueID (optional)
                    name: "Certificate.TBSCertificate.issuerUniqueID",
                    tagClass: asn1.Class.CONTEXT_SPECIFIC,
                    type: 1,
                    constructed: true,
                    optional: true,
                    value: [
                        {
                            name: "Certificate.TBSCertificate.issuerUniqueID.id",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.BITSTRING,
                            constructed: false,
                            // TODO: support arbitrary bit length ids
                            captureBitStringValue: "certIssuerUniqueId"
                        }
                    ]
                },
                {
                    // subjectUniqueID (optional)
                    name: "Certificate.TBSCertificate.subjectUniqueID",
                    tagClass: asn1.Class.CONTEXT_SPECIFIC,
                    type: 2,
                    constructed: true,
                    optional: true,
                    value: [
                        {
                            name: "Certificate.TBSCertificate.subjectUniqueID.id",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.BITSTRING,
                            constructed: false,
                            // TODO: support arbitrary bit length ids
                            captureBitStringValue: "certSubjectUniqueId"
                        }
                    ]
                },
                {
                    // Extensions (optional)
                    name: "Certificate.TBSCertificate.extensions",
                    tagClass: asn1.Class.CONTEXT_SPECIFIC,
                    type: 3,
                    constructed: true,
                    captureAsn1: "certExtensions",
                    optional: true
                }
            ]
        },
        {
            // AlgorithmIdentifier (signature algorithm)
            name: "Certificate.signatureAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    // algorithm
                    name: "Certificate.signatureAlgorithm.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "certSignatureOid"
                },
                {
                    name: "Certificate.TBSCertificate.signature.parameters",
                    tagClass: asn1.Class.UNIVERSAL,
                    optional: true,
                    captureAsn1: "certSignatureParams"
                }
            ]
        },
        {
            // SignatureValue
            name: "Certificate.signatureValue",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.BITSTRING,
            constructed: false,
            captureBitStringValue: "certSignature"
        }
    ]
};
var rsassaPssParameterValidator = {
    name: "rsapss",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [
        {
            name: "rsapss.hashAlgorithm",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 0,
            constructed: true,
            value: [
                {
                    name: "rsapss.hashAlgorithm.AlgorithmIdentifier",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Class.SEQUENCE,
                    constructed: true,
                    optional: true,
                    value: [
                        {
                            name: "rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.OID,
                            constructed: false,
                            capture: "hashOid"
                        }
                    ]
                }
            ]
        },
        {
            name: "rsapss.maskGenAlgorithm",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 1,
            constructed: true,
            value: [
                {
                    name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Class.SEQUENCE,
                    constructed: true,
                    optional: true,
                    value: [
                        {
                            name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.OID,
                            constructed: false,
                            capture: "maskGenOid"
                        },
                        {
                            name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier.params",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.SEQUENCE,
                            constructed: true,
                            value: [
                                {
                                    name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm",
                                    tagClass: asn1.Class.UNIVERSAL,
                                    type: asn1.Type.OID,
                                    constructed: false,
                                    capture: "maskGenHashOid"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            name: "rsapss.saltLength",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 2,
            optional: true,
            value: [
                {
                    name: "rsapss.saltLength.saltLength",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Class.INTEGER,
                    constructed: false,
                    capture: "saltLength"
                }
            ]
        },
        {
            name: "rsapss.trailerField",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 3,
            optional: true,
            value: [
                {
                    name: "rsapss.trailer.trailer",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Class.INTEGER,
                    constructed: false,
                    capture: "trailer"
                }
            ]
        }
    ]
};
// validator for a CertificationRequestInfo structure
var certificationRequestInfoValidator = {
    name: "CertificationRequestInfo",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: "certificationRequestInfo",
    value: [
        {
            name: "CertificationRequestInfo.integer",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "certificationRequestInfoVersion"
        },
        {
            // Name (subject) (RDNSequence)
            name: "CertificationRequestInfo.subject",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            captureAsn1: "certificationRequestInfoSubject"
        },
        // SubjectPublicKeyInfo
        publicKeyValidator,
        {
            name: "CertificationRequestInfo.attributes",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 0,
            constructed: true,
            optional: true,
            capture: "certificationRequestInfoAttributes",
            value: [
                {
                    name: "CertificationRequestInfo.attributes",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.SEQUENCE,
                    constructed: true,
                    value: [
                        {
                            name: "CertificationRequestInfo.attributes.type",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.OID,
                            constructed: false
                        },
                        {
                            name: "CertificationRequestInfo.attributes.value",
                            tagClass: asn1.Class.UNIVERSAL,
                            type: asn1.Type.SET,
                            constructed: true
                        }
                    ]
                }
            ]
        }
    ]
};
// validator for a CertificationRequest structure
var certificationRequestValidator = {
    name: "CertificationRequest",
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: "csr",
    value: [
        certificationRequestInfoValidator,
        {
            // AlgorithmIdentifier (signature algorithm)
            name: "CertificationRequest.signatureAlgorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [
                {
                    // algorithm
                    name: "CertificationRequest.signatureAlgorithm.algorithm",
                    tagClass: asn1.Class.UNIVERSAL,
                    type: asn1.Type.OID,
                    constructed: false,
                    capture: "csrSignatureOid"
                },
                {
                    name: "CertificationRequest.signatureAlgorithm.parameters",
                    tagClass: asn1.Class.UNIVERSAL,
                    optional: true,
                    captureAsn1: "csrSignatureParams"
                }
            ]
        },
        {
            // signature
            name: "CertificationRequest.signature",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.BITSTRING,
            constructed: false,
            captureBitStringValue: "csrSignature"
        }
    ]
};
/**
 * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
 * sets into an array with objects that have type and value properties.
 *
 * @param rdn the RDNSequence to convert.
 * @param md a message digest to append type and value to if provided.
 */ pki.RDNAttributesAsArray = function(rdn, md) {
    var rval = [];
    // each value in 'rdn' in is a SET of RelativeDistinguishedName
    var set, attr, obj;
    for(var si = 0; si < rdn.value.length; ++si){
        // get the RelativeDistinguishedName set
        set = rdn.value[si];
        // each value in the SET is an AttributeTypeAndValue sequence
        // containing first a type (an OID) and second a value (defined by
        // the OID)
        for(var i = 0; i < set.value.length; ++i){
            obj = {};
            attr = set.value[i];
            obj.type = asn1.derToOid(attr.value[0].value);
            obj.value = attr.value[1].value;
            obj.valueTagClass = attr.value[1].type;
            // if the OID is known, get its name and short name
            if (obj.type in oids) {
                obj.name = oids[obj.type];
                if (obj.name in _shortNames) obj.shortName = _shortNames[obj.name];
            }
            if (md) {
                md.update(obj.type);
                md.update(obj.value);
            }
            rval.push(obj);
        }
    }
    return rval;
};
/**
 * Converts ASN.1 CRIAttributes into an array with objects that have type and
 * value properties.
 *
 * @param attributes the CRIAttributes to convert.
 */ pki.CRIAttributesAsArray = function(attributes) {
    var rval = [];
    // each value in 'attributes' in is a SEQUENCE with an OID and a SET
    for(var si = 0; si < attributes.length; ++si){
        // get the attribute sequence
        var seq = attributes[si];
        // each value in the SEQUENCE containing first a type (an OID) and
        // second a set of values (defined by the OID)
        var type = asn1.derToOid(seq.value[0].value);
        var values = seq.value[1].value;
        for(var vi = 0; vi < values.length; ++vi){
            var obj = {};
            obj.type = type;
            obj.value = values[vi].value;
            obj.valueTagClass = values[vi].type;
            // if the OID is known, get its name and short name
            if (obj.type in oids) {
                obj.name = oids[obj.type];
                if (obj.name in _shortNames) obj.shortName = _shortNames[obj.name];
            }
            // parse extensions
            if (obj.type === oids.extensionRequest) {
                obj.extensions = [];
                for(var ei = 0; ei < obj.value.length; ++ei)obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]));
            }
            rval.push(obj);
        }
    }
    return rval;
};
/**
 * Gets an issuer or subject attribute from its name, type, or short name.
 *
 * @param obj the issuer or subject object.
 * @param options a short name string or an object with:
 *          shortName the short name for the attribute.
 *          name the name for the attribute.
 *          type the type for the attribute.
 *
 * @return the attribute.
 */ function _getAttribute(obj, options) {
    if (typeof options === "string") options = {
        shortName: options
    };
    var rval = null;
    var attr;
    for(var i = 0; rval === null && i < obj.attributes.length; ++i){
        attr = obj.attributes[i];
        if (options.type && options.type === attr.type) rval = attr;
        else if (options.name && options.name === attr.name) rval = attr;
        else if (options.shortName && options.shortName === attr.shortName) rval = attr;
    }
    return rval;
}
/**
 * Converts signature parameters from ASN.1 structure.
 *
 * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had
 * no parameters.
 *
 * RSASSA-PSS-params  ::=  SEQUENCE  {
 *   hashAlgorithm      [0] HashAlgorithm DEFAULT
 *                             sha1Identifier,
 *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT
 *                             mgf1SHA1Identifier,
 *   saltLength         [2] INTEGER DEFAULT 20,
 *   trailerField       [3] INTEGER DEFAULT 1
 * }
 *
 * HashAlgorithm  ::=  AlgorithmIdentifier
 *
 * MaskGenAlgorithm  ::=  AlgorithmIdentifier
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * @param oid The OID specifying the signature algorithm
 * @param obj The ASN.1 structure holding the parameters
 * @param fillDefaults Whether to use return default values where omitted
 * @return signature parameter object
 */ var _readSignatureParameters = function(oid, obj, fillDefaults) {
    var params = {};
    if (oid !== oids["RSASSA-PSS"]) return params;
    if (fillDefaults) params = {
        hash: {
            algorithmOid: oids["sha1"]
        },
        mgf: {
            algorithmOid: oids["mgf1"],
            hash: {
                algorithmOid: oids["sha1"]
            }
        },
        saltLength: 20
    };
    var capture = {};
    var errors = [];
    if (!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {
        var error = new Error("Cannot read RSASSA-PSS parameter block.");
        error.errors = errors;
        throw error;
    }
    if (capture.hashOid !== undefined) {
        params.hash = params.hash || {};
        params.hash.algorithmOid = asn1.derToOid(capture.hashOid);
    }
    if (capture.maskGenOid !== undefined) {
        params.mgf = params.mgf || {};
        params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);
        params.mgf.hash = params.mgf.hash || {};
        params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);
    }
    if (capture.saltLength !== undefined) params.saltLength = capture.saltLength.charCodeAt(0);
    return params;
};
/**
 * Converts an X.509 certificate from PEM format.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. This will scan the TBSCertificate part of the ASN.1
 * object while it is converted so it doesn't need to be converted back
 * to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certificate.
 */ pki.certificateFromPem = function(pem, computeHash, strict) {
    var msg = forge.pem.decode(pem)[0];
    if (msg.type !== "CERTIFICATE" && msg.type !== "X509 CERTIFICATE" && msg.type !== "TRUSTED CERTIFICATE") {
        var error = new Error('Could not convert certificate from PEM; PEM header type is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');
        error.headerType = msg.type;
        throw error;
    }
    if (msg.procType && msg.procType.type === "ENCRYPTED") throw new Error("Could not convert certificate from PEM; PEM is encrypted.");
    // convert DER to ASN.1 object
    var obj = asn1.fromDer(msg.body, strict);
    return pki.certificateFromAsn1(obj, computeHash);
};
/**
 * Converts an X.509 certificate to PEM format.
 *
 * @param cert the certificate.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certificate.
 */ pki.certificateToPem = function(cert, maxline) {
    // convert to ASN.1, then DER, then PEM-encode
    var msg = {
        type: "CERTIFICATE",
        body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()
    };
    return forge.pem.encode(msg, {
        maxline: maxline
    });
};
/**
 * Converts an RSA public key from PEM format.
 *
 * @param pem the PEM-formatted public key.
 *
 * @return the public key.
 */ pki.publicKeyFromPem = function(pem) {
    var msg = forge.pem.decode(pem)[0];
    if (msg.type !== "PUBLIC KEY" && msg.type !== "RSA PUBLIC KEY") {
        var error = new Error('Could not convert public key from PEM; PEM header type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');
        error.headerType = msg.type;
        throw error;
    }
    if (msg.procType && msg.procType.type === "ENCRYPTED") throw new Error("Could not convert public key from PEM; PEM is encrypted.");
    // convert DER to ASN.1 object
    var obj = asn1.fromDer(msg.body);
    return pki.publicKeyFromAsn1(obj);
};
/**
 * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */ pki.publicKeyToPem = function(key, maxline) {
    // convert to ASN.1, then DER, then PEM-encode
    var msg = {
        type: "PUBLIC KEY",
        body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()
    };
    return forge.pem.encode(msg, {
        maxline: maxline
    });
};
/**
 * Converts an RSA public key to PEM format (using an RSAPublicKey).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */ pki.publicKeyToRSAPublicKeyPem = function(key, maxline) {
    // convert to ASN.1, then DER, then PEM-encode
    var msg = {
        type: "RSA PUBLIC KEY",
        body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()
    };
    return forge.pem.encode(msg, {
        maxline: maxline
    });
};
/**
 * Gets a fingerprint for the given public key.
 *
 * @param options the options to use.
 *          [md] the message digest object to use (defaults to forge.md.sha1).
 *          [type] the type of fingerprint, such as 'RSAPublicKey',
 *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').
 *          [encoding] an alternative output encoding, such as 'hex'
 *            (defaults to none, outputs a byte buffer).
 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
 *            output, eg: ':' (defaults to none).
 *
 * @return the fingerprint as a byte buffer or other encoding based on options.
 */ pki.getPublicKeyFingerprint = function(key, options) {
    options = options || {};
    var md = options.md || forge.md.sha1.create();
    var type = options.type || "RSAPublicKey";
    var bytes;
    switch(type){
        case "RSAPublicKey":
            bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();
            break;
        case "SubjectPublicKeyInfo":
            bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();
            break;
        default:
            throw new Error('Unknown fingerprint type "' + options.type + '".');
    }
    // hash public key bytes
    md.start();
    md.update(bytes);
    var digest = md.digest();
    if (options.encoding === "hex") {
        var hex = digest.toHex();
        if (options.delimiter) return hex.match(/.{2}/g).join(options.delimiter);
        return hex;
    } else if (options.encoding === "binary") return digest.getBytes();
    else if (options.encoding) throw new Error('Unknown encoding "' + options.encoding + '".');
    return digest;
};
/**
 * Converts a PKCS#10 certification request (CSR) from PEM format.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. This will scan the CertificationRequestInfo part of
 * the ASN.1 object while it is converted so it doesn't need to be converted
 * back to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certification request (CSR).
 */ pki.certificationRequestFromPem = function(pem, computeHash, strict) {
    var msg = forge.pem.decode(pem)[0];
    if (msg.type !== "CERTIFICATE REQUEST") {
        var error = new Error('Could not convert certification request from PEM; PEM header type is not "CERTIFICATE REQUEST".');
        error.headerType = msg.type;
        throw error;
    }
    if (msg.procType && msg.procType.type === "ENCRYPTED") throw new Error("Could not convert certification request from PEM; PEM is encrypted.");
    // convert DER to ASN.1 object
    var obj = asn1.fromDer(msg.body, strict);
    return pki.certificationRequestFromAsn1(obj, computeHash);
};
/**
 * Converts a PKCS#10 certification request (CSR) to PEM format.
 *
 * @param csr the certification request.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certification request.
 */ pki.certificationRequestToPem = function(csr, maxline) {
    // convert to ASN.1, then DER, then PEM-encode
    var msg = {
        type: "CERTIFICATE REQUEST",
        body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()
    };
    return forge.pem.encode(msg, {
        maxline: maxline
    });
};
/**
 * Creates an empty X.509v3 RSA certificate.
 *
 * @return the certificate.
 */ pki.createCertificate = function() {
    var cert = {};
    cert.version = 0x02;
    cert.serialNumber = "00";
    cert.signatureOid = null;
    cert.signature = null;
    cert.siginfo = {};
    cert.siginfo.algorithmOid = null;
    cert.validity = {};
    cert.validity.notBefore = new Date();
    cert.validity.notAfter = new Date();
    cert.issuer = {};
    cert.issuer.getField = function(sn) {
        return _getAttribute(cert.issuer, sn);
    };
    cert.issuer.addField = function(attr) {
        _fillMissingFields([
            attr
        ]);
        cert.issuer.attributes.push(attr);
    };
    cert.issuer.attributes = [];
    cert.issuer.hash = null;
    cert.subject = {};
    cert.subject.getField = function(sn) {
        return _getAttribute(cert.subject, sn);
    };
    cert.subject.addField = function(attr) {
        _fillMissingFields([
            attr
        ]);
        cert.subject.attributes.push(attr);
    };
    cert.subject.attributes = [];
    cert.subject.hash = null;
    cert.extensions = [];
    cert.publicKey = null;
    cert.md = null;
    /**
   * Sets the subject of this certificate.
   *
   * @param attrs the array of subject attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */ cert.setSubject = function(attrs, uniqueId) {
        // set new attributes, clear hash
        _fillMissingFields(attrs);
        cert.subject.attributes = attrs;
        delete cert.subject.uniqueId;
        if (uniqueId) // TODO: support arbitrary bit length ids
        cert.subject.uniqueId = uniqueId;
        cert.subject.hash = null;
    };
    /**
   * Sets the issuer of this certificate.
   *
   * @param attrs the array of issuer attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */ cert.setIssuer = function(attrs, uniqueId) {
        // set new attributes, clear hash
        _fillMissingFields(attrs);
        cert.issuer.attributes = attrs;
        delete cert.issuer.uniqueId;
        if (uniqueId) // TODO: support arbitrary bit length ids
        cert.issuer.uniqueId = uniqueId;
        cert.issuer.hash = null;
    };
    /**
   * Sets the extensions of this certificate.
   *
   * @param exts the array of extensions to use.
   */ cert.setExtensions = function(exts) {
        for(var i = 0; i < exts.length; ++i)_fillMissingExtensionFields(exts[i], {
            cert: cert
        });
        // set new extensions
        cert.extensions = exts;
    };
    /**
   * Gets an extension by its name or id.
   *
   * @param options the name to use or an object with:
   *          name the name to use.
   *          id the id to use.
   *
   * @return the extension or null if not found.
   */ cert.getExtension = function(options) {
        if (typeof options === "string") options = {
            name: options
        };
        var rval = null;
        var ext;
        for(var i = 0; rval === null && i < cert.extensions.length; ++i){
            ext = cert.extensions[i];
            if (options.id && ext.id === options.id) rval = ext;
            else if (options.name && ext.name === options.name) rval = ext;
        }
        return rval;
    };
    /**
   * Signs this certificate using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */ cert.sign = function(key, md) {
        // TODO: get signature OID from private key
        cert.md = md || forge.md.sha1.create();
        var algorithmOid = oids[cert.md.algorithm + "WithRSAEncryption"];
        if (!algorithmOid) {
            var error = new Error("Could not compute certificate digest. Unknown message digest algorithm OID.");
            error.algorithm = cert.md.algorithm;
            throw error;
        }
        cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;
        // get TBSCertificate, convert to DER
        cert.tbsCertificate = pki.getTBSCertificate(cert);
        var bytes = asn1.toDer(cert.tbsCertificate);
        // digest and sign
        cert.md.update(bytes.getBytes());
        cert.signature = key.sign(cert.md);
    };
    /**
   * Attempts verify the signature on the passed certificate using this
   * certificate's public key.
   *
   * @param child the certificate to verify.
   *
   * @return true if verified, false if not.
   */ cert.verify = function(child) {
        var rval = false;
        if (!cert.issued(child)) {
            var issuer = child.issuer;
            var subject = cert.subject;
            var error = new Error("The parent certificate did not issue the given child certificate; the child certificate's issuer does not match the parent's subject.");
            error.expectedIssuer = issuer.attributes;
            error.actualIssuer = subject.attributes;
            throw error;
        }
        var md = child.md;
        if (md === null) {
            // check signature OID for supported signature types
            if (child.signatureOid in oids) {
                var oid = oids[child.signatureOid];
                switch(oid){
                    case "sha1WithRSAEncryption":
                        md = forge.md.sha1.create();
                        break;
                    case "md5WithRSAEncryption":
                        md = forge.md.md5.create();
                        break;
                    case "sha256WithRSAEncryption":
                        md = forge.md.sha256.create();
                        break;
                    case "sha384WithRSAEncryption":
                        md = forge.md.sha384.create();
                        break;
                    case "sha512WithRSAEncryption":
                        md = forge.md.sha512.create();
                        break;
                    case "RSASSA-PSS":
                        md = forge.md.sha256.create();
                        break;
                }
            }
            if (md === null) {
                var error = new Error("Could not compute certificate digest. Unknown signature OID.");
                error.signatureOid = child.signatureOid;
                throw error;
            }
            // produce DER formatted TBSCertificate and digest it
            var tbsCertificate = child.tbsCertificate || pki.getTBSCertificate(child);
            var bytes = asn1.toDer(tbsCertificate);
            md.update(bytes.getBytes());
        }
        if (md !== null) {
            var scheme;
            switch(child.signatureOid){
                case oids.sha1WithRSAEncryption:
                    scheme = undefined; /* use PKCS#1 v1.5 padding scheme */ 
                    break;
                case oids["RSASSA-PSS"]:
                    var hash, mgf;
                    /* initialize mgf */ hash = oids[child.signatureParameters.mgf.hash.algorithmOid];
                    if (hash === undefined || forge.md[hash] === undefined) {
                        var error = new Error("Unsupported MGF hash function.");
                        error.oid = child.signatureParameters.mgf.hash.algorithmOid;
                        error.name = hash;
                        throw error;
                    }
                    mgf = oids[child.signatureParameters.mgf.algorithmOid];
                    if (mgf === undefined || forge.mgf[mgf] === undefined) {
                        var error = new Error("Unsupported MGF function.");
                        error.oid = child.signatureParameters.mgf.algorithmOid;
                        error.name = mgf;
                        throw error;
                    }
                    mgf = forge.mgf[mgf].create(forge.md[hash].create());
                    /* initialize hash function */ hash = oids[child.signatureParameters.hash.algorithmOid];
                    if (hash === undefined || forge.md[hash] === undefined) throw {
                        message: "Unsupported RSASSA-PSS hash function.",
                        oid: child.signatureParameters.hash.algorithmOid,
                        name: hash
                    };
                    scheme = forge.pss.create(forge.md[hash].create(), mgf, child.signatureParameters.saltLength);
                    break;
            }
            // verify signature on cert using public key
            rval = cert.publicKey.verify(md.digest().getBytes(), child.signature, scheme);
        }
        return rval;
    };
    /**
   * Returns true if this certificate's issuer matches the passed
   * certificate's subject. Note that no signature check is performed.
   *
   * @param parent the certificate to check.
   *
   * @return true if this certificate's issuer matches the passed certificate's
   *         subject.
   */ cert.isIssuer = function(parent) {
        var rval = false;
        var i = cert.issuer;
        var s = parent.subject;
        // compare hashes if present
        if (i.hash && s.hash) rval = i.hash === s.hash;
        else if (i.attributes.length === s.attributes.length) {
            // all attributes are the same so issuer matches subject
            rval = true;
            var iattr, sattr;
            for(var n = 0; rval && n < i.attributes.length; ++n){
                iattr = i.attributes[n];
                sattr = s.attributes[n];
                if (iattr.type !== sattr.type || iattr.value !== sattr.value) // attribute mismatch
                rval = false;
            }
        }
        return rval;
    };
    /**
   * Returns true if this certificate's subject matches the issuer of the
   * given certificate). Note that not signature check is performed.
   *
   * @param child the certificate to check.
   *
   * @return true if this certificate's subject matches the passed
   *         certificate's issuer.
   */ cert.issued = function(child) {
        return child.isIssuer(cert);
    };
    /**
   * Generates the subjectKeyIdentifier for this certificate as byte buffer.
   *
   * @return the subjectKeyIdentifier for this certificate as byte buffer.
   */ cert.generateSubjectKeyIdentifier = function() {
        /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:

      (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
        value of the BIT STRING subjectPublicKey (excluding the tag,
        length, and number of unused bits).

      (2) The keyIdentifier is composed of a four bit type field with
        the value 0100 followed by the least significant 60 bits of the
        SHA-1 hash of the value of the BIT STRING subjectPublicKey
        (excluding the tag, length, and number of unused bit string bits).
    */ // skipping the tag, length, and number of unused bits is the same
        // as just using the RSAPublicKey (for RSA keys, which are the
        // only ones supported)
        return pki.getPublicKeyFingerprint(cert.publicKey, {
            type: "RSAPublicKey"
        });
    };
    /**
   * Verifies the subjectKeyIdentifier extension value for this certificate
   * against its public key. If no extension is found, false will be
   * returned.
   *
   * @return true if verified, false if not.
   */ cert.verifySubjectKeyIdentifier = function() {
        var oid = oids["subjectKeyIdentifier"];
        for(var i = 0; i < cert.extensions.length; ++i){
            var ext = cert.extensions[i];
            if (ext.id === oid) {
                var ski = cert.generateSubjectKeyIdentifier().getBytes();
                return forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski;
            }
        }
        return false;
    };
    return cert;
};
/**
 * Converts an X.509v3 RSA certificate from an ASN.1 object.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1
 * object needs to be scanned before the cert object is created.
 *
 * @param obj the asn1 representation of an X.509v3 RSA certificate.
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certificate.
 */ pki.certificateFromAsn1 = function(obj, computeHash) {
    // validate certificate and capture data
    var capture = {};
    var errors = [];
    if (!asn1.validate(obj, x509CertificateValidator, capture, errors)) {
        var error = new Error("Cannot read X.509 certificate. ASN.1 object is not an X509v3 Certificate.");
        error.errors = errors;
        throw error;
    }
    // get oid
    var oid = asn1.derToOid(capture.publicKeyOid);
    if (oid !== pki.oids.rsaEncryption) throw new Error("Cannot read public key. OID is not RSA.");
    // create certificate
    var cert = pki.createCertificate();
    cert.version = capture.certVersion ? capture.certVersion.charCodeAt(0) : 0;
    var serial = forge.util.createBuffer(capture.certSerialNumber);
    cert.serialNumber = serial.toHex();
    cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);
    cert.signatureParameters = _readSignatureParameters(cert.signatureOid, capture.certSignatureParams, true);
    cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);
    cert.siginfo.parameters = _readSignatureParameters(cert.siginfo.algorithmOid, capture.certinfoSignatureParams, false);
    cert.signature = capture.certSignature;
    var validity = [];
    if (capture.certValidity1UTCTime !== undefined) validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));
    if (capture.certValidity2GeneralizedTime !== undefined) validity.push(asn1.generalizedTimeToDate(capture.certValidity2GeneralizedTime));
    if (capture.certValidity3UTCTime !== undefined) validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));
    if (capture.certValidity4GeneralizedTime !== undefined) validity.push(asn1.generalizedTimeToDate(capture.certValidity4GeneralizedTime));
    if (validity.length > 2) throw new Error("Cannot read notBefore/notAfter validity times; more than two times were provided in the certificate.");
    if (validity.length < 2) throw new Error("Cannot read notBefore/notAfter validity times; they were not provided as either UTCTime or GeneralizedTime.");
    cert.validity.notBefore = validity[0];
    cert.validity.notAfter = validity[1];
    // keep TBSCertificate to preserve signature when exporting
    cert.tbsCertificate = capture.tbsCertificate;
    if (computeHash) {
        // check signature OID for supported signature types
        cert.md = null;
        if (cert.signatureOid in oids) {
            var oid = oids[cert.signatureOid];
            switch(oid){
                case "sha1WithRSAEncryption":
                    cert.md = forge.md.sha1.create();
                    break;
                case "md5WithRSAEncryption":
                    cert.md = forge.md.md5.create();
                    break;
                case "sha256WithRSAEncryption":
                    cert.md = forge.md.sha256.create();
                    break;
                case "sha384WithRSAEncryption":
                    cert.md = forge.md.sha384.create();
                    break;
                case "sha512WithRSAEncryption":
                    cert.md = forge.md.sha512.create();
                    break;
                case "RSASSA-PSS":
                    cert.md = forge.md.sha256.create();
                    break;
            }
        }
        if (cert.md === null) {
            var error = new Error("Could not compute certificate digest. Unknown signature OID.");
            error.signatureOid = cert.signatureOid;
            throw error;
        }
        // produce DER formatted TBSCertificate and digest it
        var bytes = asn1.toDer(cert.tbsCertificate);
        cert.md.update(bytes.getBytes());
    }
    // handle issuer, build issuer message digest
    var imd = forge.md.sha1.create();
    cert.issuer.getField = function(sn) {
        return _getAttribute(cert.issuer, sn);
    };
    cert.issuer.addField = function(attr) {
        _fillMissingFields([
            attr
        ]);
        cert.issuer.attributes.push(attr);
    };
    cert.issuer.attributes = pki.RDNAttributesAsArray(capture.certIssuer, imd);
    if (capture.certIssuerUniqueId) cert.issuer.uniqueId = capture.certIssuerUniqueId;
    cert.issuer.hash = imd.digest().toHex();
    // handle subject, build subject message digest
    var smd = forge.md.sha1.create();
    cert.subject.getField = function(sn) {
        return _getAttribute(cert.subject, sn);
    };
    cert.subject.addField = function(attr) {
        _fillMissingFields([
            attr
        ]);
        cert.subject.attributes.push(attr);
    };
    cert.subject.attributes = pki.RDNAttributesAsArray(capture.certSubject, smd);
    if (capture.certSubjectUniqueId) cert.subject.uniqueId = capture.certSubjectUniqueId;
    cert.subject.hash = smd.digest().toHex();
    // handle extensions
    if (capture.certExtensions) cert.extensions = pki.certificateExtensionsFromAsn1(capture.certExtensions);
    else cert.extensions = [];
    // convert RSA public key from ASN.1
    cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);
    return cert;
};
/**
 * Converts an ASN.1 extensions object (with extension sequences as its
 * values) into an array of extension objects with types and values.
 *
 * Supported extensions:
 *
 * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
 * KeyUsage ::= BIT STRING {
 *   digitalSignature        (0),
 *   nonRepudiation          (1),
 *   keyEncipherment         (2),
 *   dataEncipherment        (3),
 *   keyAgreement            (4),
 *   keyCertSign             (5),
 *   cRLSign                 (6),
 *   encipherOnly            (7),
 *   decipherOnly            (8)
 * }
 *
 * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
 * BasicConstraints ::= SEQUENCE {
 *   cA                      BOOLEAN DEFAULT FALSE,
 *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL
 * }
 *
 * subjectAltName EXTENSION ::= {
 *   SYNTAX GeneralNames
 *   IDENTIFIED BY id-ce-subjectAltName
 * }
 *
 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
 *
 * GeneralName ::= CHOICE {
 *   otherName      [0] INSTANCE OF OTHER-NAME,
 *   rfc822Name     [1] IA5String,
 *   dNSName        [2] IA5String,
 *   x400Address    [3] ORAddress,
 *   directoryName  [4] Name,
 *   ediPartyName   [5] EDIPartyName,
 *   uniformResourceIdentifier [6] IA5String,
 *   IPAddress      [7] OCTET STRING,
 *   registeredID   [8] OBJECT IDENTIFIER
 * }
 *
 * OTHER-NAME ::= TYPE-IDENTIFIER
 *
 * EDIPartyName ::= SEQUENCE {
 *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,
 *   partyName    [1] DirectoryString {ub-name}
 * }
 *
 * @param exts the extensions ASN.1 with extension sequences to parse.
 *
 * @return the array.
 */ pki.certificateExtensionsFromAsn1 = function(exts) {
    var rval = [];
    for(var i = 0; i < exts.value.length; ++i){
        // get extension sequence
        var extseq = exts.value[i];
        for(var ei = 0; ei < extseq.value.length; ++ei)rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));
    }
    return rval;
};
/**
 * Parses a single certificate extension from ASN.1.
 *
 * @param ext the extension in ASN.1 format.
 *
 * @return the parsed extension as an object.
 */ pki.certificateExtensionFromAsn1 = function(ext) {
    // an extension has:
    // [0] extnID      OBJECT IDENTIFIER
    // [1] critical    BOOLEAN DEFAULT FALSE
    // [2] extnValue   OCTET STRING
    var e = {};
    e.id = asn1.derToOid(ext.value[0].value);
    e.critical = false;
    if (ext.value[1].type === asn1.Type.BOOLEAN) {
        e.critical = ext.value[1].value.charCodeAt(0) !== 0x00;
        e.value = ext.value[2].value;
    } else e.value = ext.value[1].value;
    // if the oid is known, get its name
    if (e.id in oids) {
        e.name = oids[e.id];
        // handle key usage
        if (e.name === "keyUsage") {
            // get value as BIT STRING
            var ev = asn1.fromDer(e.value);
            var b2 = 0x00;
            var b3 = 0x00;
            if (ev.value.length > 1) {
                // skip first byte, just indicates unused bits which
                // will be padded with 0s anyway
                // get bytes with flag bits
                b2 = ev.value.charCodeAt(1);
                b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
            }
            // set flags
            e.digitalSignature = (b2 & 0x80) === 0x80;
            e.nonRepudiation = (b2 & 0x40) === 0x40;
            e.keyEncipherment = (b2 & 0x20) === 0x20;
            e.dataEncipherment = (b2 & 0x10) === 0x10;
            e.keyAgreement = (b2 & 0x08) === 0x08;
            e.keyCertSign = (b2 & 0x04) === 0x04;
            e.cRLSign = (b2 & 0x02) === 0x02;
            e.encipherOnly = (b2 & 0x01) === 0x01;
            e.decipherOnly = (b3 & 0x80) === 0x80;
        } else if (e.name === "basicConstraints") {
            // handle basic constraints
            // get value as SEQUENCE
            var ev = asn1.fromDer(e.value);
            // get cA BOOLEAN flag (defaults to false)
            if (ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) e.cA = ev.value[0].value.charCodeAt(0) !== 0x00;
            else e.cA = false;
            // get path length constraint
            var value = null;
            if (ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) value = ev.value[0].value;
            else if (ev.value.length > 1) value = ev.value[1].value;
            if (value !== null) e.pathLenConstraint = asn1.derToInteger(value);
        } else if (e.name === "extKeyUsage") {
            // handle extKeyUsage
            // value is a SEQUENCE of OIDs
            var ev = asn1.fromDer(e.value);
            for(var vi = 0; vi < ev.value.length; ++vi){
                var oid = asn1.derToOid(ev.value[vi].value);
                if (oid in oids) e[oids[oid]] = true;
                else e[oid] = true;
            }
        } else if (e.name === "nsCertType") {
            // handle nsCertType
            // get value as BIT STRING
            var ev = asn1.fromDer(e.value);
            var b2 = 0x00;
            if (ev.value.length > 1) // skip first byte, just indicates unused bits which
            // will be padded with 0s anyway
            // get bytes with flag bits
            b2 = ev.value.charCodeAt(1);
            // set flags
            e.client = (b2 & 0x80) === 0x80;
            e.server = (b2 & 0x40) === 0x40;
            e.email = (b2 & 0x20) === 0x20;
            e.objsign = (b2 & 0x10) === 0x10;
            e.reserved = (b2 & 0x08) === 0x08;
            e.sslCA = (b2 & 0x04) === 0x04;
            e.emailCA = (b2 & 0x02) === 0x02;
            e.objCA = (b2 & 0x01) === 0x01;
        } else if (e.name === "subjectAltName" || e.name === "issuerAltName") {
            // handle subjectAltName/issuerAltName
            e.altNames = [];
            // ev is a SYNTAX SEQUENCE
            var gn;
            var ev = asn1.fromDer(e.value);
            for(var n = 0; n < ev.value.length; ++n){
                // get GeneralName
                gn = ev.value[n];
                var altName = {
                    type: gn.type,
                    value: gn.value
                };
                e.altNames.push(altName);
                // Note: Support for types 1,2,6,7,8
                switch(gn.type){
                    // rfc822Name
                    case 1:
                    // dNSName
                    case 2:
                    // uniformResourceIdentifier (URI)
                    case 6:
                        break;
                    // IPAddress
                    case 7:
                        // convert to IPv4/IPv6 string representation
                        altName.ip = forge.util.bytesToIP(gn.value);
                        break;
                    // registeredID
                    case 8:
                        altName.oid = asn1.derToOid(gn.value);
                        break;
                    default:
                }
            }
        } else if (e.name === "subjectKeyIdentifier") {
            // value is an OCTETSTRING w/the hash of the key-type specific
            // public key structure (eg: RSAPublicKey)
            var ev = asn1.fromDer(e.value);
            e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);
        }
    }
    return e;
};
/**
 * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the CertificationRequestInfo part of the
 * ASN.1 object needs to be scanned before the csr object is created.
 *
 * @param obj the asn1 representation of a PKCS#10 certification request (CSR).
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certification request (CSR).
 */ pki.certificationRequestFromAsn1 = function(obj, computeHash) {
    // validate certification request and capture data
    var capture = {};
    var errors = [];
    if (!asn1.validate(obj, certificationRequestValidator, capture, errors)) {
        var error = new Error("Cannot read PKCS#10 certificate request. ASN.1 object is not a PKCS#10 CertificationRequest.");
        error.errors = errors;
        throw error;
    }
    // get oid
    var oid = asn1.derToOid(capture.publicKeyOid);
    if (oid !== pki.oids.rsaEncryption) throw new Error("Cannot read public key. OID is not RSA.");
    // create certification request
    var csr = pki.createCertificationRequest();
    csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;
    csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);
    csr.signatureParameters = _readSignatureParameters(csr.signatureOid, capture.csrSignatureParams, true);
    csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);
    csr.siginfo.parameters = _readSignatureParameters(csr.siginfo.algorithmOid, capture.csrSignatureParams, false);
    csr.signature = capture.csrSignature;
    // keep CertificationRequestInfo to preserve signature when exporting
    csr.certificationRequestInfo = capture.certificationRequestInfo;
    if (computeHash) {
        // check signature OID for supported signature types
        csr.md = null;
        if (csr.signatureOid in oids) {
            var oid = oids[csr.signatureOid];
            switch(oid){
                case "sha1WithRSAEncryption":
                    csr.md = forge.md.sha1.create();
                    break;
                case "md5WithRSAEncryption":
                    csr.md = forge.md.md5.create();
                    break;
                case "sha256WithRSAEncryption":
                    csr.md = forge.md.sha256.create();
                    break;
                case "sha384WithRSAEncryption":
                    csr.md = forge.md.sha384.create();
                    break;
                case "sha512WithRSAEncryption":
                    csr.md = forge.md.sha512.create();
                    break;
                case "RSASSA-PSS":
                    csr.md = forge.md.sha256.create();
                    break;
            }
        }
        if (csr.md === null) {
            var error = new Error("Could not compute certification request digest. Unknown signature OID.");
            error.signatureOid = csr.signatureOid;
            throw error;
        }
        // produce DER formatted CertificationRequestInfo and digest it
        var bytes = asn1.toDer(csr.certificationRequestInfo);
        csr.md.update(bytes.getBytes());
    }
    // handle subject, build subject message digest
    var smd = forge.md.sha1.create();
    csr.subject.getField = function(sn) {
        return _getAttribute(csr.subject, sn);
    };
    csr.subject.addField = function(attr) {
        _fillMissingFields([
            attr
        ]);
        csr.subject.attributes.push(attr);
    };
    csr.subject.attributes = pki.RDNAttributesAsArray(capture.certificationRequestInfoSubject, smd);
    csr.subject.hash = smd.digest().toHex();
    // convert RSA public key from ASN.1
    csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);
    // convert attributes from ASN.1
    csr.getAttribute = function(sn) {
        return _getAttribute(csr, sn);
    };
    csr.addAttribute = function(attr) {
        _fillMissingFields([
            attr
        ]);
        csr.attributes.push(attr);
    };
    csr.attributes = pki.CRIAttributesAsArray(capture.certificationRequestInfoAttributes || []);
    return csr;
};
/**
 * Creates an empty certification request (a CSR or certificate signing
 * request). Once created, its public key and attributes can be set and then
 * it can be signed.
 *
 * @return the empty certification request.
 */ pki.createCertificationRequest = function() {
    var csr = {};
    csr.version = 0x00;
    csr.signatureOid = null;
    csr.signature = null;
    csr.siginfo = {};
    csr.siginfo.algorithmOid = null;
    csr.subject = {};
    csr.subject.getField = function(sn) {
        return _getAttribute(csr.subject, sn);
    };
    csr.subject.addField = function(attr) {
        _fillMissingFields([
            attr
        ]);
        csr.subject.attributes.push(attr);
    };
    csr.subject.attributes = [];
    csr.subject.hash = null;
    csr.publicKey = null;
    csr.attributes = [];
    csr.getAttribute = function(sn) {
        return _getAttribute(csr, sn);
    };
    csr.addAttribute = function(attr) {
        _fillMissingFields([
            attr
        ]);
        csr.attributes.push(attr);
    };
    csr.md = null;
    /**
   * Sets the subject of this certification request.
   *
   * @param attrs the array of subject attributes to use.
   */ csr.setSubject = function(attrs) {
        // set new attributes
        _fillMissingFields(attrs);
        csr.subject.attributes = attrs;
        csr.subject.hash = null;
    };
    /**
   * Sets the attributes of this certification request.
   *
   * @param attrs the array of attributes to use.
   */ csr.setAttributes = function(attrs) {
        // set new attributes
        _fillMissingFields(attrs);
        csr.attributes = attrs;
    };
    /**
   * Signs this certification request using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */ csr.sign = function(key, md) {
        // TODO: get signature OID from private key
        csr.md = md || forge.md.sha1.create();
        var algorithmOid = oids[csr.md.algorithm + "WithRSAEncryption"];
        if (!algorithmOid) {
            var error = new Error("Could not compute certification request digest. Unknown message digest algorithm OID.");
            error.algorithm = csr.md.algorithm;
            throw error;
        }
        csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;
        // get CertificationRequestInfo, convert to DER
        csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);
        var bytes = asn1.toDer(csr.certificationRequestInfo);
        // digest and sign
        csr.md.update(bytes.getBytes());
        csr.signature = key.sign(csr.md);
    };
    /**
   * Attempts verify the signature on the passed certification request using
   * its public key.
   *
   * A CSR that has been exported to a file in PEM format can be verified using
   * OpenSSL using this command:
   *
   * openssl req -in <the-csr-pem-file> -verify -noout -text
   *
   * @return true if verified, false if not.
   */ csr.verify = function() {
        var rval = false;
        var md = csr.md;
        if (md === null) {
            // check signature OID for supported signature types
            if (csr.signatureOid in oids) {
                // TODO: create DRY `OID to md` function
                var oid = oids[csr.signatureOid];
                switch(oid){
                    case "sha1WithRSAEncryption":
                        md = forge.md.sha1.create();
                        break;
                    case "md5WithRSAEncryption":
                        md = forge.md.md5.create();
                        break;
                    case "sha256WithRSAEncryption":
                        md = forge.md.sha256.create();
                        break;
                    case "sha384WithRSAEncryption":
                        md = forge.md.sha384.create();
                        break;
                    case "sha512WithRSAEncryption":
                        md = forge.md.sha512.create();
                        break;
                    case "RSASSA-PSS":
                        md = forge.md.sha256.create();
                        break;
                }
            }
            if (md === null) {
                var error = new Error("Could not compute certification request digest. Unknown signature OID.");
                error.signatureOid = csr.signatureOid;
                throw error;
            }
            // produce DER formatted CertificationRequestInfo and digest it
            var cri = csr.certificationRequestInfo || pki.getCertificationRequestInfo(csr);
            var bytes = asn1.toDer(cri);
            md.update(bytes.getBytes());
        }
        if (md !== null) {
            var scheme;
            switch(csr.signatureOid){
                case oids.sha1WithRSAEncryption:
                    break;
                case oids["RSASSA-PSS"]:
                    var hash, mgf;
                    /* initialize mgf */ hash = oids[csr.signatureParameters.mgf.hash.algorithmOid];
                    if (hash === undefined || forge.md[hash] === undefined) {
                        var error = new Error("Unsupported MGF hash function.");
                        error.oid = csr.signatureParameters.mgf.hash.algorithmOid;
                        error.name = hash;
                        throw error;
                    }
                    mgf = oids[csr.signatureParameters.mgf.algorithmOid];
                    if (mgf === undefined || forge.mgf[mgf] === undefined) {
                        var error = new Error("Unsupported MGF function.");
                        error.oid = csr.signatureParameters.mgf.algorithmOid;
                        error.name = mgf;
                        throw error;
                    }
                    mgf = forge.mgf[mgf].create(forge.md[hash].create());
                    /* initialize hash function */ hash = oids[csr.signatureParameters.hash.algorithmOid];
                    if (hash === undefined || forge.md[hash] === undefined) {
                        var error = new Error("Unsupported RSASSA-PSS hash function.");
                        error.oid = csr.signatureParameters.hash.algorithmOid;
                        error.name = hash;
                        throw error;
                    }
                    scheme = forge.pss.create(forge.md[hash].create(), mgf, csr.signatureParameters.saltLength);
                    break;
            }
            // verify signature on csr using its public key
            rval = csr.publicKey.verify(md.digest().getBytes(), csr.signature, scheme);
        }
        return rval;
    };
    return csr;
};
/**
 * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.
 *
 * @param obj the subject or issuer (distinguished name).
 *
 * @return the ASN.1 RDNSequence.
 */ function _dnToAsn1(obj) {
    // create an empty RDNSequence
    var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    // iterate over attributes
    var attr, set;
    var attrs = obj.attributes;
    for(var i = 0; i < attrs.length; ++i){
        attr = attrs[i];
        var value = attr.value;
        // reuse tag class for attribute value if available
        var valueTagClass = asn1.Type.PRINTABLESTRING;
        if ("valueTagClass" in attr) {
            valueTagClass = attr.valueTagClass;
            if (valueTagClass === asn1.Type.UTF8) value = forge.util.encodeUtf8(value);
        // FIXME: handle more encodings
        }
        // create a RelativeDistinguishedName set
        // each value in the set is an AttributeTypeAndValue first
        // containing the type (an OID) and second the value
        set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // AttributeType
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.type).getBytes()),
                // AttributeValue
                asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)
            ])
        ]);
        rval.value.push(set);
    }
    return rval;
}
/**
 * Gets all printable attributes (typically of an issuer or subject) in a
 * simplified JSON format for display.
 *
 * @param attrs the attributes.
 *
 * @return the JSON for display.
 */ function _getAttributesAsJson(attrs) {
    var rval = {};
    for(var i = 0; i < attrs.length; ++i){
        var attr = attrs[i];
        if (attr.shortName && (attr.valueTagClass === asn1.Type.UTF8 || attr.valueTagClass === asn1.Type.PRINTABLESTRING || attr.valueTagClass === asn1.Type.IA5STRING)) {
            var value = attr.value;
            if (attr.valueTagClass === asn1.Type.UTF8) value = forge.util.encodeUtf8(attr.value);
            if (!(attr.shortName in rval)) rval[attr.shortName] = value;
            else if (forge.util.isArray(rval[attr.shortName])) rval[attr.shortName].push(value);
            else rval[attr.shortName] = [
                rval[attr.shortName],
                value
            ];
        }
    }
    return rval;
}
/**
 * Fills in missing fields in attributes.
 *
 * @param attrs the attributes to fill missing fields in.
 */ function _fillMissingFields(attrs) {
    var attr;
    for(var i = 0; i < attrs.length; ++i){
        attr = attrs[i];
        // populate missing name
        if (typeof attr.name === "undefined") {
            if (attr.type && attr.type in pki.oids) attr.name = pki.oids[attr.type];
            else if (attr.shortName && attr.shortName in _shortNames) attr.name = pki.oids[_shortNames[attr.shortName]];
        }
        // populate missing type (OID)
        if (typeof attr.type === "undefined") {
            if (attr.name && attr.name in pki.oids) attr.type = pki.oids[attr.name];
            else {
                var error = new Error("Attribute type not specified.");
                error.attribute = attr;
                throw error;
            }
        }
        // populate missing shortname
        if (typeof attr.shortName === "undefined") {
            if (attr.name && attr.name in _shortNames) attr.shortName = _shortNames[attr.name];
        }
        // convert extensions to value
        if (attr.type === oids.extensionRequest) {
            attr.valueConstructed = true;
            attr.valueTagClass = asn1.Type.SEQUENCE;
            if (!attr.value && attr.extensions) {
                attr.value = [];
                for(var ei = 0; ei < attr.extensions.length; ++ei)attr.value.push(pki.certificateExtensionToAsn1(_fillMissingExtensionFields(attr.extensions[ei])));
            }
        }
        if (typeof attr.value === "undefined") {
            var error = new Error("Attribute value not specified.");
            error.attribute = attr;
            throw error;
        }
    }
}
/**
 * Fills in missing fields in certificate extensions.
 *
 * @param e the extension.
 * @param [options] the options to use.
 *          [cert] the certificate the extensions are for.
 *
 * @return the extension.
 */ function _fillMissingExtensionFields(e, options) {
    options = options || {};
    // populate missing name
    if (typeof e.name === "undefined") {
        if (e.id && e.id in pki.oids) e.name = pki.oids[e.id];
    }
    // populate missing id
    if (typeof e.id === "undefined") {
        if (e.name && e.name in pki.oids) e.id = pki.oids[e.name];
        else {
            var error = new Error("Extension ID not specified.");
            error.extension = e;
            throw error;
        }
    }
    if (typeof e.value !== "undefined") return e;
    // handle missing value:
    // value is a BIT STRING
    if (e.name === "keyUsage") {
        // build flags
        var unused = 0;
        var b2 = 0x00;
        var b3 = 0x00;
        if (e.digitalSignature) {
            b2 |= 0x80;
            unused = 7;
        }
        if (e.nonRepudiation) {
            b2 |= 0x40;
            unused = 6;
        }
        if (e.keyEncipherment) {
            b2 |= 0x20;
            unused = 5;
        }
        if (e.dataEncipherment) {
            b2 |= 0x10;
            unused = 4;
        }
        if (e.keyAgreement) {
            b2 |= 0x08;
            unused = 3;
        }
        if (e.keyCertSign) {
            b2 |= 0x04;
            unused = 2;
        }
        if (e.cRLSign) {
            b2 |= 0x02;
            unused = 1;
        }
        if (e.encipherOnly) {
            b2 |= 0x01;
            unused = 0;
        }
        if (e.decipherOnly) {
            b3 |= 0x80;
            unused = 7;
        }
        // create bit string
        var value = String.fromCharCode(unused);
        if (b3 !== 0) value += String.fromCharCode(b2) + String.fromCharCode(b3);
        else if (b2 !== 0) value += String.fromCharCode(b2);
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
    } else if (e.name === "basicConstraints") {
        // basicConstraints is a SEQUENCE
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        // cA BOOLEAN flag defaults to false
        if (e.cA) e.value.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false, String.fromCharCode(0xFF)));
        if ("pathLenConstraint" in e) e.value.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(e.pathLenConstraint).getBytes()));
    } else if (e.name === "extKeyUsage") {
        // extKeyUsage is a SEQUENCE of OIDs
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        var seq = e.value.value;
        for(var key in e){
            if (e[key] !== true) continue;
            // key is name in OID map
            if (key in oids) seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids[key]).getBytes()));
            else if (key.indexOf(".") !== -1) // assume key is an OID
            seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(key).getBytes()));
        }
    } else if (e.name === "nsCertType") {
        // nsCertType is a BIT STRING
        // build flags
        var unused = 0;
        var b2 = 0x00;
        if (e.client) {
            b2 |= 0x80;
            unused = 7;
        }
        if (e.server) {
            b2 |= 0x40;
            unused = 6;
        }
        if (e.email) {
            b2 |= 0x20;
            unused = 5;
        }
        if (e.objsign) {
            b2 |= 0x10;
            unused = 4;
        }
        if (e.reserved) {
            b2 |= 0x08;
            unused = 3;
        }
        if (e.sslCA) {
            b2 |= 0x04;
            unused = 2;
        }
        if (e.emailCA) {
            b2 |= 0x02;
            unused = 1;
        }
        if (e.objCA) {
            b2 |= 0x01;
            unused = 0;
        }
        // create bit string
        var value = String.fromCharCode(unused);
        if (b2 !== 0) value += String.fromCharCode(b2);
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
    } else if (e.name === "subjectAltName" || e.name === "issuerAltName") {
        // SYNTAX SEQUENCE
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        var altName;
        for(var n = 0; n < e.altNames.length; ++n){
            altName = e.altNames[n];
            var value = altName.value;
            // handle IP
            if (altName.type === 7 && altName.ip) {
                value = forge.util.bytesFromIP(altName.ip);
                if (value === null) {
                    var error = new Error('Extension "ip" value is not a valid IPv4 or IPv6 address.');
                    error.extension = e;
                    throw error;
                }
            } else if (altName.type === 8) {
                // handle OID
                if (altName.oid) value = asn1.oidToDer(asn1.oidToDer(altName.oid));
                else // deprecated ... convert value to OID
                value = asn1.oidToDer(value);
            }
            e.value.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, altName.type, false, value));
        }
    } else if (e.name === "nsComment" && options.cert) {
        // sanity check value is ASCII (req'd) and not too big
        if (!/^[\x00-\x7F]*$/.test(e.comment) || e.comment.length < 1 || e.comment.length > 128) throw new Error('Invalid "nsComment" content.');
        // IA5STRING opaque comment
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.IA5STRING, false, e.comment);
    } else if (e.name === "subjectKeyIdentifier" && options.cert) {
        var ski = options.cert.generateSubjectKeyIdentifier();
        e.subjectKeyIdentifier = ski.toHex();
        // OCTETSTRING w/digest
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ski.getBytes());
    } else if (e.name === "authorityKeyIdentifier" && options.cert) {
        // SYNTAX SEQUENCE
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        var seq = e.value.value;
        if (e.keyIdentifier) {
            var keyIdentifier = e.keyIdentifier === true ? options.cert.generateSubjectKeyIdentifier().getBytes() : e.keyIdentifier;
            seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, false, keyIdentifier));
        }
        if (e.authorityCertIssuer) {
            var authorityCertIssuer = [
                asn1.create(asn1.Class.CONTEXT_SPECIFIC, 4, true, [
                    _dnToAsn1(e.authorityCertIssuer === true ? options.cert.issuer : e.authorityCertIssuer)
                ])
            ];
            seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, authorityCertIssuer));
        }
        if (e.serialNumber) {
            var serialNumber = forge.util.hexToBytes(e.serialNumber === true ? options.cert.serialNumber : e.serialNumber);
            seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber));
        }
    } else if (e.name === "cRLDistributionPoints") {
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        var seq = e.value.value;
        // Create sub SEQUENCE of DistributionPointName
        var subSeq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        // Create fullName CHOICE
        var fullNameGeneralNames = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);
        var altName;
        for(var n = 0; n < e.altNames.length; ++n){
            altName = e.altNames[n];
            var value = altName.value;
            // handle IP
            if (altName.type === 7 && altName.ip) {
                value = forge.util.bytesFromIP(altName.ip);
                if (value === null) {
                    var error = new Error('Extension "ip" value is not a valid IPv4 or IPv6 address.');
                    error.extension = e;
                    throw error;
                }
            } else if (altName.type === 8) {
                // handle OID
                if (altName.oid) value = asn1.oidToDer(asn1.oidToDer(altName.oid));
                else // deprecated ... convert value to OID
                value = asn1.oidToDer(value);
            }
            fullNameGeneralNames.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, altName.type, false, value));
        }
        // Add to the parent SEQUENCE
        subSeq.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
            fullNameGeneralNames
        ]));
        seq.push(subSeq);
    }
    // ensure value has been defined by now
    if (typeof e.value === "undefined") {
        var error = new Error("Extension value not specified.");
        error.extension = e;
        throw error;
    }
    return e;
}
/**
 * Convert signature parameters object to ASN.1
 *
 * @param {String} oid Signature algorithm OID
 * @param params The signature parametrs object
 * @return ASN.1 object representing signature parameters
 */ function _signatureParametersToAsn1(oid, params) {
    switch(oid){
        case oids["RSASSA-PSS"]:
            var parts = [];
            if (params.hash.algorithmOid !== undefined) parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.hash.algorithmOid).getBytes()),
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
                ])
            ]));
            if (params.mgf.algorithmOid !== undefined) parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.mgf.algorithmOid).getBytes()),
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()),
                        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
                    ])
                ])
            ]));
            if (params.saltLength !== undefined) parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(params.saltLength).getBytes())
            ]));
            return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);
        default:
            return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "");
    }
}
/**
 * Converts a certification request's attributes to an ASN.1 set of
 * CRIAttributes.
 *
 * @param csr certification request.
 *
 * @return the ASN.1 set of CRIAttributes.
 */ function _CRIAttributesToAsn1(csr) {
    // create an empty context-specific container
    var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);
    // no attributes, return empty container
    if (csr.attributes.length === 0) return rval;
    // each attribute has a sequence with a type and a set of values
    var attrs = csr.attributes;
    for(var i = 0; i < attrs.length; ++i){
        var attr = attrs[i];
        var value = attr.value;
        // reuse tag class for attribute value if available
        var valueTagClass = asn1.Type.UTF8;
        if ("valueTagClass" in attr) valueTagClass = attr.valueTagClass;
        if (valueTagClass === asn1.Type.UTF8) value = forge.util.encodeUtf8(value);
        var valueConstructed = false;
        if ("valueConstructed" in attr) valueConstructed = attr.valueConstructed;
        // FIXME: handle more encodings
        // create a RelativeDistinguishedName set
        // each value in the set is an AttributeTypeAndValue first
        // containing the type (an OID) and second the value
        var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // AttributeType
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.type).getBytes()),
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
                // AttributeValue
                asn1.create(asn1.Class.UNIVERSAL, valueTagClass, valueConstructed, value)
            ])
        ]);
        rval.value.push(seq);
    }
    return rval;
}
var jan_1_1950 = new Date("1950-01-01T00:00:00Z");
var jan_1_2050 = new Date("2050-01-01T00:00:00Z");
/**
 * Converts a Date object to ASN.1
 * Handles the different format before and after 1st January 2050
 *
 * @param date date object.
 *
 * @return the ASN.1 object representing the date.
 */ function _dateToAsn1(date) {
    if (date >= jan_1_1950 && date < jan_1_2050) return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false, asn1.dateToUtcTime(date));
    else return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false, asn1.dateToGeneralizedTime(date));
}
/**
 * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.
 *
 * @param cert the certificate.
 *
 * @return the asn1 TBSCertificate.
 */ pki.getTBSCertificate = function(cert) {
    // TBSCertificate
    var notBefore = _dateToAsn1(cert.validity.notBefore);
    var notAfter = _dateToAsn1(cert.validity.notAfter);
    var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
            // integer
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(cert.version).getBytes())
        ]),
        // serialNumber
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(cert.serialNumber)),
        // signature
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // algorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()),
            // parameters
            _signatureParametersToAsn1(cert.siginfo.algorithmOid, cert.siginfo.parameters)
        ]),
        // issuer
        _dnToAsn1(cert.issuer),
        // validity
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            notBefore,
            notAfter
        ]),
        // subject
        _dnToAsn1(cert.subject),
        // SubjectPublicKeyInfo
        pki.publicKeyToAsn1(cert.publicKey)
    ]);
    if (cert.issuer.uniqueId) // issuerUniqueID (optional)
    tbs.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, // TODO: support arbitrary bit length ids
        String.fromCharCode(0x00) + cert.issuer.uniqueId)
    ]));
    if (cert.subject.uniqueId) // subjectUniqueID (optional)
    tbs.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, // TODO: support arbitrary bit length ids
        String.fromCharCode(0x00) + cert.subject.uniqueId)
    ]));
    if (cert.extensions.length > 0) // extensions (optional)
    tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));
    return tbs;
};
/**
 * Gets the ASN.1 CertificationRequestInfo part of a
 * PKCS#10 CertificationRequest.
 *
 * @param csr the certification request.
 *
 * @return the asn1 CertificationRequestInfo.
 */ pki.getCertificationRequestInfo = function(csr) {
    // CertificationRequestInfo
    var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(csr.version).getBytes()),
        // subject
        _dnToAsn1(csr.subject),
        // SubjectPublicKeyInfo
        pki.publicKeyToAsn1(csr.publicKey),
        // attributes
        _CRIAttributesToAsn1(csr)
    ]);
    return cri;
};
/**
 * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.
 *
 * @param dn the DistinguishedName.
 *
 * @return the asn1 representation of a DistinguishedName.
 */ pki.distinguishedNameToAsn1 = function(dn) {
    return _dnToAsn1(dn);
};
/**
 * Converts an X.509v3 RSA certificate to an ASN.1 object.
 *
 * @param cert the certificate.
 *
 * @return the asn1 representation of an X.509v3 RSA certificate.
 */ pki.certificateToAsn1 = function(cert) {
    // prefer cached TBSCertificate over generating one
    var tbsCertificate = cert.tbsCertificate || pki.getTBSCertificate(cert);
    // Certificate
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // TBSCertificate
        tbsCertificate,
        // AlgorithmIdentifier (signature algorithm)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // algorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(cert.signatureOid).getBytes()),
            // parameters
            _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)
        ]),
        // SignatureValue
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, String.fromCharCode(0x00) + cert.signature)
    ]);
};
/**
 * Converts X.509v3 certificate extensions to ASN.1.
 *
 * @param exts the extensions to convert.
 *
 * @return the extensions in ASN.1 format.
 */ pki.certificateExtensionsToAsn1 = function(exts) {
    // create top-level extension container
    var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []);
    // create extension sequence (stores a sequence for each extension)
    var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    rval.value.push(seq);
    for(var i = 0; i < exts.length; ++i)seq.value.push(pki.certificateExtensionToAsn1(exts[i]));
    return rval;
};
/**
 * Converts a single certificate extension to ASN.1.
 *
 * @param ext the extension to convert.
 *
 * @return the extension in ASN.1 format.
 */ pki.certificateExtensionToAsn1 = function(ext) {
    // create a sequence for each extension
    var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    // extnID (OID)
    extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(ext.id).getBytes()));
    // critical defaults to false
    if (ext.critical) // critical BOOLEAN DEFAULT FALSE
    extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false, String.fromCharCode(0xFF)));
    var value = ext.value;
    if (typeof ext.value !== "string") // value is asn.1
    value = asn1.toDer(value).getBytes();
    // extnValue (OCTET STRING)
    extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, value));
    return extseq;
};
/**
 * Converts a PKCS#10 certification request to an ASN.1 object.
 *
 * @param csr the certification request.
 *
 * @return the asn1 representation of a certification request.
 */ pki.certificationRequestToAsn1 = function(csr) {
    // prefer cached CertificationRequestInfo over generating one
    var cri = csr.certificationRequestInfo || pki.getCertificationRequestInfo(csr);
    // Certificate
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // CertificationRequestInfo
        cri,
        // AlgorithmIdentifier (signature algorithm)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // algorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(csr.signatureOid).getBytes()),
            // parameters
            _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)
        ]),
        // signature
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, String.fromCharCode(0x00) + csr.signature)
    ]);
};
/**
 * Creates a CA store.
 *
 * @param certs an optional array of certificate objects or PEM-formatted
 *          certificate strings to add to the CA store.
 *
 * @return the CA store.
 */ pki.createCaStore = function(certs) {
    // create CA store
    var caStore = {
        // stored certificates
        certs: {}
    };
    /**
   * Gets the certificate that issued the passed certificate or its
   * 'parent'.
   *
   * @param cert the certificate to get the parent for.
   *
   * @return the parent certificate or null if none was found.
   */ caStore.getIssuer = function(cert) {
        var rval = getBySubject(cert.issuer);
        // see if there are multiple matches
        /*if(forge.util.isArray(rval)) {
      // TODO: resolve multiple matches by checking
      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.
      // FIXME: or alternatively do authority key mapping
      // if possible (X.509v1 certs can't work?)
      throw new Error('Resolving multiple issuer matches not implemented yet.');
    }*/ return rval;
    };
    /**
   * Adds a trusted certificate to the store.
   *
   * @param cert the certificate to add as a trusted certificate (either a
   *          pki.certificate object or a PEM-formatted certificate).
   */ caStore.addCertificate = function(cert) {
        // convert from pem if necessary
        if (typeof cert === "string") cert = forge.pki.certificateFromPem(cert);
        ensureSubjectHasHash(cert.subject);
        if (!caStore.hasCertificate(cert)) {
            if (cert.subject.hash in caStore.certs) {
                // subject hash already exists, append to array
                var tmp = caStore.certs[cert.subject.hash];
                if (!forge.util.isArray(tmp)) tmp = [
                    tmp
                ];
                tmp.push(cert);
                caStore.certs[cert.subject.hash] = tmp;
            } else caStore.certs[cert.subject.hash] = cert;
        }
    };
    /**
   * Checks to see if the given certificate is in the store.
   *
   * @param cert the certificate to check (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return true if the certificate is in the store, false if not.
   */ caStore.hasCertificate = function(cert) {
        // convert from pem if necessary
        if (typeof cert === "string") cert = forge.pki.certificateFromPem(cert);
        var match = getBySubject(cert.subject);
        if (!match) return false;
        if (!forge.util.isArray(match)) match = [
            match
        ];
        // compare DER-encoding of certificates
        var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();
        for(var i = 0; i < match.length; ++i){
            var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();
            if (der1 === der2) return true;
        }
        return false;
    };
    /**
   * Lists all of the certificates kept in the store.
   *
   * @return an array of all of the pki.certificate objects in the store.
   */ caStore.listAllCertificates = function() {
        var certList = [];
        for(var hash in caStore.certs)if (caStore.certs.hasOwnProperty(hash)) {
            var value = caStore.certs[hash];
            if (!forge.util.isArray(value)) certList.push(value);
            else for(var i = 0; i < value.length; ++i)certList.push(value[i]);
        }
        return certList;
    };
    /**
   * Removes a certificate from the store.
   *
   * @param cert the certificate to remove (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return the certificate that was removed or null if the certificate
   *           wasn't in store.
   */ caStore.removeCertificate = function(cert) {
        var result;
        // convert from pem if necessary
        if (typeof cert === "string") cert = forge.pki.certificateFromPem(cert);
        ensureSubjectHasHash(cert.subject);
        if (!caStore.hasCertificate(cert)) return null;
        var match = getBySubject(cert.subject);
        if (!forge.util.isArray(match)) {
            result = caStore.certs[cert.subject.hash];
            delete caStore.certs[cert.subject.hash];
            return result;
        }
        // compare DER-encoding of certificates
        var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();
        for(var i = 0; i < match.length; ++i){
            var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();
            if (der1 === der2) {
                result = match[i];
                match.splice(i, 1);
            }
        }
        if (match.length === 0) delete caStore.certs[cert.subject.hash];
        return result;
    };
    function getBySubject(subject) {
        ensureSubjectHasHash(subject);
        return caStore.certs[subject.hash] || null;
    }
    function ensureSubjectHasHash(subject) {
        // produce subject hash if it doesn't exist
        if (!subject.hash) {
            var md = forge.md.sha1.create();
            subject.attributes = pki.RDNAttributesAsArray(_dnToAsn1(subject), md);
            subject.hash = md.digest().toHex();
        }
    }
    // auto-add passed in certs
    if (certs) // parse PEM-formatted certificates as necessary
    for(var i1 = 0; i1 < certs.length; ++i1){
        var cert1 = certs[i1];
        caStore.addCertificate(cert1);
    }
    return caStore;
};
/**
 * Certificate verification errors, based on TLS.
 */ pki.certificateError = {
    bad_certificate: "forge.pki.BadCertificate",
    unsupported_certificate: "forge.pki.UnsupportedCertificate",
    certificate_revoked: "forge.pki.CertificateRevoked",
    certificate_expired: "forge.pki.CertificateExpired",
    certificate_unknown: "forge.pki.CertificateUnknown",
    unknown_ca: "forge.pki.UnknownCertificateAuthority"
};
/**
 * Verifies a certificate chain against the given Certificate Authority store
 * with an optional custom verify callback.
 *
 * @param caStore a certificate store to verify against.
 * @param chain the certificate chain to verify, with the root or highest
 *          authority at the end (an array of certificates).
 * @param options a callback to be called for every certificate in the chain or
 *                  an object with:
 *                  verify a callback to be called for every certificate in the
 *                    chain
 *                  validityCheckDate the date against which the certificate
 *                    validity period should be checked. Pass null to not check
 *                    the validity period. By default, the current date is used.
 *
 * The verify callback has the following signature:
 *
 * verified - Set to true if certificate was verified, otherwise the
 *   pki.certificateError for why the certificate failed.
 * depth - The current index in the chain, where 0 is the end point's cert.
 * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous
 *   end point.
 *
 * The function returns true on success and on failure either the appropriate
 * pki.certificateError or an object with 'error' set to the appropriate
 * pki.certificateError and 'message' set to a custom error message.
 *
 * @return true if successful, error thrown if not.
 */ pki.verifyCertificateChain = function(caStore, chain, options) {
    /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate
    Section 6: Certification Path Validation
    See inline parentheticals related to this particular implementation.

    The primary goal of path validation is to verify the binding between
    a subject distinguished name or a subject alternative name and subject
    public key, as represented in the end entity certificate, based on the
    public key of the trust anchor. This requires obtaining a sequence of
    certificates that support that binding. That sequence should be provided
    in the passed 'chain'. The trust anchor should be in the given CA
    store. The 'end entity' certificate is the certificate provided by the
    end point (typically a server) and is the first in the chain.

    To meet this goal, the path validation process verifies, among other
    things, that a prospective certification path (a sequence of n
    certificates or a 'chain') satisfies the following conditions:

    (a) for all x in {1, ..., n-1}, the subject of certificate x is
          the issuer of certificate x+1;

    (b) certificate 1 is issued by the trust anchor;

    (c) certificate n is the certificate to be validated; and

    (d) for all x in {1, ..., n}, the certificate was valid at the
          time in question.

    Note that here 'n' is index 0 in the chain and 1 is the last certificate
    in the chain and it must be signed by a certificate in the connection's
    CA store.

    The path validation process also determines the set of certificate
    policies that are valid for this path, based on the certificate policies
    extension, policy mapping extension, policy constraints extension, and
    inhibit any-policy extension.

    Note: Policy mapping extension not supported (Not Required).

    Note: If the certificate has an unsupported critical extension, then it
    must be rejected.

    Note: A certificate is self-issued if the DNs that appear in the subject
    and issuer fields are identical and are not empty.

    The path validation algorithm assumes the following seven inputs are
    provided to the path processing logic. What this specific implementation
    will use is provided parenthetically:

    (a) a prospective certification path of length n (the 'chain')
    (b) the current date/time: ('now').
    (c) user-initial-policy-set: A set of certificate policy identifiers
          naming the policies that are acceptable to the certificate user.
          The user-initial-policy-set contains the special value any-policy
          if the user is not concerned about certificate policy
          (Not implemented. Any policy is accepted).
    (d) trust anchor information, describing a CA that serves as a trust
          anchor for the certification path. The trust anchor information
          includes:

      (1)  the trusted issuer name,
      (2)  the trusted public key algorithm,
      (3)  the trusted public key, and
      (4)  optionally, the trusted public key parameters associated
             with the public key.

      (Trust anchors are provided via certificates in the CA store).

      The trust anchor information may be provided to the path processing
      procedure in the form of a self-signed certificate. The trusted anchor
      information is trusted because it was delivered to the path processing
      procedure by some trustworthy out-of-band procedure. If the trusted
      public key algorithm requires parameters, then the parameters are
      provided along with the trusted public key (No parameters used in this
      implementation).

    (e) initial-policy-mapping-inhibit, which indicates if policy mapping is
          allowed in the certification path.
          (Not implemented, no policy checking)

    (f) initial-explicit-policy, which indicates if the path must be valid
          for at least one of the certificate policies in the user-initial-
          policy-set.
          (Not implemented, no policy checking)

    (g) initial-any-policy-inhibit, which indicates whether the
          anyPolicy OID should be processed if it is included in a
          certificate.
          (Not implemented, so any policy is valid provided that it is
          not marked as critical) */ /* Basic Path Processing:

    For each certificate in the 'chain', the following is checked:

    1. The certificate validity period includes the current time.
    2. The certificate was signed by its parent (where the parent is either
       the next in the chain or from the CA store). Allow processing to
       continue to the next step if no parent is found but the certificate is
       in the CA store.
    3. TODO: The certificate has not been revoked.
    4. The certificate issuer name matches the parent's subject name.
    5. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is within one of the permitted subtrees of X.500 distinguished names
       and that each of the alternative names in the subjectAltName extension
       (critical or non-critical) is within one of the permitted subtrees for
       that name type.
    6. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is not within one of the excluded subtrees for X.500 distinguished
       names and none of the subjectAltName extension names are excluded for
       that name type.
    7. The other steps in the algorithm for basic path processing involve
       handling the policy extension which is not presently supported in this
       implementation. Instead, if a critical policy extension is found, the
       certificate is rejected as not supported.
    8. If the certificate is not the first or if its the only certificate in
       the chain (having no parent from the CA store or is self-signed) and it
       has a critical key usage extension, verify that the keyCertSign bit is
       set. If the key usage extension exists, verify that the basic
       constraints extension exists. If the basic constraints extension exists,
       verify that the cA flag is set. If pathLenConstraint is set, ensure that
       the number of certificates that precede in the chain (come earlier
       in the chain as implemented below), excluding the very first in the
       chain (typically the end-entity one), isn't greater than the
       pathLenConstraint. This constraint limits the number of intermediate
       CAs that may appear below a CA before only end-entity certificates
       may be issued. */ // if a verify callback is passed as the third parameter, package it within
    // the options object. This is to support a legacy function signature that
    // expected the verify callback as the third parameter.
    if (typeof options === "function") options = {
        verify: options
    };
    options = options || {};
    // copy cert chain references to another array to protect against changes
    // in verify callback
    chain = chain.slice(0);
    var certs = chain.slice(0);
    var validityCheckDate = options.validityCheckDate;
    // if no validityCheckDate is specified, default to the current date. Make
    // sure to maintain the value null because it indicates that the validity
    // period should not be checked.
    if (typeof validityCheckDate === "undefined") validityCheckDate = new Date();
    // verify each cert in the chain using its parent, where the parent
    // is either the next in the chain or from the CA store
    var first = true;
    var error = null;
    var depth = 0;
    do {
        var cert = chain.shift();
        var parent = null;
        var selfSigned = false;
        if (validityCheckDate) // 1. check valid time
        {
            if (validityCheckDate < cert.validity.notBefore || validityCheckDate > cert.validity.notAfter) error = {
                message: "Certificate is not valid yet or has expired.",
                error: pki.certificateError.certificate_expired,
                notBefore: cert.validity.notBefore,
                notAfter: cert.validity.notAfter,
                // TODO: we might want to reconsider renaming 'now' to
                // 'validityCheckDate' should this API be changed in the future.
                now: validityCheckDate
            };
        }
        // 2. verify with parent from chain or CA store
        if (error === null) {
            parent = chain[0] || caStore.getIssuer(cert);
            if (parent === null) // check for self-signed cert
            {
                if (cert.isIssuer(cert)) {
                    selfSigned = true;
                    parent = cert;
                }
            }
            if (parent) {
                // FIXME: current CA store implementation might have multiple
                // certificates where the issuer can't be determined from the
                // certificate (happens rarely with, eg: old certificates) so normalize
                // by always putting parents into an array
                // TODO: there's may be an extreme degenerate case currently uncovered
                // where an old intermediate certificate seems to have a matching parent
                // but none of the parents actually verify ... but the intermediate
                // is in the CA and it should pass this check; needs investigation
                var parents = parent;
                if (!forge.util.isArray(parents)) parents = [
                    parents
                ];
                // try to verify with each possible parent (typically only one)
                var verified = false;
                while(!verified && parents.length > 0){
                    parent = parents.shift();
                    try {
                        verified = parent.verify(cert);
                    } catch (ex) {
                    // failure to verify, don't care why, try next one
                    }
                }
                if (!verified) error = {
                    message: "Certificate signature is invalid.",
                    error: pki.certificateError.bad_certificate
                };
            }
            if (error === null && (!parent || selfSigned) && !caStore.hasCertificate(cert)) // no parent issuer and certificate itself is not trusted
            error = {
                message: "Certificate is not trusted.",
                error: pki.certificateError.unknown_ca
            };
        }
        // TODO: 3. check revoked
        // 4. check for matching issuer/subject
        if (error === null && parent && !cert.isIssuer(parent)) // parent is not issuer
        error = {
            message: "Certificate issuer is invalid.",
            error: pki.certificateError.bad_certificate
        };
        // 5. TODO: check names with permitted names tree
        // 6. TODO: check names against excluded names tree
        // 7. check for unsupported critical extensions
        if (error === null) {
            // supported extensions
            var se = {
                keyUsage: true,
                basicConstraints: true
            };
            for(var i = 0; error === null && i < cert.extensions.length; ++i){
                var ext = cert.extensions[i];
                if (ext.critical && !(ext.name in se)) error = {
                    message: "Certificate has an unsupported critical extension.",
                    error: pki.certificateError.unsupported_certificate
                };
            }
        }
        // 8. check for CA if cert is not first or is the only certificate
        // remaining in chain with no parent or is self-signed
        if (error === null && (!first || chain.length === 0 && (!parent || selfSigned))) {
            // first check keyUsage extension and then basic constraints
            var bcExt = cert.getExtension("basicConstraints");
            var keyUsageExt = cert.getExtension("keyUsage");
            if (keyUsageExt !== null) // keyCertSign must be true and there must be a basic
            // constraints extension
            {
                if (!keyUsageExt.keyCertSign || bcExt === null) // bad certificate
                error = {
                    message: "Certificate keyUsage or basicConstraints conflict or indicate that the certificate is not a CA. If the certificate is the only one in the chain or isn't the first then the certificate must be a valid CA.",
                    error: pki.certificateError.bad_certificate
                };
            }
            // basic constraints cA flag must be set
            if (error === null && bcExt !== null && !bcExt.cA) // bad certificate
            error = {
                message: "Certificate basicConstraints indicates the certificate is not a CA.",
                error: pki.certificateError.bad_certificate
            };
            // if error is not null and keyUsage is available, then we know it
            // has keyCertSign and there is a basic constraints extension too,
            // which means we can check pathLenConstraint (if it exists)
            if (error === null && keyUsageExt !== null && "pathLenConstraint" in bcExt) {
                // pathLen is the maximum # of intermediate CA certs that can be
                // found between the current certificate and the end-entity (depth 0)
                // certificate; this number does not include the end-entity (depth 0,
                // last in the chain) even if it happens to be a CA certificate itself
                var pathLen = depth - 1;
                if (pathLen > bcExt.pathLenConstraint) // pathLenConstraint violated, bad certificate
                error = {
                    message: "Certificate basicConstraints pathLenConstraint violated.",
                    error: pki.certificateError.bad_certificate
                };
            }
        }
        // call application callback
        var vfd = error === null ? true : error.error;
        var ret = options.verify ? options.verify(vfd, depth, certs) : vfd;
        if (ret === true) // clear any set error
        error = null;
        else {
            // if passed basic tests, set default message and alert
            if (vfd === true) error = {
                message: "The application rejected the certificate.",
                error: pki.certificateError.bad_certificate
            };
            // check for custom error info
            if (ret || ret === 0) {
                // set custom message and error
                if (typeof ret === "object" && !forge.util.isArray(ret)) {
                    if (ret.message) error.message = ret.message;
                    if (ret.error) error.error = ret.error;
                } else if (typeof ret === "string") // set custom error
                error.error = ret;
            }
            // throw error
            throw error;
        }
        // no longer first cert in chain
        first = false;
        ++depth;
    }while (chain.length > 0);
    return true;
};

},{"./forge":"9OMxz","./aes":"9Bdb3","./asn1":"G8i2L","./des":"iMVWl","./md":"lMdro","./mgf":"awtNU","./oids":"4xWOI","./pem":"hMZVk","./pss":"jHzK1","./rsa":"5XDhn","./util":"9XcEH"}],"awtNU":[function(require,module,exports) {
/**
 * Node.js module for Forge mask generation functions.
 *
 * @author Stefan Siegl
 *
 * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>
 */ var forge = require("./forge");
require("./mgf1");
module.exports = forge.mgf = forge.mgf || {};
forge.mgf.mgf1 = forge.mgf1;

},{"./forge":"9OMxz","./mgf1":"f2Goo"}],"f2Goo":[function(require,module,exports) {
/**
 * Javascript implementation of mask generation function MGF1.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */ var forge = require("./forge");
require("./util");
forge.mgf = forge.mgf || {};
var mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};
/**
 * Creates a MGF1 mask generation function object.
 *
 * @param md the message digest API to use (eg: forge.md.sha1.create()).
 *
 * @return a mask generation function object.
 */ mgf1.create = function(md) {
    var mgf = {
        /**
     * Generate mask of specified length.
     *
     * @param {String} seed The seed for mask generation.
     * @param maskLen Number of bytes to generate.
     * @return {String} The generated mask.
     */ generate: function(seed, maskLen) {
            /* 2. Let T be the empty octet string. */ var t = new forge.util.ByteBuffer();
            /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */ var len = Math.ceil(maskLen / md.digestLength);
            for(var i = 0; i < len; i++){
                /* a. Convert counter to an octet string C of length 4 octets */ var c = new forge.util.ByteBuffer();
                c.putInt32(i);
                /* b. Concatenate the hash of the seed mgfSeed and C to the octet
         * string T: */ md.start();
                md.update(seed + c.getBytes());
                t.putBuffer(md.digest());
            }
            /* Output the leading maskLen octets of T as the octet string mask. */ t.truncate(t.length() - maskLen);
            return t.getBytes();
        }
    };
    return mgf;
};

},{"./forge":"9OMxz","./util":"9XcEH"}],"jHzK1":[function(require,module,exports) {
/**
 * Javascript implementation of PKCS#1 PSS signature padding.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 */ var forge = require("./forge");
require("./random");
require("./util");
// shortcut for PSS API
var pss = module.exports = forge.pss = forge.pss || {};
/**
 * Creates a PSS signature scheme object.
 *
 * There are several ways to provide a salt for encoding:
 *
 * 1. Specify the saltLength only and the built-in PRNG will generate it.
 * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that
 *   will be used.
 * 3. Specify the salt itself as a forge.util.ByteBuffer.
 *
 * @param options the options to use:
 *          md the message digest object to use, a forge md instance.
 *          mgf the mask generation function to use, a forge mgf instance.
 *          [saltLength] the length of the salt in octets.
 *          [prng] the pseudo-random number generator to use to produce a salt.
 *          [salt] the salt to use when encoding.
 *
 * @return a signature scheme object.
 */ pss.create = function(options) {
    // backwards compatibility w/legacy args: hash, mgf, sLen
    if (arguments.length === 3) options = {
        md: arguments[0],
        mgf: arguments[1],
        saltLength: arguments[2]
    };
    var hash = options.md;
    var mgf = options.mgf;
    var hLen = hash.digestLength;
    var salt_ = options.salt || null;
    if (typeof salt_ === "string") // assume binary-encoded string
    salt_ = forge.util.createBuffer(salt_);
    var sLen;
    if ("saltLength" in options) sLen = options.saltLength;
    else if (salt_ !== null) sLen = salt_.length();
    else throw new Error("Salt length not specified or specific salt not given.");
    if (salt_ !== null && salt_.length() !== sLen) throw new Error("Given salt length does not match length of given salt.");
    var prng = options.prng || forge.random;
    var pssobj = {};
    /**
   * Encodes a PSS signature.
   *
   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.
   *
   * @param md the message digest object with the hash to sign.
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return the encoded message as a binary-encoded string of length
   *           ceil((modBits - 1) / 8).
   */ pssobj.encode = function(md, modBits) {
        var i;
        var emBits = modBits - 1;
        var emLen = Math.ceil(emBits / 8);
        /* 2. Let mHash = Hash(M), an octet string of length hLen. */ var mHash = md.digest().getBytes();
        /* 3. If emLen < hLen + sLen + 2, output "encoding error" and stop. */ if (emLen < hLen + sLen + 2) throw new Error("Message is too long to encrypt.");
        /* 4. Generate a random octet string salt of length sLen; if sLen = 0,
     *    then salt is the empty string. */ var salt;
        if (salt_ === null) salt = prng.getBytesSync(sLen);
        else salt = salt_.bytes();
        /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */ var m_ = new forge.util.ByteBuffer();
        m_.fillWithByte(0, 8);
        m_.putBytes(mHash);
        m_.putBytes(salt);
        /* 6. Let H = Hash(M'), an octet string of length hLen. */ hash.start();
        hash.update(m_.getBytes());
        var h = hash.digest().getBytes();
        /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2
     *    zero octets.  The length of PS may be 0. */ var ps = new forge.util.ByteBuffer();
        ps.fillWithByte(0, emLen - sLen - hLen - 2);
        /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length
     *    emLen - hLen - 1. */ ps.putByte(0x01);
        ps.putBytes(salt);
        var db = ps.getBytes();
        /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */ var maskLen = emLen - hLen - 1;
        var dbMask = mgf.generate(h, maskLen);
        /* 10. Let maskedDB = DB \xor dbMask. */ var maskedDB = "";
        for(i = 0; i < maskLen; i++)maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));
        /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in
     *     maskedDB to zero. */ var mask = 0xFF00 >> 8 * emLen - emBits & 0xFF;
        maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) + maskedDB.substr(1);
        /* 12. Let EM = maskedDB || H || 0xbc.
     * 13. Output EM. */ return maskedDB + h + String.fromCharCode(0xbc);
    };
    /**
   * Verifies a PSS signature.
   *
   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.
   *
   * @param mHash the message digest hash, as a binary-encoded string, to
   *         compare against the signature.
   * @param em the encoded message, as a binary-encoded string
   *          (RSA decryption result).
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return true if the signature was verified, false if not.
   */ pssobj.verify = function(mHash, em, modBits) {
        var i;
        var emBits = modBits - 1;
        var emLen = Math.ceil(emBits / 8);
        /* c. Convert the message representative m to an encoded message EM
     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits
     *    is the length in bits of the RSA modulus n */ em = em.substr(-emLen);
        /* 3. If emLen < hLen + sLen + 2, output "inconsistent" and stop. */ if (emLen < hLen + sLen + 2) throw new Error("Inconsistent parameters to PSS signature verification.");
        /* 4. If the rightmost octet of EM does not have hexadecimal value
     *    0xbc, output "inconsistent" and stop. */ if (em.charCodeAt(emLen - 1) !== 0xbc) throw new Error("Encoded message does not end in 0xBC.");
        /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and
     *    let H be the next hLen octets. */ var maskLen = emLen - hLen - 1;
        var maskedDB = em.substr(0, maskLen);
        var h = em.substr(maskLen, hLen);
        /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in
     *    maskedDB are not all equal to zero, output "inconsistent" and stop. */ var mask = 0xFF00 >> 8 * emLen - emBits & 0xFF;
        if ((maskedDB.charCodeAt(0) & mask) !== 0) throw new Error("Bits beyond keysize not zero as expected.");
        /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */ var dbMask = mgf.generate(h, maskLen);
        /* 8. Let DB = maskedDB \xor dbMask. */ var db = "";
        for(i = 0; i < maskLen; i++)db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));
        /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet
     * in DB to zero. */ db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);
        /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero
     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost
     * position is "position 1") does not have hexadecimal value 0x01,
     * output "inconsistent" and stop. */ var checkLen = emLen - hLen - sLen - 2;
        for(i = 0; i < checkLen; i++){
            if (db.charCodeAt(i) !== 0x00) throw new Error("Leftmost octets not zero as expected");
        }
        if (db.charCodeAt(checkLen) !== 0x01) throw new Error("Inconsistent PSS signature, 0x01 marker not found");
        /* 11. Let salt be the last sLen octets of DB. */ var salt = db.substr(-sLen);
        /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */ var m_ = new forge.util.ByteBuffer();
        m_.fillWithByte(0, 8);
        m_.putBytes(mHash);
        m_.putBytes(salt);
        /* 13. Let H' = Hash(M'), an octet string of length hLen. */ hash.start();
        hash.update(m_.getBytes());
        var h_ = hash.digest().getBytes();
        /* 14. If H = H', output "consistent." Otherwise, output "inconsistent." */ return h === h_;
    };
    return pssobj;
};

},{"./forge":"9OMxz","./random":"fOMS2","./util":"9XcEH"}],"5nb4L":[function(require,module,exports) {
// @ts-nocheck
"use strict";
require("node-forge/lib/x509");
const forge = require("node-forge/lib/forge");
const pki = forge.pki;
/**
 * Gets a self-signed X.509 certificate for the key.
 *
 * The output Uint8Array contains the PKCS #7 message in DER.
 *
 * TODO: move to libp2p-crypto package
 *
 * @param {KeyInfo} key - The id and name of the key
 * @param {RsaPrivateKey} privateKey - The naked key
 * @returns {Uint8Array}
 */ const certificateForKey = (key, privateKey)=>{
    const publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e);
    const cert = pki.createCertificate();
    cert.publicKey = publicKey;
    cert.serialNumber = "01";
    cert.validity.notBefore = new Date();
    cert.validity.notAfter = new Date();
    cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10);
    const attrs = [
        {
            name: "organizationName",
            value: "ipfs"
        },
        {
            shortName: "OU",
            value: "keystore"
        },
        {
            name: "commonName",
            value: key.id
        }
    ];
    cert.setSubject(attrs);
    cert.setIssuer(attrs);
    cert.setExtensions([
        {
            name: "basicConstraints",
            cA: true
        },
        {
            name: "keyUsage",
            keyCertSign: true,
            digitalSignature: true,
            nonRepudiation: true,
            keyEncipherment: true,
            dataEncipherment: true
        },
        {
            name: "extKeyUsage",
            serverAuth: true,
            clientAuth: true,
            codeSigning: true,
            emailProtection: true,
            timeStamping: true
        },
        {
            name: "nsCertType",
            client: true,
            server: true,
            email: true,
            objsign: true,
            sslCA: true,
            emailCA: true,
            objCA: true
        }
    ]);
    // self-sign certificate
    cert.sign(privateKey);
    return cert;
};
/**
 * Finds the first item in a collection that is matched in the
 * `asyncCompare` function.
 *
 * `asyncCompare` is an async function that must
 * resolve to either `true` or `false`.
 *
 * @param {Array} array
 * @param {function(*)} asyncCompare - An async function that returns a boolean
 */ async function findAsync(array, asyncCompare) {
    const promises = array.map(asyncCompare);
    const results = await Promise.all(promises);
    const index = results.findIndex((result)=>result);
    return array[index];
}
module.exports = {
    certificateForKey,
    findAsync
};

},{"node-forge/lib/x509":"046UQ","node-forge/lib/forge":"9OMxz"}],"joaAY":[function(require,module,exports) {
// @ts-nocheck
"use strict";
const mergeOptions = require("merge-options");
const { pipe  } = require("it-pipe");
const { tap  } = require("streaming-iterables");
const oldPeerLRU = require("./old-peers");
const { METRICS: defaultOptions  } = require("../constants");
const Stats = require("./stats");
const initialCounters = [
    "dataReceived",
    "dataSent"
];
const directionToEvent = {
    in: "dataReceived",
    out: "dataSent"
};
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('libp2p-interfaces/src/transport/types').MultiaddrConnection} MultiaddrConnection
 */ /**
 * @typedef MetricsProperties
 * @property {import('../connection-manager')} connectionManager
 *
 * @typedef MetricsOptions
 * @property {number} [computeThrottleMaxQueueSize = defaultOptions.computeThrottleMaxQueueSize]
 * @property {number} [computeThrottleTimeout = defaultOptions.computeThrottleTimeout]
 * @property {number[]} [movingAverageIntervals = defaultOptions.movingAverageIntervals]
 * @property {number} [maxOldPeersRetention = defaultOptions.maxOldPeersRetention]
 */ class Metrics {
    /**
   * @class
   * @param {MetricsProperties & MetricsOptions} options
   */ constructor(options){
        this._options = mergeOptions(defaultOptions, options);
        this._globalStats = new Stats(initialCounters, this._options);
        this._peerStats = new Map();
        this._protocolStats = new Map();
        this._oldPeers = oldPeerLRU(this._options.maxOldPeersRetention);
        this._running = false;
        this._onMessage = this._onMessage.bind(this);
        this._connectionManager = options.connectionManager;
        this._connectionManager.on("peer:disconnect", (connection)=>{
            this.onPeerDisconnected(connection.remotePeer);
        });
    }
    /**
   * Must be called for stats to saved. Any data pushed for tracking
   * will be ignored.
   */ start() {
        this._running = true;
    }
    /**
   * Stops all averages timers and prevents new data from being tracked.
   * Once `stop` is called, `start` must be called to resume stats tracking.
   */ stop() {
        this._running = false;
        this._globalStats.stop();
        for (const stats of this._peerStats.values())stats.stop();
        for (const stats1 of this._protocolStats.values())stats1.stop();
    }
    /**
   * Gets the global `Stats` object
   *
   * @returns {Stats}
   */ get global() {
        return this._globalStats;
    }
    /**
   * Returns a list of `PeerId` strings currently being tracked
   *
   * @returns {string[]}
   */ get peers() {
        return Array.from(this._peerStats.keys());
    }
    /**
   * Returns the `Stats` object for the given `PeerId` whether it
   * is a live peer, or in the disconnected peer LRU cache.
   *
   * @param {PeerId} peerId
   * @returns {Stats}
   */ forPeer(peerId) {
        const idString = peerId.toB58String();
        return this._peerStats.get(idString) || this._oldPeers.get(idString);
    }
    /**
   * Returns a list of all protocol strings currently being tracked.
   *
   * @returns {string[]}
   */ get protocols() {
        return Array.from(this._protocolStats.keys());
    }
    /**
   * Returns the `Stats` object for the given `protocol`.
   *
   * @param {string} protocol
   * @returns {Stats}
   */ forProtocol(protocol) {
        return this._protocolStats.get(protocol);
    }
    /**
   * Should be called when all connections to a given peer
   * have closed. The `Stats` collection for the peer will
   * be stopped and moved to an LRU for temporary retention.
   *
   * @param {PeerId} peerId
   */ onPeerDisconnected(peerId) {
        const idString = peerId.toB58String();
        const peerStats = this._peerStats.get(idString);
        if (peerStats) {
            peerStats.stop();
            this._peerStats.delete(idString);
            this._oldPeers.set(idString, peerStats);
        }
    }
    /**
   * Takes the metadata for a message and tracks it in the
   * appropriate categories. If the protocol is present, protocol
   * stats will also be tracked.
   *
   * @private
   * @param {object} params
   * @param {PeerId} params.remotePeer - Remote peer
   * @param {string} [params.protocol] - Protocol string the stream is running
   * @param {string} params.direction - One of ['in','out']
   * @param {number} params.dataLength - Size of the message
   * @returns {void}
   */ _onMessage({ remotePeer , protocol , direction , dataLength  }) {
        if (!this._running) return;
        const key = directionToEvent[direction];
        let peerStats = this.forPeer(remotePeer);
        if (!peerStats) {
            peerStats = new Stats(initialCounters, this._options);
            this._peerStats.set(remotePeer.toB58String(), peerStats);
        }
        // Peer and global stats
        peerStats.push(key, dataLength);
        this._globalStats.push(key, dataLength);
        // Protocol specific stats
        if (protocol) {
            let protocolStats = this.forProtocol(protocol);
            if (!protocolStats) {
                protocolStats = new Stats(initialCounters, this._options);
                this._protocolStats.set(protocol, protocolStats);
            }
            protocolStats.push(key, dataLength);
        }
    }
    /**
   * Replaces the `PeerId` string with the given `peerId`.
   * If stats are already being tracked for the given `peerId`, the
   * placeholder stats will be merged with the existing stats.
   *
   * @param {PeerId} placeholder - A peerId string
   * @param {PeerId} peerId
   * @returns {void}
   */ updatePlaceholder(placeholder, peerId) {
        if (!this._running) return;
        const placeholderStats = this.forPeer(placeholder);
        const peerIdString = peerId.toB58String();
        const existingStats = this.forPeer(peerId);
        let mergedStats = placeholderStats;
        // If we already have stats, merge the two
        if (existingStats) {
            // If existing, merge
            mergedStats = Metrics.mergeStats(existingStats, mergedStats);
            // Attempt to delete from the old peers list just in case it was tracked there
            this._oldPeers.delete(peerIdString);
        }
        this._peerStats.delete(placeholder.toB58String());
        this._peerStats.set(peerIdString, mergedStats);
        mergedStats.start();
    }
    /**
   * Tracks data running through a given Duplex Iterable `stream`. If
   * the `peerId` is not provided, a placeholder string will be created and
   * returned. This allows lazy tracking of a peer when the peer is not yet known.
   * When the `PeerId` is known, `Metrics.updatePlaceholder` should be called
   * with the placeholder string returned from here, and the known `PeerId`.
   *
   * @param {Object} options
   * @param {MultiaddrConnection} options.stream - A duplex iterable stream
   * @param {PeerId} [options.remotePeer] - The id of the remote peer that's connected
   * @param {string} [options.protocol] - The protocol the stream is running
   * @returns {MultiaddrConnection} The peerId string or placeholder string
   */ trackStream({ stream , remotePeer , protocol  }) {
        const metrics = this;
        const _source = stream.source;
        stream.source = tap((chunk)=>metrics._onMessage({
                remotePeer,
                protocol,
                direction: "in",
                dataLength: chunk.length
            }))(_source);
        const _sink = stream.sink;
        stream.sink = (source)=>{
            return pipe(source, tap((chunk)=>metrics._onMessage({
                    remotePeer,
                    protocol,
                    direction: "out",
                    dataLength: chunk.length
                })), _sink);
        };
        return stream;
    }
    /**
   * Merges `other` into `target`. `target` will be modified
   * and returned.
   *
   * @param {Stats} target
   * @param {Stats} other
   * @returns {Stats}
   */ static mergeStats(target, other) {
        target.stop();
        other.stop();
        // Merge queues
        target._queue = [
            ...target._queue,
            ...other._queue
        ];
        // TODO: how to merge moving averages?
        return target;
    }
}
module.exports = Metrics;

},{"merge-options":"4XlQf","it-pipe":"jkWle","streaming-iterables":"lbfQq","./old-peers":"2Chkl","../constants":"8KiNk","./stats":"8b3Jd"}],"2Chkl":[function(require,module,exports) {
"use strict";
const LRU = require("hashlru");
/**
 * Creates and returns a Least Recently Used Cache
 *
 * @param {number} maxSize
 * @returns {any}
 */ module.exports = (maxSize)=>{
    // @ts-ignore LRU expression is not callable
    const patched = LRU(maxSize);
    patched.delete = patched.remove;
    return patched;
};

},{"hashlru":"8I0yq"}],"8b3Jd":[function(require,module,exports) {
// @ts-nocheck
"use strict";
const { EventEmitter  } = require("events");
const { BigNumber: Big  } = require("bignumber.js");
const MovingAverage = require("@vascosantos/moving-average");
const retimer = require("retimer");
/**
 * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage
 */ class Stats extends EventEmitter {
    /**
   * A queue based manager for stat processing
   *
   * @class
   * @param {string[]} initialCounters
   * @param {any} options
   */ constructor(initialCounters, options){
        super();
        this._options = options;
        this._queue = [];
        /** @type {{ dataReceived: Big, dataSent: Big }} */ this._stats = {
            dataReceived: Big(0),
            dataSent: Big(0)
        };
        this._frequencyLastTime = Date.now();
        this._frequencyAccumulators = {};
        /** @type {{ dataReceived: IMovingAverage[], dataSent: IMovingAverage[] }} */ this._movingAverages = {};
        this._update = this._update.bind(this);
        const intervals = this._options.movingAverageIntervals;
        for(let i = 0; i < initialCounters.length; i++){
            const key = initialCounters[i];
            this._stats[key] = Big(0);
            this._movingAverages[key] = {};
            for(let k = 0; k < intervals.length; k++){
                const interval = intervals[k];
                const ma = this._movingAverages[key][interval] = MovingAverage(interval);
                ma.push(this._frequencyLastTime, 0);
            }
        }
    }
    /**
   * Initializes the internal timer if there are items in the queue. This
   * should only need to be called if `Stats.stop` was previously called, as
   * `Stats.push` will also start the processing.
   *
   * @returns {void}
   */ start() {
        if (this._queue.length) this._resetComputeTimeout();
    }
    /**
   * Stops processing and computing of stats by clearing the internal
   * timer.
   *
   * @returns {void}
   */ stop() {
        if (this._timeout) {
            this._timeout.clear();
            this._timeout = null;
        }
    }
    /**
   * Returns a clone of the current stats.
   */ get snapshot() {
        return Object.assign({}, this._stats);
    }
    /**
   * Returns a clone of the internal movingAverages
   */ get movingAverages() {
        return Object.assign({}, this._movingAverages);
    }
    /**
   * Returns a plain JSON object of the stats
   *
   * @returns {*}
   */ toJSON() {
        const snapshot = this.snapshot;
        const movingAverages = this.movingAverages;
        const data = {
            dataReceived: snapshot.dataReceived.toString(),
            dataSent: snapshot.dataSent.toString(),
            movingAverages: {}
        };
        const counters = Object.keys(movingAverages);
        for (const key of counters){
            data.movingAverages[key] = {};
            for (const interval of Object.keys(movingAverages[key]))data.movingAverages[key][interval] = movingAverages[key][interval].movingAverage();
        }
        return data;
    }
    /**
   * Pushes the given operation data to the queue, along with the
   * current Timestamp, then resets the update timer.
   *
   * @param {string} counter
   * @param {number} inc
   * @returns {void}
   */ push(counter, inc) {
        this._queue.push([
            counter,
            inc,
            Date.now()
        ]);
        this._resetComputeTimeout();
    }
    /**
   * Resets the timeout for triggering updates.
   *
   * @private
   * @returns {void}
   */ _resetComputeTimeout() {
        this._timeout = retimer(this._update, this._nextTimeout());
    }
    /**
   * Calculates and returns the timeout for the next update based on
   * the urgency of the update.
   *
   * @private
   * @returns {number}
   */ _nextTimeout() {
        // calculate the need for an update, depending on the queue length
        const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;
        const timeout = Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);
        return timeout;
    }
    /**
   * If there are items in the queue, they will will be processed and
   * the frequency for all items will be updated based on the Timestamp
   * of the last item in the queue. The `update` event will also be emitted
   * with the latest stats.
   *
   * If there are no items in the queue, no action is taken.
   *
   * @private
   * @returns {void}
   */ _update() {
        this._timeout = null;
        if (this._queue.length) {
            let last;
            for (last of this._queue)this._applyOp(last);
            this._queue = [];
            this._updateFrequency(last[2]) // contains timestamp of last op
            ;
            this.emit("update", this._stats);
        }
    }
    /**
   * For each key in the stats, the frequency and moving averages
   * will be updated via Stats._updateFrequencyFor based on the time
   * difference between calls to this method.
   *
   * @private
   * @param {Timestamp} latestTime
   * @returns {void}
   */ _updateFrequency(latestTime) {
        const timeDiff = latestTime - this._frequencyLastTime;
        Object.keys(this._stats).forEach((key)=>{
            this._updateFrequencyFor(key, timeDiff, latestTime);
        });
        this._frequencyLastTime = latestTime;
    }
    /**
   * Updates the `movingAverages` for the given `key` and also
   * resets the `frequencyAccumulator` for the `key`.
   *
   * @private
   * @param {string} key
   * @param {number} timeDiffMS - Time in milliseconds
   * @param {Timestamp} latestTime - Time in ticks
   * @returns {void}
   */ _updateFrequencyFor(key, timeDiffMS, latestTime) {
        const count = this._frequencyAccumulators[key] || 0;
        this._frequencyAccumulators[key] = 0;
        // if `timeDiff` is zero, `hz` becomes Infinity, so we fallback to 1ms
        const safeTimeDiff = timeDiffMS || 1;
        const hz = count / safeTimeDiff * 1000;
        let movingAverages = this._movingAverages[key];
        if (!movingAverages) movingAverages = this._movingAverages[key] = {};
        const intervals = this._options.movingAverageIntervals;
        for(let i = 0; i < intervals.length; i++){
            const movingAverageInterval = intervals[i];
            let movingAverage = movingAverages[movingAverageInterval];
            if (!movingAverage) movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);
            movingAverage.push(latestTime, hz);
        }
    }
    /**
   * For the given operation, `op`, the stats and `frequencyAccumulator`
   * will be updated or initialized if they don't already exist.
   *
   * @private
   * @param {{string, number}[]} op
   * @throws {InvalidNumber}
   * @returns {void}
   */ _applyOp(op) {
        const key = op[0];
        const inc = op[1];
        if (typeof inc !== "number") throw new Error(`invalid increment number: ${inc}`);
        let n;
        if (!Object.prototype.hasOwnProperty.call(this._stats, key)) n = this._stats[key] = Big(0);
        else n = this._stats[key];
        this._stats[key] = n.plus(inc);
        if (!this._frequencyAccumulators[key]) this._frequencyAccumulators[key] = 0;
        this._frequencyAccumulators[key] += inc;
    }
}
module.exports = Stats;

},{"events":"1VQLm","bignumber.js":"57qkX","@vascosantos/moving-average":"4wxPO","retimer":"c9ebJ"}],"57qkX":[function(require,module,exports) {
(function(globalObject) {
    "use strict";
    /*
 *      bignumber.js v9.0.2
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */ var BigNumber1, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 0x1fffffffffffff, // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [
        1,
        10,
        100,
        1e3,
        1e4,
        1e5,
        1e6,
        1e7,
        1e8,
        1e9,
        1e10,
        1e11,
        1e12,
        1e13
    ], SQRT_BASE = 1e7, // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1E9; // 0 to MAX_INT32
    /*
   * Create and return a BigNumber constructor.
   */ function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber.prototype = {
            constructor: BigNumber,
            toString: null,
            valueOf: null
        }, ONE = new BigNumber(1), //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
        // The default values below must be integers within the inclusive ranges stated.
        // The values can also be changed at run-time using BigNumber.set.
        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20, // The rounding mode used when rounding to the above decimal places, and when using
        // toExponential, toFixed, toFormat and toPrecision, and round (default value).
        // UP         0 Away from zero.
        // DOWN       1 Towards zero.
        // CEIL       2 Towards +Infinity.
        // FLOOR      3 Towards -Infinity.
        // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        ROUNDING_MODE = 4, // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7, // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21, // RANGE : [MIN_EXP, MAX_EXP]
        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -10000000, // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7, // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false, // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP        0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN      1 The remainder has the same sign as the dividend.
        //             This modulo mode is commonly known as 'truncated division' and is
        //             equivalent to (a % n) in JavaScript.
        // FLOOR     3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
        // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
        //             The remainder is always positive.
        //
        // The truncated division, floored division, Euclidian division and IEEE 754 remainder
        // modes are commonly used for the modulus operation.
        // Although the other rounding modes can also be used, they may not give useful results.
        MODULO_MODE = 1, // The maximum number of significant digits of the result of the exponentiatedBy operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 0, // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            prefix: "",
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ",",
            decimalSeparator: ".",
            fractionGroupSize: 0,
            fractionGroupSeparator: "\xa0",
            suffix: ""
        }, // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
        // '-', '.', whitespace, or repeated character.
        // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
        ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        //------------------------------------------------------------------------------------------
        // CONSTRUCTOR
        /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */ function BigNumber(v, b) {
            var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
            // Enable constructor call without `new`.
            if (!(x instanceof BigNumber)) return new BigNumber(v, b);
            if (b == null) {
                if (v && v._isBigNumber === true) {
                    x.s = v.s;
                    if (!v.c || v.e > MAX_EXP) x.c = x.e = null;
                    else if (v.e < MIN_EXP) x.c = [
                        x.e = 0
                    ];
                    else {
                        x.e = v.e;
                        x.c = v.c.slice();
                    }
                    return;
                }
                if ((isNum = typeof v == "number") && v * 0 == 0) {
                    // Use `1 / n` to handle minus zero also.
                    x.s = 1 / v < 0 ? (v = -v, -1) : 1;
                    // Fast path for integers, where n < 2147483648 (2**31).
                    if (v === ~~v) {
                        for(e = 0, i = v; i >= 10; i /= 10, e++);
                        if (e > MAX_EXP) x.c = x.e = null;
                        else {
                            x.e = e;
                            x.c = [
                                v
                            ];
                        }
                        return;
                    }
                    str = String(v);
                } else {
                    if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                }
                // Decimal point?
                if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
                // Exponential form?
                if ((i = str.search(/e/i)) > 0) {
                    // Determine exponent.
                    if (e < 0) e = i;
                    e += +str.slice(i + 1);
                    str = str.substring(0, i);
                } else if (e < 0) // Integer.
                e = str.length;
            } else {
                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                intCheck(b, 2, ALPHABET.length, "Base");
                // Allow exponential notation to be used with base 10 argument, while
                // also rounding to DECIMAL_PLACES as with other bases.
                if (b == 10 && alphabetHasNormalDecimalDigits) {
                    x = new BigNumber(v);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }
                str = String(v);
                if (isNum = typeof v == "number") {
                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                    if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
                    x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                    if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) throw Error(tooManyDigits + v);
                } else x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                alphabet = ALPHABET.slice(0, b);
                e = i = 0;
                // Check that str is a valid base b number.
                // Don't use RegExp, so alphabet can contain special characters.
                for(len = str.length; i < len; i++)if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                    if (c == ".") // If '.' is not the first character and it has not be found before.
                    {
                        if (i > e) {
                            e = len;
                            continue;
                        }
                    } else if (!caseChanged) // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                    {
                        if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                            caseChanged = true;
                            i = -1;
                            e = 0;
                            continue;
                        }
                    }
                    return parseNumeric(x, String(v), isNum, b);
                }
                // Prevent later check for length on converted number.
                isNum = false;
                str = convertBase(str, b, 10, x.s);
                // Decimal point?
                if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
                else e = str.length;
            }
            // Determine leading zeros.
            for(i = 0; str.charCodeAt(i) === 48; i++);
            // Determine trailing zeros.
            for(len = str.length; str.charCodeAt(--len) === 48;);
            if (str = str.slice(i, ++len)) {
                len -= i;
                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) throw Error(tooManyDigits + x.s * v);
                // Overflow?
                if ((e = e - i - 1) > MAX_EXP) // Infinity.
                x.c = x.e = null;
                else if (e < MIN_EXP) // Zero.
                x.c = [
                    x.e = 0
                ];
                else {
                    x.e = e;
                    x.c = [];
                    // Transform base
                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE; // i < 1
                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));
                        for(len -= LOG_BASE; i < len;)x.c.push(+str.slice(i, i += LOG_BASE));
                        i = LOG_BASE - (str = str.slice(i)).length;
                    } else i -= len;
                    for(; i--; str += "0");
                    x.c.push(+str);
                }
            } else // Zero.
            x.c = [
                x.e = 0
            ];
        }
        // CONSTRUCTOR PROPERTIES
        BigNumber.clone = clone;
        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;
        /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */ BigNumber.config = BigNumber.set = function(obj) {
            var p, v;
            if (obj != null) {
                if (typeof obj == "object") {
                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        DECIMAL_PLACES = v;
                    }
                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                        v = obj[p];
                        intCheck(v, 0, 8, p);
                        ROUNDING_MODE = v;
                    }
                    // EXPONENTIAL_AT {number|number[]}
                    // Integer, -MAX to MAX inclusive or
                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, 0, p);
                            intCheck(v[1], 0, MAX, p);
                            TO_EXP_NEG = v[0];
                            TO_EXP_POS = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                        }
                    }
                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                    if (obj.hasOwnProperty(p = "RANGE")) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, -1, p);
                            intCheck(v[1], 1, MAX, p);
                            MIN_EXP = v[0];
                            MAX_EXP = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            if (v) MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                            else throw Error(bignumberError + p + " cannot be zero: " + v);
                        }
                    }
                    // CRYPTO {boolean} true or false.
                    // '[BigNumber Error] CRYPTO not true or false: {v}'
                    // '[BigNumber Error] crypto unavailable'
                    if (obj.hasOwnProperty(p = "CRYPTO")) {
                        v = obj[p];
                        if (v === !!v) {
                            if (v) {
                                if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) CRYPTO = v;
                                else {
                                    CRYPTO = !v;
                                    throw Error(bignumberError + "crypto unavailable");
                                }
                            } else CRYPTO = v;
                        } else throw Error(bignumberError + p + " not true or false: " + v);
                    }
                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                        v = obj[p];
                        intCheck(v, 0, 9, p);
                        MODULO_MODE = v;
                    }
                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        POW_PRECISION = v;
                    }
                    // FORMAT {object}
                    // '[BigNumber Error] FORMAT not an object: {v}'
                    if (obj.hasOwnProperty(p = "FORMAT")) {
                        v = obj[p];
                        if (typeof v == "object") FORMAT = v;
                        else throw Error(bignumberError + p + " not an object: " + v);
                    }
                    // ALPHABET {string}
                    // '[BigNumber Error] ALPHABET invalid: {v}'
                    if (obj.hasOwnProperty(p = "ALPHABET")) {
                        v = obj[p];
                        // Disallow if less than two characters,
                        // or if it contains '+', '-', '.', whitespace, or a repeated character.
                        if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                            alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                            ALPHABET = v;
                        } else throw Error(bignumberError + p + " invalid: " + v);
                    }
                } else // '[BigNumber Error] Object expected: {v}'
                throw Error(bignumberError + "Object expected: " + obj);
            }
            return {
                DECIMAL_PLACES: DECIMAL_PLACES,
                ROUNDING_MODE: ROUNDING_MODE,
                EXPONENTIAL_AT: [
                    TO_EXP_NEG,
                    TO_EXP_POS
                ],
                RANGE: [
                    MIN_EXP,
                    MAX_EXP
                ],
                CRYPTO: CRYPTO,
                MODULO_MODE: MODULO_MODE,
                POW_PRECISION: POW_PRECISION,
                FORMAT: FORMAT,
                ALPHABET: ALPHABET
            };
        };
        /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */ BigNumber.isBigNumber = function(v) {
            if (!v || v._isBigNumber !== true) return false;
            if (!BigNumber.DEBUG) return true;
            var i, n, c = v.c, e = v.e, s = v.s;
            out: if (({}).toString.call(c) == "[object Array]") {
                if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                    // If the first element is zero, the BigNumber value must be zero.
                    if (c[0] === 0) {
                        if (e === 0 && c.length === 1) return true;
                        break out;
                    }
                    // Calculate number of digits that c[0] should have, based on the exponent.
                    i = (e + 1) % LOG_BASE;
                    if (i < 1) i += LOG_BASE;
                    // Calculate number of digits of c[0].
                    //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
                    if (String(c[0]).length == i) {
                        for(i = 0; i < c.length; i++){
                            n = c[i];
                            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                        }
                        // Last element cannot be zero, unless it is the only element.
                        if (n !== 0) return true;
                    }
                }
            } else if (c === null && e === null && (s === null || s === 1 || s === -1)) return true;
            throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.maximum = BigNumber.max = function() {
            return maxOrMin(arguments, P.lt);
        };
        /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.minimum = BigNumber.min = function() {
            return maxOrMin(arguments, P.gt);
        };
        /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */ BigNumber.random = function() {
            var pow2_53 = 0x20000000000000;
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function() {
                return mathfloor(Math.random() * pow2_53);
            } : function() {
                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
            };
            return function(dp) {
                var a, b, e, k, v, i = 0, c = [], rand = new BigNumber(ONE);
                if (dp == null) dp = DECIMAL_PLACES;
                else intCheck(dp, 0, MAX);
                k = mathceil(dp / LOG_BASE);
                if (CRYPTO) {
                    // Browsers supporting crypto.getRandomValues.
                    if (crypto.getRandomValues) {
                        a = crypto.getRandomValues(new Uint32Array(k *= 2));
                        for(; i < k;){
                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);
                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9e15) {
                                b = crypto.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {
                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 2;
                            }
                        }
                        i = k / 2;
                    // Node.js supporting crypto.randomBytes.
                    } else if (crypto.randomBytes) {
                        // buffer
                        a = crypto.randomBytes(k *= 7);
                        for(; i < k;){
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                            if (v >= 9e15) crypto.randomBytes(7).copy(a, i);
                            else {
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else {
                        CRYPTO = false;
                        throw Error(bignumberError + "crypto unavailable");
                    }
                }
                // Use Math.random.
                if (!CRYPTO) for(; i < k;){
                    v = random53bitInt();
                    if (v < 9e15) c[i++] = v % 1e14;
                }
                k = c[--i];
                dp %= LOG_BASE;
                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }
                // Remove trailing elements which are zero.
                for(; c[i] === 0; c.pop(), i--);
                // Zero?
                if (i < 0) c = [
                    e = 0
                ];
                else {
                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for(e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);
                    // Count the digits of the first element of c to determine leading zeros, and...
                    for(i = 1, v = c[0]; v >= 10; v /= 10, i++);
                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }
                rand.e = e;
                rand.c = c;
                return rand;
            };
        }();
        /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.sum = function() {
            var i = 1, args = arguments, sum = new BigNumber(args[0]);
            for(; i < args.length;)sum = sum.plus(args[i++]);
            return sum;
        };
        // PRIVATE FUNCTIONS
        // Called by BigNumber and BigNumber.prototype.toString.
        convertBase = function() {
            var decimal = "0123456789";
            /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */ function toBaseOut(str, baseIn, baseOut, alphabet) {
                var j, arr = [
                    0
                ], arrL, i = 0, len = str.length;
                for(; i < len;){
                    for(arrL = arr.length; arrL--; arr[arrL] *= baseIn);
                    arr[0] += alphabet.indexOf(str.charAt(i++));
                    for(j = 0; j < arr.length; j++)if (arr[j] > baseOut - 1) {
                        if (arr[j + 1] == null) arr[j + 1] = 0;
                        arr[j + 1] += arr[j] / baseOut | 0;
                        arr[j] %= baseOut;
                    }
                }
                return arr.reverse();
            }
            // Convert a numeric string of baseIn to a numeric string of baseOut.
            // If the caller is toString, we are converting from base 10 to baseOut.
            // If the caller is BigNumber, we are converting from baseIn to base 10.
            return function(str, baseIn, baseOut, sign, callerIsToString) {
                var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
                // Non-integer.
                if (i >= 0) {
                    k = POW_PRECISION;
                    // Unlimited precision.
                    POW_PRECISION = 0;
                    str = str.replace(".", "");
                    y = new BigNumber(baseIn);
                    x = y.pow(str.length - i);
                    POW_PRECISION = k;
                    // Convert str as if an integer, then restore the fraction part by dividing the
                    // result by its base raised to a power.
                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, "0"), 10, baseOut, decimal);
                    y.e = y.c.length;
                }
                // Convert the number as integer.
                xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
                // xc now represents str as an integer and converted to baseOut. e is the exponent.
                e = k = xc.length;
                // Remove trailing zeros.
                for(; xc[--k] == 0; xc.pop());
                // Zero?
                if (!xc[0]) return alphabet.charAt(0);
                // Does str represent an integer? If so, no need for the division.
                if (i < 0) --e;
                else {
                    x.c = xc;
                    x.e = e;
                    // The sign is needed for correct rounding.
                    x.s = sign;
                    x = div(x, y, dp, rm, baseOut);
                    xc = x.c;
                    r = x.r;
                    e = x.e;
                }
                // xc now represents str converted to baseOut.
                // THe index of the rounding digit.
                d = e + dp + 1;
                // The rounding digit: the digit to the right of the digit that may be rounded up.
                i = xc[d];
                // Look at the rounding digits and mode to determine whether to round up.
                k = baseOut / 2;
                r = r || d < 0 || xc[d + 1] != null;
                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
                // If the index of the rounding digit is not greater than zero, or xc represents
                // zero, then the result of the base conversion is zero or, if rounding up, a value
                // such as 0.00001.
                if (d < 1 || !xc[0]) // 1^-dp or 0
                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
                else {
                    // Truncate xc to the required number of decimal places.
                    xc.length = d;
                    // Round up?
                    if (r) // Rounding up may mean the previous digit has to be rounded up and so on.
                    for(--baseOut; ++xc[--d] > baseOut;){
                        xc[d] = 0;
                        if (!d) {
                            ++e;
                            xc = [
                                1
                            ].concat(xc);
                        }
                    }
                    // Determine trailing zeros.
                    for(k = xc.length; !xc[--k];);
                    // E.g. [4, 11, 15] becomes 4bf.
                    for(i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]));
                    // Add leading zeros, decimal point and trailing zeros as required.
                    str = toFixedPoint(str, e, alphabet.charAt(0));
                }
                // The caller will add the sign.
                return str;
            };
        }();
        // Perform division in the specified base. Called by div and convertBase.
        div = function() {
            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
                for(x = x.slice(); i--;){
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }
                if (carry) x = [
                    carry
                ].concat(x);
                return x;
            }
            function compare(a, b, aL, bL) {
                var i, cmp;
                if (aL != bL) cmp = aL > bL ? 1 : -1;
                else {
                    for(i = cmp = 0; i < aL; i++)if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                    }
                }
                return cmp;
            }
            function subtract(a, b, aL, base) {
                var i = 0;
                // Subtract b from a.
                for(; aL--;){
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }
                // Remove leading zeros.
                for(; !a[0] && a.length > 1; a.splice(0, 1));
            }
            // x: dividend, y: divisor.
            return function(x, y, dp, rm, base) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) return new BigNumber(// Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;
                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }
                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for(i = 0; yc[i] == (xc[i] || 0); i++);
                if (yc[i] > (xc[i] || 0)) e--;
                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.
                    n = mathfloor(base / (yc[0] + 1));
                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }
                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;
                    // Add zeros to make remainder as long as divisor.
                    for(; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz = [
                        0
                    ].concat(yz);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;
                    do {
                        n = 0;
                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);
                        // If divisor < remainder.
                        if (cmp < 0) {
                            // Calculate trial digit, n.
                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);
                            //  Algorithm:
                            //  product = divisor multiplied by trial digit (n).
                            //  Compare product and remainder.
                            //  If product is greater than remainder:
                            //    Subtract divisor from product, decrement trial digit.
                            //  Subtract product from remainder.
                            //  If product was less than remainder at the last compare:
                            //    Compare new remainder and divisor.
                            //    If remainder is greater than divisor:
                            //      Subtract divisor from remainder, increment trial digit.
                            if (n > 1) {
                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;
                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;
                                // Compare product and remainder.
                                // If product > remainder then trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while(compare(prod, rem, prodL, remL) == 1){
                                    n--;
                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {
                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) // divisor < remainder, so n must be at least 1.
                                cmp = n = 1;
                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }
                            if (prodL < remL) prod = [
                                0
                            ].concat(prod);
                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;
                            // If product was < remainder.
                            if (cmp == -1) // Compare divisor and new remainder.
                            // If divisor < new remainder, subtract divisor from remainder.
                            // Trial digit n too low.
                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                            while(compare(yc, rem, yL, remL) < 1){
                                n++;
                                // Subtract divisor from remainder.
                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                remL = rem.length;
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [
                                0
                            ];
                        } // else cmp === 1 and n will be 0
                        // Add the next digit, n, to the result array.
                        qc[i++] = n;
                        // Update the remainder.
                        if (rem[0]) rem[remL++] = xc[xi] || 0;
                        else {
                            rem = [
                                xc[xi]
                            ];
                            remL = 1;
                        }
                    }while (((xi++) < xL || rem[0] != null) && s--);
                    more = rem[0] != null;
                    // Leading zero?
                    if (!qc[0]) qc.splice(0, 1);
                }
                if (base == BASE) {
                    // To calculate q.e, first get the number of digits of qc[0].
                    for(i = 1, s = qc[0]; s >= 10; s /= 10, i++);
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
                // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }
                return q;
            };
        }();
        /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */ function format1(n, i, rm, id) {
            var c0, e, ne, len, str;
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i == null) {
                str = coeffToString(n.c);
                str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
            } else {
                n = round(new BigNumber(n), i, rm);
                // n.e may have changed if the value was rounded up.
                e = n.e;
                str = coeffToString(n.c);
                len = str.length;
                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.
                // Exponential notation.
                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
                    // Append zeros?
                    for(; len < i; str += "0", len++);
                    str = toExponential(str, e);
                // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e, "0");
                    // Append zeros?
                    if (e + 1 > len) {
                        if (--i > 0) for(str += "."; i--; str += "0");
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += ".";
                            for(; i--; str += "0");
                        }
                    }
                }
            }
            return n.s < 0 && c0 ? "-" + str : str;
        }
        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
            var n, i = 1, m = new BigNumber(args[0]);
            for(; i < args.length; i++){
                n = new BigNumber(args[i]);
                // If any number is NaN, return NaN.
                if (!n.s) {
                    m = n;
                    break;
                } else if (method.call(m, n)) m = n;
            }
            return m;
        }
        /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */ function normalise(n, c, e) {
            var i = 1, j = c.length;
            // Remove trailing zeros.
            for(; !c[--j]; c.pop());
            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for(j = c[0]; j >= 10; j /= 10, i++);
            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) // Infinity.
            n.c = n.e = null;
            else if (e < MIN_EXP) // Zero.
            n.c = [
                n.e = 0
            ];
            else {
                n.e = e;
                n.c = c;
            }
            return n;
        }
        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, isNum, b) {
                var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                else {
                    if (!isNum) {
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function(m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });
                        if (b) {
                            base = b;
                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                        }
                        if (str != s) return new BigNumber(s, base);
                    }
                    // '[BigNumber Error] Not a number: {n}'
                    // '[BigNumber Error] Not a base {b} number: {n}'
                    if (BigNumber.DEBUG) throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
                    // NaN
                    x.s = null;
                }
                x.c = x.e = null;
            };
        }();
        /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */ function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            // if x is not Infinity or NaN...
            if (xc) {
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {
                    // Get the number of digits of the first element of xc.
                    for(d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;
                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];
                        // Get the rounding digit at index j of n.
                        rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);
                        if (ni >= xc.length) {
                            if (r) {
                                // Needed by sqrt.
                                for(; xc.length <= ni; xc.push(0));
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else break out;
                        } else {
                            n = k = xc[ni];
                            // Get the number of digits of n.
                            for(d = 1; k >= 10; k /= 10, d++);
                            // Get the index of rd within n.
                            i %= LOG_BASE;
                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;
                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                        }
                    }
                    r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;
                        if (r) {
                            // Convert sd to decimal places.
                            sd -= x.e + 1;
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                            x.e = -sd || 0;
                        } else // Zero.
                        xc[0] = x.e = 0;
                        return x;
                    }
                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }
                    // Round up?
                    if (r) {
                        for(;;)// If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {
                            // i will be the length of xc[0] before k is added.
                            for(i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                            j = xc[0] += k;
                            for(k = 1; j >= 10; j /= 10, k++);
                            // if i != k the length has increased.
                            if (i != k) {
                                x.e++;
                                if (xc[0] == BASE) xc[0] = 1;
                            }
                            break;
                        } else {
                            xc[ni] += k;
                            if (xc[ni] != BASE) break;
                            xc[ni--] = 0;
                            k = 1;
                        }
                    }
                    // Remove trailing zeros.
                    for(i = xc.length; xc[--i] === 0; xc.pop());
                }
                // Overflow? Infinity.
                if (x.e > MAX_EXP) x.c = x.e = null;
                else if (x.e < MIN_EXP) x.c = [
                    x.e = 0
                ];
            }
            return x;
        }
        function valueOf(n) {
            var str, e = n.e;
            if (e === null) return n.toString();
            str = coeffToString(n.c);
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
            return n.s < 0 ? "-" + str : str;
        }
        // PROTOTYPE/INSTANCE METHODS
        /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */ P.absoluteValue = P.abs = function() {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
        };
        /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */ P.comparedTo = function(y, b) {
            return compare1(this, new BigNumber(y, b));
        };
        /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.decimalPlaces = P.dp = function(dp, rm) {
            var c, n, v, x = this;
            if (dp != null) {
                intCheck(dp, 0, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber(x), dp + x.e + 1, rm);
            }
            if (!(c = x.c)) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for(; v % 10 == 0; v /= 10, n--);
            if (n < 0) n = 0;
            return n;
        };
        /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.dividedBy = P.div = function(y, b) {
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */ P.dividedToIntegerBy = P.idiv = function(y, b) {
            return div(this, new BigNumber(y, b), 0, 1);
        };
        /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */ P.exponentiatedBy = P.pow = function(n, m) {
            var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
            n = new BigNumber(n);
            // Allow NaN and ±Infinity, but not other non-integers.
            if (n.c && !n.isInteger()) throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
            if (m != null) m = new BigNumber(m);
            // Exponent of MAX_SAFE_INTEGER is 15.
            nIsBig = n.e > 14;
            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
                // The sign of the result of pow when x is negative depends on the evenness of n.
                // If +n overflows to ±Infinity, the evenness of n would be not be known.
                y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
                return m ? y.mod(m) : y;
            }
            nIsNeg = n.s < 0;
            if (m) {
                // x % m returns NaN if abs(m) is zero, or m is NaN.
                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
                isModExp = !nIsNeg && x.isInteger() && m.isInteger();
                if (isModExp) x = x.mod(m);
            // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
            // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
                // If x is negative and n is odd, k = -0, else k = 0.
                k = x.s < 0 && isOdd(n) ? -0 : 0;
                // If x >= 1, k = ±Infinity.
                if (x.e > -1) k = 1 / k;
                // If n is negative return ±0, else return ±Infinity.
                return new BigNumber(nIsNeg ? 1 / k : k);
            } else if (POW_PRECISION) // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
            if (nIsBig) {
                half = new BigNumber(0.5);
                if (nIsNeg) n.s = 1;
                nIsOdd = isOdd(n);
            } else {
                i = Math.abs(+valueOf(n));
                nIsOdd = i % 2;
            }
            y = new BigNumber(ONE);
            // Performs 54 loop iterations for n of 9007199254740991.
            for(;;){
                if (nIsOdd) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k) {
                        if (y.c.length > k) y.c.length = k;
                    } else if (isModExp) y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                }
                if (i) {
                    i = mathfloor(i / 2);
                    if (i === 0) break;
                    nIsOdd = i % 2;
                } else {
                    n = n.times(half);
                    round(n, n.e + 1, 1);
                    if (n.e > 14) nIsOdd = isOdd(n);
                    else {
                        i = +valueOf(n);
                        if (i === 0) break;
                        nIsOdd = i % 2;
                    }
                }
                x = x.times(x);
                if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                } else if (isModExp) x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
            }
            if (isModExp) return y;
            if (nIsNeg) y = ONE.div(y);
            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */ P.integerValue = function(rm) {
            var n = new BigNumber(this);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(n, n.e + 1, rm);
        };
        /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isEqualTo = P.eq = function(y, b) {
            return compare1(this, new BigNumber(y, b)) === 0;
        };
        /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */ P.isFinite = function() {
            return !!this.c;
        };
        /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isGreaterThan = P.gt = function(y, b) {
            return compare1(this, new BigNumber(y, b)) > 0;
        };
        /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
            return (b = compare1(this, new BigNumber(y, b))) === 1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */ P.isInteger = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isLessThan = P.lt = function(y, b) {
            return compare1(this, new BigNumber(y, b)) < 0;
        };
        /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isLessThanOrEqualTo = P.lte = function(y, b) {
            return (b = compare1(this, new BigNumber(y, b))) === -1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */ P.isNaN = function() {
            return !this.s;
        };
        /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */ P.isNegative = function() {
            return this.s < 0;
        };
        /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */ P.isPositive = function() {
            return this.s > 0;
        };
        /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */ P.isZero = function() {
            return !!this.c && this.c[0] == 0;
        };
        /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */ P.minus = function(y, b) {
            var i, j, t, xLTy, x = this, a = x.s;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);
                // Either zero?
                if (!xc[0] || !yc[0]) // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Determine which is the bigger number.
            if (a = xe - ye) {
                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }
                t.reverse();
                // Prepend zeros to equalise exponents.
                for(b = a; b--; t.push(0));
                t.reverse();
            } else {
                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
                for(a = b = 0; b < j; b++)if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                }
            }
            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
            b = (j = yc.length) - (i = xc.length);
            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for(; b--; xc[i++] = 0);
            b = BASE - 1;
            // Subtract yc from xc.
            for(; j > a;){
                if (xc[--j] < yc[j]) {
                    for(i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                }
                xc[j] -= yc[j];
            }
            // Remove leading zeros and adjust exponent accordingly.
            for(; xc[0] == 0; xc.splice(0, 1), --ye);
            // Zero?
            if (!xc[0]) {
                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [
                    y.e = 0
                ];
                return y;
            }
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };
        /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */ P.modulo = P.mod = function(y, b) {
            var q, s, x = this;
            y = new BigNumber(y, b);
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) return new BigNumber(NaN);
            else if (!y.c || x.c && !x.c[0]) return new BigNumber(x);
            if (MODULO_MODE == 9) {
                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else q = div(x, y, 0, MODULO_MODE);
            y = x.minus(q.times(y));
            // To match JavaScript %, ensure sign of zero is sign of dividend.
            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
            return y;
        };
        /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */ P.multipliedBy = P.times = function(y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber(y, b)).c;
            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) y.c = y.e = y.s = null;
                else {
                    y.s *= x.s;
                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) y.c = y.e = null;
                    else {
                        y.c = [
                            0
                        ];
                        y.e = 0;
                    }
                }
                return y;
            }
            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;
            // Initialise the result array with zeros.
            for(i = xcL + ycL, zc = []; i--; zc.push(0));
            base = BASE;
            sqrtBase = SQRT_BASE;
            for(i = ycL; --i >= 0;){
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;
                for(k = xcL, j = i + k; j > i;){
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }
                zc[j] = c;
            }
            if (c) ++e;
            else zc.splice(0, 1);
            return normalise(y, zc, e);
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */ P.negated = function() {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };
        /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */ P.plus = function(y, b) {
            var t, x = this, a = x.s;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);
                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }
                t.reverse();
                for(; a--; t.push(0));
                t.reverse();
            }
            a = xc.length;
            b = yc.length;
            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for(a = 0; b;){
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
            }
            if (a) {
                xc = [
                    a
                ].concat(xc);
                ++ye;
            }
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };
        /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.precision = P.sd = function(sd, rm) {
            var c, n, v, x = this;
            if (sd != null && sd !== !!sd) {
                intCheck(sd, 1, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber(x), sd, rm);
            }
            if (!(c = x.c)) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;
            if (v = c[v]) {
                // Subtract the number of trailing zeros of the last element.
                for(; v % 10 == 0; v /= 10, n--);
                // Add the number of digits of the first element.
                for(v = c[0]; v >= 10; v /= 10, n++);
            }
            if (sd && x.e + 1 > n) n = x.e + 1;
            return n;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */ P.shiftedBy = function(k) {
            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
            return this.times("1e" + k);
        };
        /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.squareRoot = P.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber("0.5");
            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            // Initial estimate.
            s = Math.sqrt(+valueOf(x));
            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += "0";
                s = Math.sqrt(+n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
                if (s == 1 / 0) n = "5e" + e;
                else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf("e") + 1) + e;
                }
                r = new BigNumber(n);
            } else r = new BigNumber(s + "");
            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;
                // Newton-Raphson iteration.
                for(;;){
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));
                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == "9999" || !rep && n == "4999") {
                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);
                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }
                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }
                            break;
                        }
                    }
                }
            }
            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toExponential = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp++;
            }
            return format1(this, dp, rm, 1);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toFixed = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp = dp + this.e + 1;
            }
            return format1(this, dp, rm);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */ P.toFormat = function(dp, rm, format) {
            var str, x = this;
            if (format == null) {
                if (dp != null && rm && typeof rm == "object") {
                    format = rm;
                    rm = null;
                } else if (dp && typeof dp == "object") {
                    format = dp;
                    dp = rm = null;
                } else format = FORMAT;
            } else if (typeof format != "object") throw Error(bignumberError + "Argument not an object: " + format);
            str = x.toFixed(dp, rm);
            if (x.c) {
                var i, arr = str.split("."), g1 = +format.groupSize, g2 = +format.secondaryGroupSize, groupSeparator = format.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;
                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);
                    for(; i < len; i += g1)intPart += groupSeparator + intDigits.substr(i, g1);
                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = "-" + intPart;
                }
                str = fractionPart ? intPart + (format.decimalSeparator || "") + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp("\\d{" + g2 + "}\\B", "g"), "$&" + (format.fractionGroupSeparator || "")) : fractionPart) : intPart;
            }
            return (format.prefix || "") + str + (format.suffix || "");
        };
        /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */ P.toFraction = function(md) {
            var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
            if (md != null) {
                n = new BigNumber(md);
                // Throw if md is less than one or is not an integer, unless it is Infinity.
                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
            if (!xc) return new BigNumber(x);
            d = new BigNumber(ONE);
            n1 = d0 = new BigNumber(ONE);
            d1 = n0 = new BigNumber(ONE);
            s = coeffToString(xc);
            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);
            // n0 = d1 = 0
            n0.c[0] = 0;
            for(;;){
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.comparedTo(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }
            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e = e * 2;
            // Determine which fraction is closer to x, n0/d0 or n1/d1
            r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [
                n1,
                d1
            ] : [
                n0,
                d0
            ];
            MAX_EXP = exp;
            return r;
        };
        /*
     * Return the value of this BigNumber converted to a number primitive.
     */ P.toNumber = function() {
            return +valueOf(this);
        };
        /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.toPrecision = function(sd, rm) {
            if (sd != null) intCheck(sd, 1, MAX);
            return format1(this, sd, rm, 2);
        };
        /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */ P.toString = function(b) {
            var str, n = this, s = n.s, e = n.e;
            // Infinity or NaN?
            if (e === null) {
                if (s) {
                    str = "Infinity";
                    if (s < 0) str = "-" + str;
                } else str = "NaN";
            } else {
                if (b == null) str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
                else if (b === 10 && alphabetHasNormalDecimalDigits) {
                    n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
                    str = toFixedPoint(coeffToString(n.c), n.e, "0");
                } else {
                    intCheck(b, 2, ALPHABET.length, "Base");
                    str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
                }
                if (s < 0 && n.c[0]) str = "-" + str;
            }
            return str;
        };
        /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */ P.valueOf = P.toJSON = function() {
            return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null) BigNumber.set(configObject);
        return BigNumber;
    }
    // PRIVATE HELPER FUNCTIONS
    // These functions don't need access to variables,
    // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.
    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }
    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for(; i < j;){
            s = a[i++] + "";
            z = LOG_BASE - s.length;
            for(; z--; s = "0" + s);
            r += s;
        }
        // Determine trailing zeros.
        for(j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
    }
    // Compare the value of BigNumbers x and y.
    function compare1(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        // Either NaN?
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;
        // Signs differ?
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        // Compare digit by digit.
        for(i = 0; i < j; i++)if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */ function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
    }
    // Assumes finite n.
    function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }
    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
    }
    function toFixedPoint(str, e, z) {
        var len, zs;
        // Negative exponent?
        if (e < 0) {
            // Prepend zeros.
            for(zs = z + "."; ++e; zs += z);
            str = zs + str;
        // Positive exponent
        } else {
            len = str.length;
            // Append zeros.
            if (++e > len) {
                for(zs = z, e -= len; --e; zs += z);
                str += zs;
            } else if (e < len) str = str.slice(0, e) + "." + str.slice(e);
        }
        return str;
    }
    // EXPORT
    BigNumber1 = clone();
    BigNumber1["default"] = BigNumber1.BigNumber = BigNumber1;
    // AMD.
    if (typeof define == "function" && define.amd) define(function() {
        return BigNumber1;
    });
    else if (module.exports) module.exports = BigNumber1;
    else {
        if (!globalObject) globalObject = typeof self != "undefined" && self ? self : window;
        globalObject.BigNumber = BigNumber1;
    }
})(this);

},{}],"4wxPO":[function(require,module,exports) {
"use strict";
const exp = Math.exp;
exports = module.exports = function MovingAverage(timespan) {
    if (typeof timespan !== "number") throw new Error("must provide a timespan to the moving average constructor");
    if (timespan <= 0) throw new Error("must provide a timespan > 0 to the moving average constructor");
    let ma // moving average
    ;
    let v = 0 // variance
    ;
    let d = 0 // deviation
    ;
    let f = 0 // forecast
    ;
    let previousTime;
    let ret = {};
    function alpha(t, pt) {
        return 1 - exp(-(t - pt) / timespan);
    }
    ret.push = function push(time, value) {
        if (previousTime) {
            // calculate moving average
            const a = alpha(time, previousTime);
            const diff = value - ma;
            const incr = a * diff;
            ma = a * value + (1 - a) * ma;
            // calculate variance & deviation
            v = (1 - a) * (v + diff * incr);
            d = Math.sqrt(v);
            // calculate forecast
            f = ma + a * diff;
        } else ma = value;
        previousTime = time;
    };
    // Exponential Moving Average
    ret.movingAverage = function movingAverage() {
        return ma;
    };
    // Variance
    ret.variance = function variance() {
        return v;
    };
    ret.deviation = function deviation() {
        return d;
    };
    ret.forecast = function forecast() {
        return f;
    };
    return ret;
};

},{}],"9XtI7":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:upgrader"), {
    error: debug("libp2p:upgrader:err")
});
const errCode = require("err-code");
// @ts-ignore multistream-select does not export types
const Multistream = require("multistream-select");
const { Connection  } = require("libp2p-interfaces/src/connection");
const PeerId = require("peer-id");
const { pipe  } = require("it-pipe");
// @ts-ignore mutable-proxy does not export types
const mutableProxy = require("mutable-proxy");
const { codes  } = require("./errors");
/**
 * @typedef {import('libp2p-interfaces/src/transport/types').MultiaddrConnection} MultiaddrConnection
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxerFactory} MuxerFactory
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').Muxer} Muxer
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 * @typedef {import('libp2p-interfaces/src/crypto/types').Crypto} Crypto
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * @typedef CryptoResult
 * @property {MultiaddrConnection} conn A duplex iterable
 * @property {PeerId} remotePeer
 * @property {string} protocol
 */ class Upgrader {
    /**
   * @param {object} options
   * @param {PeerId} options.localPeer
   * @param {import('./metrics')} [options.metrics]
   * @param {Map<string, Crypto>} [options.cryptos]
   * @param {Map<string, MuxerFactory>} [options.muxers]
   * @param {(connection: Connection) => void} options.onConnection - Called when a connection is upgraded
   * @param {(connection: Connection) => void} options.onConnectionEnd
   */ constructor({ localPeer , metrics , cryptos =new Map() , muxers =new Map() , onConnectionEnd =()=>{} , onConnection =()=>{}  }){
        this.localPeer = localPeer;
        this.metrics = metrics;
        this.cryptos = cryptos;
        this.muxers = muxers;
        /** @type {import("./pnet") | null} */ this.protector = null;
        this.protocols = new Map();
        this.onConnection = onConnection;
        this.onConnectionEnd = onConnectionEnd;
    }
    /**
   * Upgrades an inbound connection
   *
   * @async
   * @param {MultiaddrConnection} maConn
   * @returns {Promise<Connection>}
   */ async upgradeInbound(maConn) {
        let encryptedConn;
        let remotePeer;
        let upgradedConn;
        let Muxer;
        let cryptoProtocol;
        let setPeer;
        let proxyPeer;
        if (this.metrics) {
            ({ setTarget: setPeer , proxy: proxyPeer  } = mutableProxy());
            const idString = (Math.random() * 1e9).toString(36) + Date.now();
            setPeer({
                toB58String: ()=>idString
            });
            maConn = this.metrics.trackStream({
                stream: maConn,
                remotePeer: proxyPeer
            });
        }
        log("Starting the inbound connection upgrade");
        // Protect
        let protectedConn = maConn;
        if (this.protector) protectedConn = await this.protector.protect(maConn);
        try {
            ({ conn: encryptedConn , remotePeer , protocol: cryptoProtocol  } = await this._encryptInbound(this.localPeer, protectedConn, this.cryptos));
            // Multiplex the connection
            if (this.muxers.size) ({ stream: upgradedConn , Muxer  } = await this._multiplexInbound(encryptedConn, this.muxers));
            else upgradedConn = encryptedConn;
        } catch (err) {
            log.error("Failed to upgrade inbound connection", err);
            await maConn.close(err);
            throw err;
        }
        if (this.metrics) {
            this.metrics.updatePlaceholder(proxyPeer, remotePeer);
            setPeer(remotePeer);
        }
        log("Successfully upgraded inbound connection");
        return this._createConnection({
            cryptoProtocol,
            direction: "inbound",
            maConn,
            upgradedConn,
            Muxer,
            remotePeer
        });
    }
    /**
   * Upgrades an outbound connection
   *
   * @async
   * @param {MultiaddrConnection} maConn
   * @returns {Promise<Connection>}
   */ async upgradeOutbound(maConn) {
        const idStr = maConn.remoteAddr.getPeerId();
        if (!idStr) throw errCode(new Error("outbound connection must have a peer id"), codes.ERR_INVALID_MULTIADDR);
        const remotePeerId = PeerId.createFromB58String(idStr);
        let encryptedConn;
        let remotePeer;
        let upgradedConn;
        let cryptoProtocol;
        let Muxer;
        let setPeer;
        let proxyPeer;
        if (this.metrics) {
            ({ setTarget: setPeer , proxy: proxyPeer  } = mutableProxy());
            const idString = (Math.random() * 1e9).toString(36) + Date.now();
            setPeer({
                toB58String: ()=>idString
            });
            maConn = this.metrics.trackStream({
                stream: maConn,
                remotePeer: proxyPeer
            });
        }
        log("Starting the outbound connection upgrade");
        // Protect
        let protectedConn = maConn;
        if (this.protector) protectedConn = await this.protector.protect(maConn);
        try {
            ({ conn: encryptedConn , remotePeer , protocol: cryptoProtocol  } = await this._encryptOutbound(this.localPeer, protectedConn, remotePeerId, this.cryptos));
            // Multiplex the connection
            if (this.muxers.size) ({ stream: upgradedConn , Muxer  } = await this._multiplexOutbound(encryptedConn, this.muxers));
            else upgradedConn = encryptedConn;
        } catch (err) {
            log.error("Failed to upgrade outbound connection", err);
            await maConn.close(err);
            throw err;
        }
        if (this.metrics) {
            this.metrics.updatePlaceholder(proxyPeer, remotePeer);
            setPeer(remotePeer);
        }
        log("Successfully upgraded outbound connection");
        return this._createConnection({
            cryptoProtocol,
            direction: "outbound",
            maConn,
            upgradedConn,
            Muxer,
            remotePeer
        });
    }
    /**
   * A convenience method for generating a new `Connection`
   *
   * @private
   * @param {object} options
   * @param {string} options.cryptoProtocol - The crypto protocol that was negotiated
   * @param {'inbound' | 'outbound'} options.direction - One of ['inbound', 'outbound']
   * @param {MultiaddrConnection} options.maConn - The transport layer connection
   * @param {MuxedStream | MultiaddrConnection} options.upgradedConn - A duplex connection returned from multiplexer and/or crypto selection
   * @param {MuxerFactory} [options.Muxer] - The muxer to be used for muxing
   * @param {PeerId} options.remotePeer - The peer the connection is with
   * @returns {Connection}
   */ _createConnection({ cryptoProtocol , direction , maConn , upgradedConn , Muxer , remotePeer  }) {
        /** @type {import("libp2p-interfaces/src/stream-muxer/types").Muxer} */ let muxer;
        /** @type {import("libp2p-interfaces/src/connection/connection").CreatedMuxedStream | undefined} */ let newStream;
        /** @type {Connection} */ let connection // eslint-disable-line prefer-const
        ;
        if (Muxer) {
            // Create the muxer
            muxer = new Muxer({
                // Run anytime a remote stream is created
                onStream: async (muxedStream)=>{
                    if (!connection) return;
                    const mss = new Multistream.Listener(muxedStream);
                    try {
                        const { stream , protocol  } = await mss.handle(Array.from(this.protocols.keys()));
                        log("%s: incoming stream opened on %s", direction, protocol);
                        if (this.metrics) this.metrics.trackStream({
                            stream,
                            remotePeer,
                            protocol
                        });
                        connection.addStream(muxedStream, {
                            protocol
                        });
                        this._onStream({
                            connection,
                            stream: {
                                ...muxedStream,
                                ...stream
                            },
                            protocol
                        });
                    } catch (err) {
                        log.error(err);
                    }
                },
                // Run anytime a stream closes
                onStreamEnd: (muxedStream)=>{
                    connection.removeStream(muxedStream.id);
                }
            });
            newStream = async (protocols)=>{
                log("%s: starting new stream on %s", direction, protocols);
                const muxedStream = muxer.newStream();
                const mss = new Multistream.Dialer(muxedStream);
                try {
                    const { stream , protocol  } = await mss.select(protocols);
                    if (this.metrics) this.metrics.trackStream({
                        stream,
                        remotePeer,
                        protocol
                    });
                    return {
                        stream: {
                            ...muxedStream,
                            ...stream
                        },
                        protocol
                    };
                } catch (err) {
                    log.error("could not create new stream", err);
                    throw errCode(err, codes.ERR_UNSUPPORTED_PROTOCOL);
                }
            };
            // Pipe all data through the muxer
            pipe(upgradedConn, muxer, upgradedConn).catch(log.error);
        }
        const _timeline = maConn.timeline;
        maConn.timeline = new Proxy(_timeline, {
            set: (...args)=>{
                if (connection && args[1] === "close" && args[2] && !_timeline.close) // Wait for close to finish before notifying of the closure
                (async ()=>{
                    try {
                        if (connection.stat.status === "open") await connection.close();
                    } catch (err) {
                        log.error(err);
                    } finally{
                        this.onConnectionEnd(connection);
                    }
                })();
                return Reflect.set(...args);
            }
        });
        maConn.timeline.upgraded = Date.now();
        const errConnectionNotMultiplexed = ()=>{
            throw errCode(new Error("connection is not multiplexed"), "ERR_CONNECTION_NOT_MULTIPLEXED");
        };
        // Create the connection
        connection = new Connection({
            localAddr: maConn.localAddr,
            remoteAddr: maConn.remoteAddr,
            localPeer: this.localPeer,
            remotePeer: remotePeer,
            stat: {
                direction,
                // @ts-ignore
                timeline: maConn.timeline,
                multiplexer: Muxer && Muxer.multicodec,
                encryption: cryptoProtocol
            },
            newStream: newStream || errConnectionNotMultiplexed,
            getStreams: ()=>muxer ? muxer.streams : errConnectionNotMultiplexed(),
            close: async ()=>{
                await maConn.close();
                // Ensure remaining streams are aborted
                if (muxer) muxer.streams.map((stream)=>stream.abort());
            }
        });
        this.onConnection(connection);
        return connection;
    }
    /**
   * Routes incoming streams to the correct handler
   *
   * @private
   * @param {object} options
   * @param {Connection} options.connection - The connection the stream belongs to
   * @param {MuxedStream} options.stream
   * @param {string} options.protocol
   */ _onStream({ connection , stream , protocol  }) {
        const handler = this.protocols.get(protocol);
        handler({
            connection,
            stream,
            protocol
        });
    }
    /**
   * Attempts to encrypt the incoming `connection` with the provided `cryptos`.
   *
   * @private
   * @async
   * @param {PeerId} localPeer - The initiators PeerId
   * @param {*} connection
   * @param {Map<string, Crypto>} cryptos
   * @returns {Promise<CryptoResult>} An encrypted connection, remote peer `PeerId` and the protocol of the `Crypto` used
   */ async _encryptInbound(localPeer, connection, cryptos) {
        const mss = new Multistream.Listener(connection);
        const protocols = Array.from(cryptos.keys());
        log("handling inbound crypto protocol selection", protocols);
        try {
            const { stream , protocol  } = await mss.handle(protocols);
            const crypto = cryptos.get(protocol);
            log("encrypting inbound connection...");
            if (!crypto) throw new Error(`no crypto module found for ${protocol}`);
            return {
                ...await crypto.secureInbound(localPeer, stream),
                protocol
            };
        } catch (err) {
            throw errCode(err, codes.ERR_ENCRYPTION_FAILED);
        }
    }
    /**
   * Attempts to encrypt the given `connection` with the provided `cryptos`.
   * The first `Crypto` module to succeed will be used
   *
   * @private
   * @async
   * @param {PeerId} localPeer - The initiators PeerId
   * @param {MultiaddrConnection} connection
   * @param {PeerId} remotePeerId
   * @param {Map<string, Crypto>} cryptos
   * @returns {Promise<CryptoResult>} An encrypted connection, remote peer `PeerId` and the protocol of the `Crypto` used
   */ async _encryptOutbound(localPeer, connection, remotePeerId, cryptos) {
        const mss = new Multistream.Dialer(connection);
        const protocols = Array.from(cryptos.keys());
        log("selecting outbound crypto protocol", protocols);
        try {
            const { stream , protocol  } = await mss.select(protocols);
            const crypto = cryptos.get(protocol);
            log("encrypting outbound connection to %j", remotePeerId);
            if (!crypto) throw new Error(`no crypto module found for ${protocol}`);
            return {
                ...await crypto.secureOutbound(localPeer, stream, remotePeerId),
                protocol
            };
        } catch (err) {
            throw errCode(err, codes.ERR_ENCRYPTION_FAILED);
        }
    }
    /**
   * Selects one of the given muxers via multistream-select. That
   * muxer will be used for all future streams on the connection.
   *
   * @private
   * @async
   * @param {MultiaddrConnection} connection - A basic duplex connection to multiplex
   * @param {Map<string, MuxerFactory>} muxers - The muxers to attempt multiplexing with
   * @returns {Promise<{ stream: MuxedStream, Muxer?: MuxerFactory}>} A muxed connection
   */ async _multiplexOutbound(connection, muxers) {
        const dialer = new Multistream.Dialer(connection);
        const protocols = Array.from(muxers.keys());
        log("outbound selecting muxer %s", protocols);
        try {
            const { stream , protocol  } = await dialer.select(protocols);
            log("%s selected as muxer protocol", protocol);
            const Muxer = muxers.get(protocol);
            return {
                stream,
                Muxer
            };
        } catch (err) {
            throw errCode(err, codes.ERR_MUXER_UNAVAILABLE);
        }
    }
    /**
   * Registers support for one of the given muxers via multistream-select. The
   * selected muxer will be used for all future streams on the connection.
   *
   * @private
   * @async
   * @param {MultiaddrConnection} connection - A basic duplex connection to multiplex
   * @param {Map<string, MuxerFactory>} muxers - The muxers to attempt multiplexing with
   * @returns {Promise<{ stream: MuxedStream, Muxer?: MuxerFactory}>} A muxed connection
   */ async _multiplexInbound(connection, muxers) {
        const listener = new Multistream.Listener(connection);
        const protocols = Array.from(muxers.keys());
        log("inbound handling muxers %s", protocols);
        try {
            const { stream , protocol  } = await listener.handle(protocols);
            const Muxer = muxers.get(protocol);
            return {
                stream,
                Muxer
            };
        } catch (err) {
            throw errCode(err, codes.ERR_MUXER_UNAVAILABLE);
        }
    }
}
module.exports = Upgrader;

},{"debug":"l0oUb","err-code":"dUrrM","multistream-select":"26BKf","libp2p-interfaces/src/connection":"7ui7f","peer-id":"etBKN","it-pipe":"jkWle","mutable-proxy":"7yHa1","./errors":"cFlaw"}],"26BKf":[function(require,module,exports) {
"use strict";
const select = require("./select");
const handle = require("./handle");
const ls = require("./ls");
const { PROTOCOL_ID  } = require("./constants");
exports.PROTOCOL_ID = PROTOCOL_ID;
class MultistreamSelect {
    constructor(stream){
        this._stream = stream;
        this._shaken = false;
    }
    // Perform the multistream-select handshake
    async _handshake() {
        if (this._shaken) return;
        const { stream  } = await select(this._stream, PROTOCOL_ID);
        this._stream = stream;
        this._shaken = true;
    }
}
class Dialer extends MultistreamSelect {
    select(protocols) {
        return select(this._stream, protocols, this._shaken ? null : PROTOCOL_ID);
    }
    async ls() {
        await this._handshake();
        const { stream , protocols  } = await ls(this._stream);
        this._stream = stream;
        return protocols;
    }
}
exports.Dialer = Dialer;
class Listener extends MultistreamSelect {
    handle(protocols) {
        return handle(this._stream, protocols);
    }
}
exports.Listener = Listener;

},{"./select":"hO2D8","./handle":"e9tgv","./ls":"fKrAH","./constants":"5d3wp"}],"hO2D8":[function(require,module,exports) {
"use strict";
const log = require("debug")("mss:select");
const errCode = require("err-code");
const multistream = require("./multistream");
const handshake = require("it-handshake");
module.exports = async (stream, protocols, protocolId)=>{
    protocols = Array.isArray(protocols) ? [
        ...protocols
    ] : [
        protocols
    ];
    const { reader , writer , rest , stream: shakeStream  } = handshake(stream);
    const protocol = protocols.shift();
    if (protocolId) {
        log('select: write ["%s", "%s"]', protocolId, protocol);
        multistream.writeAll(writer, [
            protocolId,
            protocol
        ]);
    } else {
        log('select: write "%s"', protocol);
        multistream.write(writer, protocol);
    }
    let response = (await multistream.read(reader)).toString();
    log('select: read "%s"', response);
    // Read the protocol response if we got the protocolId in return
    if (response === protocolId) {
        response = (await multistream.read(reader)).toString();
        log('select: read "%s"', response);
    }
    // We're done
    if (response === protocol) {
        rest();
        return {
            stream: shakeStream,
            protocol
        };
    }
    // We haven't gotten a valid ack, try the other protocols
    for (const protocol1 of protocols){
        log('select: write "%s"', protocol1);
        multistream.write(writer, protocol1);
        const response = (await multistream.read(reader)).toString();
        log('select: read "%s" for "%s"', response, protocol1);
        if (response === protocol1) {
            rest() // End our writer so others can start writing to stream
            ;
            return {
                stream: shakeStream,
                protocol: protocol1
            };
        }
    }
    rest();
    throw errCode(new Error("protocol selection failed"), "ERR_UNSUPPORTED_PROTOCOL");
};

},{"debug":"l0oUb","err-code":"dUrrM","./multistream":"iM8eU","it-handshake":"kpk2i"}],"iM8eU":[function(require,module,exports) {
"use strict";
const BufferList = require("bl/BufferList");
const lp = require("it-length-prefixed");
const pipe = require("it-pipe");
const errCode = require("err-code");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const first = require("it-first");
const NewLine = uint8ArrayFromString("\n");
exports.encode = (buffer)=>lp.encode.single(new BufferList([
        buffer,
        NewLine
    ]));
// `write` encodes and writes a single buffer
exports.write = (writer, buffer)=>writer.push(exports.encode(buffer));
// `writeAll` behaves like `write`, except it encodes an array of items as a single write
exports.writeAll = (writer, buffers)=>{
    writer.push(buffers.reduce((bl, buffer)=>bl.append(exports.encode(buffer)), new BufferList()));
};
exports.read = async (reader)=>{
    let byteLength = 1 // Read single byte chunks until the length is known
    ;
    const varByteSource = {
        [Symbol.asyncIterator] () {
            return this;
        },
        next: ()=>reader.next(byteLength)
    };
    // Once the length has been parsed, read chunk for that length
    const onLength = (l)=>{
        byteLength = l;
    };
    const buf = await pipe(varByteSource, lp.decode({
        onLength
    }), first);
    if (buf.get(buf.length - 1) !== NewLine[0]) throw errCode(new Error("missing newline"), "ERR_INVALID_MULTISTREAM_SELECT_MESSAGE");
    return buf.shallowSlice(0, -1) // Remove newline
    ;
};

},{"bl/BufferList":"cf0Az","it-length-prefixed":"31lGp","it-pipe":"jkWle","err-code":"dUrrM","uint8arrays/from-string":"7qjkp","it-first":"kZCg9"}],"e9tgv":[function(require,module,exports) {
"use strict";
const log = require("debug")("mss:handle");
const BufferList = require("bl/BufferList");
const multistream = require("./multistream");
const handshake = require("it-handshake");
const { PROTOCOL_ID  } = require("./constants");
module.exports = async (stream, protocols)=>{
    protocols = Array.isArray(protocols) ? protocols : [
        protocols
    ];
    const { writer , reader , rest , stream: shakeStream  } = handshake(stream);
    while(true){
        const protocol = (await multistream.read(reader)).toString();
        log('read "%s"', protocol);
        if (protocol === PROTOCOL_ID) {
            log('respond with "%s" for "%s"', PROTOCOL_ID, protocol);
            multistream.write(writer, PROTOCOL_ID);
            continue;
        }
        if (protocols.includes(protocol)) {
            multistream.write(writer, protocol);
            log('respond with "%s" for "%s"', protocol, protocol);
            rest();
            return {
                stream: shakeStream,
                protocol
            };
        }
        if (protocol === "ls") {
            // <varint-msg-len><varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n\n
            multistream.write(writer, new BufferList(protocols.map((p)=>multistream.encode(p))));
            log('respond with "%s" for %s', protocols, protocol);
            continue;
        }
        multistream.write(writer, "na");
        log('respond with "na" for "%s"', protocol);
    }
};

},{"debug":"l0oUb","bl/BufferList":"cf0Az","./multistream":"iM8eU","it-handshake":"kpk2i","./constants":"5d3wp"}],"5d3wp":[function(require,module,exports) {
"use strict";
exports.PROTOCOL_ID = "/multistream/1.0.0";

},{}],"fKrAH":[function(require,module,exports) {
"use strict";
const Reader = require("it-reader");
const log = require("debug")("it-multistream-select:ls");
const multistream = require("./multistream");
const handshake = require("it-handshake");
const lp = require("it-length-prefixed");
const pipe = require("it-pipe");
module.exports = async (stream)=>{
    const { reader , writer , rest , stream: shakeStream  } = handshake(stream);
    log('write "ls"');
    multistream.write(writer, "ls");
    rest();
    // Next message from remote will be (e.g. for 2 protocols):
    // <varint-msg-len><varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n
    const res = await multistream.read(reader);
    // After reading response we have:
    // <varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n
    const protocolsReader = Reader([
        res
    ]);
    const protocols = [];
    // Decode each of the protocols from the reader
    await pipe(protocolsReader, lp.decode(), async (source)=>{
        for await (const protocol of source)// Remove the newline
        protocols.push(protocol.shallowSlice(0, -1).toString());
    });
    return {
        stream: shakeStream,
        protocols
    };
};

},{"it-reader":"giids","debug":"l0oUb","./multistream":"iM8eU","it-handshake":"kpk2i","it-length-prefixed":"31lGp","it-pipe":"jkWle"}],"7ui7f":[function(require,module,exports) {
"use strict";
exports.Connection = require("./connection");

},{"./connection":"73gcN"}],"73gcN":[function(require,module,exports) {
"use strict";
const PeerId = require("peer-id");
const { Multiaddr  } = require("multiaddr");
const errCode = require("err-code");
const { OPEN , CLOSING , CLOSED  } = require("./status");
const connectionSymbol = Symbol.for("@libp2p/interface-connection/connection");
/**
 * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream
 * @typedef {import('./status').Status} Status
 */ /**
 * @typedef {Object} Timeline
 * @property {number} open - connection opening timestamp.
 * @property {number} [upgraded] - connection upgraded timestamp.
 * @property {number} [close]
 *
 * @typedef {Object} ConectionStat
 * @property {'inbound' | 'outbound'} direction - connection establishment direction
 * @property {Timeline} timeline - connection relevant events timestamp.
 * @property {string} [multiplexer] - connection multiplexing identifier.
 * @property {string} [encryption] - connection encryption method identifier.
 *
 * @typedef {(protocols: string|string[]) => Promise<{stream: MuxedStream, protocol: string}>} CreatedMuxedStream
 *
 * @typedef {Object} ConnectionOptions
 * @property {Multiaddr} [localAddr] - local multiaddr of the connection if known.
 * @property {Multiaddr} remoteAddr - remote multiaddr of the connection.
 * @property {PeerId} localPeer - local peer-id.
 * @property {PeerId} remotePeer - remote peer-id.
 * @property {CreatedMuxedStream} newStream - new stream muxer function.
 * @property {() => Promise<void>} close - close raw connection function.
 * @property {() => MuxedStream[]} getStreams - get streams from muxer function.
 * @property {ConectionStat} stat - metadata of the connection.
 *
 * @typedef {Object} StreamData
 * @property {string} protocol - the protocol used by the stream
 * @property {Object} [metadata] - metadata of the stream
 */ /**
 * An implementation of the js-libp2p connection.
 * Any libp2p transport should use an upgrader to return this connection.
 */ class Connection {
    /**
   * An implementation of the js-libp2p connection.
   * Any libp2p transport should use an upgrader to return this connection.
   *
   * @class
   * @param {ConnectionOptions} options
   */ constructor({ localAddr , remoteAddr , localPeer , remotePeer , newStream , close , getStreams , stat  }){
        validateArgs(localAddr, localPeer, remotePeer, newStream, close, getStreams, stat);
        /**
     * Connection identifier.
     */ this.id = parseInt(String(Math.random() * 1e9)).toString(36) + Date.now();
        /**
     * Observed multiaddr of the local peer
     */ this.localAddr = localAddr;
        /**
     * Observed multiaddr of the remote peer
     */ this.remoteAddr = remoteAddr;
        /**
     * Local peer id.
     */ this.localPeer = localPeer;
        /**
     * Remote peer id.
     */ this.remotePeer = remotePeer;
        /**
     * Connection metadata.
     *
     * @type {ConectionStat & {status: Status}}
     */ this._stat = {
            ...stat,
            status: OPEN
        };
        /**
     * Reference to the new stream function of the multiplexer
     */ this._newStream = newStream;
        /**
     * Reference to the close function of the raw connection
     */ this._close = close;
        /**
     * Reference to the getStreams function of the muxer
     */ this._getStreams = getStreams;
        /**
     * Connection streams registry
     */ this.registry = new Map();
        /**
     * User provided tags
     *
     * @type {string[]}
     */ this.tags = [];
    }
    get [Symbol.toStringTag]() {
        return "Connection";
    }
    get [connectionSymbol]() {
        return true;
    }
    /**
   * Checks if the given value is a `Connection` instance.
   *
   * @param {any} other
   * @returns {other is Connection}
   */ static isConnection(other) {
        return Boolean(other && other[connectionSymbol]);
    }
    /**
   * Get connection metadata
   *
   * @this {Connection}
   */ get stat() {
        return this._stat;
    }
    /**
   * Get all the streams of the muxer.
   *
   * @this {Connection}
   */ get streams() {
        return this._getStreams();
    }
    /**
   * Create a new stream from this connection
   *
   * @param {string|string[]} protocols - intended protocol for the stream
   * @returns {Promise<{stream: MuxedStream, protocol: string}>} with muxed+multistream-selected stream and selected protocol
   */ async newStream(protocols) {
        if (this.stat.status === CLOSING) throw errCode(new Error("the connection is being closed"), "ERR_CONNECTION_BEING_CLOSED");
        if (this.stat.status === CLOSED) throw errCode(new Error("the connection is closed"), "ERR_CONNECTION_CLOSED");
        if (!Array.isArray(protocols)) protocols = [
            protocols
        ];
        const { stream , protocol  } = await this._newStream(protocols);
        this.addStream(stream, {
            protocol
        });
        return {
            stream,
            protocol
        };
    }
    /**
   * Add a stream when it is opened to the registry.
   *
   * @param {MuxedStream} muxedStream - a muxed stream
   * @param {StreamData} data - the stream data to be registered
   * @returns {void}
   */ addStream(muxedStream, { protocol , metadata ={}  }) {
        // Add metadata for the stream
        this.registry.set(muxedStream.id, {
            protocol,
            ...metadata
        });
    }
    /**
   * Remove stream registry after it is closed.
   *
   * @param {string} id - identifier of the stream
   */ removeStream(id) {
        this.registry.delete(id);
    }
    /**
   * Close the connection.
   *
   * @returns {Promise<void>}
   */ async close() {
        if (this.stat.status === CLOSED) return;
        if (this._closing) return this._closing;
        this.stat.status = CLOSING;
        // Close raw connection
        this._closing = await this._close();
        this._stat.timeline.close = Date.now();
        this.stat.status = CLOSED;
    }
}
module.exports = Connection;
/**
 * @param {Multiaddr|undefined} localAddr
 * @param {PeerId} localPeer
 * @param {PeerId} remotePeer
 * @param {(protocols: string | string[]) => Promise<{ stream: import("../stream-muxer/types").MuxedStream; protocol: string; }>} newStream
 * @param {() => Promise<void>} close
 * @param {() => import("../stream-muxer/types").MuxedStream[]} getStreams
 * @param {{ direction: any; timeline: any; multiplexer?: string | undefined; encryption?: string | undefined; }} stat
 */ function validateArgs(localAddr, localPeer, remotePeer, newStream, close, getStreams, stat) {
    if (localAddr && !Multiaddr.isMultiaddr(localAddr)) throw errCode(new Error("localAddr must be an instance of multiaddr"), "ERR_INVALID_PARAMETERS");
    if (!PeerId.isPeerId(localPeer)) throw errCode(new Error("localPeer must be an instance of peer-id"), "ERR_INVALID_PARAMETERS");
    if (!PeerId.isPeerId(remotePeer)) throw errCode(new Error("remotePeer must be an instance of peer-id"), "ERR_INVALID_PARAMETERS");
    if (typeof newStream !== "function") throw errCode(new Error("new stream must be a function"), "ERR_INVALID_PARAMETERS");
    if (typeof close !== "function") throw errCode(new Error("close must be a function"), "ERR_INVALID_PARAMETERS");
    if (typeof getStreams !== "function") throw errCode(new Error("getStreams must be a function"), "ERR_INVALID_PARAMETERS");
    if (!stat) throw errCode(new Error("connection metadata object must be provided"), "ERR_INVALID_PARAMETERS");
    if (stat.direction !== "inbound" && stat.direction !== "outbound") throw errCode(new Error('direction must be "inbound" or "outbound"'), "ERR_INVALID_PARAMETERS");
    if (!stat.timeline) throw errCode(new Error("connection timeline object must be provided in the stat object"), "ERR_INVALID_PARAMETERS");
    if (!stat.timeline.open) throw errCode(new Error("connection open timestamp must be provided"), "ERR_INVALID_PARAMETERS");
    if (!stat.timeline.upgraded) throw errCode(new Error("connection upgraded timestamp must be provided"), "ERR_INVALID_PARAMETERS");
}

},{"peer-id":"etBKN","multiaddr":"dOMJu","err-code":"dUrrM","./status":"czZ3d"}],"czZ3d":[function(require,module,exports) {
"use strict";
const STATUS = {
    OPEN: "open",
    CLOSING: "closing",
    CLOSED: "closed"
};
module.exports = STATUS /**
 * @typedef {STATUS[keyof STATUS]} Status
 */ ;

},{}],"7yHa1":[function(require,module,exports) {
"use strict";
function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++)arr2[i] = arr[i];
        return arr2;
    } else return Array.from(arr);
}
module.exports = function mutableProxyFactory(defaultTarget) {
    var mutableHandler = void 0;
    var mutableTarget = void 0;
    function setTarget(target) {
        if (!(target instanceof Object)) throw new Error('Target "' + target + '" is not an object');
        mutableTarget = target;
    }
    function setHandler(handler) {
        Object.keys(handler).forEach(function(key) {
            var value = handler[key];
            if (typeof value !== "function") throw new Error('Trap "' + key + ": " + value + '" is not a function');
            if (!Reflect[key]) throw new Error('Trap "' + key + ": " + value + '" is not a valid trap');
        });
        mutableHandler = handler;
    }
    setTarget(function() {});
    if (defaultTarget) setTarget(defaultTarget);
    setHandler(Reflect);
    // Dynamically forward all the traps to the associated methods on the mutable handler
    var handler1 = new Proxy({}, {
        get: function get(target, property) {
            return function() {
                for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                return mutableHandler[property].apply(null, [
                    mutableTarget
                ].concat(_toConsumableArray(args.slice(1))));
            };
        }
    });
    return {
        setTarget: setTarget,
        setHandler: setHandler,
        getTarget: function getTarget() {
            return mutableTarget;
        },
        getHandler: function getHandler() {
            return mutableHandler;
        },
        proxy: new Proxy(mutableTarget, handler1)
    };
};

},{}],"j2dY0":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const { EventEmitter  } = require("events");
const PeerId = require("peer-id");
const AddressBook = require("./address-book");
const KeyBook = require("./key-book");
const MetadataBook = require("./metadata-book");
const ProtoBook = require("./proto-book");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("../errors");
/**
 * @typedef {import('./address-book').Address} Address
 */ /**
 * @extends {EventEmitter}
 *
 * @fires PeerStore#peer Emitted when a new peer is added.
 * @fires PeerStore#change:protocols Emitted when a known peer supports a different set of protocols.
 * @fires PeerStore#change:multiaddrs Emitted when a known peer has a different set of multiaddrs.
 * @fires PeerStore#change:pubkey Emitted emitted when a peer's public key is known.
 * @fires PeerStore#change:metadata Emitted when the known metadata of a peer change.
 */ class PeerStore extends EventEmitter {
    /**
   * Peer object
   *
   * @typedef {Object} Peer
   * @property {PeerId} id peer's peer-id instance.
   * @property {Address[]} addresses peer's addresses containing its multiaddrs and metadata.
   * @property {string[]} protocols peer's supported protocols.
   * @property {Map<string, Uint8Array>|undefined} metadata peer's metadata map.
   */ /**
   * Responsible for managing known peers, as well as their addresses, protocols and metadata.
   *
   * @param {object} options
   * @param {PeerId} options.peerId
   * @class
   */ constructor({ peerId  }){
        super();
        this._peerId = peerId;
        /**
     * AddressBook containing a map of peerIdStr to Address.
     */ this.addressBook = new AddressBook(this);
        /**
     * KeyBook containing a map of peerIdStr to their PeerId with public keys.
     */ this.keyBook = new KeyBook(this);
        /**
     * MetadataBook containing a map of peerIdStr to their metadata Map.
     */ this.metadataBook = new MetadataBook(this);
        /**
     * ProtoBook containing a map of peerIdStr to supported protocols.
     */ this.protoBook = new ProtoBook(this);
    }
    /**
   * Start the PeerStore.
   */ start() {}
    /**
   * Stop the PeerStore.
   */ stop() {}
    /**
   * Get all the stored information of every peer known.
   *
   * @returns {Map<string, Peer>}
   */ get peers() {
        const storedPeers = new Set([
            ...this.addressBook.data.keys(),
            ...this.keyBook.data.keys(),
            ...this.protoBook.data.keys(),
            ...this.metadataBook.data.keys()
        ]);
        // Remove self peer if present
        this._peerId && storedPeers.delete(this._peerId.toB58String());
        const peersData = new Map();
        storedPeers.forEach((idStr)=>{
            peersData.set(idStr, this.get(PeerId.createFromB58String(idStr)));
        });
        return peersData;
    }
    /**
   * Delete the information of the given peer in every book.
   *
   * @param {PeerId} peerId
   * @returns {boolean} true if found and removed
   */ delete(peerId) {
        const addressesDeleted = this.addressBook.delete(peerId);
        const keyDeleted = this.keyBook.delete(peerId);
        const protocolsDeleted = this.protoBook.delete(peerId);
        const metadataDeleted = this.metadataBook.delete(peerId);
        return addressesDeleted || keyDeleted || protocolsDeleted || metadataDeleted;
    }
    /**
   * Get the stored information of a given peer.
   *
   * @param {PeerId} peerId
   * @returns {Peer|undefined}
   */ get(peerId) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        const id = this.keyBook.data.get(peerId.toB58String());
        const addresses = this.addressBook.get(peerId);
        const metadata = this.metadataBook.get(peerId);
        const protocols = this.protoBook.get(peerId);
        if (!id && !addresses && !metadata && !protocols) return undefined;
        return {
            id: id || peerId,
            addresses: addresses || [],
            protocols: protocols || [],
            metadata: metadata
        };
    }
}
module.exports = PeerStore;

},{"err-code":"dUrrM","events":"1VQLm","peer-id":"etBKN","./address-book":"fIL2C","./key-book":"1575g","./metadata-book":"kvpZs","./proto-book":"ginCN","../errors":"cFlaw"}],"fIL2C":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:peer-store:address-book"), {
    error: debug("libp2p:peer-store:address-book:err")
});
const errcode = require("err-code");
const { Multiaddr  } = require("multiaddr");
const PeerId = require("peer-id");
const Book = require("./book");
const PeerRecord = require("../record/peer-record");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("../errors");
const Envelope = require("../record/envelope");
/**
 * @typedef {import('./')} PeerStore
 */ /**
 * @typedef {Object} Address
 * @property {Multiaddr} multiaddr peer multiaddr.
 * @property {boolean} isCertified obtained from a signed peer record.
 *
 * @typedef {Object} CertifiedRecord
 * @property {Uint8Array} raw raw envelope.
 * @property {number} seqNumber seq counter.
 *
 * @typedef {Object} Entry
 * @property {Address[]} addresses peer Addresses.
 * @property {CertifiedRecord} record certified peer record.
 */ /**
 * @extends {Book}
 */ class AddressBook extends Book {
    /**
   * The AddressBook is responsible for keeping the known multiaddrs of a peer.
   *
   * @class
   * @param {PeerStore} peerStore
   */ constructor(peerStore){
        /**
     * PeerStore Event emitter, used by the AddressBook to emit:
     * "peer" - emitted when a peer is discovered by the node.
     * "change:multiaddrs" - emitted when the known multiaddrs of a peer change.
     */ super({
            peerStore,
            eventName: "change:multiaddrs",
            eventProperty: "multiaddrs",
            eventTransformer: (data)=>{
                if (!data.addresses) return [];
                return data.addresses.map((/** @type {Address} */ address)=>address.multiaddr);
            }
        });
        /**
     * Map known peers to their known Address Entries.
     *
     * @type {Map<string, Entry>}
     */ this.data = new Map();
    }
    /**
   * ConsumePeerRecord adds addresses from a signed peer record contained in a record envelope.
   * This will return a boolean that indicates if the record was successfully processed and added
   * into the AddressBook.
   *
   * @param {Envelope} envelope
   * @returns {boolean}
   */ consumePeerRecord(envelope) {
        let peerRecord;
        try {
            peerRecord = PeerRecord.createFromProtobuf(envelope.payload);
        } catch (err) {
            log.error("invalid peer record received");
            return false;
        }
        // Verify peerId
        if (!peerRecord.peerId.equals(envelope.peerId)) {
            log("signing key does not match PeerId in the PeerRecord");
            return false;
        }
        // ensure the record has multiaddrs
        if (!peerRecord.multiaddrs || !peerRecord.multiaddrs.length) return false;
        const peerId = peerRecord.peerId;
        const id = peerId.toB58String();
        const entry = this.data.get(id) || {
            record: undefined
        };
        const storedRecord = entry.record;
        // ensure seq is greater than, or equal to, the last received
        if (storedRecord && storedRecord.seqNumber >= peerRecord.seqNumber) return false;
        const addresses = this._toAddresses(peerRecord.multiaddrs, true);
        // Replace unsigned addresses by the new ones from the record
        // TODO: Once we have ttls for the addresses, we should merge these in.
        this._setData(peerId, {
            addresses,
            record: {
                raw: envelope.marshal(),
                seqNumber: peerRecord.seqNumber
            }
        });
        log(`stored provided peer record for ${id}`);
        return true;
    }
    /**
   * Get the raw Envelope for a peer. Returns
   * undefined if no Envelope is found.
   *
   * @param {PeerId} peerId
   * @returns {Uint8Array|undefined}
   */ getRawEnvelope(peerId) {
        const entry = this.data.get(peerId.toB58String());
        if (!entry || !entry.record || !entry.record.raw) return undefined;
        return entry.record.raw;
    }
    /**
   * Get an Envelope containing a PeerRecord for the given peer.
   * Returns undefined if no record exists.
   *
   * @param {PeerId} peerId
   * @returns {Promise<Envelope|void>|undefined}
   */ getPeerRecord(peerId) {
        const raw = this.getRawEnvelope(peerId);
        if (!raw) return undefined;
        return Envelope.createFromProtobuf(raw);
    }
    /**
   * Set known multiaddrs of a provided peer.
   * This will replace previously stored multiaddrs, if available.
   * Replacing stored multiaddrs might result in losing obtained certified addresses.
   * If you are not sure, it's recommended to use `add` instead.
   *
   * @override
   * @param {PeerId} peerId
   * @param {Multiaddr[]} multiaddrs
   * @returns {AddressBook}
   */ set(peerId, multiaddrs) {
        if (!PeerId.isPeerId(peerId)) {
            log.error("peerId must be an instance of peer-id to store data");
            throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        }
        const addresses = this._toAddresses(multiaddrs);
        // Not replace multiaddrs
        if (!addresses.length) return this;
        const id = peerId.toB58String();
        const entry = this.data.get(id);
        // Already knows the peer
        if (entry && entry.addresses && entry.addresses.length === addresses.length) {
            const intersection = entry.addresses.filter((addr)=>addresses.some((newAddr)=>addr.multiaddr.equals(newAddr.multiaddr)));
            // Are new addresses equal to the old ones?
            // If yes, no changes needed!
            if (intersection.length === entry.addresses.length) {
                log(`the addresses provided to store are equal to the already stored for ${id}`);
                return this;
            }
        }
        this._setData(peerId, {
            addresses,
            record: entry && entry.record
        });
        log(`stored provided multiaddrs for ${id}`);
        // Notify the existance of a new peer
        if (!entry) this._ps.emit("peer", peerId);
        return this;
    }
    /**
   * Add known addresses of a provided peer.
   * If the peer is not known, it is set with the given addresses.
   *
   * @param {PeerId} peerId
   * @param {Multiaddr[]} multiaddrs
   * @returns {AddressBook}
   */ add(peerId, multiaddrs) {
        if (!PeerId.isPeerId(peerId)) {
            log.error("peerId must be an instance of peer-id to store data");
            throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        }
        const addresses = this._toAddresses(multiaddrs);
        const id = peerId.toB58String();
        // No addresses to be added
        if (!addresses.length) return this;
        const entry = this.data.get(id);
        if (entry && entry.addresses) {
            // Add recorded uniquely to the new array (Union)
            entry.addresses.forEach((addr)=>{
                if (!addresses.find((r)=>r.multiaddr.equals(addr.multiaddr))) addresses.push(addr);
            });
            // If the recorded length is equal to the new after the unique union
            // The content is the same, no need to update.
            if (entry.addresses.length === addresses.length) {
                log(`the addresses provided to store are already stored for ${id}`);
                return this;
            }
        }
        this._setData(peerId, {
            addresses,
            record: entry && entry.record
        });
        log(`added provided multiaddrs for ${id}`);
        // Notify the existance of a new peer
        if (!(entry && entry.addresses)) this._ps.emit("peer", peerId);
        return this;
    }
    /**
   * Get the known data of a provided peer.
   *
   * @override
   * @param {PeerId} peerId
   * @returns {Address[]|undefined}
   */ get(peerId) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        const entry = this.data.get(peerId.toB58String());
        return entry && entry.addresses ? [
            ...entry.addresses
        ] : undefined;
    }
    /**
   * Transforms received multiaddrs into Address.
   *
   * @private
   * @param {Multiaddr[]} multiaddrs
   * @param {boolean} [isCertified]
   * @returns {Address[]}
   */ _toAddresses(multiaddrs, isCertified = false) {
        if (!multiaddrs) {
            log.error("multiaddrs must be provided to store data");
            throw errcode(new Error("multiaddrs must be provided"), ERR_INVALID_PARAMETERS);
        }
        // create Address for each address
        /** @type {Address[]} */ const addresses = [];
        multiaddrs.forEach((addr)=>{
            if (!Multiaddr.isMultiaddr(addr)) {
                log.error(`multiaddr ${addr} must be an instance of multiaddr`);
                throw errcode(new Error(`multiaddr ${addr} must be an instance of multiaddr`), ERR_INVALID_PARAMETERS);
            }
            // Guarantee no replicates
            if (!addresses.find((a)=>a.multiaddr.equals(addr))) addresses.push({
                multiaddr: addr,
                isCertified
            });
        });
        return addresses;
    }
    /**
   * Get the known multiaddrs for a given peer. All returned multiaddrs
   * will include the encapsulated `PeerId` of the peer.
   * Returns `undefined` if there are no known multiaddrs for the given peer.
   *
   * @param {PeerId} peerId
   * @param {(addresses: Address[]) => Address[]} [addressSorter]
   * @returns {Multiaddr[]|undefined}
   */ getMultiaddrsForPeer(peerId, addressSorter = (ms)=>ms) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        const entry = this.data.get(peerId.toB58String());
        if (!entry || !entry.addresses) return undefined;
        return addressSorter(entry.addresses || []).map((address)=>{
            const multiaddr = address.multiaddr;
            const idString = multiaddr.getPeerId();
            if (idString && idString === peerId.toB58String()) return multiaddr;
            return multiaddr.encapsulate(`/p2p/${peerId.toB58String()}`);
        });
    }
}
module.exports = AddressBook;

},{"debug":"l0oUb","err-code":"dUrrM","multiaddr":"dOMJu","peer-id":"etBKN","./book":"gfipS","../record/peer-record":"c2J6v","../errors":"cFlaw","../record/envelope":"9BIql"}],"gfipS":[function(require,module,exports) {
"use strict";
const errcode = require("err-code");
const PeerId = require("peer-id");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("../errors");
/**
 * @param {any} data
 */ const passthrough = (data)=>data;
/**
 * @typedef {import('./')} PeerStore
 */ class Book {
    /**
   * The Book is the skeleton for the PeerStore books.
   *
   * @class
   * @param {Object} properties
   * @param {PeerStore} properties.peerStore - PeerStore instance.
   * @param {string} properties.eventName - Name of the event to emit by the PeerStore.
   * @param {string} properties.eventProperty - Name of the property to emit by the PeerStore.
   * @param {(data: any) => any[]} [properties.eventTransformer] - Transformer function of the provided data for being emitted.
   */ constructor({ peerStore , eventName , eventProperty , eventTransformer =passthrough  }){
        this._ps = peerStore;
        this.eventName = eventName;
        this.eventProperty = eventProperty;
        this.eventTransformer = eventTransformer;
        /**
     * Map known peers to their data.
     *
     * @type {Map<string, any[]|any>}
     */ this.data = new Map();
    }
    /**
   * Set known data of a provided peer.
   *
   * @param {PeerId} peerId
   * @param {any[]|any} data
   */ set(peerId, data) {
        throw errcode(new Error("set must be implemented by the subclass"), "ERR_NOT_IMPLEMENTED");
    }
    /**
   * Set data into the datastructure, persistence and emit it using the provided transformers.
   *
   * @protected
   * @param {PeerId} peerId - peerId of the data to store
   * @param {any} data - data to store.
   * @param {Object} [options] - storing options.
   * @param {boolean} [options.emit = true] - emit the provided data.
   * @returns {void}
   */ _setData(peerId, data, { emit =true  } = {}) {
        const b58key = peerId.toB58String();
        // Store data in memory
        this.data.set(b58key, data);
        // Emit event
        emit && this._emit(peerId, data);
    }
    /**
   * Emit data.
   *
   * @protected
   * @param {PeerId} peerId
   * @param {any} [data]
   */ _emit(peerId, data) {
        this._ps.emit(this.eventName, {
            peerId,
            [this.eventProperty]: this.eventTransformer(data)
        });
    }
    /**
   * Get the known data of a provided peer.
   * Returns `undefined` if there is no available data for the given peer.
   *
   * @param {PeerId} peerId
   * @returns {any[]|any|undefined}
   */ get(peerId) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        const rec = this.data.get(peerId.toB58String());
        // @ts-ignore
        return rec ? [
            ...rec
        ] : undefined;
    }
    /**
   * Deletes the provided peer from the book.
   *
   * @param {PeerId} peerId
   * @returns {boolean}
   */ delete(peerId) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        if (!this.data.delete(peerId.toB58String())) return false;
        this._emit(peerId, []);
        return true;
    }
}
module.exports = Book;

},{"err-code":"dUrrM","peer-id":"etBKN","../errors":"cFlaw"}],"1575g":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:peer-store:key-book"), {
    error: debug("libp2p:peer-store:key-book:err")
});
const errcode = require("err-code");
const PeerId = require("peer-id");
const Book = require("./book");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("../errors");
/**
 * @typedef {import('./')} PeerStore
 * @typedef {import('libp2p-crypto').PublicKey} PublicKey
 */ /**
 * @extends {Book}
 */ class KeyBook extends Book {
    /**
   * The KeyBook is responsible for keeping the known public keys of a peer.
   *
   * @class
   * @param {PeerStore} peerStore
   */ constructor(peerStore){
        super({
            peerStore,
            eventName: "change:pubkey",
            eventProperty: "pubkey",
            eventTransformer: (data)=>data.pubKey
        });
        /**
     * Map known peers to their known Public Key.
     *
     * @type {Map<string, PeerId>}
     */ this.data = new Map();
    }
    /**
   * Set the Peer public key.
   *
   * @override
   * @param {PeerId} peerId
   * @param {PublicKey} publicKey
   * @returns {KeyBook}
   */ set(peerId, publicKey) {
        if (!PeerId.isPeerId(peerId)) {
            log.error("peerId must be an instance of peer-id to store data");
            throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        }
        const id = peerId.toB58String();
        const recPeerId = this.data.get(id);
        // If no record available, and this is valid
        if (!recPeerId && publicKey) {
            // This might be unecessary, but we want to store the PeerId
            // to avoid an async operation when reconstructing the PeerId
            peerId.pubKey = publicKey;
            this._setData(peerId, peerId);
            log(`stored provided public key for ${id}`);
        }
        return this;
    }
    /**
   * Get Public key of the given PeerId, if stored.
   *
   * @override
   * @param {PeerId} peerId
   * @returns {PublicKey | undefined}
   */ get(peerId) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        const rec = this.data.get(peerId.toB58String());
        return rec ? rec.pubKey : undefined;
    }
}
module.exports = KeyBook;

},{"debug":"l0oUb","err-code":"dUrrM","peer-id":"etBKN","./book":"gfipS","../errors":"cFlaw"}],"kvpZs":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:peer-store:proto-book"), {
    error: debug("libp2p:peer-store:proto-book:err")
});
const errcode = require("err-code");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
const PeerId = require("peer-id");
const Book = require("./book");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("../errors");
/**
 * @typedef {import('./')} PeerStore
 */ /**
 * @extends {Book}
 *
 * @fires MetadataBook#change:metadata
 */ class MetadataBook extends Book {
    /**
   * The MetadataBook is responsible for keeping the known supported
   * protocols of a peer.
   *
   * @class
   * @param {PeerStore} peerStore
   */ constructor(peerStore){
        /**
     * PeerStore Event emitter, used by the MetadataBook to emit:
     * "change:metadata" - emitted when the known metadata of a peer change.
     */ super({
            peerStore,
            eventName: "change:metadata",
            eventProperty: "metadata"
        });
        /**
     * Map known peers to their known protocols.
     *
     * @type {Map<string, Map<string, Uint8Array>>}
     */ this.data = new Map();
    }
    /**
   * Set metadata key and value of a provided peer.
   *
   * @override
   * @param {PeerId} peerId
   * @param {string} key - metadata key
   * @param {Uint8Array} value - metadata value
   * @returns {MetadataBook}
   */ // @ts-ignore override with more then the parameters expected in Book
    set(peerId, key, value) {
        if (!PeerId.isPeerId(peerId)) {
            log.error("peerId must be an instance of peer-id to store data");
            throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        }
        if (typeof key !== "string" || !(value instanceof Uint8Array)) {
            log.error("valid key and value must be provided to store data");
            throw errcode(new Error("valid key and value must be provided"), ERR_INVALID_PARAMETERS);
        }
        this._setValue(peerId, key, value);
        return this;
    }
    /**
   * Set data into the datastructure
   *
   * @override
   * @param {PeerId} peerId
   * @param {string} key
   * @param {Uint8Array} value
   */ _setValue(peerId, key, value, { emit =true  } = {}) {
        const id = peerId.toB58String();
        const rec = this.data.get(id) || new Map();
        const recMap = rec.get(key);
        // Already exists and is equal
        if (recMap && uint8ArrayEquals(value, recMap)) {
            log(`the metadata provided to store is equal to the already stored for ${id} on ${key}`);
            return;
        }
        rec.set(key, value);
        this.data.set(id, rec);
        emit && this._emit(peerId, key);
    }
    /**
   * Get the known data of a provided peer.
   *
   * @param {PeerId} peerId
   * @returns {Map<string, Uint8Array>|undefined}
   */ get(peerId) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        return this.data.get(peerId.toB58String());
    }
    /**
   * Get specific metadata value, if it exists
   *
   * @param {PeerId} peerId
   * @param {string} key
   * @returns {Uint8Array | undefined}
   */ getValue(peerId, key) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        const rec = this.data.get(peerId.toB58String());
        return rec && rec.get(key);
    }
    /**
   * Deletes the provided peer from the book.
   *
   * @param {PeerId} peerId
   * @returns {boolean}
   */ delete(peerId) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        if (!this.data.delete(peerId.toB58String())) return false;
        this._emit(peerId);
        return true;
    }
    /**
   * Deletes the provided peer metadata key from the book.
   *
   * @param {PeerId} peerId
   * @param {string} key
   * @returns {boolean}
   */ deleteValue(peerId, key) {
        if (!PeerId.isPeerId(peerId)) throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        const rec = this.data.get(peerId.toB58String());
        if (!rec || !rec.delete(key)) return false;
        this._emit(peerId, key);
        return true;
    }
}
module.exports = MetadataBook;

},{"debug":"l0oUb","err-code":"dUrrM","uint8arrays/equals":"iZMnE","peer-id":"etBKN","./book":"gfipS","../errors":"cFlaw"}],"ginCN":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:peer-store:proto-book"), {
    error: debug("libp2p:peer-store:proto-book:err")
});
const errcode = require("err-code");
const PeerId = require("peer-id");
const Book = require("./book");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("../errors");
/**
 * @typedef {import('./')} PeerStore
 */ /**
 * @extends {Book}
 *
 * @fires ProtoBook#change:protocols
 */ class ProtoBook extends Book {
    /**
   * The ProtoBook is responsible for keeping the known supported
   * protocols of a peer.
   *
   * @class
   * @param {PeerStore} peerStore
   */ constructor(peerStore){
        /**
     * PeerStore Event emitter, used by the ProtoBook to emit:
     * "change:protocols" - emitted when the known protocols of a peer change.
     */ super({
            peerStore,
            eventName: "change:protocols",
            eventProperty: "protocols",
            eventTransformer: (data)=>Array.from(data)
        });
        /**
     * Map known peers to their known protocols.
     *
     * @type {Map<string, Set<string>>}
     */ this.data = new Map();
    }
    /**
   * Set known protocols of a provided peer.
   * If the peer was not known before, it will be added.
   *
   * @override
   * @param {PeerId} peerId
   * @param {string[]} protocols
   * @returns {ProtoBook}
   */ set(peerId, protocols) {
        if (!PeerId.isPeerId(peerId)) {
            log.error("peerId must be an instance of peer-id to store data");
            throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        }
        if (!protocols) {
            log.error("protocols must be provided to store data");
            throw errcode(new Error("protocols must be provided"), ERR_INVALID_PARAMETERS);
        }
        const id = peerId.toB58String();
        const recSet = this.data.get(id);
        const newSet = new Set(protocols);
        /**
     * @param {Set<string>} a
     * @param {Set<string>} b
     */ const isSetEqual = (a, b)=>a.size === b.size && [
                ...a
            ].every((value)=>b.has(value));
        // Already knows the peer and the recorded protocols are the same?
        // If yes, no changes needed!
        if (recSet && isSetEqual(recSet, newSet)) {
            log(`the protocols provided to store are equal to the already stored for ${id}`);
            return this;
        }
        this._setData(peerId, newSet);
        log(`stored provided protocols for ${id}`);
        return this;
    }
    /**
   * Adds known protocols of a provided peer.
   * If the peer was not known before, it will be added.
   *
   * @param {PeerId} peerId
   * @param {string[]} protocols
   * @returns {ProtoBook}
   */ add(peerId, protocols) {
        if (!PeerId.isPeerId(peerId)) {
            log.error("peerId must be an instance of peer-id to store data");
            throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        }
        if (!protocols) {
            log.error("protocols must be provided to store data");
            throw errcode(new Error("protocols must be provided"), ERR_INVALID_PARAMETERS);
        }
        const id = peerId.toB58String();
        const recSet = this.data.get(id) || new Set();
        const newSet = new Set([
            ...recSet,
            ...protocols
        ]) // Set Union
        ;
        // Any new protocol added?
        if (recSet.size === newSet.size) {
            log(`the protocols provided to store are already stored for ${id}`);
            return this;
        }
        this._setData(peerId, newSet);
        log(`added provided protocols for ${id}`);
        return this;
    }
    /**
   * Removes known protocols of a provided peer.
   * If the protocols did not exist before, nothing will be done.
   *
   * @param {PeerId} peerId
   * @param {string[]} protocols
   * @returns {ProtoBook}
   */ remove(peerId, protocols) {
        if (!PeerId.isPeerId(peerId)) {
            log.error("peerId must be an instance of peer-id to store data");
            throw errcode(new Error("peerId must be an instance of peer-id"), ERR_INVALID_PARAMETERS);
        }
        if (!protocols) {
            log.error("protocols must be provided to store data");
            throw errcode(new Error("protocols must be provided"), ERR_INVALID_PARAMETERS);
        }
        const id = peerId.toB58String();
        const recSet = this.data.get(id);
        if (recSet) {
            const newSet = new Set([
                ...recSet
            ].filter((p)=>!protocols.includes(p)));
            // Any protocol removed?
            if (recSet.size === newSet.size) return this;
            this._setData(peerId, newSet);
            log(`removed provided protocols for ${id}`);
        }
        return this;
    }
}
module.exports = ProtoBook;

},{"debug":"l0oUb","err-code":"dUrrM","peer-id":"etBKN","./book":"gfipS","../errors":"cFlaw"}],"9Nolq":[function(require,module,exports) {
"use strict";
// Pubsub adapter to keep API with handlers while not removed.
/**
 * @typedef {import('libp2p-interfaces/src/pubsub').InMessage} InMessage
 * @typedef {import('libp2p-interfaces/src/pubsub')} PubsubRouter
 */ /**
 * @param {{new(...args: any[]): PubsubRouter}} PubsubRouter
 * @param {import('.')} libp2p
 * @param {{ enabled: boolean; } & import(".").PubsubLocalOptions & import("libp2p-interfaces/src/pubsub").PubsubOptions} options
 */ function pubsubAdapter(PubsubRouter, libp2p, options) {
    /** @type {PubsubRouter & { _subscribeAdapter: PubsubRouter['subscribe'], _unsubscribeAdapter: PubsubRouter['unsubscribe'] }} */ // @ts-ignore we set the extra _subscribeAdapter and _unsubscribeAdapter properties afterwards
    const pubsub = new PubsubRouter(libp2p, options);
    pubsub._subscribeAdapter = pubsub.subscribe;
    pubsub._unsubscribeAdapter = pubsub.unsubscribe;
    /**
   * Subscribes to a given topic.
   *
   * @override
   * @param {string} topic
   * @param {(msg: InMessage) => void} [handler]
   * @returns {void}
   */ function subscribe(topic, handler) {
        // Bind provided handler
        handler && pubsub.on(topic, handler);
        pubsub._subscribeAdapter(topic);
    }
    /**
   * Unsubscribe from the given topic.
   *
   * @override
   * @param {string} topic
   * @param {(msg: InMessage) => void} [handler]
   * @returns {void}
   */ function unsubscribe(topic, handler) {
        if (!handler) pubsub.removeAllListeners(topic);
        else pubsub.removeListener(topic, handler);
        if (pubsub.listenerCount(topic) === 0) pubsub._unsubscribeAdapter(topic);
    }
    pubsub.subscribe = subscribe;
    pubsub.unsubscribe = unsubscribe;
    return pubsub;
}
module.exports = pubsubAdapter;

},{}],"bfYsk":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:persistent-peer-store"), {
    error: debug("libp2p:persistent-peer-store:err")
});
const { Key  } = require("interface-datastore");
const { Multiaddr  } = require("multiaddr");
const PeerId = require("peer-id");
const { base32  } = require("multiformats/bases/base32");
const PeerStore = require("..");
const { NAMESPACE_ADDRESS , NAMESPACE_COMMON , NAMESPACE_KEYS , NAMESPACE_METADATA , NAMESPACE_PROTOCOL  } = require("./consts");
const { Addresses  } = require("./pb/address-book");
const { Protocols  } = require("./pb/proto-book");
/**
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('../address-book.js').Address} Address
 */ /**
 * @typedef {Object} PersistentPeerStoreProperties
 * @property {PeerId} peerId
 * @property {import('interface-datastore').Datastore} datastore
 *
 * @typedef {Object} PersistentPeerStoreOptions
 * @property {number} [threshold = 5] - Number of dirty peers allowed before commit data.
 */ /**
 * Responsible for managing the persistence of data in the PeerStore.
 */ class PersistentPeerStore extends PeerStore {
    /**
   * @class
   * @param {PersistentPeerStoreProperties & PersistentPeerStoreOptions} properties
   */ constructor({ peerId , datastore , threshold =5  }){
        super({
            peerId
        });
        /**
     * Backend datastore used to persist data.
     */ this._datastore = datastore;
        /**
     * Peers modified after the latest data persisted.
     */ this._dirtyPeers = new Set();
        /**
     * Peers metadata changed mapping peer identifers to metadata changed.
     *
     * @type {Map<string, Set<string>>}
     */ this._dirtyMetadata = new Map();
        this.threshold = threshold;
        this._addDirtyPeer = this._addDirtyPeer.bind(this);
    }
    /**
   * Start Persistent PeerStore.
   *
   * @returns {Promise<void>}
   */ async start() {
        log("PeerStore is starting");
        // Handlers for dirty peers
        this.on("change:protocols", this._addDirtyPeer);
        this.on("change:multiaddrs", this._addDirtyPeer);
        this.on("change:pubkey", this._addDirtyPeerKey);
        this.on("change:metadata", this._addDirtyPeerMetadata);
        // Load data
        for await (const entry of this._datastore.query({
            prefix: NAMESPACE_COMMON
        }))await this._processDatastoreEntry(entry);
        log("PeerStore started");
    }
    /**
   * Stop Persistent PeerStore.
   *
   * @returns {Promise<void>}
   */ async stop() {
        log("PeerStore is stopping");
        this.removeAllListeners();
        await this._commitData();
        log("PeerStore stopped");
    }
    /**
   * Add modified peer to the dirty set
   *
   * @private
   * @param {Object} params
   * @param {PeerId} params.peerId
   */ _addDirtyPeer({ peerId  }) {
        const peerIdstr = peerId.toB58String();
        log("add dirty peer", peerIdstr);
        this._dirtyPeers.add(peerIdstr);
        if (this._dirtyPeers.size >= this.threshold) // Commit current data
        this._commitData().catch((err)=>{
            log.error("error committing data", err);
        });
    }
    /**
   * Add modified peer key to the dirty set
   *
   * @private
   * @param {Object} params
   * @param {PeerId} params.peerId
   */ _addDirtyPeerKey({ peerId  }) {
        // Not add if inline key available
        if (peerId.hasInlinePublicKey()) return;
        const peerIdstr = peerId.toB58String();
        log("add dirty peer key", peerIdstr);
        this._dirtyPeers.add(peerIdstr);
        if (this._dirtyPeers.size >= this.threshold) // Commit current data
        this._commitData().catch((err)=>{
            log.error("error committing data", err);
        });
    }
    /**
   * Add modified metadata peer to the set.
   *
   * @private
   * @param {Object} params
   * @param {PeerId} params.peerId
   * @param {string} params.metadata
   */ _addDirtyPeerMetadata({ peerId , metadata  }) {
        const peerIdstr = peerId.toB58String();
        log("add dirty metadata peer", peerIdstr);
        this._dirtyPeers.add(peerIdstr);
        // Add dirty metadata key
        const mData = this._dirtyMetadata.get(peerIdstr) || new Set();
        mData.add(metadata);
        this._dirtyMetadata.set(peerIdstr, mData);
        if (this._dirtyPeers.size >= this.threshold) // Commit current data
        this._commitData().catch((err)=>{
            log.error("error committing data", err);
        });
    }
    /**
   * Add all the peers current data to a datastore batch and commit it.
   *
   * @private
   * @returns {Promise<void>}
   */ async _commitData() {
        const commitPeers = Array.from(this._dirtyPeers);
        if (!commitPeers.length) return;
        // Clear Dirty Peers set
        this._dirtyPeers.clear();
        log("create batch commit");
        const batch = this._datastore.batch();
        for (const peerIdStr of commitPeers){
            // PeerId
            const peerId = this.keyBook.data.get(peerIdStr) || PeerId.createFromB58String(peerIdStr);
            // Address Book
            this._batchAddressBook(peerId, batch);
            // Key Book
            !peerId.hasInlinePublicKey() && this._batchKeyBook(peerId, batch);
            // Metadata Book
            this._batchMetadataBook(peerId, batch);
            // Proto Book
            this._batchProtoBook(peerId, batch);
        }
        await batch.commit();
        log("batch committed");
    }
    /**
   * Add address book data of the peer to the batch.
   *
   * @private
   * @param {PeerId} peerId
   * @param {Batch} batch
   */ _batchAddressBook(peerId, batch) {
        const b32key = peerId.toString();
        const key = new Key(`${NAMESPACE_ADDRESS}${b32key}`);
        const entry = this.addressBook.data.get(peerId.toB58String());
        try {
            // Deleted from the book
            if (!entry) {
                batch.delete(key);
                return;
            }
            const encodedData = Addresses.encode({
                addrs: entry.addresses.map((address)=>({
                        multiaddr: address.multiaddr.bytes,
                        isCertified: address.isCertified
                    })),
                certifiedRecord: entry.record ? {
                    seq: entry.record.seqNumber,
                    raw: entry.record.raw
                } : undefined
            }).finish();
            batch.put(key, encodedData);
        } catch (err) {
            log.error(err);
        }
    }
    /**
   * Add Key book data of the peer to the batch.
   *
   * @private
   * @param {PeerId} peerId
   * @param {Batch} batch
   */ _batchKeyBook(peerId, batch) {
        const b32key = peerId.toString();
        const key = new Key(`${NAMESPACE_KEYS}${b32key}`);
        try {
            // Deleted from the book
            if (!peerId.pubKey) {
                batch.delete(key);
                return;
            }
            const encodedData = peerId.marshalPubKey();
            batch.put(key, encodedData);
        } catch (err) {
            log.error(err);
        }
    }
    /**
   * Add metadata book data of the peer to the batch.
   *
   * @private
   * @param {PeerId} peerId
   * @param {Batch} batch
   */ _batchMetadataBook(peerId, batch) {
        const b32key = peerId.toString();
        const dirtyMetada = this._dirtyMetadata.get(peerId.toB58String()) || [];
        try {
            dirtyMetada.forEach((/** @type {string} */ dirtyKey)=>{
                const key = new Key(`${NAMESPACE_METADATA}${b32key}/${dirtyKey}`);
                const dirtyValue = this.metadataBook.getValue(peerId, dirtyKey);
                if (dirtyValue) batch.put(key, dirtyValue);
                else batch.delete(key);
            });
        } catch (err) {
            log.error(err);
        }
    }
    /**
   * Add proto book data of the peer to the batch.
   *
   * @private
   * @param {PeerId} peerId
   * @param {Batch} batch
   */ _batchProtoBook(peerId, batch) {
        const b32key = peerId.toString();
        const key = new Key(`${NAMESPACE_PROTOCOL}${b32key}`);
        const protocols = this.protoBook.get(peerId);
        try {
            // Deleted from the book
            if (!protocols) {
                batch.delete(key);
                return;
            }
            const encodedData = Protocols.encode({
                protocols
            }).finish();
            batch.put(key, encodedData);
        } catch (err) {
            log.error(err);
        }
    }
    /**
   * Process datastore entry and add its data to the correct book.
   *
   * @private
   * @param {Object} params
   * @param {Key} params.key - datastore key
   * @param {Uint8Array} params.value - datastore value stored
   * @returns {Promise<void>}
   */ async _processDatastoreEntry({ key , value  }) {
        try {
            const keyParts = key.toString().split("/");
            const peerId = PeerId.createFromBytes(base32.decode(keyParts[3]));
            let decoded;
            switch(keyParts[2]){
                case "addrs":
                    decoded = Addresses.decode(value);
                    // @ts-ignore protected function
                    this.addressBook._setData(peerId, {
                        addresses: decoded.addrs.map((address)=>({
                                multiaddr: new Multiaddr(address.multiaddr),
                                isCertified: Boolean(address.isCertified)
                            })),
                        record: decoded.certifiedRecord ? {
                            raw: decoded.certifiedRecord.raw,
                            seqNumber: decoded.certifiedRecord.seq
                        } : undefined
                    }, {
                        emit: false
                    });
                    break;
                case "keys":
                    decoded = await PeerId.createFromPubKey(value);
                    // @ts-ignore protected function
                    this.keyBook._setData(decoded, decoded, {
                        emit: false
                    });
                    break;
                case "metadata":
                    this.metadataBook._setValue(peerId, keyParts[4], value, {
                        emit: false
                    });
                    break;
                case "protos":
                    decoded = Protocols.decode(value);
                    // @ts-ignore protected function
                    this.protoBook._setData(peerId, new Set(decoded.protocols), {
                        emit: false
                    });
                    break;
                default:
                    log("invalid data persisted for: ", key.toString());
            }
        } catch (err) {
            log.error(err);
        }
    }
}
module.exports = PersistentPeerStore;

},{"debug":"l0oUb","interface-datastore":"ijjFd","multiaddr":"dOMJu","peer-id":"etBKN","multiformats/bases/base32":"apmz1","..":"j2dY0","./consts":"ahbfD","./pb/address-book":"dDqyO","./pb/proto-book":"8HuYw"}],"ahbfD":[function(require,module,exports) {
"use strict";
module.exports.NAMESPACE_COMMON = "/peers/";
// /peers/protos/<b32 peer id no padding>
module.exports.NAMESPACE_ADDRESS = "/peers/addrs/";
// /peers/keys/<b32 peer id no padding>
module.exports.NAMESPACE_KEYS = "/peers/keys/";
// /peers/metadata/<b32 peer id no padding>/<key>
module.exports.NAMESPACE_METADATA = "/peers/metadata/";
// /peers/addrs/<b32 peer id no padding>
module.exports.NAMESPACE_PROTOCOL = "/peers/protos/";

},{}],"dDqyO":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-address-book"] || ($protobuf.roots["libp2p-address-book"] = {});
$root.Addresses = function() {
    /**
     * Properties of an Addresses.
     * @exports IAddresses
     * @interface IAddresses
     * @property {Array.<Addresses.IAddress>|null} [addrs] Addresses addrs
     * @property {Addresses.ICertifiedRecord|null} [certifiedRecord] Addresses certifiedRecord
     */ /**
     * Constructs a new Addresses.
     * @exports Addresses
     * @classdesc Represents an Addresses.
     * @implements IAddresses
     * @constructor
     * @param {IAddresses=} [p] Properties to set
     */ function Addresses(p) {
        this.addrs = [];
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * Addresses addrs.
     * @member {Array.<Addresses.IAddress>} addrs
     * @memberof Addresses
     * @instance
     */ Addresses.prototype.addrs = $util.emptyArray;
    /**
     * Addresses certifiedRecord.
     * @member {Addresses.ICertifiedRecord|null|undefined} certifiedRecord
     * @memberof Addresses
     * @instance
     */ Addresses.prototype.certifiedRecord = null;
    /**
     * Encodes the specified Addresses message. Does not implicitly {@link Addresses.verify|verify} messages.
     * @function encode
     * @memberof Addresses
     * @static
     * @param {IAddresses} m Addresses message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ Addresses.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.addrs != null && m.addrs.length) for(var i = 0; i < m.addrs.length; ++i)$root.Addresses.Address.encode(m.addrs[i], w.uint32(10).fork()).ldelim();
        if (m.certifiedRecord != null && Object.hasOwnProperty.call(m, "certifiedRecord")) $root.Addresses.CertifiedRecord.encode(m.certifiedRecord, w.uint32(18).fork()).ldelim();
        return w;
    };
    /**
     * Decodes an Addresses message from the specified reader or buffer.
     * @function decode
     * @memberof Addresses
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {Addresses} Addresses
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ Addresses.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    if (!(m.addrs && m.addrs.length)) m.addrs = [];
                    m.addrs.push($root.Addresses.Address.decode(r, r.uint32()));
                    break;
                case 2:
                    m.certifiedRecord = $root.Addresses.CertifiedRecord.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates an Addresses message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Addresses
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {Addresses} Addresses
     */ Addresses.fromObject = function fromObject(d) {
        if (d instanceof $root.Addresses) return d;
        var m = new $root.Addresses();
        if (d.addrs) {
            if (!Array.isArray(d.addrs)) throw TypeError(".Addresses.addrs: array expected");
            m.addrs = [];
            for(var i = 0; i < d.addrs.length; ++i){
                if (typeof d.addrs[i] !== "object") throw TypeError(".Addresses.addrs: object expected");
                m.addrs[i] = $root.Addresses.Address.fromObject(d.addrs[i]);
            }
        }
        if (d.certifiedRecord != null) {
            if (typeof d.certifiedRecord !== "object") throw TypeError(".Addresses.certifiedRecord: object expected");
            m.certifiedRecord = $root.Addresses.CertifiedRecord.fromObject(d.certifiedRecord);
        }
        return m;
    };
    /**
     * Creates a plain object from an Addresses message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Addresses
     * @static
     * @param {Addresses} m Addresses
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ Addresses.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.arrays || o.defaults) d.addrs = [];
        if (o.defaults) d.certifiedRecord = null;
        if (m.addrs && m.addrs.length) {
            d.addrs = [];
            for(var j = 0; j < m.addrs.length; ++j)d.addrs[j] = $root.Addresses.Address.toObject(m.addrs[j], o);
        }
        if (m.certifiedRecord != null && m.hasOwnProperty("certifiedRecord")) d.certifiedRecord = $root.Addresses.CertifiedRecord.toObject(m.certifiedRecord, o);
        return d;
    };
    /**
     * Converts this Addresses to JSON.
     * @function toJSON
     * @memberof Addresses
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ Addresses.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    Addresses.Address = function() {
        /**
         * Properties of an Address.
         * @memberof Addresses
         * @interface IAddress
         * @property {Uint8Array|null} [multiaddr] Address multiaddr
         * @property {boolean|null} [isCertified] Address isCertified
         */ /**
         * Constructs a new Address.
         * @memberof Addresses
         * @classdesc Represents an Address.
         * @implements IAddress
         * @constructor
         * @param {Addresses.IAddress=} [p] Properties to set
         */ function Address(p) {
            if (p) {
                for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
        }
        /**
         * Address multiaddr.
         * @member {Uint8Array} multiaddr
         * @memberof Addresses.Address
         * @instance
         */ Address.prototype.multiaddr = $util.newBuffer([]);
        /**
         * Address isCertified.
         * @member {boolean} isCertified
         * @memberof Addresses.Address
         * @instance
         */ Address.prototype.isCertified = false;
        /**
         * Encodes the specified Address message. Does not implicitly {@link Addresses.Address.verify|verify} messages.
         * @function encode
         * @memberof Addresses.Address
         * @static
         * @param {Addresses.IAddress} m Address message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */ Address.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.multiaddr != null && Object.hasOwnProperty.call(m, "multiaddr")) w.uint32(10).bytes(m.multiaddr);
            if (m.isCertified != null && Object.hasOwnProperty.call(m, "isCertified")) w.uint32(16).bool(m.isCertified);
            return w;
        };
        /**
         * Decodes an Address message from the specified reader or buffer.
         * @function decode
         * @memberof Addresses.Address
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {Addresses.Address} Address
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */ Address.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.Address();
            while(r.pos < c){
                var t = r.uint32();
                switch(t >>> 3){
                    case 1:
                        m.multiaddr = r.bytes();
                        break;
                    case 2:
                        m.isCertified = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };
        /**
         * Creates an Address message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Addresses.Address
         * @static
         * @param {Object.<string,*>} d Plain object
         * @returns {Addresses.Address} Address
         */ Address.fromObject = function fromObject(d) {
            if (d instanceof $root.Addresses.Address) return d;
            var m = new $root.Addresses.Address();
            if (d.multiaddr != null) {
                if (typeof d.multiaddr === "string") $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);
                else if (d.multiaddr.length) m.multiaddr = d.multiaddr;
            }
            if (d.isCertified != null) m.isCertified = Boolean(d.isCertified);
            return m;
        };
        /**
         * Creates a plain object from an Address message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Addresses.Address
         * @static
         * @param {Addresses.Address} m Address
         * @param {$protobuf.IConversionOptions} [o] Conversion options
         * @returns {Object.<string,*>} Plain object
         */ Address.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};
            if (o.defaults) {
                if (o.bytes === String) d.multiaddr = "";
                else {
                    d.multiaddr = [];
                    if (o.bytes !== Array) d.multiaddr = $util.newBuffer(d.multiaddr);
                }
                d.isCertified = false;
            }
            if (m.multiaddr != null && m.hasOwnProperty("multiaddr")) d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;
            if (m.isCertified != null && m.hasOwnProperty("isCertified")) d.isCertified = m.isCertified;
            return d;
        };
        /**
         * Converts this Address to JSON.
         * @function toJSON
         * @memberof Addresses.Address
         * @instance
         * @returns {Object.<string,*>} JSON object
         */ Address.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Address;
    }();
    Addresses.CertifiedRecord = function() {
        /**
         * Properties of a CertifiedRecord.
         * @memberof Addresses
         * @interface ICertifiedRecord
         * @property {number|null} [seq] CertifiedRecord seq
         * @property {Uint8Array|null} [raw] CertifiedRecord raw
         */ /**
         * Constructs a new CertifiedRecord.
         * @memberof Addresses
         * @classdesc Represents a CertifiedRecord.
         * @implements ICertifiedRecord
         * @constructor
         * @param {Addresses.ICertifiedRecord=} [p] Properties to set
         */ function CertifiedRecord(p) {
            if (p) {
                for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
        }
        /**
         * CertifiedRecord seq.
         * @member {number} seq
         * @memberof Addresses.CertifiedRecord
         * @instance
         */ CertifiedRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
        /**
         * CertifiedRecord raw.
         * @member {Uint8Array} raw
         * @memberof Addresses.CertifiedRecord
         * @instance
         */ CertifiedRecord.prototype.raw = $util.newBuffer([]);
        /**
         * Encodes the specified CertifiedRecord message. Does not implicitly {@link Addresses.CertifiedRecord.verify|verify} messages.
         * @function encode
         * @memberof Addresses.CertifiedRecord
         * @static
         * @param {Addresses.ICertifiedRecord} m CertifiedRecord message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */ CertifiedRecord.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.seq != null && Object.hasOwnProperty.call(m, "seq")) w.uint32(8).uint64(m.seq);
            if (m.raw != null && Object.hasOwnProperty.call(m, "raw")) w.uint32(18).bytes(m.raw);
            return w;
        };
        /**
         * Decodes a CertifiedRecord message from the specified reader or buffer.
         * @function decode
         * @memberof Addresses.CertifiedRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {Addresses.CertifiedRecord} CertifiedRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */ CertifiedRecord.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.CertifiedRecord();
            while(r.pos < c){
                var t = r.uint32();
                switch(t >>> 3){
                    case 1:
                        m.seq = r.uint64();
                        break;
                    case 2:
                        m.raw = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };
        /**
         * Creates a CertifiedRecord message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Addresses.CertifiedRecord
         * @static
         * @param {Object.<string,*>} d Plain object
         * @returns {Addresses.CertifiedRecord} CertifiedRecord
         */ CertifiedRecord.fromObject = function fromObject(d) {
            if (d instanceof $root.Addresses.CertifiedRecord) return d;
            var m = new $root.Addresses.CertifiedRecord();
            if (d.seq != null) {
                if ($util.Long) (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;
                else if (typeof d.seq === "string") m.seq = parseInt(d.seq, 10);
                else if (typeof d.seq === "number") m.seq = d.seq;
                else if (typeof d.seq === "object") m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);
            }
            if (d.raw != null) {
                if (typeof d.raw === "string") $util.base64.decode(d.raw, m.raw = $util.newBuffer($util.base64.length(d.raw)), 0);
                else if (d.raw.length) m.raw = d.raw;
            }
            return m;
        };
        /**
         * Creates a plain object from a CertifiedRecord message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Addresses.CertifiedRecord
         * @static
         * @param {Addresses.CertifiedRecord} m CertifiedRecord
         * @param {$protobuf.IConversionOptions} [o] Conversion options
         * @returns {Object.<string,*>} Plain object
         */ CertifiedRecord.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};
            if (o.defaults) {
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else d.seq = o.longs === String ? "0" : 0;
                if (o.bytes === String) d.raw = "";
                else {
                    d.raw = [];
                    if (o.bytes !== Array) d.raw = $util.newBuffer(d.raw);
                }
            }
            if (m.seq != null && m.hasOwnProperty("seq")) {
                if (typeof m.seq === "number") d.seq = o.longs === String ? String(m.seq) : m.seq;
                else d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;
            }
            if (m.raw != null && m.hasOwnProperty("raw")) d.raw = o.bytes === String ? $util.base64.encode(m.raw, 0, m.raw.length) : o.bytes === Array ? Array.prototype.slice.call(m.raw) : m.raw;
            return d;
        };
        /**
         * Converts this CertifiedRecord to JSON.
         * @function toJSON
         * @memberof Addresses.CertifiedRecord
         * @instance
         * @returns {Object.<string,*>} JSON object
         */ CertifiedRecord.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CertifiedRecord;
    }();
    return Addresses;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"8HuYw":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-proto-book"] || ($protobuf.roots["libp2p-proto-book"] = {});
$root.Protocols = function() {
    /**
     * Properties of a Protocols.
     * @exports IProtocols
     * @interface IProtocols
     * @property {Array.<string>|null} [protocols] Protocols protocols
     */ /**
     * Constructs a new Protocols.
     * @exports Protocols
     * @classdesc Represents a Protocols.
     * @implements IProtocols
     * @constructor
     * @param {IProtocols=} [p] Properties to set
     */ function Protocols(p) {
        this.protocols = [];
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * Protocols protocols.
     * @member {Array.<string>} protocols
     * @memberof Protocols
     * @instance
     */ Protocols.prototype.protocols = $util.emptyArray;
    /**
     * Encodes the specified Protocols message. Does not implicitly {@link Protocols.verify|verify} messages.
     * @function encode
     * @memberof Protocols
     * @static
     * @param {IProtocols} m Protocols message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ Protocols.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.protocols != null && m.protocols.length) for(var i = 0; i < m.protocols.length; ++i)w.uint32(10).string(m.protocols[i]);
        return w;
    };
    /**
     * Decodes a Protocols message from the specified reader or buffer.
     * @function decode
     * @memberof Protocols
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {Protocols} Protocols
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ Protocols.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Protocols();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    if (!(m.protocols && m.protocols.length)) m.protocols = [];
                    m.protocols.push(r.string());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates a Protocols message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Protocols
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {Protocols} Protocols
     */ Protocols.fromObject = function fromObject(d) {
        if (d instanceof $root.Protocols) return d;
        var m = new $root.Protocols();
        if (d.protocols) {
            if (!Array.isArray(d.protocols)) throw TypeError(".Protocols.protocols: array expected");
            m.protocols = [];
            for(var i = 0; i < d.protocols.length; ++i)m.protocols[i] = String(d.protocols[i]);
        }
        return m;
    };
    /**
     * Creates a plain object from a Protocols message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Protocols
     * @static
     * @param {Protocols} m Protocols
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ Protocols.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.arrays || o.defaults) d.protocols = [];
        if (m.protocols && m.protocols.length) {
            d.protocols = [];
            for(var j = 0; j < m.protocols.length; ++j)d.protocols[j] = m.protocols[j];
        }
        return d;
    };
    /**
     * Converts this Protocols to JSON.
     * @function toJSON
     * @memberof Protocols
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ Protocols.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Protocols;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"24BF8":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:registrar"), {
    error: debug("libp2p:registrar:err")
});
const errcode = require("err-code");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("./errors");
const Topology = require("libp2p-interfaces/src/topology");
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('./peer-store')} PeerStore
 * @typedef {import('./connection-manager')} ConnectionManager
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('./').HandlerProps} HandlerProps
 */ /**
 *
 */ /**
 * Responsible for notifying registered protocols of events in the network.
 */ class Registrar {
    /**
   * @param {Object} props
   * @param {PeerStore} props.peerStore
   * @param {ConnectionManager} props.connectionManager
   * @class
   */ constructor({ peerStore , connectionManager  }){
        // Used on topology to listen for protocol changes
        this.peerStore = peerStore;
        this.connectionManager = connectionManager;
        /**
     * Map of topologies
     *
     * @type {Map<string, Topology>}
     */ this.topologies = new Map();
        /** @type {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void} */ // @ts-ignore handle is not optional
        this._handle = undefined;
        this._onDisconnect = this._onDisconnect.bind(this);
        this.connectionManager.on("peer:disconnect", this._onDisconnect);
    }
    /**
   * @returns {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void}
   */ get handle() {
        return this._handle;
    }
    /**
   * @param {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void} handle
   */ set handle(handle) {
        this._handle = handle;
    }
    /**
   * Get a connection with a peer.
   *
   * @param {PeerId} peerId
   * @returns {Connection | null}
   */ getConnection(peerId) {
        return this.connectionManager.get(peerId);
    }
    /**
   * Register handlers for a set of multicodecs given
   *
   * @param {Topology} topology - protocol topology
   * @returns {string} registrar identifier
   */ register(topology) {
        if (!Topology.isTopology(topology)) {
            log.error("topology must be an instance of interfaces/topology");
            throw errcode(new Error("topology must be an instance of interfaces/topology"), ERR_INVALID_PARAMETERS);
        }
        // Create topology
        const id = (Math.random() * 1e9).toString(36) + Date.now();
        this.topologies.set(id, topology);
        // Set registrar
        topology.registrar = this;
        return id;
    }
    /**
   * Unregister topology.
   *
   * @param {string} id - registrar identifier
   * @returns {boolean} unregistered successfully
   */ unregister(id) {
        return this.topologies.delete(id);
    }
    /**
   * Remove a disconnected peer from the record
   *
   * @param {Connection} connection
   * @returns {void}
   */ _onDisconnect(connection) {
        for (const [, topology] of this.topologies)topology.disconnect(connection.remotePeer);
    }
}
module.exports = Registrar;

},{"debug":"l0oUb","err-code":"dUrrM","./errors":"cFlaw","libp2p-interfaces/src/topology":"2JOOS"}],"3BeXr":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:ping"), {
    error: debug("libp2p:ping:err")
});
const errCode = require("err-code");
const crypto = require("libp2p-crypto");
const { pipe  } = require("it-pipe");
// @ts-ignore it-buffer has no types exported
const { toBuffer  } = require("it-buffer");
const { collect , take  } = require("streaming-iterables");
const { equals  } = require("uint8arrays/equals");
const { PROTOCOL_NAME , PING_LENGTH , PROTOCOL_VERSION  } = require("./constants");
/**
 * @typedef {import('../')} Libp2p
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 */ /**
 * Ping a given peer and wait for its response, getting the operation latency.
 *
 * @param {Libp2p} node
 * @param {PeerId|Multiaddr} peer
 * @returns {Promise<number>}
 */ async function ping(node, peer) {
    const protocol = `/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`;
    // @ts-ignore multiaddr might not have toB58String
    log("dialing %s to %s", protocol, peer.toB58String ? peer.toB58String() : peer);
    const connection = await node.dial(peer);
    const { stream: stream1  } = await connection.newStream(protocol);
    const start = Date.now();
    const data = crypto.randomBytes(PING_LENGTH);
    const [result] = await pipe([
        data
    ], stream1, (/** @type {MuxedStream} */ stream)=>take(1, stream), toBuffer, collect);
    const end = Date.now();
    if (!equals(data, result)) throw errCode(new Error("Received wrong ping ack"), "ERR_WRONG_PING_ACK");
    return end - start;
}
/**
 * Subscribe ping protocol handler.
 *
 * @param {Libp2p} node
 */ function mount(node) {
    node.handle(`/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`, ({ stream  })=>pipe(stream, stream));
}
/**
 * Unsubscribe ping protocol handler.
 *
 * @param {Libp2p} node
 */ function unmount(node) {
    node.unhandle(`/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`);
}
exports = module.exports = ping;
exports.mount = mount;
exports.unmount = unmount;

},{"debug":"l0oUb","err-code":"dUrrM","libp2p-crypto":"djNY1","it-pipe":"jkWle","it-buffer":"dHO1t","streaming-iterables":"lbfQq","uint8arrays/equals":"iZMnE","./constants":"7PBcK"}],"dHO1t":[function(require,module,exports) {
"use strict";
const { Buffer  } = require("buffer");
const BufferList = require("bl/BufferList");
module.exports = async function*(source) {
    for await (const b of source){
        if (Buffer.isBuffer(b)) yield b;
        else if (BufferList.isBufferList(b)) yield b.slice();
        else yield Buffer.from(b);
    }
};
module.exports.toBuffer = module.exports;
module.exports.toList = async function*(source) {
    for await (const b of source){
        if (Buffer.isBuffer(b)) yield new BufferList().append(b);
        else if (BufferList.isBufferList(b)) yield b;
        else yield new BufferList().append(Buffer.from(b));
    }
};

},{"buffer":"fCgem","bl/BufferList":"cf0Az"}],"7PBcK":[function(require,module,exports) {
"use strict";
module.exports = {
    PROTOCOL: "/ipfs/ping/1.0.0",
    PING_LENGTH: 32,
    PROTOCOL_VERSION: "1.0.0",
    PROTOCOL_NAME: "ping"
};

},{}],"b5qsB":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:identify"), {
    error: debug("libp2p:identify:err")
});
const errCode = require("err-code");
const lp = require("it-length-prefixed");
const { pipe  } = require("it-pipe");
const { collect , take , consume  } = require("streaming-iterables");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const PeerId = require("peer-id");
const { Multiaddr  } = require("multiaddr");
// @ts-ignore it-buffer does not have types
const { toBuffer  } = require("it-buffer");
const Message = require("./message");
const Envelope = require("../record/envelope");
const PeerRecord = require("../record/peer-record");
const { MULTICODEC_IDENTIFY , MULTICODEC_IDENTIFY_PUSH , IDENTIFY_PROTOCOL_VERSION , MULTICODEC_IDENTIFY_PROTOCOL_NAME , MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME , MULTICODEC_IDENTIFY_PROTOCOL_VERSION , MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION  } = require("./consts");
const { codes  } = require("../errors");
/**
 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 */ /**
 * @typedef {Object} HostProperties
 * @property {string} agentVersion
 */ class IdentifyService {
    /**
   * @param {import('../')} libp2p
   */ static getProtocolStr(libp2p) {
        return {
            identifyProtocolStr: `/${libp2p._config.protocolPrefix}/${MULTICODEC_IDENTIFY_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PROTOCOL_VERSION}`,
            identifyPushProtocolStr: `/${libp2p._config.protocolPrefix}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION}`
        };
    }
    /**
   * @class
   * @param {Object} options
   * @param {import('../')} options.libp2p
   */ constructor({ libp2p  }){
        this._libp2p = libp2p;
        this.peerStore = libp2p.peerStore;
        this.addressManager = libp2p.addressManager;
        this.connectionManager = libp2p.connectionManager;
        this.peerId = libp2p.peerId;
        this.handleMessage = this.handleMessage.bind(this);
        const protocolStr = IdentifyService.getProtocolStr(libp2p);
        this.identifyProtocolStr = protocolStr.identifyProtocolStr;
        this.identifyPushProtocolStr = protocolStr.identifyPushProtocolStr;
        // Store self host metadata
        this._host = {
            protocolVersion: `${libp2p._config.protocolPrefix}/${IDENTIFY_PROTOCOL_VERSION}`,
            ...libp2p._options.host
        };
        this.peerStore.metadataBook.set(this.peerId, "AgentVersion", uint8ArrayFromString(this._host.agentVersion));
        this.peerStore.metadataBook.set(this.peerId, "ProtocolVersion", uint8ArrayFromString(this._host.protocolVersion));
        // When a new connection happens, trigger identify
        this.connectionManager.on("peer:connect", (connection)=>{
            this.identify(connection).catch(log.error);
        });
        // When self multiaddrs change, trigger identify-push
        this.peerStore.on("change:multiaddrs", ({ peerId  })=>{
            if (peerId.toString() === this.peerId.toString()) this.pushToPeerStore();
        });
        // When self protocols change, trigger identify-push
        this.peerStore.on("change:protocols", ({ peerId  })=>{
            if (peerId.toString() === this.peerId.toString()) this.pushToPeerStore();
        });
    }
    /**
   * Send an Identify Push update to the list of connections
   *
   * @param {Connection[]} connections
   * @returns {Promise<void[]>}
   */ async push(connections) {
        const signedPeerRecord = await this.peerStore.addressBook.getRawEnvelope(this.peerId);
        const listenAddrs = this._libp2p.multiaddrs.map((ma)=>ma.bytes);
        const protocols = this.peerStore.protoBook.get(this.peerId) || [];
        const pushes = connections.map(async (connection)=>{
            try {
                const { stream  } = await connection.newStream(this.identifyPushProtocolStr);
                await pipe([
                    Message.Identify.encode({
                        listenAddrs,
                        signedPeerRecord,
                        protocols
                    }).finish()
                ], lp.encode(), stream, consume);
            } catch (err) {
                // Just log errors
                log.error("could not push identify update to peer", err);
            }
        });
        return Promise.all(pushes);
    }
    /**
   * Calls `push` for all peers in the `peerStore` that are connected
   *
   * @returns {void}
   */ pushToPeerStore() {
        // Do not try to push if libp2p node is not running
        if (!this._libp2p.isStarted()) return;
        const connections = [];
        let connection;
        for (const peer of this.peerStore.peers.values())if (peer.protocols.includes(this.identifyPushProtocolStr) && (connection = this.connectionManager.get(peer.id))) connections.push(connection);
        this.push(connections);
    }
    /**
   * Requests the `Identify` message from peer associated with the given `connection`.
   * If the identified peer does not match the `PeerId` associated with the connection,
   * an error will be thrown.
   *
   * @async
   * @param {Connection} connection
   * @returns {Promise<void>}
   */ async identify(connection) {
        const { stream  } = await connection.newStream(this.identifyProtocolStr);
        const [data] = await pipe([], stream, lp.decode(), take(1), toBuffer, collect);
        if (!data) throw errCode(new Error("No data could be retrieved"), codes.ERR_CONNECTION_ENDED);
        let message;
        try {
            message = Message.Identify.decode(data);
        } catch (err) {
            throw errCode(err, codes.ERR_INVALID_MESSAGE);
        }
        const { publicKey , listenAddrs , protocols , observedAddr , signedPeerRecord  } = message;
        const id = await PeerId.createFromPubKey(publicKey);
        if (connection.remotePeer.toB58String() !== id.toB58String()) throw errCode(new Error("identified peer does not match the expected peer"), codes.ERR_INVALID_PEER);
        // Get the observedAddr if there is one
        const cleanObservedAddr = IdentifyService.getCleanMultiaddr(observedAddr);
        try {
            const envelope = await Envelope.openAndCertify(signedPeerRecord, PeerRecord.DOMAIN);
            if (this.peerStore.addressBook.consumePeerRecord(envelope)) {
                this.peerStore.protoBook.set(id, protocols);
                this.peerStore.metadataBook.set(id, "AgentVersion", uint8ArrayFromString(message.agentVersion));
                this.peerStore.metadataBook.set(id, "ProtocolVersion", uint8ArrayFromString(message.protocolVersion));
                return;
            }
        } catch (err1) {
            log("received invalid envelope, discard it and fallback to listenAddrs is available", err1);
        }
        // LEGACY: Update peers data in PeerStore
        try {
            this.peerStore.addressBook.set(id, listenAddrs.map((addr)=>new Multiaddr(addr)));
        } catch (err2) {
            log.error("received invalid addrs", err2);
        }
        this.peerStore.protoBook.set(id, protocols);
        this.peerStore.metadataBook.set(id, "AgentVersion", uint8ArrayFromString(message.agentVersion));
        this.peerStore.metadataBook.set(id, "ProtocolVersion", uint8ArrayFromString(message.protocolVersion));
        // TODO: Add and score our observed addr
        log("received observed address of %s", cleanObservedAddr);
    // this.addressManager.addObservedAddr(observedAddr)
    }
    /**
   * A handler to register with Libp2p to process identify messages.
   *
   * @param {Object} options
   * @param {Connection} options.connection
   * @param {MuxedStream} options.stream
   * @param {string} options.protocol
   * @returns {Promise<void>|undefined}
   */ handleMessage({ connection , stream , protocol  }) {
        switch(protocol){
            case this.identifyProtocolStr:
                return this._handleIdentify({
                    connection,
                    stream
                });
            case this.identifyPushProtocolStr:
                return this._handlePush({
                    connection,
                    stream
                });
            default:
                log.error("cannot handle unknown protocol %s", protocol);
        }
    }
    /**
   * Sends the `Identify` response with the Signed Peer Record
   * to the requesting peer over the given `connection`
   *
   * @private
   * @param {Object} options
   * @param {MuxedStream} options.stream
   * @param {Connection} options.connection
   * @returns {Promise<void>}
   */ async _handleIdentify({ connection , stream  }) {
        let publicKey = new Uint8Array(0);
        if (this.peerId.pubKey) publicKey = this.peerId.pubKey.bytes;
        const signedPeerRecord = await this.peerStore.addressBook.getRawEnvelope(this.peerId);
        const protocols = this.peerStore.protoBook.get(this.peerId) || [];
        const message = Message.Identify.encode({
            protocolVersion: this._host.protocolVersion,
            agentVersion: this._host.agentVersion,
            publicKey,
            listenAddrs: this._libp2p.multiaddrs.map((ma)=>ma.bytes),
            signedPeerRecord,
            observedAddr: connection.remoteAddr.bytes,
            protocols
        }).finish();
        try {
            await pipe([
                message
            ], lp.encode(), stream, consume);
        } catch (err) {
            log.error("could not respond to identify request", err);
        }
    }
    /**
   * Reads the Identify Push message from the given `connection`
   *
   * @private
   * @param {object} options
   * @param {MuxedStream} options.stream
   * @param {Connection} options.connection
   * @returns {Promise<void>}
   */ async _handlePush({ connection , stream  }) {
        let message;
        try {
            const [data] = await pipe([], stream, lp.decode(), take(1), toBuffer, collect);
            message = Message.Identify.decode(data);
        } catch (err) {
            return log.error("received invalid message", err);
        }
        const id = connection.remotePeer;
        try {
            const envelope = await Envelope.openAndCertify(message.signedPeerRecord, PeerRecord.DOMAIN);
            if (this.peerStore.addressBook.consumePeerRecord(envelope)) {
                this.peerStore.protoBook.set(id, message.protocols);
                return;
            }
        } catch (err3) {
            log("received invalid envelope, discard it and fallback to listenAddrs is available", err3);
        }
        // LEGACY: Update peers data in PeerStore
        try {
            this.peerStore.addressBook.set(id, message.listenAddrs.map((addr)=>new Multiaddr(addr)));
        } catch (err4) {
            log.error("received invalid addrs", err4);
        }
        // Update the protocols
        this.peerStore.protoBook.set(id, message.protocols);
    }
    /**
   * Takes the `addr` and converts it to a Multiaddr if possible
   *
   * @param {Uint8Array | string} addr
   * @returns {Multiaddr|null}
   */ static getCleanMultiaddr(addr) {
        if (addr && addr.length > 0) try {
            return new Multiaddr(addr);
        } catch (_) {
            return null;
        }
        return null;
    }
}
/**
 * The protocols the IdentifyService supports
 *
 * @property multicodecs
 */ const multicodecs = {
    IDENTIFY: MULTICODEC_IDENTIFY,
    IDENTIFY_PUSH: MULTICODEC_IDENTIFY_PUSH
};
IdentifyService.multicodecs = multicodecs;
IdentifyService.Messsage = Message;
module.exports = IdentifyService;

},{"debug":"l0oUb","err-code":"dUrrM","it-length-prefixed":"31lGp","it-pipe":"jkWle","streaming-iterables":"lbfQq","uint8arrays/from-string":"7qjkp","peer-id":"etBKN","multiaddr":"dOMJu","it-buffer":"dHO1t","./message":"aTb4z","../record/envelope":"9BIql","../record/peer-record":"c2J6v","./consts":"bXpq8","../errors":"cFlaw"}],"aTb4z":[function(require,module,exports) {
/*eslint-disable*/ "use strict";
var $protobuf = require("protobufjs/minimal");
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
// Exported root namespace
var $root = $protobuf.roots["libp2p-identify"] || ($protobuf.roots["libp2p-identify"] = {});
$root.Identify = function() {
    /**
     * Properties of an Identify.
     * @exports IIdentify
     * @interface IIdentify
     * @property {string|null} [protocolVersion] Identify protocolVersion
     * @property {string|null} [agentVersion] Identify agentVersion
     * @property {Uint8Array|null} [publicKey] Identify publicKey
     * @property {Array.<Uint8Array>|null} [listenAddrs] Identify listenAddrs
     * @property {Uint8Array|null} [observedAddr] Identify observedAddr
     * @property {Array.<string>|null} [protocols] Identify protocols
     * @property {Uint8Array|null} [signedPeerRecord] Identify signedPeerRecord
     */ /**
     * Constructs a new Identify.
     * @exports Identify
     * @classdesc Represents an Identify.
     * @implements IIdentify
     * @constructor
     * @param {IIdentify=} [p] Properties to set
     */ function Identify(p) {
        this.listenAddrs = [];
        this.protocols = [];
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    /**
     * Identify protocolVersion.
     * @member {string} protocolVersion
     * @memberof Identify
     * @instance
     */ Identify.prototype.protocolVersion = "";
    /**
     * Identify agentVersion.
     * @member {string} agentVersion
     * @memberof Identify
     * @instance
     */ Identify.prototype.agentVersion = "";
    /**
     * Identify publicKey.
     * @member {Uint8Array} publicKey
     * @memberof Identify
     * @instance
     */ Identify.prototype.publicKey = $util.newBuffer([]);
    /**
     * Identify listenAddrs.
     * @member {Array.<Uint8Array>} listenAddrs
     * @memberof Identify
     * @instance
     */ Identify.prototype.listenAddrs = $util.emptyArray;
    /**
     * Identify observedAddr.
     * @member {Uint8Array} observedAddr
     * @memberof Identify
     * @instance
     */ Identify.prototype.observedAddr = $util.newBuffer([]);
    /**
     * Identify protocols.
     * @member {Array.<string>} protocols
     * @memberof Identify
     * @instance
     */ Identify.prototype.protocols = $util.emptyArray;
    /**
     * Identify signedPeerRecord.
     * @member {Uint8Array} signedPeerRecord
     * @memberof Identify
     * @instance
     */ Identify.prototype.signedPeerRecord = $util.newBuffer([]);
    /**
     * Encodes the specified Identify message. Does not implicitly {@link Identify.verify|verify} messages.
     * @function encode
     * @memberof Identify
     * @static
     * @param {IIdentify} m Identify message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ Identify.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.publicKey != null && Object.hasOwnProperty.call(m, "publicKey")) w.uint32(10).bytes(m.publicKey);
        if (m.listenAddrs != null && m.listenAddrs.length) for(var i = 0; i < m.listenAddrs.length; ++i)w.uint32(18).bytes(m.listenAddrs[i]);
        if (m.protocols != null && m.protocols.length) for(var i = 0; i < m.protocols.length; ++i)w.uint32(26).string(m.protocols[i]);
        if (m.observedAddr != null && Object.hasOwnProperty.call(m, "observedAddr")) w.uint32(34).bytes(m.observedAddr);
        if (m.protocolVersion != null && Object.hasOwnProperty.call(m, "protocolVersion")) w.uint32(42).string(m.protocolVersion);
        if (m.agentVersion != null && Object.hasOwnProperty.call(m, "agentVersion")) w.uint32(50).string(m.agentVersion);
        if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, "signedPeerRecord")) w.uint32(66).bytes(m.signedPeerRecord);
        return w;
    };
    /**
     * Decodes an Identify message from the specified reader or buffer.
     * @function decode
     * @memberof Identify
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {Identify} Identify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ Identify.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Identify();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 5:
                    m.protocolVersion = r.string();
                    break;
                case 6:
                    m.agentVersion = r.string();
                    break;
                case 1:
                    m.publicKey = r.bytes();
                    break;
                case 2:
                    if (!(m.listenAddrs && m.listenAddrs.length)) m.listenAddrs = [];
                    m.listenAddrs.push(r.bytes());
                    break;
                case 4:
                    m.observedAddr = r.bytes();
                    break;
                case 3:
                    if (!(m.protocols && m.protocols.length)) m.protocols = [];
                    m.protocols.push(r.string());
                    break;
                case 8:
                    m.signedPeerRecord = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    /**
     * Creates an Identify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Identify
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {Identify} Identify
     */ Identify.fromObject = function fromObject(d) {
        if (d instanceof $root.Identify) return d;
        var m = new $root.Identify();
        if (d.protocolVersion != null) m.protocolVersion = String(d.protocolVersion);
        if (d.agentVersion != null) m.agentVersion = String(d.agentVersion);
        if (d.publicKey != null) {
            if (typeof d.publicKey === "string") $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);
            else if (d.publicKey.length) m.publicKey = d.publicKey;
        }
        if (d.listenAddrs) {
            if (!Array.isArray(d.listenAddrs)) throw TypeError(".Identify.listenAddrs: array expected");
            m.listenAddrs = [];
            for(var i = 0; i < d.listenAddrs.length; ++i){
                if (typeof d.listenAddrs[i] === "string") $util.base64.decode(d.listenAddrs[i], m.listenAddrs[i] = $util.newBuffer($util.base64.length(d.listenAddrs[i])), 0);
                else if (d.listenAddrs[i].length) m.listenAddrs[i] = d.listenAddrs[i];
            }
        }
        if (d.observedAddr != null) {
            if (typeof d.observedAddr === "string") $util.base64.decode(d.observedAddr, m.observedAddr = $util.newBuffer($util.base64.length(d.observedAddr)), 0);
            else if (d.observedAddr.length) m.observedAddr = d.observedAddr;
        }
        if (d.protocols) {
            if (!Array.isArray(d.protocols)) throw TypeError(".Identify.protocols: array expected");
            m.protocols = [];
            for(var i = 0; i < d.protocols.length; ++i)m.protocols[i] = String(d.protocols[i]);
        }
        if (d.signedPeerRecord != null) {
            if (typeof d.signedPeerRecord === "string") $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);
            else if (d.signedPeerRecord.length) m.signedPeerRecord = d.signedPeerRecord;
        }
        return m;
    };
    /**
     * Creates a plain object from an Identify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Identify
     * @static
     * @param {Identify} m Identify
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ Identify.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.arrays || o.defaults) {
            d.listenAddrs = [];
            d.protocols = [];
        }
        if (o.defaults) {
            if (o.bytes === String) d.publicKey = "";
            else {
                d.publicKey = [];
                if (o.bytes !== Array) d.publicKey = $util.newBuffer(d.publicKey);
            }
            if (o.bytes === String) d.observedAddr = "";
            else {
                d.observedAddr = [];
                if (o.bytes !== Array) d.observedAddr = $util.newBuffer(d.observedAddr);
            }
            d.protocolVersion = "";
            d.agentVersion = "";
            if (o.bytes === String) d.signedPeerRecord = "";
            else {
                d.signedPeerRecord = [];
                if (o.bytes !== Array) d.signedPeerRecord = $util.newBuffer(d.signedPeerRecord);
            }
        }
        if (m.publicKey != null && m.hasOwnProperty("publicKey")) d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;
        if (m.listenAddrs && m.listenAddrs.length) {
            d.listenAddrs = [];
            for(var j = 0; j < m.listenAddrs.length; ++j)d.listenAddrs[j] = o.bytes === String ? $util.base64.encode(m.listenAddrs[j], 0, m.listenAddrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.listenAddrs[j]) : m.listenAddrs[j];
        }
        if (m.protocols && m.protocols.length) {
            d.protocols = [];
            for(var j = 0; j < m.protocols.length; ++j)d.protocols[j] = m.protocols[j];
        }
        if (m.observedAddr != null && m.hasOwnProperty("observedAddr")) d.observedAddr = o.bytes === String ? $util.base64.encode(m.observedAddr, 0, m.observedAddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.observedAddr) : m.observedAddr;
        if (m.protocolVersion != null && m.hasOwnProperty("protocolVersion")) d.protocolVersion = m.protocolVersion;
        if (m.agentVersion != null && m.hasOwnProperty("agentVersion")) d.agentVersion = m.agentVersion;
        if (m.signedPeerRecord != null && m.hasOwnProperty("signedPeerRecord")) d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;
        return d;
    };
    /**
     * Converts this Identify to JSON.
     * @function toJSON
     * @memberof Identify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ Identify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Identify;
}();
module.exports = $root;

},{"protobufjs/minimal":"kgguT"}],"6APCL":[function(require,module,exports) {
"use strict";
// @ts-ignore nat-api does not export types
const NatAPI = require("@motrix/nat-api");
const debug = require("debug");
const { promisify  } = require("es6-promisify");
const { Multiaddr  } = require("multiaddr");
const log = Object.assign(debug("libp2p:nat"), {
    error: debug("libp2p:nat:err")
});
const { isBrowser  } = require("wherearewe");
const retry = require("p-retry");
// @ts-ignore private-api does not export types
const isPrivateIp = require("private-ip");
const pkg = require("../package.json");
const errcode = require("err-code");
const { codes: { ERR_INVALID_PARAMETERS  }  } = require("./errors");
const isLoopback = require("libp2p-utils/src/multiaddr/is-loopback");
const DEFAULT_TTL = 7200;
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('./transport-manager')} TransportManager
 * @typedef {import('./address-manager')} AddressManager
 */ /**
 * @typedef {Object} NatManagerProperties
 * @property {PeerId} peerId - The peer ID of the current node
 * @property {TransportManager} transportManager - A transport manager
 * @property {AddressManager} addressManager - An address manager
 *
 * @typedef {Object} NatManagerOptions
 * @property {boolean} enabled - Whether to enable the NAT manager
 * @property {string} [externalIp] - Pass a value to use instead of auto-detection
 * @property {string} [description] - A string value to use for the port mapping description on the gateway
 * @property {number} [ttl = DEFAULT_TTL] - How long UPnP port mappings should last for in seconds (minimum 1200)
 * @property {boolean} [keepAlive] - Whether to automatically refresh UPnP port mappings when their TTL is reached
 * @property {string} [gateway] - Pass a value to use instead of auto-detection
 * @property {object} [pmp] - PMP options
 * @property {boolean} [pmp.enabled] - Whether to enable PMP as well as UPnP
 */ function highPort(min = 1024, max = 65535) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}
class NatManager {
    /**
   * @class
   * @param {NatManagerProperties & NatManagerOptions} options
   */ constructor({ peerId , addressManager , transportManager , ...options }){
        this._peerId = peerId;
        this._addressManager = addressManager;
        this._transportManager = transportManager;
        this._enabled = options.enabled;
        this._externalIp = options.externalIp;
        this._options = {
            description: options.description || `${pkg.name}@${pkg.version} ${this._peerId}`,
            ttl: options.ttl || DEFAULT_TTL,
            autoUpdate: options.keepAlive || true,
            gateway: options.gateway,
            enablePMP: Boolean(options.pmp && options.pmp.enabled)
        };
        if (this._options.ttl < DEFAULT_TTL) throw errcode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), ERR_INVALID_PARAMETERS);
    }
    /**
   * Starts the NAT manager
   */ start() {
        if (isBrowser || !this._enabled) return;
        // done async to not slow down startup
        this._start().catch((err)=>{
            // hole punching errors are non-fatal
            log.error(err);
        });
    }
    async _start() {
        const addrs = this._transportManager.getAddrs();
        for (const addr of addrs){
            // try to open uPnP ports for each thin waist address
            const { family , host , port , transport  } = addr.toOptions();
            if (!addr.isThinWaistAddress() || transport !== "tcp") continue;
            if (isLoopback(addr)) continue;
            if (family !== 4) continue;
            const client = this._getClient();
            const publicIp = this._externalIp || await client.externalIp();
            if (isPrivateIp(publicIp)) throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`);
            const publicPort = highPort();
            log(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`);
            await client.map({
                publicPort,
                privatePort: port,
                protocol: transport.toUpperCase()
            });
            this._addressManager.addObservedAddr(Multiaddr.fromNodeAddress({
                family: 4,
                address: publicIp,
                port: publicPort
            }, transport));
        }
    }
    _getClient() {
        if (this._client) return this._client;
        const client = new NatAPI(this._options);
        /** @type {(...any: any) => any} */ const map = promisify(client.map.bind(client));
        /** @type {(...any: any) => any} */ const destroy = promisify(client.destroy.bind(client));
        /** @type {(...any: any) => any} */ const externalIp = promisify(client.externalIp.bind(client));
        // these are all network operations so add a retry
        this._client = {
            /**
       * @param  {...any} args
       * @returns {Promise<void>}
       */ map: (...args)=>retry(()=>map(...args), {
                    onFailedAttempt: log.error,
                    unref: true
                }),
            /**
       * @param  {...any} args
       * @returns {Promise<void>}
       */ destroy: (...args)=>retry(()=>destroy(...args), {
                    onFailedAttempt: log.error,
                    unref: true
                }),
            /**
       * @param  {...any} args
       * @returns {Promise<string>}
       */ externalIp: (...args)=>retry(()=>externalIp(...args), {
                    onFailedAttempt: log.error,
                    unref: true
                })
        };
        return this._client;
    }
    /**
   * Stops the NAT manager
   *
   * @async
   */ async stop() {
        if (isBrowser || !this._client) return;
        try {
            await this._client.destroy();
            this._client = null;
        } catch (err) {
            log.error(err);
        }
    }
}
module.exports = NatManager;

},{"@motrix/nat-api":"jhUEF","debug":"l0oUb","es6-promisify":"53aJa","multiaddr":"dOMJu","wherearewe":"5237b","p-retry":"8I9q5","private-ip":"5LQv4","../package.json":"i9M7t","err-code":"dUrrM","./errors":"cFlaw","libp2p-utils/src/multiaddr/is-loopback":"bmO76"}],"53aJa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "promisify", ()=>promisify);
var customArgumentsToken = "__ES6-PROMISIFY--CUSTOM-ARGUMENTS__";
function promisify(a1) {
    if ("function" != typeof a1) throw new TypeError("Argument to promisify must be a function");
    var b = a1[customArgumentsToken], c1 = promisify.Promise || Promise;
    if ("function" != typeof c1) throw new Error("No Promise implementation found; do you need a polyfill?");
    return function() {
        for(var d1 = arguments.length, e1 = Array(d1), f1 = 0; f1 < d1; f1++)e1[f1] = arguments[f1];
        return new c1((c2, d2)=>{
            e1.push(function(a2) {
                if (a2) return d2(a2);
                for(var e = arguments.length, f = Array(1 < e ? e - 1 : 0), g = 1; g < e; g++)f[g - 1] = arguments[g];
                if (1 === f.length || !b) return c2(f[0]);
                var h = {};
                f.forEach((a, c)=>{
                    var d = b[c];
                    d && (h[d] = a);
                }), c2(h);
            }), a1.apply(this, e1);
        });
    };
}
promisify.argumentNames = "__ES6-PROMISIFY--CUSTOM-ARGUMENTS__", promisify.Promise = void 0;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5237b":[function(require,module,exports) {
"use strict";
/** @type {() => boolean} */ // @ts-ignore
const isElectron = require("is-electron");
const IS_ENV_WITH_DOM = typeof window === "object" && typeof document === "object" && document.nodeType === 9;
const IS_ELECTRON = isElectron();
const IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON;
const IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM;
const IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM;
const IS_NODE = typeof globalThis.process !== "undefined" && typeof globalThis.process.release !== "undefined" && globalThis.process.release.name === "node" && !IS_ELECTRON;
// @ts-ignore
// eslint-disable-next-line no-undef
const IS_WEBWORKER = typeof importScripts === "function" && typeof self !== "undefined" && typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
// defeat bundlers replacing process.env.NODE_ENV with "development" or whatever
const IS_TEST = typeof globalThis.process !== "undefined" && typeof globalThis.process.env !== "undefined" && globalThis.process.env["NODE" + (()=>"_")() + "ENV"] === "test";
const IS_REACT_NATIVE = typeof navigator !== "undefined" && navigator.product === "ReactNative";
module.exports = {
    isTest: IS_TEST,
    isElectron: IS_ELECTRON,
    isElectronMain: IS_ELECTRON_MAIN,
    isElectronRenderer: IS_ELECTRON_RENDERER,
    isNode: IS_NODE,
    /**
   * Detects browser main thread  **NOT** web worker or service worker
   */ isBrowser: IS_BROWSER,
    isWebWorker: IS_WEBWORKER,
    isEnvWithDom: IS_ENV_WITH_DOM,
    isReactNative: IS_REACT_NATIVE
};

},{"is-electron":"bGmBa"}],"bGmBa":[function(require,module,exports) {
var process = require("process");
// https://github.com/electron/electron/issues/2288
function isElectron() {
    // Renderer process
    if (typeof window !== "undefined" && typeof window.process === "object" && window.process.type === "renderer") return true;
    // Main process
    if (typeof process !== "undefined" && typeof process.versions === "object" && !!process.versions.electron) return true;
    // Detect the user agent when the `nodeIntegration` option is set to false
    if (typeof navigator === "object" && typeof navigator.userAgent === "string" && navigator.userAgent.indexOf("Electron") >= 0) return true;
    return false;
}
module.exports = isElectron;

},{"process":"d5jf4"}],"8I9q5":[function(require,module,exports) {
"use strict";
const retry = require("retry");
const networkErrorMsgs = [
    "Failed to fetch",
    "NetworkError when attempting to fetch resource.",
    "The Internet connection appears to be offline.",
    "Network request failed" // `cross-fetch`
];
class AbortError extends Error {
    constructor(message){
        super();
        if (message instanceof Error) {
            this.originalError = message;
            ({ message  } = message);
        } else {
            this.originalError = new Error(message);
            this.originalError.stack = this.stack;
        }
        this.name = "AbortError";
        this.message = message;
    }
}
const decorateErrorWithCounts = (error, attemptNumber, options)=>{
    // Minus 1 from attemptNumber because the first attempt does not count as a retry
    const retriesLeft = options.retries - (attemptNumber - 1);
    error.attemptNumber = attemptNumber;
    error.retriesLeft = retriesLeft;
    return error;
};
const isNetworkError = (errorMessage)=>networkErrorMsgs.includes(errorMessage);
const pRetry = (input, options)=>new Promise((resolve, reject)=>{
        options = {
            onFailedAttempt: ()=>{},
            retries: 10,
            ...options
        };
        const operation = retry.operation(options);
        operation.attempt(async (attemptNumber)=>{
            try {
                resolve(await input(attemptNumber));
            } catch (error) {
                if (!(error instanceof Error)) {
                    reject(new TypeError(`Non-error was thrown: "${error}". You should only throw errors.`));
                    return;
                }
                if (error instanceof AbortError) {
                    operation.stop();
                    reject(error.originalError);
                } else if (error instanceof TypeError && !isNetworkError(error.message)) {
                    operation.stop();
                    reject(error);
                } else {
                    decorateErrorWithCounts(error, attemptNumber, options);
                    try {
                        await options.onFailedAttempt(error);
                    } catch (error1) {
                        reject(error1);
                        return;
                    }
                    if (!operation.retry(error)) reject(operation.mainError());
                }
            }
        });
    });
module.exports = pRetry;
// TODO: remove this in the next major version
module.exports.default = pRetry;
module.exports.AbortError = AbortError;

},{"retry":"9nEk0"}],"9nEk0":[function(require,module,exports) {
module.exports = require("./lib/retry");

},{"./lib/retry":"hFyuE"}],"hFyuE":[function(require,module,exports) {
var RetryOperation = require("./retry_operation");
exports.operation = function(options) {
    var timeouts = exports.timeouts(options);
    return new RetryOperation(timeouts, {
        forever: options && (options.forever || options.retries === Infinity),
        unref: options && options.unref,
        maxRetryTime: options && options.maxRetryTime
    });
};
exports.timeouts = function(options) {
    if (options instanceof Array) return [].concat(options);
    var opts = {
        retries: 10,
        factor: 2,
        minTimeout: 1000,
        maxTimeout: Infinity,
        randomize: false
    };
    for(var key in options)opts[key] = options[key];
    if (opts.minTimeout > opts.maxTimeout) throw new Error("minTimeout is greater than maxTimeout");
    var timeouts = [];
    for(var i = 0; i < opts.retries; i++)timeouts.push(this.createTimeout(i, opts));
    if (options && options.forever && !timeouts.length) timeouts.push(this.createTimeout(i, opts));
    // sort the array numerically ascending
    timeouts.sort(function(a, b) {
        return a - b;
    });
    return timeouts;
};
exports.createTimeout = function(attempt, opts) {
    var random = opts.randomize ? Math.random() + 1 : 1;
    var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
    timeout = Math.min(timeout, opts.maxTimeout);
    return timeout;
};
exports.wrap = function(obj, options, methods) {
    if (options instanceof Array) {
        methods = options;
        options = null;
    }
    if (!methods) {
        methods = [];
        for(var key in obj)if (typeof obj[key] === "function") methods.push(key);
    }
    for(var i = 0; i < methods.length; i++){
        var method = methods[i];
        var original1 = obj[method];
        obj[method] = (function retryWrapper(original) {
            var op = exports.operation(options);
            var args = Array.prototype.slice.call(arguments, 1);
            var callback = args.pop();
            args.push(function(err) {
                if (op.retry(err)) return;
                if (err) arguments[0] = op.mainError();
                callback.apply(this, arguments);
            });
            op.attempt(function() {
                original.apply(obj, args);
            });
        }).bind(obj, original1);
        obj[method].options = options;
    }
};

},{"./retry_operation":"hJ9sl"}],"hJ9sl":[function(require,module,exports) {
function RetryOperation(timeouts, options) {
    // Compatibility for the old (timeouts, retryForever) signature
    if (typeof options === "boolean") options = {
        forever: options
    };
    this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
    this._timeouts = timeouts;
    this._options = options || {};
    this._maxRetryTime = options && options.maxRetryTime || Infinity;
    this._fn = null;
    this._errors = [];
    this._attempts = 1;
    this._operationTimeout = null;
    this._operationTimeoutCb = null;
    this._timeout = null;
    this._operationStart = null;
    this._timer = null;
    if (this._options.forever) this._cachedTimeouts = this._timeouts.slice(0);
}
module.exports = RetryOperation;
RetryOperation.prototype.reset = function() {
    this._attempts = 1;
    this._timeouts = this._originalTimeouts.slice(0);
};
RetryOperation.prototype.stop = function() {
    if (this._timeout) clearTimeout(this._timeout);
    if (this._timer) clearTimeout(this._timer);
    this._timeouts = [];
    this._cachedTimeouts = null;
};
RetryOperation.prototype.retry = function(err) {
    if (this._timeout) clearTimeout(this._timeout);
    if (!err) return false;
    var currentTime = new Date().getTime();
    if (err && currentTime - this._operationStart >= this._maxRetryTime) {
        this._errors.push(err);
        this._errors.unshift(new Error("RetryOperation timeout occurred"));
        return false;
    }
    this._errors.push(err);
    var timeout = this._timeouts.shift();
    if (timeout === undefined) {
        if (this._cachedTimeouts) {
            // retry forever, only keep last error
            this._errors.splice(0, this._errors.length - 1);
            timeout = this._cachedTimeouts.slice(-1);
        } else return false;
    }
    var self = this;
    this._timer = setTimeout(function() {
        self._attempts++;
        if (self._operationTimeoutCb) {
            self._timeout = setTimeout(function() {
                self._operationTimeoutCb(self._attempts);
            }, self._operationTimeout);
            if (self._options.unref) self._timeout.unref();
        }
        self._fn(self._attempts);
    }, timeout);
    if (this._options.unref) this._timer.unref();
    return true;
};
RetryOperation.prototype.attempt = function(fn, timeoutOps) {
    this._fn = fn;
    if (timeoutOps) {
        if (timeoutOps.timeout) this._operationTimeout = timeoutOps.timeout;
        if (timeoutOps.cb) this._operationTimeoutCb = timeoutOps.cb;
    }
    var self = this;
    if (this._operationTimeoutCb) this._timeout = setTimeout(function() {
        self._operationTimeoutCb();
    }, self._operationTimeout);
    this._operationStart = new Date().getTime();
    this._fn(this._attempts);
};
RetryOperation.prototype.try = function(fn) {
    console.log("Using RetryOperation.try() is deprecated");
    this.attempt(fn);
};
RetryOperation.prototype.start = function(fn) {
    console.log("Using RetryOperation.start() is deprecated");
    this.attempt(fn);
};
RetryOperation.prototype.start = RetryOperation.prototype.try;
RetryOperation.prototype.errors = function() {
    return this._errors;
};
RetryOperation.prototype.attempts = function() {
    return this._attempts;
};
RetryOperation.prototype.mainError = function() {
    if (this._errors.length === 0) return null;
    var counts = {};
    var mainError = null;
    var mainErrorCount = 0;
    for(var i = 0; i < this._errors.length; i++){
        var error = this._errors[i];
        var message = error.message;
        var count = (counts[message] || 0) + 1;
        counts[message] = count;
        if (count >= mainErrorCount) {
            mainError = error;
            mainErrorCount = count;
        }
    }
    return mainError;
};

},{}],"bmO76":[function(require,module,exports) {
"use strict";
// @ts-ignore is-loopback-addr does not publish types
const isLoopbackAddr = require("is-loopback-addr");
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * Check if a given multiaddr is a loopback address.
 *
 * @param {Multiaddr} ma
 * @returns {boolean}
 */ function isLoopback(ma) {
    const { address  } = ma.nodeAddress();
    return isLoopbackAddr(address);
}
module.exports = isLoopback;

},{"is-loopback-addr":"lalVQ"}],"lalVQ":[function(require,module,exports) {
"use strict";
/**
 * Check if a given ip address is a loopback address
 *
 * @param {string} ip - ip address to check
 * @returns {boolean}
 */ function isLoopbackAddr(ip) {
    return /^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ip) || /^::1$/.test(ip);
}
module.exports = isLoopbackAddr;

},{}],"5YGqS":[function(require,module,exports) {
"use strict";
module.exports = require("./mplex");

},{"./mplex":"1PDnN"}],"1PDnN":[function(require,module,exports) {
"use strict";
const pipe = require("it-pipe");
const pushable = require("it-pushable");
const log = require("debug")("libp2p:mplex");
const abortable = require("abortable-iterator");
const Coder = require("./coder");
const restrictSize = require("./restrict-size");
const { MessageTypes , MessageTypeNames  } = require("./message-types");
const createStream = require("./stream");
class Mplex {
    /**
   * @class
   * @param {object} options
   * @param {function(*)} options.onStream - Called whenever an inbound stream is created
   * @param {function(*)} options.onStreamEnd - Called whenever a stream ends
   * @param {AbortSignal} options.signal - An AbortController signal
   */ constructor(options){
        options = options || {};
        options = typeof options === "function" ? {
            onStream: options
        } : options;
        this._streamId = 0;
        this._streams = {
            /**
       * @type {Map<number, *>} Stream to ids map
       */ initiators: new Map(),
            /**
       * @type {Map<number, *>} Stream to ids map
       */ receivers: new Map()
        };
        this._options = options;
        /**
     * An iterable sink
     */ this.sink = this._createSink();
        /**
     * An iterable source
     */ this.source = this._createSource();
        /**
     * @property {Function} onStream
     */ this.onStream = options.onStream;
        /**
     * @property {Function} onStreamEnd
     */ this.onStreamEnd = options.onStreamEnd;
    }
    /**
   * Returns a Map of streams and their ids
   *
   * @returns {Map<number,*>}
   */ get streams() {
        // Inbound and Outbound streams may have the same ids, so we need to make those unique
        const streams = [];
        this._streams.initiators.forEach((stream)=>{
            streams.push(stream);
        });
        this._streams.receivers.forEach((stream)=>{
            streams.push(stream);
        });
        return streams;
    }
    /**
   * Initiate a new stream with the given name. If no name is
   * provided, the id of th stream will be used.
   *
   * @param {string} [name] - If name is not a string it will be cast to one
   * @returns {Stream}
   */ newStream(name) {
        const id = this._streamId++;
        name = name == null ? id.toString() : String(name);
        const registry = this._streams.initiators;
        return this._newStream({
            id,
            name,
            type: "initiator",
            registry
        });
    }
    /**
   * Called whenever an inbound stream is created
   *
   * @private
   * @param {*} options
   * @param {number} options.id
   * @param {string} options.name
   * @returns {*} A muxed stream
   */ _newReceiverStream({ id , name  }) {
        const registry = this._streams.receivers;
        return this._newStream({
            id,
            name,
            type: "receiver",
            registry
        });
    }
    /**
   * Creates a new stream
   *
   * @private
   * @param {object} options
   * @param {number} options.id
   * @param {string} options.name
   * @param {string} options.type
   * @param {Map<number, *>} options.registry - A map of streams to their ids
   * @returns {*} A muxed stream
   */ _newStream({ id , name , type , registry  }) {
        if (registry.has(id)) throw new Error(`${type} stream ${id} already exists!`);
        log("new %s stream %s %s", type, id, name);
        const send = (msg)=>{
            if (log.enabled) log("%s stream %s %s send", type, id, name, {
                ...msg,
                type: MessageTypeNames[msg.type],
                data: msg.data && msg.data.slice()
            });
            return this.source.push(msg);
        };
        const onEnd = ()=>{
            log("%s stream %s %s ended", type, id, name);
            registry.delete(id);
            this.onStreamEnd && this.onStreamEnd(stream);
        };
        const stream = createStream({
            id,
            name,
            send,
            type,
            onEnd,
            maxMsgSize: this._options.maxMsgSize
        });
        registry.set(id, stream);
        return stream;
    }
    /**
   * Creates a sink with an abortable source. Incoming messages will
   * also have their size restricted. All messages will be varint decoded.
   *
   * @private
   * @returns {*} Returns an iterable sink
   */ _createSink() {
        return async (source1)=>{
            if (this._options.signal) source1 = abortable(source1, this._options.signal);
            try {
                await pipe(source1, Coder.decode, restrictSize(this._options.maxMsgSize), async (source)=>{
                    for await (const msgs of source)for (const msg of msgs)this._handleIncoming(msg);
                });
            } catch (err) {
                log("error in sink", err);
                return this.source.end(err) // End the source with an error
                ;
            }
            this.source.end();
        };
    }
    /**
   * Creates a source that restricts outgoing message sizes
   * and varint encodes them.
   *
   * @private
   * @returns {*} An iterable source
   */ _createSource() {
        const onEnd = (err)=>{
            const { initiators , receivers  } = this._streams;
            // Abort all the things!
            for (const s of initiators.values())s.abort(err);
            for (const s1 of receivers.values())s1.abort(err);
        };
        const source = pushable({
            onEnd,
            writev: true
        });
        return Object.assign(Coder.encode(source), {
            push: source.push,
            end: source.end,
            return: source.return
        });
    }
    /**
   * @private
   * @param {object} options
   * @param {number} options.id
   * @param {string} options.type
   * @param {Uint8Array|BufferList} options.data
   * @returns {void}
   */ _handleIncoming({ id , type , data  }) {
        if (log.enabled) log("incoming message", {
            id,
            type: MessageTypeNames[type],
            data: data.slice()
        });
        // Create a new stream?
        if (type === MessageTypes.NEW_STREAM && this.onStream) {
            const stream = this._newReceiverStream({
                id,
                name: data.toString()
            });
            return this.onStream(stream);
        }
        const list = type & 1 ? this._streams.initiators : this._streams.receivers;
        const stream = list.get(id);
        if (!stream) return log("missing stream %s", id);
        switch(type){
            case MessageTypes.MESSAGE_INITIATOR:
            case MessageTypes.MESSAGE_RECEIVER:
                stream.source.push(data);
                break;
            case MessageTypes.CLOSE_INITIATOR:
            case MessageTypes.CLOSE_RECEIVER:
                stream.close();
                break;
            case MessageTypes.RESET_INITIATOR:
            case MessageTypes.RESET_RECEIVER:
                stream.reset();
                break;
            default:
                log("unknown message type %s", type);
        }
    }
}
Mplex.multicodec = "/mplex/6.7.0";
module.exports = Mplex;

},{"it-pipe":"jkWle","it-pushable":"fVlDP","debug":"l0oUb","abortable-iterator":"jIHDo","./coder":"24koK","./restrict-size":"5GU95","./message-types":"gnt19","./stream":"aOWXw"}],"24koK":[function(require,module,exports) {
"use strict";
exports.encode = require("./encode");
exports.decode = require("./decode");

},{"./encode":"1BU9T","./decode":"fbo4S"}],"1BU9T":[function(require,module,exports) {
"use strict";
const varint = require("varint");
const BufferList = require("bl/BufferList");
const POOL_SIZE = 10240;
class Encoder {
    constructor(){
        this._pool = new Uint8Array(POOL_SIZE);
        this._poolOffset = 0;
    }
    /**
   * Encodes the given message and returns it and its header
   *
   * @param {*} msg - The message object to encode
   * @returns {Uint8Array|Uint8Array[]}
   */ write(msg) {
        const pool = this._pool;
        let offset = this._poolOffset;
        varint.encode(msg.id << 3 | msg.type, pool, offset);
        offset += varint.encode.bytes;
        varint.encode(msg.data ? msg.data.length : 0, pool, offset);
        offset += varint.encode.bytes;
        const header = pool.subarray(this._poolOffset, offset);
        if (POOL_SIZE - offset < 100) {
            this._pool = new Uint8Array(POOL_SIZE);
            this._poolOffset = 0;
        } else this._poolOffset = offset;
        if (!msg.data) return header;
        return [
            header,
            msg.data
        ];
    }
}
const encoder = new Encoder();
// Encode one or more messages and yield a BufferList of encoded messages
module.exports = (source)=>(async function* encode() {
        for await (const msg of source)if (Array.isArray(msg)) yield new BufferList(msg.map((m)=>encoder.write(m)));
        else yield new BufferList(encoder.write(msg));
    })();

},{"varint":"9fMsR","bl/BufferList":"cf0Az"}],"fbo4S":[function(require,module,exports) {
"use strict";
const varint = require("varint");
const BufferList = require("bl/BufferList");
// Decode a chunk and yield an _array_ of decoded messages
module.exports = (source)=>(async function* decode() {
        const decoder = new Decoder();
        for await (const chunk of source){
            const msgs = decoder.write(chunk);
            if (msgs.length) yield msgs;
        }
    })();
class Decoder {
    constructor(){
        this._buffer = new BufferList();
        // optimization to allow varint to take a BufferList (well a proxy to)
        this._bufferProxy = new Proxy({}, {
            get: (_, prop)=>prop[0] === "l" ? this._buffer[prop] : this._buffer.get(parseInt(prop))
        });
        this._headerInfo = null;
    }
    /**
   * @param {Uint8Array|BufferList} chunk
   * @returns {object[]} An array of message objects
   */ write(chunk) {
        if (!chunk || !chunk.length) return [];
        this._buffer.append(chunk);
        const msgs = [];
        while(this._buffer.length){
            if (!this._headerInfo) try {
                this._headerInfo = this._decodeHeader(this._bufferProxy);
            } catch (_) {
                break; // We haven't received enough data yet
            }
            const { id , type , length , offset  } = this._headerInfo;
            const bufferedDataLength = this._buffer.length - offset;
            if (bufferedDataLength < length) break; // not enough data yet
            msgs.push({
                id,
                type,
                data: this._buffer.shallowSlice(offset, offset + length)
            });
            this._buffer.consume(offset + length);
            this._headerInfo = null;
        }
        return msgs;
    }
    /**
   * Attempts to decode the message header from the buffer
   *
   * @private
   * @param {Uint8Array} data
   * @returns {*} message header (id, type, offset, length)
   */ _decodeHeader(data) {
        const h = varint.decode(data);
        let offset = varint.decode.bytes;
        const length = varint.decode(data, offset);
        offset += varint.decode.bytes;
        return {
            id: h >> 3,
            type: h & 7,
            offset,
            length
        };
    }
}

},{"varint":"9fMsR","bl/BufferList":"cf0Az"}],"5GU95":[function(require,module,exports) {
"use strict";
const MAX_MSG_SIZE = 1048576 // 1MB
;
/**
 * Creates an iterable transform that restricts message sizes to
 * the given maximum size.
 *
 * @param {number} [max] - The maximum message size. Defaults to 1MB
 * @returns {*} An iterable transform.
 */ module.exports = (max)=>{
    max = max || MAX_MSG_SIZE;
    const checkSize = (msg)=>{
        if (msg.data && msg.data.length > max) throw Object.assign(new Error("message size too large!"), {
            code: "ERR_MSG_TOO_BIG"
        });
    };
    return (source)=>{
        return async function* restrictSize() {
            for await (const msg of source){
                if (Array.isArray(msg)) msg.forEach(checkSize);
                else checkSize(msg);
                yield msg;
            }
        }();
    };
};
module.exports.MAX_MSG_SIZE = MAX_MSG_SIZE;

},{}],"gnt19":[function(require,module,exports) {
"use strict";
const MessageTypes = Object.freeze({
    NEW_STREAM: 0,
    MESSAGE_RECEIVER: 1,
    MESSAGE_INITIATOR: 2,
    CLOSE_RECEIVER: 3,
    CLOSE_INITIATOR: 4,
    RESET_RECEIVER: 5,
    RESET_INITIATOR: 6
});
exports.MessageTypes = MessageTypes;
exports.InitiatorMessageTypes = Object.freeze({
    NEW_STREAM: MessageTypes.NEW_STREAM,
    MESSAGE: MessageTypes.MESSAGE_INITIATOR,
    CLOSE: MessageTypes.CLOSE_INITIATOR,
    RESET: MessageTypes.RESET_INITIATOR
});
exports.ReceiverMessageTypes = Object.freeze({
    MESSAGE: MessageTypes.MESSAGE_RECEIVER,
    CLOSE: MessageTypes.CLOSE_RECEIVER,
    RESET: MessageTypes.RESET_RECEIVER
});
exports.MessageTypeNames = Object.freeze(Object.entries(MessageTypes).reduce((obj, e)=>{
    obj[e[1]] = e[0];
    return obj;
}, {}));

},{}],"aOWXw":[function(require,module,exports) {
"use strict";
const abortable = require("abortable-iterator");
const log = require("debug")("libp2p:mplex:stream");
const pushable = require("it-pushable");
const BufferList = require("bl/BufferList");
const errCode = require("err-code");
const { MAX_MSG_SIZE  } = require("./restrict-size");
const { InitiatorMessageTypes , ReceiverMessageTypes  } = require("./message-types");
const ERR_MPLEX_STREAM_RESET = "ERR_MPLEX_STREAM_RESET";
const ERR_MPLEX_STREAM_ABORT = "ERR_MPLEX_STREAM_ABORT";
/**
 * @param {object} options
 * @param {number} options.id
 * @param {string} options.name
 * @param {function(*)} options.send - Called to send data through the stream
 * @param {function(Error)} [options.onEnd] - Called whenever the stream ends
 * @param {string} [options.type] - One of ['initiator','receiver']. Defaults to 'initiator'
 * @param {number} [options.maxMsgSize] - Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB
 * @returns {*} A muxed stream
 */ module.exports = ({ id , name , send , onEnd =()=>{} , type ="initiator" , maxMsgSize =MAX_MSG_SIZE  })=>{
    const abortController = new AbortController();
    const resetController = new AbortController();
    const Types = type === "initiator" ? InitiatorMessageTypes : ReceiverMessageTypes;
    const externalId = type === "initiator" ? `i${id}` : `r${id}`;
    name = String(name == null ? id : name);
    let sourceEnded = false;
    let sinkEnded = false;
    let endErr;
    const onSourceEnd = (err)=>{
        if (sourceEnded) return;
        sourceEnded = true;
        log("%s stream %s source end", type, name, err);
        if (err && !endErr) endErr = err;
        if (sinkEnded) {
            stream.timeline.close = Date.now();
            onEnd(endErr);
        }
    };
    const onSinkEnd = (err)=>{
        if (sinkEnded) return;
        sinkEnded = true;
        log("%s stream %s sink end", type, name, err);
        if (err && !endErr) endErr = err;
        if (sourceEnded) {
            stream.timeline.close = Date.now();
            onEnd(endErr);
        }
    };
    const stream = {
        // Close for reading
        close: ()=>stream.source.end(),
        // Close for reading and writing (local error)
        abort: (err)=>{
            log("%s stream %s abort", type, name, err);
            // End the source with the passed error
            stream.source.end(err);
            abortController.abort();
            onSinkEnd(err);
        },
        // Close immediately for reading and writing (remote error)
        reset: ()=>{
            const err = errCode(new Error("stream reset"), ERR_MPLEX_STREAM_RESET);
            resetController.abort();
            stream.source.end(err);
            onSinkEnd(err);
        },
        sink: async (source)=>{
            source = abortable(source, [
                {
                    signal: abortController.signal,
                    options: {
                        abortMessage: "stream aborted",
                        abortCode: ERR_MPLEX_STREAM_ABORT
                    }
                },
                {
                    signal: resetController.signal,
                    options: {
                        abortMessage: "stream reset",
                        abortCode: ERR_MPLEX_STREAM_RESET
                    }
                }
            ]);
            if (type === "initiator") send({
                id,
                type: Types.NEW_STREAM,
                data: name
            });
            try {
                for await (let data of source)while(data.length){
                    if (data.length <= maxMsgSize) {
                        send({
                            id,
                            type: Types.MESSAGE,
                            data
                        });
                        break;
                    }
                    data = BufferList.isBufferList(data) ? data : new BufferList(data);
                    send({
                        id,
                        type: Types.MESSAGE,
                        data: data.shallowSlice(0, maxMsgSize)
                    });
                    data.consume(maxMsgSize);
                }
            } catch (err) {
                // Send no more data if this stream was remotely reset
                if (err.code === ERR_MPLEX_STREAM_RESET) log("%s stream %s reset", type, name);
                else {
                    log("%s stream %s error", type, name, err);
                    send({
                        id,
                        type: Types.RESET
                    });
                }
                stream.source.end(err);
                return onSinkEnd(err);
            }
            send({
                id,
                type: Types.CLOSE
            });
            onSinkEnd();
        },
        source: pushable(onSourceEnd),
        timeline: {
            open: Date.now(),
            close: null
        },
        id: externalId
    };
    return stream;
};

},{"abortable-iterator":"jIHDo","debug":"l0oUb","it-pushable":"fVlDP","bl/BufferList":"cf0Az","err-code":"dUrrM","./restrict-size":"5GU95","./message-types":"gnt19"}],"4KMsB":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = debug("libp2p:webrtc-star");
log.error = debug("libp2p:webrtc-star:error");
const { EventEmitter  } = require("events");
const errcode = require("err-code");
const withIs = require("class-is");
const { AbortError  } = require("abortable-iterator");
const SimplePeer = require("libp2p-webrtc-peer");
const { supportsWebRTCDataChannels: webrtcSupport  } = require("ipfs-utils/src/supports");
const { Multiaddr  } = require("multiaddr");
const mafmt = require("mafmt");
const PeerId = require("peer-id");
const { CODE_CIRCUIT  } = require("./constants");
const createListener = require("./listener");
const toConnection = require("./socket-to-conn");
const { cleanMultiaddr , cleanUrlSIO  } = require("./utils");
function noop() {}
/**
 * @class WebRTCStar
 */ class WebRTCStar {
    /**
   * @class
   * @param {object} options
   * @param {Upgrader} options.upgrader
   */ constructor(options = {}){
        if (!options.upgrader) throw new Error("An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.");
        this._upgrader = options.upgrader;
        this.sioOptions = {
            transports: [
                "websocket"
            ],
            "force new connection": true
        };
        if (options.wrtc) this.wrtc = options.wrtc;
        // Keep Signalling references
        this.sigReferences = new Map();
        // Discovery
        this.discovery = new EventEmitter();
        this.discovery.tag = "webRTCStar";
        this.discovery._isStarted = false;
        this.discovery.start = ()=>{
            this.discovery._isStarted = true;
        };
        this.discovery.stop = ()=>{
            this.discovery._isStarted = false;
        };
        this._peerDiscovered = this._peerDiscovered.bind(this);
    }
    /**
   * @async
   * @param {Multiaddr} ma
   * @param {object} options
   * @param {AbortSignal} options.signal - Used to abort dial requests
   * @returns {Connection} An upgraded Connection
   */ async dial(ma, options = {}) {
        const rawConn = await this._connect(ma, options);
        const maConn = toConnection(rawConn, {
            remoteAddr: ma,
            signal: options.signal
        });
        log("new outbound connection %s", maConn.remoteAddr);
        const conn = await this._upgrader.upgradeOutbound(maConn);
        log("outbound connection %s upgraded", maConn.remoteAddr);
        return conn;
    }
    /**
   * @private
   * @param {Multiaddr} ma
   * @param {object} options
   * @param {AbortSignal} options.signal - Used to abort dial requests
   * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel
   */ _connect(ma, options = {}) {
        if (options.signal && options.signal.aborted) throw new AbortError();
        const spOptions = {
            initiator: true,
            trickle: false,
            ...options.spOptions || {}
        };
        // Use custom WebRTC implementation
        if (this.wrtc) spOptions.wrtc = this.wrtc;
        const cOpts = ma.toOptions();
        const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now();
        return new Promise((resolve, reject)=>{
            const sio = this.sigReferences.get(cleanUrlSIO(ma));
            if (!sio || !sio.listener) return reject(errcode(new Error("unknown signal server to use"), "ERR_UNKNOWN_SIGNAL_SERVER"));
            const sioClient = sio.listener.io;
            const start = Date.now();
            let connected;
            log("dialing %s:%s", cOpts.host, cOpts.port);
            const channel = new SimplePeer(spOptions);
            const onError = (err)=>{
                if (!connected) {
                    const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`;
                    log.error(msg);
                    done(err);
                }
            };
            const onTimeout = ()=>{
                log("connnection timeout %s:%s", cOpts.host, cOpts.port);
                const err = errcode(new Error(`connection timeout after ${Date.now() - start}ms`), "ERR_CONNECT_TIMEOUT");
                // Note: this will result in onError() being called
                channel.emit("error", err);
            };
            const onConnect = ()=>{
                connected = true;
                log("connection opened %s:%s", cOpts.host, cOpts.port);
                done(null);
            };
            const onAbort = ()=>{
                log.error("connection aborted %s:%s", cOpts.host, cOpts.port);
                channel.destroy();
                done(new AbortError());
            };
            const done = (err)=>{
                channel.removeListener("timeout", onTimeout);
                channel.removeListener("connect", onConnect);
                options.signal && options.signal.removeEventListener("abort", onAbort);
                err ? reject(err) : resolve(channel);
            };
            channel.on("error", onError);
            channel.once("timeout", onTimeout);
            channel.once("connect", onConnect);
            channel.on("close", ()=>{
                channel.removeListener("error", onError);
            });
            options.signal && options.signal.addEventListener("abort", onAbort);
            channel.on("signal", (signal)=>{
                sioClient.emit("ss-handshake", {
                    intentId: intentId,
                    srcMultiaddr: sio.signallingAddr.toString(),
                    dstMultiaddr: ma.toString(),
                    signal: signal
                });
            });
            // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we
            // are clueless as to why.
            sioClient.on("ws-handshake", (offer)=>{
                if (offer.intentId === intentId && offer.err) {
                    channel.destroy();
                    reject(errcode(offer.err instanceof Error ? offer.err : new Error(offer.err), "ERR_SIGNALLING_FAILED"));
                }
                if (offer.intentId !== intentId || !offer.answer || channel.destroyed) return;
                channel.signal(offer.signal);
            });
        });
    }
    /**
   * Creates a WebrtcStar listener. The provided `handler` function will be called
   * anytime a new incoming Connection has been successfully upgraded via
   * `upgrader.upgradeInbound`.
   *
   * @param {object} [options] - simple-peer options for listener
   * @param {function (Connection)} handler
   * @returns {Listener} A WebrtcStar listener
   */ createListener(options = {}, handler) {
        if (!webrtcSupport && !this.wrtc) throw errcode(new Error("no WebRTC support"), "ERR_NO_WEBRTC_SUPPORT");
        if (typeof options === "function") {
            handler = options;
            options = {};
        }
        handler = handler || noop;
        return createListener({
            handler,
            upgrader: this._upgrader
        }, this, options);
    }
    /**
   * Takes a list of `Multiaddr`s and returns only valid TCP addresses
   *
   * @param {Multiaddr[]} multiaddrs
   * @returns {Multiaddr[]} Valid TCP multiaddrs
   */ filter(multiaddrs) {
        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [
            multiaddrs
        ];
        return multiaddrs.filter((ma)=>{
            if (ma.protoCodes().includes(CODE_CIRCUIT)) return false;
            return mafmt.WebRTCStar.matches(ma);
        });
    }
    _peerDiscovered(maStr) {
        if (!this.discovery._isStarted) return;
        log("Peer Discovered:", maStr);
        maStr = cleanMultiaddr(maStr);
        const ma = new Multiaddr(maStr);
        const peerId = PeerId.createFromB58String(ma.getPeerId());
        this.discovery.emit("peer", {
            id: peerId,
            multiaddrs: [
                ma
            ]
        });
    }
}
module.exports = withIs(WebRTCStar, {
    className: "WebRTCStar",
    symbolName: "@libp2p/js-libp2p-webrtc-star/webrtcstar"
});

},{"debug":"l0oUb","events":"1VQLm","err-code":"dUrrM","class-is":"50lkq","abortable-iterator":"jIHDo","libp2p-webrtc-peer":"CUF3l","ipfs-utils/src/supports":"g7s02","multiaddr":"dOMJu","mafmt":"04arZ","peer-id":"etBKN","./constants":"euSyt","./listener":"8TwvK","./socket-to-conn":"2ZyNn","./utils":"9sPb3"}],"CUF3l":[function(require,module,exports) {
/*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ var debug = require("debug")("simple-peer");
var getBrowserRTC = require("get-browser-rtc");
var randombytes = require("randombytes");
var stream = require("readable-stream");
var queueMicrotask = require("queue-microtask") // TODO: remove when Node 10 is not supported
;
var errCode = require("err-code");
var MAX_BUFFERED_AMOUNT = 65536;
var ICECOMPLETE_TIMEOUT = 5000;
var CHANNEL_CLOSING_TIMEOUT = 5000;
// HACK: Filter trickle lines when trickle is disabled #354
function filterTrickle(sdp) {
    return sdp.replace(/a=ice-options:trickle\s\n/g, "");
}
function warn(message) {
    console.warn(message);
}
/**
 * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.
 * Duplex stream.
 * @param {Object} opts
 */ class Peer extends stream.Duplex {
    constructor(opts){
        opts = Object.assign({
            allowHalfOpen: false
        }, opts);
        super(opts);
        this._id = randombytes(4).toString("hex").slice(0, 7);
        this._debug("new peer %o", opts);
        this.channelName = opts.initiator ? opts.channelName || randombytes(20).toString("hex") : null;
        this.initiator = opts.initiator || false;
        this.channelConfig = opts.channelConfig || Peer.channelConfig;
        this.negotiated = this.channelConfig.negotiated;
        this.config = Object.assign({}, Peer.config, opts.config);
        this.offerOptions = opts.offerOptions || {};
        this.answerOptions = opts.answerOptions || {};
        this.sdpTransform = opts.sdpTransform || ((sdp)=>sdp);
        this.streams = opts.streams || (opts.stream ? [
            opts.stream
        ] : [] // support old "stream" option
        );
        this.trickle = opts.trickle !== undefined ? opts.trickle : true;
        this.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false;
        this.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT;
        this._connected = false;
        this.remoteAddress = undefined;
        this.remoteFamily = undefined;
        this.remotePort = undefined;
        this.localAddress = undefined;
        this.localFamily = undefined;
        this.localPort = undefined;
        this._wrtc = opts.wrtc && typeof opts.wrtc === "object" ? opts.wrtc : getBrowserRTC();
        if (!this._wrtc) {
            if (typeof window === "undefined") throw errCode(new Error("No WebRTC support: Specify `opts.wrtc` option in this environment"), "ERR_WEBRTC_SUPPORT");
            else throw errCode(new Error("No WebRTC support: Not a supported browser"), "ERR_WEBRTC_SUPPORT");
        }
        this._pcReady = false;
        this._channelReady = false;
        this._iceComplete = false // ice candidate trickle done (got null candidate)
        ;
        this._iceCompleteTimer = null // send an offer/answer anyway after some timeout
        ;
        this._channel = null;
        this._pendingCandidates = [];
        this._isNegotiating = this.negotiated ? false : !this.initiator // is this peer waiting for negotiation to complete?
        ;
        this._batchedNegotiation = false // batch synchronous negotiations
        ;
        this._queuedNegotiation = false // is there a queued negotiation request?
        ;
        this._sendersAwaitingStable = [];
        this._senderMap = new Map();
        this._firstStable = true;
        this._closingInterval = null;
        this._remoteTracks = [];
        this._remoteStreams = [];
        this._chunk = null;
        this._cb = null;
        this._interval = null;
        try {
            this._pc = new this._wrtc.RTCPeerConnection(this.config);
        } catch (err) {
            queueMicrotask(()=>this.destroy(errCode(err, "ERR_PC_CONSTRUCTOR")));
            return;
        }
        // We prefer feature detection whenever possible, but sometimes that's not
        // possible for certain implementations.
        this._isReactNativeWebrtc = typeof this._pc._peerConnectionId === "number";
        this._pc.oniceconnectionstatechange = ()=>{
            this._onIceStateChange();
        };
        this._pc.onicegatheringstatechange = ()=>{
            this._onIceStateChange();
        };
        this._pc.onconnectionstatechange = ()=>{
            this._onConnectionStateChange();
        };
        this._pc.onsignalingstatechange = ()=>{
            this._onSignalingStateChange();
        };
        this._pc.onicecandidate = (event)=>{
            this._onIceCandidate(event);
        };
        // Other spec events, unused by this implementation:
        // - onconnectionstatechange
        // - onicecandidateerror
        // - onfingerprintfailure
        // - onnegotiationneeded
        if (this.initiator || this.negotiated) this._setupData({
            channel: this._pc.createDataChannel(this.channelName, this.channelConfig)
        });
        else this._pc.ondatachannel = (event)=>{
            this._setupData(event);
        };
        if (this.streams) this.streams.forEach((stream1)=>{
            this.addStream(stream1);
        });
        this._pc.ontrack = (event)=>{
            this._onTrack(event);
        };
        if (this.initiator) this._needsNegotiation();
        this._onFinishBound = ()=>{
            this._onFinish();
        };
        this.once("finish", this._onFinishBound);
    }
    get bufferSize() {
        return this._channel && this._channel.bufferedAmount || 0;
    }
    // HACK: it's possible channel.readyState is "closing" before peer.destroy() fires
    // https://bugs.chromium.org/p/chromium/issues/detail?id=882743
    get connected() {
        return this._connected && this._channel.readyState === "open";
    }
    address() {
        return {
            port: this.localPort,
            family: this.localFamily,
            address: this.localAddress
        };
    }
    signal(data) {
        if (this.destroyed) throw errCode(new Error("cannot signal after peer is destroyed"), "ERR_SIGNALING");
        if (typeof data === "string") try {
            data = JSON.parse(data);
        } catch (err1) {
            data = {};
        }
        this._debug("signal()");
        if (data.renegotiate && this.initiator) {
            this._debug("got request to renegotiate");
            this._needsNegotiation();
        }
        if (data.transceiverRequest && this.initiator) {
            this._debug("got request for transceiver");
            this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init);
        }
        if (data.candidate) {
            if (this._pc.remoteDescription && this._pc.remoteDescription.type) this._addIceCandidate(data.candidate);
            else this._pendingCandidates.push(data.candidate);
        }
        if (data.sdp) this._pc.setRemoteDescription(new this._wrtc.RTCSessionDescription(data)).then(()=>{
            if (this.destroyed) return;
            this._pendingCandidates.forEach((candidate)=>{
                this._addIceCandidate(candidate);
            });
            this._pendingCandidates = [];
            if (this._pc.remoteDescription.type === "offer") this._createAnswer();
        }).catch((err)=>{
            this.destroy(errCode(err, "ERR_SET_REMOTE_DESCRIPTION"));
        });
        if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) this.destroy(errCode(new Error("signal() called with invalid signal data"), "ERR_SIGNALING"));
    }
    _addIceCandidate(candidate) {
        var iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate);
        this._pc.addIceCandidate(iceCandidateObj).catch((err)=>{
            if (!iceCandidateObj.address || iceCandidateObj.address.endsWith(".local")) warn("Ignoring unsupported ICE candidate.");
            else this.destroy(errCode(err, "ERR_ADD_ICE_CANDIDATE"));
        });
    }
    /**
   * Send text/binary data to the remote peer.
   * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk
   */ send(chunk) {
        this._channel.send(chunk);
    }
    /**
   * Add a Transceiver to the connection.
   * @param {String} kind
   * @param {Object} init
   */ addTransceiver(kind, init) {
        this._debug("addTransceiver()");
        if (this.initiator) try {
            this._pc.addTransceiver(kind, init);
            this._needsNegotiation();
        } catch (err) {
            this.destroy(errCode(err, "ERR_ADD_TRANSCEIVER"));
        }
        else this.emit("signal", {
            transceiverRequest: {
                kind,
                init
            }
        });
    }
    /**
   * Add a MediaStream to the connection.
   * @param {MediaStream} stream
   */ addStream(stream2) {
        this._debug("addStream()");
        stream2.getTracks().forEach((track)=>{
            this.addTrack(track, stream2);
        });
    }
    /**
   * Add a MediaStreamTrack to the connection.
   * @param {MediaStreamTrack} track
   * @param {MediaStream} stream
   */ addTrack(track, stream3) {
        this._debug("addTrack()");
        var submap = this._senderMap.get(track) || new Map() // nested Maps map [track, stream] to sender
        ;
        var sender = submap.get(stream3);
        if (!sender) {
            sender = this._pc.addTrack(track, stream3);
            submap.set(stream3, sender);
            this._senderMap.set(track, submap);
            this._needsNegotiation();
        } else if (sender.removed) throw errCode(new Error("Track has been removed. You should enable/disable tracks that you want to re-add."), "ERR_SENDER_REMOVED");
        else throw errCode(new Error("Track has already been added to that stream."), "ERR_SENDER_ALREADY_ADDED");
    }
    /**
   * Replace a MediaStreamTrack by another in the connection.
   * @param {MediaStreamTrack} oldTrack
   * @param {MediaStreamTrack} newTrack
   * @param {MediaStream} stream
   */ replaceTrack(oldTrack, newTrack, stream4) {
        this._debug("replaceTrack()");
        var submap = this._senderMap.get(oldTrack);
        var sender = submap ? submap.get(stream4) : null;
        if (!sender) throw errCode(new Error("Cannot replace track that was never added."), "ERR_TRACK_NOT_ADDED");
        if (newTrack) this._senderMap.set(newTrack, submap);
        if (sender.replaceTrack != null) sender.replaceTrack(newTrack);
        else this.destroy(errCode(new Error("replaceTrack is not supported in this browser"), "ERR_UNSUPPORTED_REPLACETRACK"));
    }
    /**
   * Remove a MediaStreamTrack from the connection.
   * @param {MediaStreamTrack} track
   * @param {MediaStream} stream
   */ removeTrack(track, stream5) {
        this._debug("removeSender()");
        var submap = this._senderMap.get(track);
        var sender = submap ? submap.get(stream5) : null;
        if (!sender) throw errCode(new Error("Cannot remove track that was never added."), "ERR_TRACK_NOT_ADDED");
        try {
            sender.removed = true;
            this._pc.removeTrack(sender);
        } catch (err) {
            if (err.name === "NS_ERROR_UNEXPECTED") this._sendersAwaitingStable.push(sender) // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874
            ;
            else this.destroy(errCode(err, "ERR_REMOVE_TRACK"));
        }
        this._needsNegotiation();
    }
    /**
   * Remove a MediaStream from the connection.
   * @param {MediaStream} stream
   */ removeStream(stream6) {
        this._debug("removeSenders()");
        stream6.getTracks().forEach((track)=>{
            this.removeTrack(track, stream6);
        });
    }
    _needsNegotiation() {
        this._debug("_needsNegotiation");
        if (this._batchedNegotiation) return; // batch synchronous renegotiations
        this._batchedNegotiation = true;
        queueMicrotask(()=>{
            this._batchedNegotiation = false;
            this._debug("starting batched negotiation");
            this.negotiate();
        });
    }
    negotiate() {
        if (this.initiator) {
            if (this._isNegotiating) {
                this._queuedNegotiation = true;
                this._debug("already negotiating, queueing");
            } else {
                this._debug("start negotiation");
                setTimeout(()=>{
                    this._createOffer();
                }, 0);
            }
        } else if (this._isNegotiating) {
            this._queuedNegotiation = true;
            this._debug("already negotiating, queueing");
        } else {
            this._debug("requesting negotiation from initiator");
            this.emit("signal", {
                renegotiate: true
            });
        }
        this._isNegotiating = true;
    }
    _destroy(err, cb) {
        this._debug("destroy (error: %s)", err && (err.message || err));
        this.readable = this.writable = false;
        if (!this._readableState.ended) this.push(null);
        if (!this._writableState.finished) this.end();
        this._connected = false;
        this._pcReady = false;
        this._channelReady = false;
        this._remoteTracks = null;
        this._remoteStreams = null;
        this._senderMap = null;
        clearInterval(this._closingInterval);
        this._closingInterval = null;
        clearInterval(this._interval);
        this._interval = null;
        this._chunk = null;
        this._cb = null;
        if (this._onFinishBound) this.removeListener("finish", this._onFinishBound);
        this._onFinishBound = null;
        if (this._channel) {
            try {
                this._channel.close();
            } catch (err) {}
            this._channel.onmessage = null;
            this._channel.onopen = null;
            this._channel.onclose = null;
            this._channel.onerror = null;
        }
        if (this._pc) {
            try {
                this._pc.close();
            } catch (err) {}
            this._pc.oniceconnectionstatechange = null;
            this._pc.onicegatheringstatechange = null;
            this._pc.onsignalingstatechange = null;
            this._pc.onicecandidate = null;
            this._pc.ontrack = null;
            this._pc.ondatachannel = null;
        }
        this._pc = null;
        this._channel = null;
        cb(err);
    }
    _setupData(event1) {
        if (!event1.channel) // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),
        // which is invalid behavior. Handle it gracefully.
        // See: https://github.com/feross/simple-peer/issues/163
        return this.destroy(errCode(new Error("Data channel event is missing `channel` property"), "ERR_DATA_CHANNEL"));
        this._channel = event1.channel;
        this._channel.binaryType = "arraybuffer";
        if (typeof this._channel.bufferedAmountLowThreshold === "number") this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT;
        this.channelName = this._channel.label;
        this._channel.onmessage = (event)=>{
            this._onChannelMessage(event);
        };
        this._channel.onbufferedamountlow = ()=>{
            this._onChannelBufferedAmountLow();
        };
        this._channel.onopen = ()=>{
            this._onChannelOpen();
        };
        this._channel.onclose = ()=>{
            this._onChannelClose();
        };
        this._channel.onerror = (err)=>{
            this.destroy(errCode(err, "ERR_DATA_CHANNEL"));
        };
        // HACK: Chrome will sometimes get stuck in readyState "closing", let's check for this condition
        // https://bugs.chromium.org/p/chromium/issues/detail?id=882743
        var isClosing = false;
        this._closingInterval = setInterval(()=>{
            if (this._channel && this._channel.readyState === "closing") {
                if (isClosing) this._onChannelClose() // closing timed out: equivalent to onclose firing
                ;
                isClosing = true;
            } else isClosing = false;
        }, CHANNEL_CLOSING_TIMEOUT);
    }
    _read() {}
    _write(chunk, encoding, cb) {
        if (this.destroyed) return cb(errCode(new Error("cannot write after peer is destroyed"), "ERR_DATA_CHANNEL"));
        if (this._connected) {
            try {
                this.send(chunk);
            } catch (err) {
                return this.destroy(errCode(err, "ERR_DATA_CHANNEL"));
            }
            if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {
                this._debug("start backpressure: bufferedAmount %d", this._channel.bufferedAmount);
                this._cb = cb;
            } else cb(null);
        } else {
            this._debug("write before connect");
            this._chunk = chunk;
            this._cb = cb;
        }
    }
    // When stream finishes writing, close socket. Half open connections are not
    // supported.
    _onFinish() {
        if (this.destroyed) return;
        // Wait a bit before destroying so the socket flushes.
        // TODO: is there a more reliable way to accomplish this?
        const destroySoon = ()=>{
            setTimeout(()=>this.destroy(), 1000);
        };
        if (this._connected) destroySoon();
        else this.once("connect", destroySoon);
    }
    _startIceCompleteTimeout() {
        if (this.destroyed) return;
        if (this._iceCompleteTimer) return;
        this._debug("started iceComplete timeout");
        this._iceCompleteTimer = setTimeout(()=>{
            if (!this._iceComplete) {
                this._iceComplete = true;
                this._debug("iceComplete timeout completed");
                this.emit("iceTimeout");
                this.emit("_iceComplete");
            }
        }, this.iceCompleteTimeout);
    }
    _createOffer() {
        if (this.destroyed) return;
        this._pc.createOffer(this.offerOptions).then((offer)=>{
            if (this.destroyed) return;
            if (!this.trickle && !this.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp);
            offer.sdp = this.sdpTransform(offer.sdp);
            const sendOffer = ()=>{
                if (this.destroyed) return;
                var signal = this._pc.localDescription || offer;
                this._debug("signal");
                this.emit("signal", {
                    type: signal.type,
                    sdp: signal.sdp
                });
            };
            const onSuccess = ()=>{
                this._debug("createOffer success");
                if (this.destroyed) return;
                if (this.trickle || this._iceComplete) sendOffer();
                else this.once("_iceComplete", sendOffer) // wait for candidates
                ;
            };
            const onError = (err)=>{
                this.destroy(errCode(err, "ERR_SET_LOCAL_DESCRIPTION"));
            };
            this._pc.setLocalDescription(offer).then(onSuccess).catch(onError);
        }).catch((err)=>{
            this.destroy(errCode(err, "ERR_CREATE_OFFER"));
        });
    }
    _requestMissingTransceivers() {
        if (this._pc.getTransceivers) this._pc.getTransceivers().forEach((transceiver)=>{
            if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {
                transceiver.requested = true // HACK: Safari returns negotiated transceivers with a null mid
                ;
                this.addTransceiver(transceiver.sender.track.kind);
            }
        });
    }
    _createAnswer() {
        if (this.destroyed) return;
        this._pc.createAnswer(this.answerOptions).then((answer)=>{
            if (this.destroyed) return;
            if (!this.trickle && !this.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp);
            answer.sdp = this.sdpTransform(answer.sdp);
            const sendAnswer = ()=>{
                if (this.destroyed) return;
                var signal = this._pc.localDescription || answer;
                this._debug("signal");
                this.emit("signal", {
                    type: signal.type,
                    sdp: signal.sdp
                });
                if (!this.initiator) this._requestMissingTransceivers();
            };
            const onSuccess = ()=>{
                if (this.destroyed) return;
                if (this.trickle || this._iceComplete) sendAnswer();
                else this.once("_iceComplete", sendAnswer);
            };
            const onError = (err)=>{
                this.destroy(errCode(err, "ERR_SET_LOCAL_DESCRIPTION"));
            };
            this._pc.setLocalDescription(answer).then(onSuccess).catch(onError);
        }).catch((err)=>{
            this.destroy(errCode(err, "ERR_CREATE_ANSWER"));
        });
    }
    _onConnectionStateChange() {
        if (this.destroyed) return;
        if (this._pc.connectionState === "failed") this.destroy(errCode(new Error("Connection failed."), "ERR_CONNECTION_FAILURE"));
    }
    _onIceStateChange() {
        if (this.destroyed) return;
        var iceConnectionState = this._pc.iceConnectionState;
        var iceGatheringState = this._pc.iceGatheringState;
        this._debug("iceStateChange (connection: %s) (gathering: %s)", iceConnectionState, iceGatheringState);
        this.emit("iceStateChange", iceConnectionState, iceGatheringState);
        if (iceConnectionState === "connected" || iceConnectionState === "completed") {
            this._pcReady = true;
            this._maybeReady();
        }
        if (iceConnectionState === "failed") this.destroy(errCode(new Error("Ice connection failed."), "ERR_ICE_CONNECTION_FAILURE"));
        if (iceConnectionState === "closed") this.destroy(errCode(new Error("Ice connection closed."), "ERR_ICE_CONNECTION_CLOSED"));
    }
    getStats(cb) {
        // statreports can come with a value array instead of properties
        const flattenValues = (report)=>{
            if (Object.prototype.toString.call(report.values) === "[object Array]") report.values.forEach((value)=>{
                Object.assign(report, value);
            });
            return report;
        };
        // Promise-based getStats() (standard)
        if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) this._pc.getStats().then((res)=>{
            var reports = [];
            res.forEach((report)=>{
                reports.push(flattenValues(report));
            });
            cb(null, reports);
        }, (err)=>cb(err));
        else if (this._pc.getStats.length > 0) this._pc.getStats((res)=>{
            // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed
            if (this.destroyed) return;
            var reports = [];
            res.result().forEach((result)=>{
                var report = {};
                result.names().forEach((name)=>{
                    report[name] = result.stat(name);
                });
                report.id = result.id;
                report.type = result.type;
                report.timestamp = result.timestamp;
                reports.push(flattenValues(report));
            });
            cb(null, reports);
        }, (err)=>cb(err));
        else cb(null, []);
    }
    _maybeReady() {
        this._debug("maybeReady pc %s channel %s", this._pcReady, this._channelReady);
        if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return;
        this._connecting = true;
        // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339
        const findCandidatePair = ()=>{
            if (this.destroyed) return;
            this.getStats((err, items)=>{
                if (this.destroyed) return;
                // Treat getStats error as non-fatal. It's not essential.
                if (err) items = [];
                var remoteCandidates = {};
                var localCandidates = {};
                var candidatePairs = {};
                var foundSelectedCandidatePair = false;
                items.forEach((item)=>{
                    // TODO: Once all browsers support the hyphenated stats report types, remove
                    // the non-hypenated ones
                    if (item.type === "remotecandidate" || item.type === "remote-candidate") remoteCandidates[item.id] = item;
                    if (item.type === "localcandidate" || item.type === "local-candidate") localCandidates[item.id] = item;
                    if (item.type === "candidatepair" || item.type === "candidate-pair") candidatePairs[item.id] = item;
                });
                const setSelectedCandidatePair = (selectedCandidatePair)=>{
                    foundSelectedCandidatePair = true;
                    var local = localCandidates[selectedCandidatePair.localCandidateId];
                    if (local && (local.ip || local.address)) {
                        // Spec
                        this.localAddress = local.ip || local.address;
                        this.localPort = Number(local.port);
                    } else if (local && local.ipAddress) {
                        // Firefox
                        this.localAddress = local.ipAddress;
                        this.localPort = Number(local.portNumber);
                    } else if (typeof selectedCandidatePair.googLocalAddress === "string") {
                        // TODO: remove this once Chrome 58 is released
                        local = selectedCandidatePair.googLocalAddress.split(":");
                        this.localAddress = local[0];
                        this.localPort = Number(local[1]);
                    }
                    if (this.localAddress) this.localFamily = this.localAddress.includes(":") ? "IPv6" : "IPv4";
                    var remote = remoteCandidates[selectedCandidatePair.remoteCandidateId];
                    if (remote && (remote.ip || remote.address)) {
                        // Spec
                        this.remoteAddress = remote.ip || remote.address;
                        this.remotePort = Number(remote.port);
                    } else if (remote && remote.ipAddress) {
                        // Firefox
                        this.remoteAddress = remote.ipAddress;
                        this.remotePort = Number(remote.portNumber);
                    } else if (typeof selectedCandidatePair.googRemoteAddress === "string") {
                        // TODO: remove this once Chrome 58 is released
                        remote = selectedCandidatePair.googRemoteAddress.split(":");
                        this.remoteAddress = remote[0];
                        this.remotePort = Number(remote[1]);
                    }
                    if (this.remoteAddress) this.remoteFamily = this.remoteAddress.includes(":") ? "IPv6" : "IPv4";
                    this._debug("connect local: %s:%s remote: %s:%s", this.localAddress, this.localPort, this.remoteAddress, this.remotePort);
                };
                items.forEach((item)=>{
                    // Spec-compliant
                    if (item.type === "transport" && item.selectedCandidatePairId) setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId]);
                    // Old implementations
                    if (item.type === "googCandidatePair" && item.googActiveConnection === "true" || (item.type === "candidatepair" || item.type === "candidate-pair") && item.selected) setSelectedCandidatePair(item);
                });
                // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates
                // But wait until at least 1 candidate pair is available
                if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {
                    setTimeout(findCandidatePair, 100);
                    return;
                } else {
                    this._connecting = false;
                    this._connected = true;
                }
                if (this._chunk) {
                    try {
                        this.send(this._chunk);
                    } catch (err) {
                        return this.destroy(errCode(err, "ERR_DATA_CHANNEL"));
                    }
                    this._chunk = null;
                    this._debug('sent chunk from "write before connect"');
                    var cb = this._cb;
                    this._cb = null;
                    cb(null);
                }
                // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,
                // fallback to using setInterval to implement backpressure.
                if (typeof this._channel.bufferedAmountLowThreshold !== "number") {
                    this._interval = setInterval(()=>this._onInterval(), 150);
                    if (this._interval.unref) this._interval.unref();
                }
                this._debug("connect");
                this.emit("connect");
            });
        };
        findCandidatePair();
    }
    _onInterval() {
        if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) return;
        this._onChannelBufferedAmountLow();
    }
    _onSignalingStateChange() {
        if (this.destroyed) return;
        if (this._pc.signalingState === "stable" && !this._firstStable) {
            this._isNegotiating = false;
            // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'
            this._debug("flushing sender queue", this._sendersAwaitingStable);
            this._sendersAwaitingStable.forEach((sender)=>{
                this._pc.removeTrack(sender);
                this._queuedNegotiation = true;
            });
            this._sendersAwaitingStable = [];
            if (this._queuedNegotiation) {
                this._debug("flushing negotiation queue");
                this._queuedNegotiation = false;
                this._needsNegotiation() // negotiate again
                ;
            }
            this._debug("negotiate");
            this.emit("negotiate");
        }
        this._firstStable = false;
        this._debug("signalingStateChange %s", this._pc.signalingState);
        this.emit("signalingStateChange", this._pc.signalingState);
    }
    _onIceCandidate(event) {
        if (this.destroyed) return;
        if (event.candidate && this.trickle) this.emit("signal", {
            candidate: {
                candidate: event.candidate.candidate,
                sdpMLineIndex: event.candidate.sdpMLineIndex,
                sdpMid: event.candidate.sdpMid
            }
        });
        else if (!event.candidate && !this._iceComplete) {
            this._iceComplete = true;
            this.emit("_iceComplete");
        }
        // as soon as we've received one valid candidate start timeout
        if (event.candidate) this._startIceCompleteTimeout();
    }
    _onChannelMessage(event) {
        if (this.destroyed) return;
        var data = event.data;
        if (data instanceof ArrayBuffer) data = new Uint8Array(data);
        this.push(data);
    }
    _onChannelBufferedAmountLow() {
        if (this.destroyed || !this._cb) return;
        this._debug("ending backpressure: bufferedAmount %d", this._channel.bufferedAmount);
        var cb = this._cb;
        this._cb = null;
        cb(null);
    }
    _onChannelOpen() {
        if (this._connected || this.destroyed) return;
        this._debug("on channel open");
        this._channelReady = true;
        this._maybeReady();
    }
    _onChannelClose() {
        if (this.destroyed) return;
        this._debug("on channel close");
        this.destroy();
    }
    _onTrack(event) {
        if (this.destroyed) return;
        event.streams.forEach((eventStream)=>{
            this._debug("on track");
            this.emit("track", event.track, eventStream);
            this._remoteTracks.push({
                track: event.track,
                stream: eventStream
            });
            if (this._remoteStreams.some((remoteStream)=>{
                return remoteStream.id === eventStream.id;
            })) return; // Only fire one 'stream' event, even though there may be multiple tracks per stream
            this._remoteStreams.push(eventStream);
            queueMicrotask(()=>{
                this.emit("stream", eventStream) // ensure all tracks have been added
                ;
            });
        });
    }
    _debug() {
        var args = [].slice.call(arguments);
        args[0] = "[" + this._id + "] " + args[0];
        debug.apply(null, args);
    }
}
Peer.WEBRTC_SUPPORT = !!getBrowserRTC();
/**
 * Expose peer and data channel config for overriding all Peer
 * instances. Otherwise, just set opts.config or opts.channelConfig
 * when constructing a Peer.
 */ Peer.config = {
    iceServers: [
        {
            urls: [
                "stun:stun.l.google.com:19302",
                "stun:global.stun.twilio.com:3478"
            ]
        }
    ],
    sdpSemantics: "unified-plan"
};
Peer.channelConfig = {};
module.exports = Peer;

},{"debug":"l0oUb","get-browser-rtc":"2oPI3","randombytes":"8hjhE","readable-stream":"jXNWE","queue-microtask":"fQqUJ","err-code":"jrQk6"}],"2oPI3":[function(require,module,exports) {
// originally pulled out of simple-peer
module.exports = function getBrowserRTC() {
    if (typeof globalThis === "undefined") return null;
    var wrtc = {
        RTCPeerConnection: globalThis.RTCPeerConnection || globalThis.mozRTCPeerConnection || globalThis.webkitRTCPeerConnection,
        RTCSessionDescription: globalThis.RTCSessionDescription || globalThis.mozRTCSessionDescription || globalThis.webkitRTCSessionDescription,
        RTCIceCandidate: globalThis.RTCIceCandidate || globalThis.mozRTCIceCandidate || globalThis.webkitRTCIceCandidate
    };
    if (!wrtc.RTCPeerConnection) return null;
    return wrtc;
};

},{}],"jXNWE":[function(require,module,exports) {
exports = module.exports = require("./lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("./lib/_stream_writable.js");
exports.Duplex = require("./lib/_stream_duplex.js");
exports.Transform = require("./lib/_stream_transform.js");
exports.PassThrough = require("./lib/_stream_passthrough.js");
exports.finished = require("./lib/internal/streams/end-of-stream.js");
exports.pipeline = require("./lib/internal/streams/pipeline.js");

},{"./lib/_stream_readable.js":"6NdbQ","./lib/_stream_writable.js":"gTkcq","./lib/_stream_duplex.js":"kKNA3","./lib/_stream_transform.js":"ba8Mr","./lib/_stream_passthrough.js":"2xP98","./lib/internal/streams/end-of-stream.js":"aOMy2","./lib/internal/streams/pipeline.js":"fyp4t"}],"6NdbQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var global = arguments[3];
var process = require("process");
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("events").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("util");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("./internal/streams/buffer_list");
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("inherits")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("./_stream_duplex");
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup"); // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit("pipe", src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount("data") > 0) self.resume();
}
function nReadingNextTick(self) {
    debug("readable nexttick read 0");
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume"); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < kProxyEvents.length; n1++)stream.on(kProxyEvents[n1], this.emit.bind(this, kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("./internal/streams/async_iterator");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("./internal/streams/from");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"d5jf4","events":"1VQLm","./internal/streams/stream":"60BLS","buffer":"fCgem","util":"jhUEF","./internal/streams/buffer_list":"hf3P2","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3","string_decoder/":"3vmkr","./internal/streams/async_iterator":"k019Y","./internal/streams/from":"ak0YH"}],"60BLS":[function(require,module,exports) {
module.exports = require("events").EventEmitter;

},{"events":"1VQLm"}],"hf3P2":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require("buffer"), Buffer = _require.Buffer;
var _require2 = require("util"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"buffer":"fCgem","util":"jhUEF"}],"YI8DF":[function(require,module,exports) {
"use strict"; // undocumented cb() API, needed for core, not for public API
var process = require("process");
function destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"d5jf4"}],"61BRN":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("../../../errors").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"aJlwj"}],"aJlwj":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"kKNA3":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
"use strict";
var process = require("process");
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys1 = [];
    for(var key in obj)keys1.push(key);
    return keys1;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("./_stream_readable");
var Writable = require("./_stream_writable");
require("inherits")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"d5jf4","./_stream_readable":"6NdbQ","./_stream_writable":"gTkcq","inherits":"bRL3M"}],"gTkcq":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
"use strict";
var global = arguments[3];
var process = require("process");
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("util-deprecate")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("inherits")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("./_stream_duplex"); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"d5jf4","util-deprecate":"j92NQ","./internal/streams/stream":"60BLS","buffer":"fCgem","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3"}],"j92NQ":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"3vmkr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("safe-buffer").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "\uFFFD";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "\uFFFD";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "\uFFFD";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "\uFFFD";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"safe-buffer":"eW7r9"}],"k019Y":[function(require,module,exports) {
"use strict";
var process = require("process");
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require("./end-of-stream");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"d5jf4","./end-of-stream":"aOMy2"}],"aOMy2":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"../../../errors":"aJlwj"}],"ak0YH":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"ba8Mr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("./_stream_duplex");
require("inherits")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"aJlwj","./_stream_duplex":"kKNA3","inherits":"bRL3M"}],"2xP98":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("./_stream_transform");
require("inherits")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"ba8Mr","inherits":"bRL3M"}],"fyp4t":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("./end-of-stream");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"aJlwj","./end-of-stream":"aOMy2"}],"fQqUJ":[function(require,module,exports) {
var global = arguments[3];
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ let promise;
module.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb)=>(promise || (promise = Promise.resolve())).then(cb).catch((err)=>setTimeout(()=>{
            throw err;
        }, 0));

},{}],"jrQk6":[function(require,module,exports) {
"use strict";
function assign(obj, props) {
    for(const key in props)Object.defineProperty(obj, key, {
        value: props[key],
        enumerable: true,
        configurable: true
    });
    return obj;
}
function createError(err, code, props) {
    if (!err || typeof err === "string") throw new TypeError("Please pass an Error to err-code");
    if (!props) props = {};
    if (typeof code === "object") {
        props = code;
        code = undefined;
    }
    if (code != null) props.code = code;
    try {
        return assign(err, props);
    } catch (_) {
        props.message = err.message;
        props.stack = err.stack;
        const ErrClass = function() {};
        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));
        return assign(new ErrClass(), props);
    }
}
module.exports = createError;

},{}],"g7s02":[function(require,module,exports) {
"use strict";
module.exports = {
    // in React Native: global === window === self
    supportsFileReader: typeof self !== "undefined" && "FileReader" in self,
    supportsWebRTC: "RTCPeerConnection" in globalThis && typeof navigator !== "undefined" && typeof navigator.mediaDevices !== "undefined" && "getUserMedia" in navigator.mediaDevices,
    supportsWebRTCDataChannels: "RTCPeerConnection" in globalThis
};

},{}],"euSyt":[function(require,module,exports) {
"use strict";
// p2p multi-address code
exports.CODE_P2P = 421;
exports.CODE_CIRCUIT = 290;
// Time to wait for a connection to close gracefully before destroying it manually
exports.CLOSE_TIMEOUT = 2000;

},{}],"8TwvK":[function(require,module,exports) {
"use strict";
const EventEmitter = require("events");
const debug = require("debug");
const log = debug("libp2p:webrtc-star:listener");
log.error = debug("libp2p:webrtc-star:listener:error");
const errCode = require("err-code");
const io = require("socket.io-client");
const SimplePeer = require("libp2p-webrtc-peer");
const pDefer = require("p-defer");
const toConnection = require("./socket-to-conn");
const { cleanUrlSIO  } = require("./utils");
const { CODE_P2P  } = require("./constants");
const sioOptions = {
    transports: [
        "websocket"
    ],
    "force new connection": true,
    path: "/socket.io-next/" // This should be removed when socket.io@2 support is removed
};
module.exports = ({ handler , upgrader  }, WebRTCStar, options = {})=>{
    const listener = new EventEmitter();
    let listeningAddr;
    let signallingUrl;
    listener.__connections = [];
    listener.__spChannels = new Map();
    listener.__pendingIntents = new Map();
    listener.listen = (ma)=>{
        // Should only be used if not already listening
        if (listeningAddr) throw errCode(new Error("listener already in use"), "ERR_ALREADY_LISTENING");
        const defer = pDefer();
        // Should be kept unmodified
        listeningAddr = ma;
        let signallingAddr;
        if (!ma.protoCodes().includes(CODE_P2P) && upgrader.localPeer) signallingAddr = ma.encapsulate(`/p2p/${upgrader.localPeer.toB58String()}`);
        else signallingAddr = ma;
        listener.on("error", ()=>defer.reject());
        signallingUrl = cleanUrlSIO(ma);
        log("Dialing to Signalling Server on: " + signallingUrl);
        listener.io = io.connect(signallingUrl, sioOptions);
        const incomingDial = (offer)=>{
            if (offer.answer || offer.err || !offer.intentId) return;
            const intentId = offer.intentId;
            let pendings = listener.__pendingIntents.get(intentId);
            if (!pendings) {
                pendings = [];
                listener.__pendingIntents.set(intentId, pendings);
            }
            let channel = listener.__spChannels.get(intentId);
            if (channel) {
                channel.signal(offer.signal);
                return;
            } else if (offer.signal.type !== "offer") {
                pendings.push(offer);
                return;
            }
            const spOptions = {
                trickle: false,
                ...options
            };
            // Use custom WebRTC implementation
            if (WebRTCStar.wrtc) spOptions.wrtc = WebRTCStar.wrtc;
            channel = new SimplePeer(spOptions);
            const onError = (err)=>{
                log.error("incoming connection errored", err);
            };
            channel.on("error", onError);
            channel.once("close", (...args)=>{
                channel.removeListener("error", onError);
            });
            channel.on("signal", (signal)=>{
                offer.signal = signal;
                offer.answer = true;
                listener.io.emit("ss-handshake", offer);
            });
            channel.signal(offer.signal);
            for (const pendingOffer of pendings)channel.signal(pendingOffer.signal);
            listener.__pendingIntents.set(intentId, []);
            channel.once("connect", async ()=>{
                const maConn = toConnection(channel);
                log("new inbound connection %s", maConn.remoteAddr);
                let conn;
                try {
                    conn = await upgrader.upgradeInbound(maConn);
                } catch (err) {
                    log.error("inbound connection failed to upgrade", err);
                    return maConn.close();
                }
                if (!conn.remoteAddr) try {
                    conn.remoteAddr = ma.decapsulateCode(CODE_P2P).encapsulate(`/p2p/${conn.remotePeer.toB58String()}`);
                } catch (err1) {
                    log.error("could not determine remote address", err1);
                }
                log("inbound connection %s upgraded", maConn.remoteAddr);
                trackConn(listener, maConn, intentId);
                listener.emit("connection", conn);
                handler(conn);
            });
            listener.__spChannels.set(intentId, channel);
        };
        listener.io.once("connect_error", (err)=>defer.reject(err));
        listener.io.once("error", (err)=>{
            listener.emit("error", err);
            listener.emit("close");
        });
        listener.io.on("ws-handshake", incomingDial);
        listener.io.on("ws-peer", WebRTCStar._peerDiscovered);
        listener.io.on("connect", ()=>{
            listener.io.emit("ss-join", signallingAddr.toString());
        });
        listener.io.once("connect", ()=>{
            listener.emit("listening");
            defer.resolve();
        });
        // Store listen and signal reference addresses
        WebRTCStar.sigReferences.set(signallingUrl, {
            listener,
            signallingAddr
        });
        return defer.promise;
    };
    listener.close = async ()=>{
        // Close listener
        const ref = WebRTCStar.sigReferences.get(signallingUrl);
        if (ref && ref.listener.io) {
            ref.listener.io.emit("ss-leave");
            ref.listener.io.close();
        }
        await Promise.all(listener.__connections.map((maConn)=>maConn.close()));
        listener.emit("close");
        listener.removeAllListeners();
        // Reset state
        listeningAddr = undefined;
        WebRTCStar.sigReferences.delete(signallingUrl);
    };
    listener.getAddrs = ()=>{
        return [
            listeningAddr
        ];
    };
    return listener;
};
function trackConn(listener, maConn, intentId) {
    listener.__connections.push(maConn);
    const untrackConn = ()=>{
        listener.__connections = listener.__connections.filter((c)=>c !== maConn);
        listener.__spChannels.delete(intentId);
        listener.__pendingIntents.delete(intentId);
    };
    maConn.conn.once("close", untrackConn);
}

},{"events":"1VQLm","debug":"l0oUb","err-code":"dUrrM","socket.io-client":"8HBJR","libp2p-webrtc-peer":"CUF3l","p-defer":"cWx93","./socket-to-conn":"2ZyNn","./utils":"9sPb3","./constants":"euSyt"}],"8HBJR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Protocol version.
 *
 * @public
 */ parcelHelpers.export(exports, "protocol", ()=>(0, _socketIoParser.protocol));
/**
 * Expose constructors for standalone build.
 *
 * @public
 */ parcelHelpers.export(exports, "Manager", ()=>(0, _managerJs.Manager));
parcelHelpers.export(exports, "Socket", ()=>(0, _socketJs.Socket));
parcelHelpers.export(exports, "io", ()=>lookup);
parcelHelpers.export(exports, "connect", ()=>lookup);
parcelHelpers.export(exports, "default", ()=>lookup);
var _urlJs = require("./url.js");
var _managerJs = require("./manager.js");
var _socketJs = require("./socket.js");
var _socketIoParser = require("socket.io-parser");
/**
 * Managers cache.
 */ const cache = {};
function lookup(uri, opts) {
    if (typeof uri === "object") {
        opts = uri;
        uri = undefined;
    }
    opts = opts || {};
    const parsed = (0, _urlJs.url)(uri, opts.path || "/socket.io");
    const source = parsed.source;
    const id = parsed.id;
    const path = parsed.path;
    const sameNamespace = cache[id] && path in cache[id]["nsps"];
    const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
    let io;
    if (newConnection) io = new (0, _managerJs.Manager)(source, opts);
    else {
        if (!cache[id]) cache[id] = new (0, _managerJs.Manager)(source, opts);
        io = cache[id];
    }
    if (parsed.query && !opts.query) opts.query = parsed.queryKey;
    return io.socket(parsed.path, opts);
}
// so that "lookup" can be used both as a function (e.g. `io(...)`) and as a
// namespace (e.g. `io.connect(...)`), for backward compatibility
Object.assign(lookup, {
    Manager: (0, _managerJs.Manager),
    Socket: (0, _socketJs.Socket),
    io: lookup,
    connect: lookup
});

},{"./url.js":"9Ze3o","./manager.js":"94vh9","./socket.js":"kbWgu","socket.io-parser":"oJOlm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Ze3o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * URL parser.
 *
 * @param uri - url
 * @param path - the request path of the connection
 * @param loc - An object meant to mimic window.location.
 *        Defaults to window.location.
 * @public
 */ parcelHelpers.export(exports, "url", ()=>url);
var _engineIoClient = require("engine.io-client");
function url(uri, path = "", loc) {
    let obj = uri;
    // default to window.location
    loc = loc || typeof location !== "undefined" && location;
    if (null == uri) uri = loc.protocol + "//" + loc.host;
    // relative path support
    if (typeof uri === "string") {
        if ("/" === uri.charAt(0)) {
            if ("/" === uri.charAt(1)) uri = loc.protocol + uri;
            else uri = loc.host + uri;
        }
        if (!/^(https?|wss?):\/\//.test(uri)) {
            if ("undefined" !== typeof loc) uri = loc.protocol + "//" + uri;
            else uri = "https://" + uri;
        }
        // parse
        obj = (0, _engineIoClient.parse)(uri);
    }
    // make sure we treat `localhost:80` and `localhost` equally
    if (!obj.port) {
        if (/^(http|ws)$/.test(obj.protocol)) obj.port = "80";
        else if (/^(http|ws)s$/.test(obj.protocol)) obj.port = "443";
    }
    obj.path = obj.path || "/";
    const ipv6 = obj.host.indexOf(":") !== -1;
    const host = ipv6 ? "[" + obj.host + "]" : obj.host;
    // define unique id
    obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
    // define href
    obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
    return obj;
}

},{"engine.io-client":"jBHFs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jBHFs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Socket", ()=>(0, _socketJs.Socket));
parcelHelpers.export(exports, "protocol", ()=>protocol);
parcelHelpers.export(exports, "Transport", ()=>(0, _transportJs.Transport));
parcelHelpers.export(exports, "transports", ()=>(0, _indexJs.transports));
parcelHelpers.export(exports, "installTimerFunctions", ()=>(0, _utilJs.installTimerFunctions));
parcelHelpers.export(exports, "parse", ()=>(0, _parseuriJs.parse));
var _socketJs = require("./socket.js");
var _transportJs = require("./transport.js");
var _indexJs = require("./transports/index.js");
var _utilJs = require("./util.js");
var _parseuriJs = require("./contrib/parseuri.js");
const protocol = (0, _socketJs.Socket).protocol;

},{"./socket.js":"kpkbh","./transport.js":"kwKKC","./transports/index.js":"2neV7","./util.js":"d7eyH","./contrib/parseuri.js":"5RFyz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kpkbh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Socket", ()=>Socket);
var _indexJs = require("./transports/index.js");
var _utilJs = require("./util.js");
var _parseqsJs = require("./contrib/parseqs.js");
var _parseuriJs = require("./contrib/parseuri.js");
var _componentEmitter = require("@socket.io/component-emitter");
var _engineIoParser = require("engine.io-parser");
class Socket extends (0, _componentEmitter.Emitter) {
    /**
     * Socket constructor.
     *
     * @param {String|Object} uri or options
     * @param {Object} opts - options
     * @api public
     */ constructor(uri, opts = {}){
        super();
        if (uri && "object" === typeof uri) {
            opts = uri;
            uri = null;
        }
        if (uri) {
            uri = (0, _parseuriJs.parse)(uri);
            opts.hostname = uri.host;
            opts.secure = uri.protocol === "https" || uri.protocol === "wss";
            opts.port = uri.port;
            if (uri.query) opts.query = uri.query;
        } else if (opts.host) opts.hostname = (0, _parseuriJs.parse)(opts.host).host;
        (0, _utilJs.installTimerFunctions)(this, opts);
        this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
        if (opts.hostname && !opts.port) // if no port is specified manually, use the protocol default
        opts.port = this.secure ? "443" : "80";
        this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
        this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
        this.transports = opts.transports || [
            "polling",
            "websocket"
        ];
        this.readyState = "";
        this.writeBuffer = [];
        this.prevBufferLen = 0;
        this.opts = Object.assign({
            path: "/engine.io",
            agent: false,
            withCredentials: false,
            upgrade: true,
            timestampParam: "t",
            rememberUpgrade: false,
            rejectUnauthorized: true,
            perMessageDeflate: {
                threshold: 1024
            },
            transportOptions: {},
            closeOnBeforeunload: true
        }, opts);
        this.opts.path = this.opts.path.replace(/\/$/, "") + "/";
        if (typeof this.opts.query === "string") this.opts.query = (0, _parseqsJs.decode)(this.opts.query);
        // set on handshake
        this.id = null;
        this.upgrades = null;
        this.pingInterval = null;
        this.pingTimeout = null;
        // set on heartbeat
        this.pingTimeoutTimer = null;
        if (typeof addEventListener === "function") {
            if (this.opts.closeOnBeforeunload) // Firefox closes the connection when the "beforeunload" event is emitted but not Chrome. This event listener
            // ensures every browser behaves the same (no "disconnect" event at the Socket.IO level when the page is
            // closed/reloaded)
            addEventListener("beforeunload", ()=>{
                if (this.transport) {
                    // silently close the transport
                    this.transport.removeAllListeners();
                    this.transport.close();
                }
            }, false);
            if (this.hostname !== "localhost") {
                this.offlineEventListener = ()=>{
                    this.onClose("transport close", {
                        description: "network connection lost"
                    });
                };
                addEventListener("offline", this.offlineEventListener, false);
            }
        }
        this.open();
    }
    /**
     * Creates transport of the given type.
     *
     * @param {String} transport name
     * @return {Transport}
     * @api private
     */ createTransport(name) {
        const query = Object.assign({}, this.opts.query);
        // append engine.io protocol identifier
        query.EIO = (0, _engineIoParser.protocol);
        // transport name
        query.transport = name;
        // session id if we already have one
        if (this.id) query.sid = this.id;
        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
            query,
            socket: this,
            hostname: this.hostname,
            secure: this.secure,
            port: this.port
        });
        return new (0, _indexJs.transports)[name](opts);
    }
    /**
     * Initializes transport to use and starts probe.
     *
     * @api private
     */ open() {
        let transport;
        if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) transport = "websocket";
        else if (0 === this.transports.length) {
            // Emit error on next tick so it can be listened to
            this.setTimeoutFn(()=>{
                this.emitReserved("error", "No transports available");
            }, 0);
            return;
        } else transport = this.transports[0];
        this.readyState = "opening";
        // Retry with the next transport if the transport is disabled (jsonp: false)
        try {
            transport = this.createTransport(transport);
        } catch (e) {
            this.transports.shift();
            this.open();
            return;
        }
        transport.open();
        this.setTransport(transport);
    }
    /**
     * Sets the current transport. Disables the existing one (if any).
     *
     * @api private
     */ setTransport(transport) {
        if (this.transport) this.transport.removeAllListeners();
        // set up transport
        this.transport = transport;
        // set up transport listeners
        transport.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", (reason)=>this.onClose("transport close", reason));
    }
    /**
     * Probes a transport.
     *
     * @param {String} transport name
     * @api private
     */ probe(name) {
        let transport = this.createTransport(name);
        let failed = false;
        Socket.priorWebsocketSuccess = false;
        const onTransportOpen = ()=>{
            if (failed) return;
            transport.send([
                {
                    type: "ping",
                    data: "probe"
                }
            ]);
            transport.once("packet", (msg)=>{
                if (failed) return;
                if ("pong" === msg.type && "probe" === msg.data) {
                    this.upgrading = true;
                    this.emitReserved("upgrading", transport);
                    if (!transport) return;
                    Socket.priorWebsocketSuccess = "websocket" === transport.name;
                    this.transport.pause(()=>{
                        if (failed) return;
                        if ("closed" === this.readyState) return;
                        cleanup();
                        this.setTransport(transport);
                        transport.send([
                            {
                                type: "upgrade"
                            }
                        ]);
                        this.emitReserved("upgrade", transport);
                        transport = null;
                        this.upgrading = false;
                        this.flush();
                    });
                } else {
                    const err = new Error("probe error");
                    // @ts-ignore
                    err.transport = transport.name;
                    this.emitReserved("upgradeError", err);
                }
            });
        };
        function freezeTransport() {
            if (failed) return;
            // Any callback called by transport should be ignored since now
            failed = true;
            cleanup();
            transport.close();
            transport = null;
        }
        // Handle any error that happens while probing
        const onerror = (err)=>{
            const error = new Error("probe error: " + err);
            // @ts-ignore
            error.transport = transport.name;
            freezeTransport();
            this.emitReserved("upgradeError", error);
        };
        function onTransportClose() {
            onerror("transport closed");
        }
        // When the socket is closed while we're probing
        function onclose() {
            onerror("socket closed");
        }
        // When the socket is upgraded while we're probing
        function onupgrade(to) {
            if (transport && to.name !== transport.name) freezeTransport();
        }
        // Remove all listeners on the transport and on self
        const cleanup = ()=>{
            transport.removeListener("open", onTransportOpen);
            transport.removeListener("error", onerror);
            transport.removeListener("close", onTransportClose);
            this.off("close", onclose);
            this.off("upgrading", onupgrade);
        };
        transport.once("open", onTransportOpen);
        transport.once("error", onerror);
        transport.once("close", onTransportClose);
        this.once("close", onclose);
        this.once("upgrading", onupgrade);
        transport.open();
    }
    /**
     * Called when connection is deemed open.
     *
     * @api private
     */ onOpen() {
        this.readyState = "open";
        Socket.priorWebsocketSuccess = "websocket" === this.transport.name;
        this.emitReserved("open");
        this.flush();
        // we check for `readyState` in case an `open`
        // listener already closed the socket
        if ("open" === this.readyState && this.opts.upgrade && this.transport.pause) {
            let i = 0;
            const l = this.upgrades.length;
            for(; i < l; i++)this.probe(this.upgrades[i]);
        }
    }
    /**
     * Handles a packet.
     *
     * @api private
     */ onPacket(packet) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
            this.emitReserved("packet", packet);
            // Socket is live - any packet counts
            this.emitReserved("heartbeat");
            switch(packet.type){
                case "open":
                    this.onHandshake(JSON.parse(packet.data));
                    break;
                case "ping":
                    this.resetPingTimeout();
                    this.sendPacket("pong");
                    this.emitReserved("ping");
                    this.emitReserved("pong");
                    break;
                case "error":
                    const err = new Error("server error");
                    // @ts-ignore
                    err.code = packet.data;
                    this.onError(err);
                    break;
                case "message":
                    this.emitReserved("data", packet.data);
                    this.emitReserved("message", packet.data);
                    break;
            }
        }
    }
    /**
     * Called upon handshake completion.
     *
     * @param {Object} data - handshake obj
     * @api private
     */ onHandshake(data) {
        this.emitReserved("handshake", data);
        this.id = data.sid;
        this.transport.query.sid = data.sid;
        this.upgrades = this.filterUpgrades(data.upgrades);
        this.pingInterval = data.pingInterval;
        this.pingTimeout = data.pingTimeout;
        this.maxPayload = data.maxPayload;
        this.onOpen();
        // In case open handler closes socket
        if ("closed" === this.readyState) return;
        this.resetPingTimeout();
    }
    /**
     * Sets and resets ping timeout timer based on server pings.
     *
     * @api private
     */ resetPingTimeout() {
        this.clearTimeoutFn(this.pingTimeoutTimer);
        this.pingTimeoutTimer = this.setTimeoutFn(()=>{
            this.onClose("ping timeout");
        }, this.pingInterval + this.pingTimeout);
        if (this.opts.autoUnref) this.pingTimeoutTimer.unref();
    }
    /**
     * Called on `drain` event
     *
     * @api private
     */ onDrain() {
        this.writeBuffer.splice(0, this.prevBufferLen);
        // setting prevBufferLen = 0 is very important
        // for example, when upgrading, upgrade packet is sent over,
        // and a nonzero prevBufferLen could cause problems on `drain`
        this.prevBufferLen = 0;
        if (0 === this.writeBuffer.length) this.emitReserved("drain");
        else this.flush();
    }
    /**
     * Flush write buffers.
     *
     * @api private
     */ flush() {
        if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
            const packets = this.getWritablePackets();
            this.transport.send(packets);
            // keep track of current length of writeBuffer
            // splice writeBuffer and callbackBuffer on `drain`
            this.prevBufferLen = packets.length;
            this.emitReserved("flush");
        }
    }
    /**
     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
     * long-polling)
     *
     * @private
     */ getWritablePackets() {
        const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
        if (!shouldCheckPayloadSize) return this.writeBuffer;
        let payloadSize = 1; // first packet type
        for(let i = 0; i < this.writeBuffer.length; i++){
            const data = this.writeBuffer[i].data;
            if (data) payloadSize += (0, _utilJs.byteLength)(data);
            if (i > 0 && payloadSize > this.maxPayload) return this.writeBuffer.slice(0, i);
            payloadSize += 2; // separator + packet type
        }
        return this.writeBuffer;
    }
    /**
     * Sends a message.
     *
     * @param {String} message.
     * @param {Function} callback function.
     * @param {Object} options.
     * @return {Socket} for chaining.
     * @api public
     */ write(msg, options, fn) {
        this.sendPacket("message", msg, options, fn);
        return this;
    }
    send(msg, options, fn) {
        this.sendPacket("message", msg, options, fn);
        return this;
    }
    /**
     * Sends a packet.
     *
     * @param {String} packet type.
     * @param {String} data.
     * @param {Object} options.
     * @param {Function} callback function.
     * @api private
     */ sendPacket(type, data, options, fn) {
        if ("function" === typeof data) {
            fn = data;
            data = undefined;
        }
        if ("function" === typeof options) {
            fn = options;
            options = null;
        }
        if ("closing" === this.readyState || "closed" === this.readyState) return;
        options = options || {};
        options.compress = false !== options.compress;
        const packet = {
            type: type,
            data: data,
            options: options
        };
        this.emitReserved("packetCreate", packet);
        this.writeBuffer.push(packet);
        if (fn) this.once("flush", fn);
        this.flush();
    }
    /**
     * Closes the connection.
     *
     * @api public
     */ close() {
        const close = ()=>{
            this.onClose("forced close");
            this.transport.close();
        };
        const cleanupAndClose = ()=>{
            this.off("upgrade", cleanupAndClose);
            this.off("upgradeError", cleanupAndClose);
            close();
        };
        const waitForUpgrade = ()=>{
            // wait for upgrade to finish since we can't send packets while pausing a transport
            this.once("upgrade", cleanupAndClose);
            this.once("upgradeError", cleanupAndClose);
        };
        if ("opening" === this.readyState || "open" === this.readyState) {
            this.readyState = "closing";
            if (this.writeBuffer.length) this.once("drain", ()=>{
                if (this.upgrading) waitForUpgrade();
                else close();
            });
            else if (this.upgrading) waitForUpgrade();
            else close();
        }
        return this;
    }
    /**
     * Called upon transport error
     *
     * @api private
     */ onError(err) {
        Socket.priorWebsocketSuccess = false;
        this.emitReserved("error", err);
        this.onClose("transport error", err);
    }
    /**
     * Called upon transport close.
     *
     * @api private
     */ onClose(reason, description) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
            // clear timers
            this.clearTimeoutFn(this.pingTimeoutTimer);
            // stop event from firing again for transport
            this.transport.removeAllListeners("close");
            // ensure transport won't stay open
            this.transport.close();
            // ignore further transport communication
            this.transport.removeAllListeners();
            if (typeof removeEventListener === "function") removeEventListener("offline", this.offlineEventListener, false);
            // set ready state
            this.readyState = "closed";
            // clear session id
            this.id = null;
            // emit close event
            this.emitReserved("close", reason, description);
            // clean buffers after, so users can still
            // grab the buffers on `close` event
            this.writeBuffer = [];
            this.prevBufferLen = 0;
        }
    }
    /**
     * Filters upgrades, returning only those matching client transports.
     *
     * @param {Array} server upgrades
     * @api private
     *
     */ filterUpgrades(upgrades) {
        const filteredUpgrades = [];
        let i = 0;
        const j = upgrades.length;
        for(; i < j; i++)if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);
        return filteredUpgrades;
    }
}
Socket.protocol = (0, _engineIoParser.protocol);

},{"./transports/index.js":"2neV7","./util.js":"d7eyH","./contrib/parseqs.js":"aFNEN","./contrib/parseuri.js":"5RFyz","@socket.io/component-emitter":"dzQbR","engine.io-parser":"2SHiP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2neV7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transports", ()=>transports);
var _pollingJs = require("./polling.js");
var _websocketJs = require("./websocket.js");
const transports = {
    websocket: (0, _websocketJs.WS),
    polling: (0, _pollingJs.Polling)
};

},{"./polling.js":"HgHsi","./websocket.js":"8y2e2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"HgHsi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Polling", ()=>Polling);
parcelHelpers.export(exports, "Request", ()=>Request);
var _transportJs = require("../transport.js");
var _yeastJs = require("../contrib/yeast.js");
var _parseqsJs = require("../contrib/parseqs.js");
var _engineIoParser = require("engine.io-parser");
var _xmlhttprequestJs = require("./xmlhttprequest.js");
var _componentEmitter = require("@socket.io/component-emitter");
var _utilJs = require("../util.js");
var _globalThisJs = require("../globalThis.js");
function empty() {}
const hasXHR2 = function() {
    const xhr = new (0, _xmlhttprequestJs.XHR)({
        xdomain: false
    });
    return null != xhr.responseType;
}();
class Polling extends (0, _transportJs.Transport) {
    /**
     * XHR Polling constructor.
     *
     * @param {Object} opts
     * @api public
     */ constructor(opts){
        super(opts);
        this.polling = false;
        if (typeof location !== "undefined") {
            const isSSL = "https:" === location.protocol;
            let port = location.port;
            // some user agents have empty `location.port`
            if (!port) port = isSSL ? "443" : "80";
            this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
            this.xs = opts.secure !== isSSL;
        }
        /**
         * XHR supports binary
         */ const forceBase64 = opts && opts.forceBase64;
        this.supportsBinary = hasXHR2 && !forceBase64;
    }
    /**
     * Transport name.
     */ get name() {
        return "polling";
    }
    /**
     * Opens the socket (triggers polling). We write a PING message to determine
     * when the transport is open.
     *
     * @api private
     */ doOpen() {
        this.poll();
    }
    /**
     * Pauses polling.
     *
     * @param {Function} callback upon buffers are flushed and transport is paused
     * @api private
     */ pause(onPause) {
        this.readyState = "pausing";
        const pause = ()=>{
            this.readyState = "paused";
            onPause();
        };
        if (this.polling || !this.writable) {
            let total = 0;
            if (this.polling) {
                total++;
                this.once("pollComplete", function() {
                    --total || pause();
                });
            }
            if (!this.writable) {
                total++;
                this.once("drain", function() {
                    --total || pause();
                });
            }
        } else pause();
    }
    /**
     * Starts polling cycle.
     *
     * @api public
     */ poll() {
        this.polling = true;
        this.doPoll();
        this.emitReserved("poll");
    }
    /**
     * Overloads onData to detect payloads.
     *
     * @api private
     */ onData(data) {
        const callback = (packet)=>{
            // if its the first message we consider the transport open
            if ("opening" === this.readyState && packet.type === "open") this.onOpen();
            // if its a close packet, we close the ongoing requests
            if ("close" === packet.type) {
                this.onClose({
                    description: "transport closed by the server"
                });
                return false;
            }
            // otherwise bypass onData and handle the message
            this.onPacket(packet);
        };
        // decode payload
        (0, _engineIoParser.decodePayload)(data, this.socket.binaryType).forEach(callback);
        // if an event did not trigger closing
        if ("closed" !== this.readyState) {
            // if we got data we're not polling
            this.polling = false;
            this.emitReserved("pollComplete");
            if ("open" === this.readyState) this.poll();
        }
    }
    /**
     * For polling, send a close packet.
     *
     * @api private
     */ doClose() {
        const close = ()=>{
            this.write([
                {
                    type: "close"
                }
            ]);
        };
        if ("open" === this.readyState) close();
        else // in case we're trying to close while
        // handshaking is in progress (GH-164)
        this.once("open", close);
    }
    /**
     * Writes a packets payload.
     *
     * @param {Array} data packets
     * @param {Function} drain callback
     * @api private
     */ write(packets) {
        this.writable = false;
        (0, _engineIoParser.encodePayload)(packets, (data)=>{
            this.doWrite(data, ()=>{
                this.writable = true;
                this.emitReserved("drain");
            });
        });
    }
    /**
     * Generates uri for connection.
     *
     * @api private
     */ uri() {
        let query = this.query || {};
        const schema = this.opts.secure ? "https" : "http";
        let port = "";
        // cache busting is forced
        if (false !== this.opts.timestampRequests) query[this.opts.timestampParam] = (0, _yeastJs.yeast)();
        if (!this.supportsBinary && !query.sid) query.b64 = 1;
        // avoid port if default for schema
        if (this.opts.port && ("https" === schema && Number(this.opts.port) !== 443 || "http" === schema && Number(this.opts.port) !== 80)) port = ":" + this.opts.port;
        const encodedQuery = (0, _parseqsJs.encode)(query);
        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
        return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
    }
    /**
     * Creates a request.
     *
     * @param {String} method
     * @api private
     */ request(opts = {}) {
        Object.assign(opts, {
            xd: this.xd,
            xs: this.xs
        }, this.opts);
        return new Request(this.uri(), opts);
    }
    /**
     * Sends data.
     *
     * @param {String} data to send.
     * @param {Function} called upon flush.
     * @api private
     */ doWrite(data, fn) {
        const req = this.request({
            method: "POST",
            data: data
        });
        req.on("success", fn);
        req.on("error", (xhrStatus, context)=>{
            this.onError("xhr post error", xhrStatus, context);
        });
    }
    /**
     * Starts a poll cycle.
     *
     * @api private
     */ doPoll() {
        const req = this.request();
        req.on("data", this.onData.bind(this));
        req.on("error", (xhrStatus, context)=>{
            this.onError("xhr poll error", xhrStatus, context);
        });
        this.pollXhr = req;
    }
}
class Request extends (0, _componentEmitter.Emitter) {
    /**
     * Request constructor
     *
     * @param {Object} options
     * @api public
     */ constructor(uri, opts){
        super();
        (0, _utilJs.installTimerFunctions)(this, opts);
        this.opts = opts;
        this.method = opts.method || "GET";
        this.uri = uri;
        this.async = false !== opts.async;
        this.data = undefined !== opts.data ? opts.data : null;
        this.create();
    }
    /**
     * Creates the XHR object and sends the request.
     *
     * @api private
     */ create() {
        const opts = (0, _utilJs.pick)(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
        opts.xdomain = !!this.opts.xd;
        opts.xscheme = !!this.opts.xs;
        const xhr = this.xhr = new (0, _xmlhttprequestJs.XHR)(opts);
        try {
            xhr.open(this.method, this.uri, this.async);
            try {
                if (this.opts.extraHeaders) {
                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
                    for(let i in this.opts.extraHeaders)if (this.opts.extraHeaders.hasOwnProperty(i)) xhr.setRequestHeader(i, this.opts.extraHeaders[i]);
                }
            } catch (e) {}
            if ("POST" === this.method) try {
                xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
            } catch (e1) {}
            try {
                xhr.setRequestHeader("Accept", "*/*");
            } catch (e2) {}
            // ie6 check
            if ("withCredentials" in xhr) xhr.withCredentials = this.opts.withCredentials;
            if (this.opts.requestTimeout) xhr.timeout = this.opts.requestTimeout;
            xhr.onreadystatechange = ()=>{
                if (4 !== xhr.readyState) return;
                if (200 === xhr.status || 1223 === xhr.status) this.onLoad();
                else // make sure the `error` event handler that's user-set
                // does not throw in the same tick and gets caught here
                this.setTimeoutFn(()=>{
                    this.onError(typeof xhr.status === "number" ? xhr.status : 0);
                }, 0);
            };
            xhr.send(this.data);
        } catch (e) {
            // Need to defer since .create() is called directly from the constructor
            // and thus the 'error' event can only be only bound *after* this exception
            // occurs.  Therefore, also, we cannot throw here at all.
            this.setTimeoutFn(()=>{
                this.onError(e);
            }, 0);
            return;
        }
        if (typeof document !== "undefined") {
            this.index = Request.requestsCount++;
            Request.requests[this.index] = this;
        }
    }
    /**
     * Called upon error.
     *
     * @api private
     */ onError(err) {
        this.emitReserved("error", err, this.xhr);
        this.cleanup(true);
    }
    /**
     * Cleans up house.
     *
     * @api private
     */ cleanup(fromError) {
        if ("undefined" === typeof this.xhr || null === this.xhr) return;
        this.xhr.onreadystatechange = empty;
        if (fromError) try {
            this.xhr.abort();
        } catch (e) {}
        if (typeof document !== "undefined") delete Request.requests[this.index];
        this.xhr = null;
    }
    /**
     * Called upon load.
     *
     * @api private
     */ onLoad() {
        const data = this.xhr.responseText;
        if (data !== null) {
            this.emitReserved("data", data);
            this.emitReserved("success");
            this.cleanup();
        }
    }
    /**
     * Aborts the request.
     *
     * @api public
     */ abort() {
        this.cleanup();
    }
}
Request.requestsCount = 0;
Request.requests = {};
/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */ if (typeof document !== "undefined") {
    // @ts-ignore
    if (typeof attachEvent === "function") // @ts-ignore
    attachEvent("onunload", unloadHandler);
    else if (typeof addEventListener === "function") {
        const terminationEvent = "onpagehide" in (0, _globalThisJs.globalThisShim) ? "pagehide" : "unload";
        addEventListener(terminationEvent, unloadHandler, false);
    }
}
function unloadHandler() {
    for(let i in Request.requests)if (Request.requests.hasOwnProperty(i)) Request.requests[i].abort();
}

},{"../transport.js":"kwKKC","../contrib/yeast.js":"5cPiI","../contrib/parseqs.js":"aFNEN","engine.io-parser":"2SHiP","./xmlhttprequest.js":"gG0MI","@socket.io/component-emitter":"dzQbR","../util.js":"d7eyH","../globalThis.js":"7zbHc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kwKKC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transport", ()=>Transport);
var _engineIoParser = require("engine.io-parser");
var _componentEmitter = require("@socket.io/component-emitter");
var _utilJs = require("./util.js");
class TransportError extends Error {
    constructor(reason, description, context){
        super(reason);
        this.description = description;
        this.context = context;
        this.type = "TransportError";
    }
}
class Transport extends (0, _componentEmitter.Emitter) {
    /**
     * Transport abstract constructor.
     *
     * @param {Object} options.
     * @api private
     */ constructor(opts){
        super();
        this.writable = false;
        (0, _utilJs.installTimerFunctions)(this, opts);
        this.opts = opts;
        this.query = opts.query;
        this.readyState = "";
        this.socket = opts.socket;
    }
    /**
     * Emits an error.
     *
     * @param {String} reason
     * @param description
     * @param context - the error context
     * @return {Transport} for chaining
     * @api protected
     */ onError(reason, description, context) {
        super.emitReserved("error", new TransportError(reason, description, context));
        return this;
    }
    /**
     * Opens the transport.
     *
     * @api public
     */ open() {
        if ("closed" === this.readyState || "" === this.readyState) {
            this.readyState = "opening";
            this.doOpen();
        }
        return this;
    }
    /**
     * Closes the transport.
     *
     * @api public
     */ close() {
        if ("opening" === this.readyState || "open" === this.readyState) {
            this.doClose();
            this.onClose();
        }
        return this;
    }
    /**
     * Sends multiple packets.
     *
     * @param {Array} packets
     * @api public
     */ send(packets) {
        if ("open" === this.readyState) this.write(packets);
    }
    /**
     * Called upon open
     *
     * @api protected
     */ onOpen() {
        this.readyState = "open";
        this.writable = true;
        super.emitReserved("open");
    }
    /**
     * Called with data.
     *
     * @param {String} data
     * @api protected
     */ onData(data) {
        const packet = (0, _engineIoParser.decodePacket)(data, this.socket.binaryType);
        this.onPacket(packet);
    }
    /**
     * Called with a decoded packet.
     *
     * @api protected
     */ onPacket(packet) {
        super.emitReserved("packet", packet);
    }
    /**
     * Called upon close.
     *
     * @api protected
     */ onClose(details) {
        this.readyState = "closed";
        super.emitReserved("close", details);
    }
}

},{"engine.io-parser":"2SHiP","@socket.io/component-emitter":"dzQbR","./util.js":"d7eyH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SHiP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "protocol", ()=>protocol);
parcelHelpers.export(exports, "encodePacket", ()=>(0, _encodePacketJsDefault.default));
parcelHelpers.export(exports, "encodePayload", ()=>encodePayload);
parcelHelpers.export(exports, "decodePacket", ()=>(0, _decodePacketJsDefault.default));
parcelHelpers.export(exports, "decodePayload", ()=>decodePayload);
var _encodePacketJs = require("./encodePacket.js");
var _encodePacketJsDefault = parcelHelpers.interopDefault(_encodePacketJs);
var _decodePacketJs = require("./decodePacket.js");
var _decodePacketJsDefault = parcelHelpers.interopDefault(_decodePacketJs);
const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text
const encodePayload = (packets, callback)=>{
    // some packets may be added to the array while encoding, so the initial length must be saved
    const length = packets.length;
    const encodedPackets = new Array(length);
    let count = 0;
    packets.forEach((packet, i)=>{
        // force base64 encoding for binary packets
        (0, _encodePacketJsDefault.default)(packet, false, (encodedPacket)=>{
            encodedPackets[i] = encodedPacket;
            if (++count === length) callback(encodedPackets.join(SEPARATOR));
        });
    });
};
const decodePayload = (encodedPayload, binaryType)=>{
    const encodedPackets = encodedPayload.split(SEPARATOR);
    const packets = [];
    for(let i = 0; i < encodedPackets.length; i++){
        const decodedPacket = (0, _decodePacketJsDefault.default)(encodedPackets[i], binaryType);
        packets.push(decodedPacket);
        if (decodedPacket.type === "error") break;
    }
    return packets;
};
const protocol = 4;

},{"./encodePacket.js":"lUiyb","./decodePacket.js":"k0BCP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lUiyb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _commonsJs = require("./commons.js");
const withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
const withNativeArrayBuffer = typeof ArrayBuffer === "function";
// ArrayBuffer.isView method is not defined in IE10
const isView = (obj)=>{
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
};
const encodePacket = ({ type , data  }, supportsBinary, callback)=>{
    if (withNativeBlob && data instanceof Blob) {
        if (supportsBinary) return callback(data);
        else return encodeBlobAsBase64(data, callback);
    } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
        if (supportsBinary) return callback(data);
        else return encodeBlobAsBase64(new Blob([
            data
        ]), callback);
    }
    // plain string
    return callback((0, _commonsJs.PACKET_TYPES)[type] + (data || ""));
};
const encodeBlobAsBase64 = (data, callback)=>{
    const fileReader = new FileReader();
    fileReader.onload = function() {
        const content = fileReader.result.split(",")[1];
        callback("b" + content);
    };
    return fileReader.readAsDataURL(data);
};
exports.default = encodePacket;

},{"./commons.js":"kLmJ7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kLmJ7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PACKET_TYPES", ()=>PACKET_TYPES);
parcelHelpers.export(exports, "PACKET_TYPES_REVERSE", ()=>PACKET_TYPES_REVERSE);
parcelHelpers.export(exports, "ERROR_PACKET", ()=>ERROR_PACKET);
const PACKET_TYPES = Object.create(null); // no Map = no polyfill
PACKET_TYPES["open"] = "0";
PACKET_TYPES["close"] = "1";
PACKET_TYPES["ping"] = "2";
PACKET_TYPES["pong"] = "3";
PACKET_TYPES["message"] = "4";
PACKET_TYPES["upgrade"] = "5";
PACKET_TYPES["noop"] = "6";
const PACKET_TYPES_REVERSE = Object.create(null);
Object.keys(PACKET_TYPES).forEach((key)=>{
    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
});
const ERROR_PACKET = {
    type: "error",
    data: "parser error"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k0BCP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _commonsJs = require("./commons.js");
var _base64ArraybufferJs = require("./contrib/base64-arraybuffer.js");
const withNativeArrayBuffer = typeof ArrayBuffer === "function";
const decodePacket = (encodedPacket, binaryType)=>{
    if (typeof encodedPacket !== "string") return {
        type: "message",
        data: mapBinary(encodedPacket, binaryType)
    };
    const type = encodedPacket.charAt(0);
    if (type === "b") return {
        type: "message",
        data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
    };
    const packetType = (0, _commonsJs.PACKET_TYPES_REVERSE)[type];
    if (!packetType) return 0, _commonsJs.ERROR_PACKET;
    return encodedPacket.length > 1 ? {
        type: (0, _commonsJs.PACKET_TYPES_REVERSE)[type],
        data: encodedPacket.substring(1)
    } : {
        type: (0, _commonsJs.PACKET_TYPES_REVERSE)[type]
    };
};
const decodeBase64Packet = (data, binaryType)=>{
    if (withNativeArrayBuffer) {
        const decoded = (0, _base64ArraybufferJs.decode)(data);
        return mapBinary(decoded, binaryType);
    } else return {
        base64: true,
        data
    }; // fallback for old browsers
};
const mapBinary = (data, binaryType)=>{
    switch(binaryType){
        case "blob":
            return data instanceof ArrayBuffer ? new Blob([
                data
            ]) : data;
        case "arraybuffer":
        default:
            return data; // assuming the data is already an ArrayBuffer
    }
};
exports.default = decodePacket;

},{"./commons.js":"kLmJ7","./contrib/base64-arraybuffer.js":"c3dDo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c3dDo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encode", ()=>encode);
parcelHelpers.export(exports, "decode", ()=>decode);
const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
// Use a lookup table to find the index.
const lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
for(let i = 0; i < chars.length; i++)lookup[chars.charCodeAt(i)] = i;
const encode = (arraybuffer)=>{
    let bytes = new Uint8Array(arraybuffer), i1, len = bytes.length, base64 = "";
    for(i1 = 0; i1 < len; i1 += 3){
        base64 += chars[bytes[i1] >> 2];
        base64 += chars[(bytes[i1] & 3) << 4 | bytes[i1 + 1] >> 4];
        base64 += chars[(bytes[i1 + 1] & 15) << 2 | bytes[i1 + 2] >> 6];
        base64 += chars[bytes[i1 + 2] & 63];
    }
    if (len % 3 === 2) base64 = base64.substring(0, base64.length - 1) + "=";
    else if (len % 3 === 1) base64 = base64.substring(0, base64.length - 2) + "==";
    return base64;
};
const decode = (base64)=>{
    let bufferLength = base64.length * 0.75, len = base64.length, i2, p = 0, encoded1, encoded2, encoded3, encoded4;
    if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") bufferLength--;
    }
    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
    for(i2 = 0; i2 < len; i2 += 4){
        encoded1 = lookup[base64.charCodeAt(i2)];
        encoded2 = lookup[base64.charCodeAt(i2 + 1)];
        encoded3 = lookup[base64.charCodeAt(i2 + 2)];
        encoded4 = lookup[base64.charCodeAt(i2 + 3)];
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dzQbR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */ parcelHelpers.export(exports, "Emitter", ()=>Emitter);
function Emitter(obj) {
    if (obj) return mixin(obj);
}
/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */ function mixin(obj) {
    for(var key in Emitter.prototype)obj[key] = Emitter.prototype[key];
    return obj;
}
/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */ Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
    return this;
};
/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */ Emitter.prototype.once = function(event, fn) {
    function on() {
        this.off(event, on);
        fn.apply(this, arguments);
    }
    on.fn = fn;
    this.on(event, on);
    return this;
};
/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */ Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    // all
    if (0 == arguments.length) {
        this._callbacks = {};
        return this;
    }
    // specific event
    var callbacks = this._callbacks["$" + event];
    if (!callbacks) return this;
    // remove all handlers
    if (1 == arguments.length) {
        delete this._callbacks["$" + event];
        return this;
    }
    // remove specific handler
    var cb;
    for(var i = 0; i < callbacks.length; i++){
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);
            break;
        }
    }
    // Remove event specific arrays for event types that no
    // one is subscribed for to avoid memory leak.
    if (callbacks.length === 0) delete this._callbacks["$" + event];
    return this;
};
/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */ Emitter.prototype.emit = function(event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
    for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    if (callbacks) {
        callbacks = callbacks.slice(0);
        for(var i = 0, len = callbacks.length; i < len; ++i)callbacks[i].apply(this, args);
    }
    return this;
};
// alias used for reserved events (protected method)
Emitter.prototype.emitReserved = Emitter.prototype.emit;
/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */ Emitter.prototype.listeners = function(event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks["$" + event] || [];
};
/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */ Emitter.prototype.hasListeners = function(event) {
    return !!this.listeners(event).length;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d7eyH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pick", ()=>pick);
parcelHelpers.export(exports, "installTimerFunctions", ()=>installTimerFunctions);
// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9
parcelHelpers.export(exports, "byteLength", ()=>byteLength);
var _globalThisJs = require("./globalThis.js");
function pick(obj, ...attr) {
    return attr.reduce((acc, k)=>{
        if (obj.hasOwnProperty(k)) acc[k] = obj[k];
        return acc;
    }, {});
}
// Keep a reference to the real timeout functions so they can be used when overridden
const NATIVE_SET_TIMEOUT = setTimeout;
const NATIVE_CLEAR_TIMEOUT = clearTimeout;
function installTimerFunctions(obj, opts) {
    if (opts.useNativeTimers) {
        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind((0, _globalThisJs.globalThisShim));
        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind((0, _globalThisJs.globalThisShim));
    } else {
        obj.setTimeoutFn = setTimeout.bind((0, _globalThisJs.globalThisShim));
        obj.clearTimeoutFn = clearTimeout.bind((0, _globalThisJs.globalThisShim));
    }
}
// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)
const BASE64_OVERHEAD = 1.33;
function byteLength(obj) {
    if (typeof obj === "string") return utf8Length(obj);
    // arraybuffer or blob
    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
}
function utf8Length(str) {
    let c = 0, length = 0;
    for(let i = 0, l = str.length; i < l; i++){
        c = str.charCodeAt(i);
        if (c < 0x80) length += 1;
        else if (c < 0x800) length += 2;
        else if (c < 0xd800 || c >= 0xe000) length += 3;
        else {
            i++;
            length += 4;
        }
    }
    return length;
}

},{"./globalThis.js":"7zbHc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7zbHc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "globalThisShim", ()=>globalThisShim);
const globalThisShim = (()=>{
    if (typeof self !== "undefined") return self;
    else if (typeof window !== "undefined") return window;
    else return Function("return this")();
})();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5cPiI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */ parcelHelpers.export(exports, "encode", ()=>encode);
/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */ parcelHelpers.export(exports, "decode", ()=>decode);
/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */ parcelHelpers.export(exports, "yeast", ()=>yeast);
// imported from https://github.com/unshiftio/yeast
"use strict";
const alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""), length = 64, map = {};
let seed = 0, i = 0, prev;
function encode(num) {
    let encoded = "";
    do {
        encoded = alphabet[num % length] + encoded;
        num = Math.floor(num / length);
    }while (num > 0);
    return encoded;
}
function decode(str) {
    let decoded = 0;
    for(i = 0; i < str.length; i++)decoded = decoded * length + map[str.charAt(i)];
    return decoded;
}
function yeast() {
    const now = encode(+new Date());
    if (now !== prev) return seed = 0, prev = now;
    return now + "." + encode(seed++);
}
//
// Map each character to its index.
//
for(; i < length; i++)map[alphabet[i]] = i;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFNEN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// imported from https://github.com/galkn/querystring
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */ parcelHelpers.export(exports, "encode", ()=>encode);
/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */ parcelHelpers.export(exports, "decode", ()=>decode);
function encode(obj) {
    let str = "";
    for(let i in obj)if (obj.hasOwnProperty(i)) {
        if (str.length) str += "&";
        str += encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]);
    }
    return str;
}
function decode(qs) {
    let qry = {};
    let pairs = qs.split("&");
    for(let i = 0, l = pairs.length; i < l; i++){
        let pair = pairs[i].split("=");
        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gG0MI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XHR", ()=>XHR);
// browser shim for xmlhttprequest module
var _hasCorsJs = require("../contrib/has-cors.js");
var _globalThisJs = require("../globalThis.js");
function XHR(opts) {
    const xdomain = opts.xdomain;
    // XMLHttpRequest can be disabled on IE
    try {
        if ("undefined" !== typeof XMLHttpRequest && (!xdomain || (0, _hasCorsJs.hasCORS))) return new XMLHttpRequest();
    } catch (e) {}
    if (!xdomain) try {
        return new (0, _globalThisJs.globalThisShim)[[
            "Active"
        ].concat("Object").join("X")]("Microsoft.XMLHTTP");
    } catch (e1) {}
}

},{"../contrib/has-cors.js":"kPgMI","../globalThis.js":"7zbHc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kPgMI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasCORS", ()=>hasCORS);
// imported from https://github.com/component/has-cors
let value = false;
try {
    value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
} catch (err) {
// if XMLHttp support is disabled in IE then it will throw
// when trying to create
}
const hasCORS = value;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8y2e2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WS", ()=>WS);
var _transportJs = require("../transport.js");
var _parseqsJs = require("../contrib/parseqs.js");
var _yeastJs = require("../contrib/yeast.js");
var _utilJs = require("../util.js");
var _websocketConstructorJs = require("./websocket-constructor.js");
var _engineIoParser = require("engine.io-parser");
var Buffer = require("buffer").Buffer;
// detect ReactNative environment
const isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
class WS extends (0, _transportJs.Transport) {
    /**
     * WebSocket transport constructor.
     *
     * @api {Object} connection options
     * @api public
     */ constructor(opts){
        super(opts);
        this.supportsBinary = !opts.forceBase64;
    }
    /**
     * Transport name.
     *
     * @api public
     */ get name() {
        return "websocket";
    }
    /**
     * Opens socket.
     *
     * @api private
     */ doOpen() {
        if (!this.check()) // let probe timeout
        return;
        const uri = this.uri();
        const protocols = this.opts.protocols;
        // React Native only supports the 'headers' option, and will print a warning if anything else is passed
        const opts = isReactNative ? {} : (0, _utilJs.pick)(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
        if (this.opts.extraHeaders) opts.headers = this.opts.extraHeaders;
        try {
            this.ws = (0, _websocketConstructorJs.usingBrowserWebSocket) && !isReactNative ? protocols ? new (0, _websocketConstructorJs.WebSocket)(uri, protocols) : new (0, _websocketConstructorJs.WebSocket)(uri) : new (0, _websocketConstructorJs.WebSocket)(uri, protocols, opts);
        } catch (err) {
            return this.emitReserved("error", err);
        }
        this.ws.binaryType = this.socket.binaryType || (0, _websocketConstructorJs.defaultBinaryType);
        this.addEventListeners();
    }
    /**
     * Adds event listeners to the socket
     *
     * @api private
     */ addEventListeners() {
        this.ws.onopen = ()=>{
            if (this.opts.autoUnref) this.ws._socket.unref();
            this.onOpen();
        };
        this.ws.onclose = (closeEvent)=>this.onClose({
                description: "websocket connection closed",
                context: closeEvent
            });
        this.ws.onmessage = (ev)=>this.onData(ev.data);
        this.ws.onerror = (e)=>this.onError("websocket error", e);
    }
    /**
     * Writes data to socket.
     *
     * @param {Array} array of packets.
     * @api private
     */ write(packets) {
        this.writable = false;
        // encodePacket efficient as it uses WS framing
        // no need for encodePayload
        for(let i = 0; i < packets.length; i++){
            const packet = packets[i];
            const lastPacket = i === packets.length - 1;
            (0, _engineIoParser.encodePacket)(packet, this.supportsBinary, (data)=>{
                // always create a new object (GH-437)
                const opts = {};
                if (!(0, _websocketConstructorJs.usingBrowserWebSocket)) {
                    if (packet.options) opts.compress = packet.options.compress;
                    if (this.opts.perMessageDeflate) {
                        const len = // @ts-ignore
                        "string" === typeof data ? Buffer.byteLength(data) : data.length;
                        if (len < this.opts.perMessageDeflate.threshold) opts.compress = false;
                    }
                }
                // Sometimes the websocket has already been closed but the browser didn't
                // have a chance of informing us about it yet, in that case send will
                // throw an error
                try {
                    if (0, _websocketConstructorJs.usingBrowserWebSocket) // TypeError is thrown when passing the second argument on Safari
                    this.ws.send(data);
                    else this.ws.send(data, opts);
                } catch (e) {}
                if (lastPacket) // fake drain
                // defer to next tick to allow Socket to clear writeBuffer
                (0, _websocketConstructorJs.nextTick)(()=>{
                    this.writable = true;
                    this.emitReserved("drain");
                }, this.setTimeoutFn);
            });
        }
    }
    /**
     * Closes socket.
     *
     * @api private
     */ doClose() {
        if (typeof this.ws !== "undefined") {
            this.ws.close();
            this.ws = null;
        }
    }
    /**
     * Generates uri for connection.
     *
     * @api private
     */ uri() {
        let query = this.query || {};
        const schema = this.opts.secure ? "wss" : "ws";
        let port = "";
        // avoid port if default for schema
        if (this.opts.port && ("wss" === schema && Number(this.opts.port) !== 443 || "ws" === schema && Number(this.opts.port) !== 80)) port = ":" + this.opts.port;
        // append timestamp to URI
        if (this.opts.timestampRequests) query[this.opts.timestampParam] = (0, _yeastJs.yeast)();
        // communicate binary support capabilities
        if (!this.supportsBinary) query.b64 = 1;
        const encodedQuery = (0, _parseqsJs.encode)(query);
        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
        return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
    }
    /**
     * Feature detection for WebSocket.
     *
     * @return {Boolean} whether this transport is available.
     * @api public
     */ check() {
        return !!(0, _websocketConstructorJs.WebSocket);
    }
}

},{"../transport.js":"kwKKC","../contrib/parseqs.js":"aFNEN","../contrib/yeast.js":"5cPiI","../util.js":"d7eyH","./websocket-constructor.js":"dDJnh","engine.io-parser":"2SHiP","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDJnh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextTick", ()=>nextTick);
parcelHelpers.export(exports, "WebSocket", ()=>WebSocket);
parcelHelpers.export(exports, "usingBrowserWebSocket", ()=>usingBrowserWebSocket);
parcelHelpers.export(exports, "defaultBinaryType", ()=>defaultBinaryType);
var _globalThisJs = require("../globalThis.js");
const nextTick = (()=>{
    const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
    if (isPromiseAvailable) return (cb)=>Promise.resolve().then(cb);
    else return (cb, setTimeoutFn)=>setTimeoutFn(cb, 0);
})();
const WebSocket = (0, _globalThisJs.globalThisShim).WebSocket || (0, _globalThisJs.globalThisShim).MozWebSocket;
const usingBrowserWebSocket = true;
const defaultBinaryType = "arraybuffer";

},{"../globalThis.js":"7zbHc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5RFyz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parse", ()=>parse);
// imported from https://github.com/galkn/parseuri
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */ const re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
const parts = [
    "source",
    "protocol",
    "authority",
    "userInfo",
    "user",
    "password",
    "host",
    "port",
    "relative",
    "path",
    "directory",
    "file",
    "query",
    "anchor"
];
function parse(str) {
    const src = str, b = str.indexOf("["), e = str.indexOf("]");
    if (b != -1 && e != -1) str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
    let m = re.exec(str || ""), uri = {}, i = 14;
    while(i--)uri[parts[i]] = m[i] || "";
    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
        uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
        uri.ipv6uri = true;
    }
    uri.pathNames = pathNames(uri, uri["path"]);
    uri.queryKey = queryKey(uri, uri["query"]);
    return uri;
}
function pathNames(obj, path) {
    const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
    if (path.substr(0, 1) == "/" || path.length === 0) names.splice(0, 1);
    if (path.substr(path.length - 1, 1) == "/") names.splice(names.length - 1, 1);
    return names;
}
function queryKey(uri, query) {
    const data = {};
    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
        if ($1) data[$1] = $2;
    });
    return data;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"94vh9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Manager", ()=>Manager);
var _engineIoClient = require("engine.io-client");
var _socketJs = require("./socket.js");
var _socketIoParser = require("socket.io-parser");
var _onJs = require("./on.js");
var _backo2Js = require("./contrib/backo2.js");
var _componentEmitter = require("@socket.io/component-emitter");
class Manager extends (0, _componentEmitter.Emitter) {
    constructor(uri, opts){
        var _a;
        super();
        this.nsps = {};
        this.subs = [];
        if (uri && "object" === typeof uri) {
            opts = uri;
            uri = undefined;
        }
        opts = opts || {};
        opts.path = opts.path || "/socket.io";
        this.opts = opts;
        (0, _engineIoClient.installTimerFunctions)(this, opts);
        this.reconnection(opts.reconnection !== false);
        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
        this.reconnectionDelay(opts.reconnectionDelay || 1000);
        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
        this.backoff = new (0, _backo2Js.Backoff)({
            min: this.reconnectionDelay(),
            max: this.reconnectionDelayMax(),
            jitter: this.randomizationFactor()
        });
        this.timeout(null == opts.timeout ? 20000 : opts.timeout);
        this._readyState = "closed";
        this.uri = uri;
        const _parser = opts.parser || _socketIoParser;
        this.encoder = new _parser.Encoder();
        this.decoder = new _parser.Decoder();
        this._autoConnect = opts.autoConnect !== false;
        if (this._autoConnect) this.open();
    }
    reconnection(v) {
        if (!arguments.length) return this._reconnection;
        this._reconnection = !!v;
        return this;
    }
    reconnectionAttempts(v) {
        if (v === undefined) return this._reconnectionAttempts;
        this._reconnectionAttempts = v;
        return this;
    }
    reconnectionDelay(v) {
        var _a;
        if (v === undefined) return this._reconnectionDelay;
        this._reconnectionDelay = v;
        (_a = this.backoff) === null || _a === void 0 || _a.setMin(v);
        return this;
    }
    randomizationFactor(v) {
        var _a;
        if (v === undefined) return this._randomizationFactor;
        this._randomizationFactor = v;
        (_a = this.backoff) === null || _a === void 0 || _a.setJitter(v);
        return this;
    }
    reconnectionDelayMax(v) {
        var _a;
        if (v === undefined) return this._reconnectionDelayMax;
        this._reconnectionDelayMax = v;
        (_a = this.backoff) === null || _a === void 0 || _a.setMax(v);
        return this;
    }
    timeout(v) {
        if (!arguments.length) return this._timeout;
        this._timeout = v;
        return this;
    }
    /**
     * Starts trying to reconnect if reconnection is enabled and we have not
     * started reconnecting yet
     *
     * @private
     */ maybeReconnectOnOpen() {
        // Only try to reconnect if it's the first time we're connecting
        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) // keeps reconnection from firing twice for the same reconnection loop
        this.reconnect();
    }
    /**
     * Sets the current transport `socket`.
     *
     * @param {Function} fn - optional, callback
     * @return self
     * @public
     */ open(fn) {
        if (~this._readyState.indexOf("open")) return this;
        this.engine = new (0, _engineIoClient.Socket)(this.uri, this.opts);
        const socket = this.engine;
        const self = this;
        this._readyState = "opening";
        this.skipReconnect = false;
        // emit `open`
        const openSubDestroy = (0, _onJs.on)(socket, "open", function() {
            self.onopen();
            fn && fn();
        });
        // emit `error`
        const errorSub = (0, _onJs.on)(socket, "error", (err)=>{
            self.cleanup();
            self._readyState = "closed";
            this.emitReserved("error", err);
            if (fn) fn(err);
            else // Only do this if there is no fn to handle the error
            self.maybeReconnectOnOpen();
        });
        if (false !== this._timeout) {
            const timeout = this._timeout;
            if (timeout === 0) openSubDestroy(); // prevents a race condition with the 'open' event
            // set timer
            const timer = this.setTimeoutFn(()=>{
                openSubDestroy();
                socket.close();
                // @ts-ignore
                socket.emit("error", new Error("timeout"));
            }, timeout);
            if (this.opts.autoUnref) timer.unref();
            this.subs.push(function subDestroy() {
                clearTimeout(timer);
            });
        }
        this.subs.push(openSubDestroy);
        this.subs.push(errorSub);
        return this;
    }
    /**
     * Alias for open()
     *
     * @return self
     * @public
     */ connect(fn) {
        return this.open(fn);
    }
    /**
     * Called upon transport open.
     *
     * @private
     */ onopen() {
        // clear old subs
        this.cleanup();
        // mark as open
        this._readyState = "open";
        this.emitReserved("open");
        // add new subs
        const socket = this.engine;
        this.subs.push((0, _onJs.on)(socket, "ping", this.onping.bind(this)), (0, _onJs.on)(socket, "data", this.ondata.bind(this)), (0, _onJs.on)(socket, "error", this.onerror.bind(this)), (0, _onJs.on)(socket, "close", this.onclose.bind(this)), (0, _onJs.on)(this.decoder, "decoded", this.ondecoded.bind(this)));
    }
    /**
     * Called upon a ping.
     *
     * @private
     */ onping() {
        this.emitReserved("ping");
    }
    /**
     * Called with data.
     *
     * @private
     */ ondata(data) {
        this.decoder.add(data);
    }
    /**
     * Called when parser fully decodes a packet.
     *
     * @private
     */ ondecoded(packet) {
        this.emitReserved("packet", packet);
    }
    /**
     * Called upon socket error.
     *
     * @private
     */ onerror(err) {
        this.emitReserved("error", err);
    }
    /**
     * Creates a new socket for the given `nsp`.
     *
     * @return {Socket}
     * @public
     */ socket(nsp, opts) {
        let socket = this.nsps[nsp];
        if (!socket) {
            socket = new (0, _socketJs.Socket)(this, nsp, opts);
            this.nsps[nsp] = socket;
        }
        return socket;
    }
    /**
     * Called upon a socket close.
     *
     * @param socket
     * @private
     */ _destroy(socket) {
        const nsps = Object.keys(this.nsps);
        for (const nsp of nsps){
            const socket = this.nsps[nsp];
            if (socket.active) return;
        }
        this._close();
    }
    /**
     * Writes a packet.
     *
     * @param packet
     * @private
     */ _packet(packet) {
        const encodedPackets = this.encoder.encode(packet);
        for(let i = 0; i < encodedPackets.length; i++)this.engine.write(encodedPackets[i], packet.options);
    }
    /**
     * Clean up transport subscriptions and packet buffer.
     *
     * @private
     */ cleanup() {
        this.subs.forEach((subDestroy)=>subDestroy());
        this.subs.length = 0;
        this.decoder.destroy();
    }
    /**
     * Close the current socket.
     *
     * @private
     */ _close() {
        this.skipReconnect = true;
        this._reconnecting = false;
        this.onclose("forced close");
        if (this.engine) this.engine.close();
    }
    /**
     * Alias for close()
     *
     * @private
     */ disconnect() {
        return this._close();
    }
    /**
     * Called upon engine close.
     *
     * @private
     */ onclose(reason, description) {
        this.cleanup();
        this.backoff.reset();
        this._readyState = "closed";
        this.emitReserved("close", reason, description);
        if (this._reconnection && !this.skipReconnect) this.reconnect();
    }
    /**
     * Attempt a reconnection.
     *
     * @private
     */ reconnect() {
        if (this._reconnecting || this.skipReconnect) return this;
        const self = this;
        if (this.backoff.attempts >= this._reconnectionAttempts) {
            this.backoff.reset();
            this.emitReserved("reconnect_failed");
            this._reconnecting = false;
        } else {
            const delay = this.backoff.duration();
            this._reconnecting = true;
            const timer = this.setTimeoutFn(()=>{
                if (self.skipReconnect) return;
                this.emitReserved("reconnect_attempt", self.backoff.attempts);
                // check again for the case socket closed in above events
                if (self.skipReconnect) return;
                self.open((err)=>{
                    if (err) {
                        self._reconnecting = false;
                        self.reconnect();
                        this.emitReserved("reconnect_error", err);
                    } else self.onreconnect();
                });
            }, delay);
            if (this.opts.autoUnref) timer.unref();
            this.subs.push(function subDestroy() {
                clearTimeout(timer);
            });
        }
    }
    /**
     * Called upon successful reconnect.
     *
     * @private
     */ onreconnect() {
        const attempt = this.backoff.attempts;
        this._reconnecting = false;
        this.backoff.reset();
        this.emitReserved("reconnect", attempt);
    }
}

},{"engine.io-client":"jBHFs","./socket.js":"kbWgu","socket.io-parser":"oJOlm","./on.js":"8FFT1","./contrib/backo2.js":"cZLsm","@socket.io/component-emitter":"dzQbR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kbWgu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Socket", ()=>Socket);
var _socketIoParser = require("socket.io-parser");
var _onJs = require("./on.js");
var _componentEmitter = require("@socket.io/component-emitter");
/**
 * Internal events.
 * These events can't be emitted by the user.
 */ const RESERVED_EVENTS = Object.freeze({
    connect: 1,
    connect_error: 1,
    disconnect: 1,
    disconnecting: 1,
    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
    newListener: 1,
    removeListener: 1
});
class Socket extends (0, _componentEmitter.Emitter) {
    /**
     * `Socket` constructor.
     *
     * @public
     */ constructor(io, nsp, opts){
        super();
        this.connected = false;
        this.receiveBuffer = [];
        this.sendBuffer = [];
        this.ids = 0;
        this.acks = {};
        this.flags = {};
        this.io = io;
        this.nsp = nsp;
        if (opts && opts.auth) this.auth = opts.auth;
        if (this.io._autoConnect) this.open();
    }
    /**
     * Whether the socket is currently disconnected
     */ get disconnected() {
        return !this.connected;
    }
    /**
     * Subscribe to open, close and packet events
     *
     * @private
     */ subEvents() {
        if (this.subs) return;
        const io = this.io;
        this.subs = [
            (0, _onJs.on)(io, "open", this.onopen.bind(this)),
            (0, _onJs.on)(io, "packet", this.onpacket.bind(this)),
            (0, _onJs.on)(io, "error", this.onerror.bind(this)),
            (0, _onJs.on)(io, "close", this.onclose.bind(this)), 
        ];
    }
    /**
     * Whether the Socket will try to reconnect when its Manager connects or reconnects
     */ get active() {
        return !!this.subs;
    }
    /**
     * "Opens" the socket.
     *
     * @public
     */ connect() {
        if (this.connected) return this;
        this.subEvents();
        if (!this.io["_reconnecting"]) this.io.open(); // ensure open
        if ("open" === this.io._readyState) this.onopen();
        return this;
    }
    /**
     * Alias for connect()
     */ open() {
        return this.connect();
    }
    /**
     * Sends a `message` event.
     *
     * @return self
     * @public
     */ send(...args) {
        args.unshift("message");
        this.emit.apply(this, args);
        return this;
    }
    /**
     * Override `emit`.
     * If the event is in `events`, it's emitted normally.
     *
     * @return self
     * @public
     */ emit(ev, ...args) {
        if (RESERVED_EVENTS.hasOwnProperty(ev)) throw new Error('"' + ev + '" is a reserved event name');
        args.unshift(ev);
        const packet = {
            type: (0, _socketIoParser.PacketType).EVENT,
            data: args
        };
        packet.options = {};
        packet.options.compress = this.flags.compress !== false;
        // event ack callback
        if ("function" === typeof args[args.length - 1]) {
            const id = this.ids++;
            const ack = args.pop();
            this._registerAckCallback(id, ack);
            packet.id = id;
        }
        const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
        if (discardPacket) ;
        else if (this.connected) {
            this.notifyOutgoingListeners(packet);
            this.packet(packet);
        } else this.sendBuffer.push(packet);
        this.flags = {};
        return this;
    }
    /**
     * @private
     */ _registerAckCallback(id, ack) {
        const timeout = this.flags.timeout;
        if (timeout === undefined) {
            this.acks[id] = ack;
            return;
        }
        // @ts-ignore
        const timer = this.io.setTimeoutFn(()=>{
            delete this.acks[id];
            for(let i = 0; i < this.sendBuffer.length; i++)if (this.sendBuffer[i].id === id) this.sendBuffer.splice(i, 1);
            ack.call(this, new Error("operation has timed out"));
        }, timeout);
        this.acks[id] = (...args)=>{
            // @ts-ignore
            this.io.clearTimeoutFn(timer);
            ack.apply(this, [
                null,
                ...args
            ]);
        };
    }
    /**
     * Sends a packet.
     *
     * @param packet
     * @private
     */ packet(packet) {
        packet.nsp = this.nsp;
        this.io._packet(packet);
    }
    /**
     * Called upon engine `open`.
     *
     * @private
     */ onopen() {
        if (typeof this.auth == "function") this.auth((data)=>{
            this.packet({
                type: (0, _socketIoParser.PacketType).CONNECT,
                data
            });
        });
        else this.packet({
            type: (0, _socketIoParser.PacketType).CONNECT,
            data: this.auth
        });
    }
    /**
     * Called upon engine or manager `error`.
     *
     * @param err
     * @private
     */ onerror(err) {
        if (!this.connected) this.emitReserved("connect_error", err);
    }
    /**
     * Called upon engine `close`.
     *
     * @param reason
     * @param description
     * @private
     */ onclose(reason, description) {
        this.connected = false;
        delete this.id;
        this.emitReserved("disconnect", reason, description);
    }
    /**
     * Called with socket packet.
     *
     * @param packet
     * @private
     */ onpacket(packet) {
        const sameNamespace = packet.nsp === this.nsp;
        if (!sameNamespace) return;
        switch(packet.type){
            case (0, _socketIoParser.PacketType).CONNECT:
                if (packet.data && packet.data.sid) {
                    const id = packet.data.sid;
                    this.onconnect(id);
                } else this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
                break;
            case (0, _socketIoParser.PacketType).EVENT:
            case (0, _socketIoParser.PacketType).BINARY_EVENT:
                this.onevent(packet);
                break;
            case (0, _socketIoParser.PacketType).ACK:
            case (0, _socketIoParser.PacketType).BINARY_ACK:
                this.onack(packet);
                break;
            case (0, _socketIoParser.PacketType).DISCONNECT:
                this.ondisconnect();
                break;
            case (0, _socketIoParser.PacketType).CONNECT_ERROR:
                this.destroy();
                const err = new Error(packet.data.message);
                // @ts-ignore
                err.data = packet.data.data;
                this.emitReserved("connect_error", err);
                break;
        }
    }
    /**
     * Called upon a server event.
     *
     * @param packet
     * @private
     */ onevent(packet) {
        const args = packet.data || [];
        if (null != packet.id) args.push(this.ack(packet.id));
        if (this.connected) this.emitEvent(args);
        else this.receiveBuffer.push(Object.freeze(args));
    }
    emitEvent(args) {
        if (this._anyListeners && this._anyListeners.length) {
            const listeners = this._anyListeners.slice();
            for (const listener of listeners)listener.apply(this, args);
        }
        super.emit.apply(this, args);
    }
    /**
     * Produces an ack callback to emit with an event.
     *
     * @private
     */ ack(id) {
        const self = this;
        let sent = false;
        return function(...args) {
            // prevent double callbacks
            if (sent) return;
            sent = true;
            self.packet({
                type: (0, _socketIoParser.PacketType).ACK,
                id: id,
                data: args
            });
        };
    }
    /**
     * Called upon a server acknowlegement.
     *
     * @param packet
     * @private
     */ onack(packet) {
        const ack = this.acks[packet.id];
        if ("function" === typeof ack) {
            ack.apply(this, packet.data);
            delete this.acks[packet.id];
        }
    }
    /**
     * Called upon server connect.
     *
     * @private
     */ onconnect(id) {
        this.id = id;
        this.connected = true;
        this.emitBuffered();
        this.emitReserved("connect");
    }
    /**
     * Emit buffered events (received and emitted).
     *
     * @private
     */ emitBuffered() {
        this.receiveBuffer.forEach((args)=>this.emitEvent(args));
        this.receiveBuffer = [];
        this.sendBuffer.forEach((packet)=>{
            this.notifyOutgoingListeners(packet);
            this.packet(packet);
        });
        this.sendBuffer = [];
    }
    /**
     * Called upon server disconnect.
     *
     * @private
     */ ondisconnect() {
        this.destroy();
        this.onclose("io server disconnect");
    }
    /**
     * Called upon forced client/server side disconnections,
     * this method ensures the manager stops tracking us and
     * that reconnections don't get triggered for this.
     *
     * @private
     */ destroy() {
        if (this.subs) {
            // clean subscriptions to avoid reconnections
            this.subs.forEach((subDestroy)=>subDestroy());
            this.subs = undefined;
        }
        this.io["_destroy"](this);
    }
    /**
     * Disconnects the socket manually.
     *
     * @return self
     * @public
     */ disconnect() {
        if (this.connected) this.packet({
            type: (0, _socketIoParser.PacketType).DISCONNECT
        });
        // remove socket from pool
        this.destroy();
        if (this.connected) // fire events
        this.onclose("io client disconnect");
        return this;
    }
    /**
     * Alias for disconnect()
     *
     * @return self
     * @public
     */ close() {
        return this.disconnect();
    }
    /**
     * Sets the compress flag.
     *
     * @param compress - if `true`, compresses the sending data
     * @return self
     * @public
     */ compress(compress) {
        this.flags.compress = compress;
        return this;
    }
    /**
     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
     * ready to send messages.
     *
     * @returns self
     * @public
     */ get volatile() {
        this.flags.volatile = true;
        return this;
    }
    /**
     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
     * given number of milliseconds have elapsed without an acknowledgement from the server:
     *
     * ```
     * socket.timeout(5000).emit("my-event", (err) => {
     *   if (err) {
     *     // the server did not acknowledge the event in the given delay
     *   }
     * });
     * ```
     *
     * @returns self
     * @public
     */ timeout(timeout) {
        this.flags.timeout = timeout;
        return this;
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback.
     *
     * @param listener
     * @public
     */ onAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.push(listener);
        return this;
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback. The listener is added to the beginning of the listeners array.
     *
     * @param listener
     * @public
     */ prependAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.unshift(listener);
        return this;
    }
    /**
     * Removes the listener that will be fired when any event is emitted.
     *
     * @param listener
     * @public
     */ offAny(listener) {
        if (!this._anyListeners) return this;
        if (listener) {
            const listeners = this._anyListeners;
            for(let i = 0; i < listeners.length; i++)if (listener === listeners[i]) {
                listeners.splice(i, 1);
                return this;
            }
        } else this._anyListeners = [];
        return this;
    }
    /**
     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
     * e.g. to remove listeners.
     *
     * @public
     */ listenersAny() {
        return this._anyListeners || [];
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback.
     *
     * @param listener
     *
     * <pre><code>
     *
     * socket.onAnyOutgoing((event, ...args) => {
     *   console.log(event);
     * });
     *
     * </pre></code>
     *
     * @public
     */ onAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
        this._anyOutgoingListeners.push(listener);
        return this;
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback. The listener is added to the beginning of the listeners array.
     *
     * @param listener
     *
     * <pre><code>
     *
     * socket.prependAnyOutgoing((event, ...args) => {
     *   console.log(event);
     * });
     *
     * </pre></code>
     *
     * @public
     */ prependAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
        this._anyOutgoingListeners.unshift(listener);
        return this;
    }
    /**
     * Removes the listener that will be fired when any event is emitted.
     *
     * @param listener
     *
     * <pre><code>
     *
     * const handler = (event, ...args) => {
     *   console.log(event);
     * }
     *
     * socket.onAnyOutgoing(handler);
     *
     * // then later
     * socket.offAnyOutgoing(handler);
     *
     * </pre></code>
     *
     * @public
     */ offAnyOutgoing(listener) {
        if (!this._anyOutgoingListeners) return this;
        if (listener) {
            const listeners = this._anyOutgoingListeners;
            for(let i = 0; i < listeners.length; i++)if (listener === listeners[i]) {
                listeners.splice(i, 1);
                return this;
            }
        } else this._anyOutgoingListeners = [];
        return this;
    }
    /**
     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
     * e.g. to remove listeners.
     *
     * @public
     */ listenersAnyOutgoing() {
        return this._anyOutgoingListeners || [];
    }
    /**
     * Notify the listeners for each packet sent
     *
     * @param packet
     *
     * @private
     */ notifyOutgoingListeners(packet) {
        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
            const listeners = this._anyOutgoingListeners.slice();
            for (const listener of listeners)listener.apply(this, packet.data);
        }
    }
}

},{"socket.io-parser":"oJOlm","./on.js":"8FFT1","@socket.io/component-emitter":"dzQbR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"oJOlm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "protocol", ()=>protocol);
parcelHelpers.export(exports, "PacketType", ()=>PacketType);
/**
 * A socket.io Encoder instance
 */ parcelHelpers.export(exports, "Encoder", ()=>Encoder);
/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 */ parcelHelpers.export(exports, "Decoder", ()=>Decoder);
var _componentEmitter = require("@socket.io/component-emitter");
var _binaryJs = require("./binary.js");
var _isBinaryJs = require("./is-binary.js");
const protocol = 5;
var PacketType;
(function(PacketType1) {
    PacketType1[PacketType1["CONNECT"] = 0] = "CONNECT";
    PacketType1[PacketType1["DISCONNECT"] = 1] = "DISCONNECT";
    PacketType1[PacketType1["EVENT"] = 2] = "EVENT";
    PacketType1[PacketType1["ACK"] = 3] = "ACK";
    PacketType1[PacketType1["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
    PacketType1[PacketType1["BINARY_EVENT"] = 5] = "BINARY_EVENT";
    PacketType1[PacketType1["BINARY_ACK"] = 6] = "BINARY_ACK";
})(PacketType || (PacketType = {}));
class Encoder {
    /**
     * Encoder constructor
     *
     * @param {function} replacer - custom replacer to pass down to JSON.parse
     */ constructor(replacer){
        this.replacer = replacer;
    }
    /**
     * Encode a packet as a single string if non-binary, or as a
     * buffer sequence, depending on packet type.
     *
     * @param {Object} obj - packet object
     */ encode(obj) {
        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
            if ((0, _isBinaryJs.hasBinary)(obj)) {
                obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;
                return this.encodeAsBinary(obj);
            }
        }
        return [
            this.encodeAsString(obj)
        ];
    }
    /**
     * Encode packet as string.
     */ encodeAsString(obj) {
        // first is type
        let str = "" + obj.type;
        // attachments if we have them
        if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) str += obj.attachments + "-";
        // if we have a namespace other than `/`
        // we append it followed by a comma `,`
        if (obj.nsp && "/" !== obj.nsp) str += obj.nsp + ",";
        // immediately followed by the id
        if (null != obj.id) str += obj.id;
        // json data
        if (null != obj.data) str += JSON.stringify(obj.data, this.replacer);
        return str;
    }
    /**
     * Encode packet as 'buffer sequence' by removing blobs, and
     * deconstructing packet into object with placeholders and
     * a list of buffers.
     */ encodeAsBinary(obj) {
        const deconstruction = (0, _binaryJs.deconstructPacket)(obj);
        const pack = this.encodeAsString(deconstruction.packet);
        const buffers = deconstruction.buffers;
        buffers.unshift(pack); // add packet info to beginning of data list
        return buffers; // write all the buffers
    }
}
class Decoder extends (0, _componentEmitter.Emitter) {
    /**
     * Decoder constructor
     *
     * @param {function} reviver - custom reviver to pass down to JSON.stringify
     */ constructor(reviver){
        super();
        this.reviver = reviver;
    }
    /**
     * Decodes an encoded packet string into packet JSON.
     *
     * @param {String} obj - encoded packet
     */ add(obj) {
        let packet;
        if (typeof obj === "string") {
            if (this.reconstructor) throw new Error("got plaintext data when reconstructing a packet");
            packet = this.decodeString(obj);
            if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {
                // binary packet's json
                this.reconstructor = new BinaryReconstructor(packet);
                // no attachments, labeled binary but no binary data to follow
                if (packet.attachments === 0) super.emitReserved("decoded", packet);
            } else // non-binary full packet
            super.emitReserved("decoded", packet);
        } else if ((0, _isBinaryJs.isBinary)(obj) || obj.base64) {
            // raw binary data
            if (!this.reconstructor) throw new Error("got binary data when not reconstructing a packet");
            else {
                packet = this.reconstructor.takeBinaryData(obj);
                if (packet) {
                    // received final buffer
                    this.reconstructor = null;
                    super.emitReserved("decoded", packet);
                }
            }
        } else throw new Error("Unknown type: " + obj);
    }
    /**
     * Decode a packet String (JSON data)
     *
     * @param {String} str
     * @return {Object} packet
     */ decodeString(str) {
        let i = 0;
        // look up type
        const p = {
            type: Number(str.charAt(0))
        };
        if (PacketType[p.type] === undefined) throw new Error("unknown packet type " + p.type);
        // look up attachments if type binary
        if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
            const start = i + 1;
            while(str.charAt(++i) !== "-" && i != str.length);
            const buf = str.substring(start, i);
            if (buf != Number(buf) || str.charAt(i) !== "-") throw new Error("Illegal attachments");
            p.attachments = Number(buf);
        }
        // look up namespace (if any)
        if ("/" === str.charAt(i + 1)) {
            const start = i + 1;
            while(++i){
                const c = str.charAt(i);
                if ("," === c) break;
                if (i === str.length) break;
            }
            p.nsp = str.substring(start, i);
        } else p.nsp = "/";
        // look up id
        const next = str.charAt(i + 1);
        if ("" !== next && Number(next) == next) {
            const start = i + 1;
            while(++i){
                const c = str.charAt(i);
                if (null == c || Number(c) != c) {
                    --i;
                    break;
                }
                if (i === str.length) break;
            }
            p.id = Number(str.substring(start, i + 1));
        }
        // look up json data
        if (str.charAt(++i)) {
            const payload = this.tryParse(str.substr(i));
            if (Decoder.isPayloadValid(p.type, payload)) p.data = payload;
            else throw new Error("invalid payload");
        }
        return p;
    }
    tryParse(str) {
        try {
            return JSON.parse(str, this.reviver);
        } catch (e) {
            return false;
        }
    }
    static isPayloadValid(type, payload) {
        switch(type){
            case PacketType.CONNECT:
                return typeof payload === "object";
            case PacketType.DISCONNECT:
                return payload === undefined;
            case PacketType.CONNECT_ERROR:
                return typeof payload === "string" || typeof payload === "object";
            case PacketType.EVENT:
            case PacketType.BINARY_EVENT:
                return Array.isArray(payload) && payload.length > 0;
            case PacketType.ACK:
            case PacketType.BINARY_ACK:
                return Array.isArray(payload);
        }
    }
    /**
     * Deallocates a parser's resources
     */ destroy() {
        if (this.reconstructor) this.reconstructor.finishedReconstruction();
    }
}
/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 */ class BinaryReconstructor {
    constructor(packet){
        this.packet = packet;
        this.buffers = [];
        this.reconPack = packet;
    }
    /**
     * Method to be called when binary data received from connection
     * after a BINARY_EVENT packet.
     *
     * @param {Buffer | ArrayBuffer} binData - the raw binary data received
     * @return {null | Object} returns null if more binary data is expected or
     *   a reconstructed packet object if all buffers have been received.
     */ takeBinaryData(binData) {
        this.buffers.push(binData);
        if (this.buffers.length === this.reconPack.attachments) {
            // done with buffer list
            const packet = (0, _binaryJs.reconstructPacket)(this.reconPack, this.buffers);
            this.finishedReconstruction();
            return packet;
        }
        return null;
    }
    /**
     * Cleans up binary packet reconstruction variables.
     */ finishedReconstruction() {
        this.reconPack = null;
        this.buffers = [];
    }
}

},{"@socket.io/component-emitter":"dzQbR","./binary.js":"hAiYP","./is-binary.js":"3qg6A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hAiYP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @public
 */ parcelHelpers.export(exports, "deconstructPacket", ()=>deconstructPacket);
/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @public
 */ parcelHelpers.export(exports, "reconstructPacket", ()=>reconstructPacket);
var _isBinaryJs = require("./is-binary.js");
function deconstructPacket(packet) {
    const buffers = [];
    const packetData = packet.data;
    const pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length; // number of binary 'attachments'
    return {
        packet: pack,
        buffers: buffers
    };
}
function _deconstructPacket(data, buffers) {
    if (!data) return data;
    if ((0, _isBinaryJs.isBinary)(data)) {
        const placeholder = {
            _placeholder: true,
            num: buffers.length
        };
        buffers.push(data);
        return placeholder;
    } else if (Array.isArray(data)) {
        const newData = new Array(data.length);
        for(let i = 0; i < data.length; i++)newData[i] = _deconstructPacket(data[i], buffers);
        return newData;
    } else if (typeof data === "object" && !(data instanceof Date)) {
        const newData = {};
        for(const key in data)if (Object.prototype.hasOwnProperty.call(data, key)) newData[key] = _deconstructPacket(data[key], buffers);
        return newData;
    }
    return data;
}
function reconstructPacket(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    packet.attachments = undefined; // no longer useful
    return packet;
}
function _reconstructPacket(data, buffers) {
    if (!data) return data;
    if (data && data._placeholder === true) {
        const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
        if (isIndexValid) return buffers[data.num]; // appropriate buffer (should be natural order anyway)
        else throw new Error("illegal attachments");
    } else if (Array.isArray(data)) for(let i = 0; i < data.length; i++)data[i] = _reconstructPacket(data[i], buffers);
    else if (typeof data === "object") {
        for(const key in data)if (Object.prototype.hasOwnProperty.call(data, key)) data[key] = _reconstructPacket(data[key], buffers);
    }
    return data;
}

},{"./is-binary.js":"3qg6A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3qg6A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.
 *
 * @private
 */ parcelHelpers.export(exports, "isBinary", ()=>isBinary);
parcelHelpers.export(exports, "hasBinary", ()=>hasBinary);
const withNativeArrayBuffer = typeof ArrayBuffer === "function";
const isView = (obj)=>{
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
};
const toString = Object.prototype.toString;
const withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
const withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
function isBinary(obj) {
    return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
}
function hasBinary(obj, toJSON) {
    if (!obj || typeof obj !== "object") return false;
    if (Array.isArray(obj)) {
        for(let i = 0, l = obj.length; i < l; i++){
            if (hasBinary(obj[i])) return true;
        }
        return false;
    }
    if (isBinary(obj)) return true;
    if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) return hasBinary(obj.toJSON(), true);
    for(const key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) return true;
    }
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8FFT1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "on", ()=>on);
function on(obj, ev, fn) {
    obj.on(ev, fn);
    return function subDestroy() {
        obj.off(ev, fn);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZLsm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */ parcelHelpers.export(exports, "Backoff", ()=>Backoff);
function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 10000;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
}
/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */ Backoff.prototype.duration = function() {
    var ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
        var rand = Math.random();
        var deviation = Math.floor(rand * this.jitter * ms);
        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
};
/**
 * Reset the number of attempts.
 *
 * @api public
 */ Backoff.prototype.reset = function() {
    this.attempts = 0;
};
/**
 * Set the minimum duration
 *
 * @api public
 */ Backoff.prototype.setMin = function(min) {
    this.ms = min;
};
/**
 * Set the maximum duration
 *
 * @api public
 */ Backoff.prototype.setMax = function(max) {
    this.max = max;
};
/**
 * Set the jitter
 *
 * @api public
 */ Backoff.prototype.setJitter = function(jitter) {
    this.jitter = jitter;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ZyNn":[function(require,module,exports) {
"use strict";
const abortable = require("abortable-iterator");
const toIterable = require("stream-to-it");
const { CLOSE_TIMEOUT  } = require("./constants");
const toMultiaddr = require("libp2p-utils/src/ip-port-to-multiaddr");
const debug = require("debug");
const log = debug("libp2p:webrtc-star:socket");
log.error = debug("libp2p:webrtc-star:socket:error");
const toWebrtcMultiaddr = (address, port)=>{
    if (!address || !port) return undefined;
    try {
        return toMultiaddr(address, port);
    } catch (err) {
        log.error(err);
        // Account for mdns hostnames, just make it a local ip for now
        return toMultiaddr("0.0.0.0", port);
    }
};
// Convert a socket into a MultiaddrConnection
// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection
module.exports = (socket, options = {})=>{
    const { sink , source: source1  } = toIterable.duplex(socket);
    // If the remote address was passed, use it - it may have the peer ID encapsulated
    const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort);
    const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort);
    const maConn = {
        async sink (source) {
            if (options.signal) source = abortable(source, options.signal);
            try {
                await sink(async function*() {
                    for await (const chunk of source)// Convert BufferList to Buffer
                    yield chunk instanceof Uint8Array ? chunk : chunk.slice();
                }());
            } catch (err) {
                // If aborted we can safely ignore
                if (err.type !== "aborted") // If the source errored the socket will already have been destroyed by
                // toIterable.duplex(). If the socket errored it will already be
                // destroyed. There's nothing to do here except log the error & return.
                log.error(err);
            }
        },
        source: options.signal ? abortable(source1, options.signal) : source1,
        conn: socket,
        localAddr,
        remoteAddr,
        timeline: {
            open: Date.now()
        },
        close () {
            if (socket.destroyed) return;
            return new Promise((resolve, reject)=>{
                const start = Date.now();
                // Attempt to end the socket. If it takes longer to close than the
                // timeout, destroy it manually.
                const timeout = setTimeout(()=>{
                    if (maConn.remoteAddr) {
                        const { host , port  } = maConn.remoteAddr.toOptions();
                        log("timeout closing socket to %s:%s after %dms, destroying it manually", host, port, Date.now() - start);
                    }
                    if (!socket.destroyed) socket.destroy();
                }, CLOSE_TIMEOUT);
                socket.once("close", ()=>{
                    resolve();
                });
                socket.end((err)=>{
                    clearTimeout(timeout);
                    maConn.timeline.close = Date.now();
                    if (err) return reject(err);
                });
            });
        }
    };
    socket.once("close", ()=>{
        // In instances where `close` was not explicitly called,
        // such as an iterable stream ending, ensure we have set the close
        // timeline
        if (!maConn.timeline.close) maConn.timeline.close = Date.now();
    });
    return maConn;
};

},{"abortable-iterator":"jIHDo","stream-to-it":"2BMc7","./constants":"euSyt","libp2p-utils/src/ip-port-to-multiaddr":"hbYki","debug":"l0oUb"}],"2BMc7":[function(require,module,exports) {
module.exports = require("./source");
module.exports.source = require("./source");
module.exports.sink = require("./sink");
module.exports.transform = require("./transform");
module.exports.duplex = require("./duplex");

},{"./source":"h0rMn","./sink":"bCENC","./transform":"legES","./duplex":"8yP1F"}],"h0rMn":[function(require,module,exports) {
module.exports = (readable)=>{
    // Node.js stream
    if (readable[Symbol.asyncIterator]) return readable;
    // Browser ReadableStream
    if (readable.getReader) return async function*() {
        const reader = readable.getReader();
        try {
            while(true){
                const { done , value  } = await reader.read();
                if (done) return;
                yield value;
            }
        } finally{
            reader.releaseLock();
        }
    }();
    throw new Error("unknown stream");
};

},{}],"bCENC":[function(require,module,exports) {
const getIterator = require("get-iterator");
module.exports = (writable)=>async (source1)=>{
        source1 = getIterator(source1);
        const maybeEndSource = (source)=>{
            if (typeof source.return === "function") source.return();
        };
        let error = null;
        let errCb = null;
        const errorHandler = (err)=>{
            error = err;
            if (errCb) errCb(err);
            // When the writable errors, try to end the source to exit iteration early
            maybeEndSource(source1);
        };
        let closeCb = null;
        let closed = false;
        const closeHandler = ()=>{
            closed = true;
            if (closeCb) closeCb();
        };
        let finishCb = null;
        let finished = false;
        const finishHandler = ()=>{
            finished = true;
            if (finishCb) finishCb();
        };
        let drainCb = null;
        const drainHandler = ()=>{
            if (drainCb) drainCb();
        };
        const waitForDrainOrClose = ()=>{
            return new Promise((resolve, reject)=>{
                closeCb = drainCb = resolve;
                errCb = reject;
                writable.once("drain", drainHandler);
            });
        };
        const waitForDone = ()=>{
            // Immediately try to end the source
            maybeEndSource(source1);
            return new Promise((resolve, reject)=>{
                if (closed || finished || error) return resolve();
                finishCb = closeCb = resolve;
                errCb = reject;
            });
        };
        const cleanup = ()=>{
            writable.removeListener("error", errorHandler);
            writable.removeListener("close", closeHandler);
            writable.removeListener("finish", finishHandler);
            writable.removeListener("drain", drainHandler);
        };
        writable.once("error", errorHandler);
        writable.once("close", closeHandler);
        writable.once("finish", finishHandler);
        try {
            for await (const value of source1){
                if (!writable.writable || writable.destroyed || error) break;
                if (writable.write(value) === false) await waitForDrainOrClose();
            }
        } catch (err) {
            // error is set by stream error handler so only destroy stream if source threw
            if (!error) writable.destroy();
            // could we be obscuring an error here?
            error = err;
        }
        try {
            // We're done writing, end everything (n.b. stream may be destroyed at this point but then this is a no-op)
            if (writable.writable) writable.end();
            // Wait until we close or finish. This supports halfClosed streams
            await waitForDone();
            // Notify the user an error occurred
            if (error) throw error;
        } finally{
            // Clean up listeners
            cleanup();
        }
    };

},{"get-iterator":"bU9aM"}],"legES":[function(require,module,exports) {
const toDuplex = require("./duplex");
module.exports = (transform)=>async function*(source) {
        const duplex = toDuplex(transform);
        // In a transform the sink and source are connected, an error in the sink
        // will be thrown in the source also. Catch the sink error to avoid unhandled
        // rejections and yield from the source.
        let sinkError;
        duplex.sink(source).catch((err)=>{
            sinkError = err;
        });
        yield* duplex.source;
        if (sinkError) throw sinkError;
    };

},{"./duplex":"8yP1F"}],"8yP1F":[function(require,module,exports) {
const toSink = require("./sink");
const toSource = require("./source");
module.exports = (duplex)=>({
        sink: toSink(duplex),
        source: toSource(duplex)
    });

},{"./sink":"bCENC","./source":"h0rMn"}],"hbYki":[function(require,module,exports) {
"use strict";
const debug = require("debug");
const log = Object.assign(debug("libp2p:ip-port-to-multiaddr"), {
    error: debug("libp2p:ip-port-to-multiaddr:err")
});
const { Multiaddr  } = require("multiaddr");
const errCode = require("err-code");
const { Address4 , Address6  } = require("ip-address");
const errors = {
    ERR_INVALID_IP_PARAMETER: "ERR_INVALID_IP_PARAMETER",
    ERR_INVALID_PORT_PARAMETER: "ERR_INVALID_PORT_PARAMETER",
    ERR_INVALID_IP: "ERR_INVALID_IP"
};
/**
 * Transform an IP, Port pair into a multiaddr
 *
 * @param {string} ip
 * @param {number|string} port
 */ function ipPortToMultiaddr(ip, port) {
    if (typeof ip !== "string") throw errCode(new Error(`invalid ip provided: ${ip}`), errors.ERR_INVALID_IP_PARAMETER);
    if (typeof port === "string") port = parseInt(port);
    if (isNaN(port)) throw errCode(new Error(`invalid port provided: ${port}`), errors.ERR_INVALID_PORT_PARAMETER);
    try {
        // Test valid IPv4
        new Address4(ip) // eslint-disable-line no-new
        ;
        return new Multiaddr(`/ip4/${ip}/tcp/${port}`);
    } catch  {}
    try {
        // Test valid IPv6
        const ip6 = new Address6(ip);
        return ip6.is4() ? new Multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`) : new Multiaddr(`/ip6/${ip}/tcp/${port}`);
    } catch (err) {
        const errMsg = `invalid ip:port for creating a multiaddr: ${ip}:${port}`;
        log.error(errMsg);
        throw errCode(new Error(errMsg), errors.ERR_INVALID_IP);
    }
}
module.exports = ipPortToMultiaddr;
module.exports.Errors = errors;

},{"debug":"l0oUb","multiaddr":"dOMJu","err-code":"dUrrM","ip-address":"gGmqQ"}],"gGmqQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Address4", ()=>(0, _ipv4.Address4));
parcelHelpers.export(exports, "Address6", ()=>(0, _ipv6.Address6));
parcelHelpers.export(exports, "AddressError", ()=>(0, _addressError.AddressError));
parcelHelpers.export(exports, "v6", ()=>v6);
var _ipv4 = require("./lib/ipv4");
var _ipv6 = require("./lib/ipv6");
var _addressError = require("./lib/address-error");
var _helpers = require("./lib/v6/helpers");
const v6 = {
    helpers: _helpers
};

},{"./lib/ipv4":"9Yvvy","./lib/ipv6":"32xuO","./lib/address-error":"dAhIV","./lib/v6/helpers":"3C5VE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Yvvy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Represents an IPv4 address
 * @class Address4
 * @param {string} address - An IPv4 address string
 */ parcelHelpers.export(exports, "Address4", ()=>Address4);
/* eslint-disable no-param-reassign */ var _common = require("./common");
var _constants = require("./v4/constants");
var _addressError = require("./address-error");
var _jsbn = require("jsbn");
var _sprintfJs = require("sprintf-js");
class Address4 {
    constructor(address){
        this.groups = _constants.GROUPS;
        this.parsedAddress = [];
        this.parsedSubnet = "";
        this.subnet = "/32";
        this.subnetMask = 32;
        this.v4 = true;
        /**
         * Returns true if the address is correct, false otherwise
         * @memberof Address4
         * @instance
         * @returns {Boolean}
         */ this.isCorrect = _common.isCorrect(_constants.BITS);
        /**
         * Returns true if the given address is in the subnet of the current address
         * @memberof Address4
         * @instance
         * @returns {boolean}
         */ this.isInSubnet = _common.isInSubnet;
        this.address = address;
        const subnet = _constants.RE_SUBNET_STRING.exec(address);
        if (subnet) {
            this.parsedSubnet = subnet[0].replace("/", "");
            this.subnetMask = parseInt(this.parsedSubnet, 10);
            this.subnet = `/${this.subnetMask}`;
            if (this.subnetMask < 0 || this.subnetMask > _constants.BITS) throw new (0, _addressError.AddressError)("Invalid subnet mask.");
            address = address.replace(_constants.RE_SUBNET_STRING, "");
        }
        this.addressMinusSuffix = address;
        this.parsedAddress = this.parse(address);
    }
    static isValid(address) {
        try {
            // eslint-disable-next-line no-new
            new Address4(address);
            return true;
        } catch (e) {
            return false;
        }
    }
    /*
     * Parses a v4 address
     */ parse(address) {
        const groups = address.split(".");
        if (!address.match(_constants.RE_ADDRESS)) throw new (0, _addressError.AddressError)("Invalid IPv4 address.");
        return groups;
    }
    /**
     * Returns the correct form of an address
     * @memberof Address4
     * @instance
     * @returns {String}
     */ correctForm() {
        return this.parsedAddress.map((part)=>parseInt(part, 10)).join(".");
    }
    /**
     * Converts a hex string to an IPv4 address object
     * @memberof Address4
     * @static
     * @param {string} hex - a hex string to convert
     * @returns {Address4}
     */ static fromHex(hex) {
        const padded = hex.replace(/:/g, "").padStart(8, "0");
        const groups = [];
        let i;
        for(i = 0; i < 8; i += 2){
            const h = padded.slice(i, i + 2);
            groups.push(parseInt(h, 16));
        }
        return new Address4(groups.join("."));
    }
    /**
     * Converts an integer into a IPv4 address object
     * @memberof Address4
     * @static
     * @param {integer} integer - a number to convert
     * @returns {Address4}
     */ static fromInteger(integer) {
        return Address4.fromHex(integer.toString(16));
    }
    /**
     * Return an address from in-addr.arpa form
     * @memberof Address4
     * @static
     * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address
     * @returns {Adress4}
     * @example
     * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)
     * address.correctForm(); // '192.0.2.42'
     */ static fromArpa(arpaFormAddress) {
        // remove ending ".in-addr.arpa." or just "."
        const leader = arpaFormAddress.replace(/(\.in-addr\.arpa)?\.$/, "");
        const address = leader.split(".").reverse().join(".");
        return new Address4(address);
    }
    /**
     * Converts an IPv4 address object to a hex string
     * @memberof Address4
     * @instance
     * @returns {String}
     */ toHex() {
        return this.parsedAddress.map((part)=>(0, _sprintfJs.sprintf)("%02x", parseInt(part, 10))).join(":");
    }
    /**
     * Converts an IPv4 address object to an array of bytes
     * @memberof Address4
     * @instance
     * @returns {Array}
     */ toArray() {
        return this.parsedAddress.map((part)=>parseInt(part, 10));
    }
    /**
     * Converts an IPv4 address object to an IPv6 address group
     * @memberof Address4
     * @instance
     * @returns {String}
     */ toGroup6() {
        const output = [];
        let i;
        for(i = 0; i < _constants.GROUPS; i += 2){
            const hex = (0, _sprintfJs.sprintf)("%02x%02x", parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));
            output.push((0, _sprintfJs.sprintf)("%x", parseInt(hex, 16)));
        }
        return output.join(":");
    }
    /**
     * Returns the address as a BigInteger
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */ bigInteger() {
        return new (0, _jsbn.BigInteger)(this.parsedAddress.map((n)=>(0, _sprintfJs.sprintf)("%02x", parseInt(n, 10))).join(""), 16);
    }
    /**
     * Helper function getting start address.
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */ _startAddress() {
        return new (0, _jsbn.BigInteger)(this.mask() + "0".repeat(_constants.BITS - this.subnetMask), 2);
    }
    /**
     * The first address in the range given by this address' subnet.
     * Often referred to as the Network Address.
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */ startAddress() {
        return Address4.fromBigInteger(this._startAddress());
    }
    /**
     * The first host address in the range given by this address's subnet ie
     * the first address after the Network Address
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */ startAddressExclusive() {
        const adjust = new (0, _jsbn.BigInteger)("1");
        return Address4.fromBigInteger(this._startAddress().add(adjust));
    }
    /**
     * Helper function getting end address.
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */ _endAddress() {
        return new (0, _jsbn.BigInteger)(this.mask() + "1".repeat(_constants.BITS - this.subnetMask), 2);
    }
    /**
     * The last address in the range given by this address' subnet
     * Often referred to as the Broadcast
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */ endAddress() {
        return Address4.fromBigInteger(this._endAddress());
    }
    /**
     * The last host address in the range given by this address's subnet ie
     * the last address prior to the Broadcast Address
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */ endAddressExclusive() {
        const adjust = new (0, _jsbn.BigInteger)("1");
        return Address4.fromBigInteger(this._endAddress().subtract(adjust));
    }
    /**
     * Converts a BigInteger to a v4 address object
     * @memberof Address4
     * @static
     * @param {BigInteger} bigInteger - a BigInteger to convert
     * @returns {Address4}
     */ static fromBigInteger(bigInteger) {
        return Address4.fromInteger(parseInt(bigInteger.toString(), 10));
    }
    /**
     * Returns the first n bits of the address, defaulting to the
     * subnet mask
     * @memberof Address4
     * @instance
     * @returns {String}
     */ mask(mask) {
        if (mask === undefined) mask = this.subnetMask;
        return this.getBitsBase2(0, mask);
    }
    /**
     * Returns the bits in the given range as a base-2 string
     * @memberof Address4
     * @instance
     * @returns {string}
     */ getBitsBase2(start, end) {
        return this.binaryZeroPad().slice(start, end);
    }
    /**
     * Return the reversed ip6.arpa form of the address
     * @memberof Address4
     * @param {Object} options
     * @param {boolean} options.omitSuffix - omit the "in-addr.arpa" suffix
     * @instance
     * @returns {String}
     */ reverseForm(options) {
        if (!options) options = {};
        const reversed = this.correctForm().split(".").reverse().join(".");
        if (options.omitSuffix) return reversed;
        return (0, _sprintfJs.sprintf)("%s.in-addr.arpa.", reversed);
    }
    /**
     * Returns true if the given address is a multicast address
     * @memberof Address4
     * @instance
     * @returns {boolean}
     */ isMulticast() {
        return this.isInSubnet(new Address4("224.0.0.0/4"));
    }
    /**
     * Returns a zero-padded base-2 string representation of the address
     * @memberof Address4
     * @instance
     * @returns {string}
     */ binaryZeroPad() {
        return this.bigInteger().toString(2).padStart(_constants.BITS, "0");
    }
    /**
     * Groups an IPv4 address for inclusion at the end of an IPv6 address
     * @returns {String}
     */ groupForV6() {
        const segments = this.parsedAddress;
        return this.address.replace(_constants.RE_ADDRESS, (0, _sprintfJs.sprintf)('<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>', segments.slice(0, 2).join("."), segments.slice(2, 4).join(".")));
    }
}

},{"./common":"bSlzk","./v4/constants":"7y7Sq","./address-error":"dAhIV","jsbn":"lbMNc","sprintf-js":"9lMGt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bSlzk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isInSubnet", ()=>isInSubnet);
parcelHelpers.export(exports, "isCorrect", ()=>isCorrect);
function isInSubnet(address) {
    if (this.subnetMask < address.subnetMask) return false;
    if (this.mask(address.subnetMask) === address.mask()) return true;
    return false;
}
function isCorrect(defaultBits) {
    return function() {
        if (this.addressMinusSuffix !== this.correctForm()) return false;
        if (this.subnetMask === defaultBits && !this.parsedSubnet) return true;
        return this.parsedSubnet === String(this.subnetMask);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7y7Sq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BITS", ()=>BITS);
parcelHelpers.export(exports, "GROUPS", ()=>GROUPS);
parcelHelpers.export(exports, "RE_ADDRESS", ()=>RE_ADDRESS);
parcelHelpers.export(exports, "RE_SUBNET_STRING", ()=>RE_SUBNET_STRING);
const BITS = 32;
const GROUPS = 4;
const RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;
const RE_SUBNET_STRING = /\/\d{1,2}$/;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dAhIV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AddressError", ()=>AddressError);
class AddressError extends Error {
    constructor(message, parseMessage){
        super(message);
        this.name = "AddressError";
        if (parseMessage !== null) this.parseMessage = parseMessage;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lbMNc":[function(require,module,exports) {
(function() {
    // Copyright (c) 2005  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.
    // Basic JavaScript BN library - subset useful for RSA encryption.
    // Bits per digit
    var dbits;
    // JavaScript engine analysis
    var canary = 0xdeadbeefcafe;
    var j_lm = (canary & 0xffffff) == 0xefcafe;
    // (public) Constructor
    function BigInteger(a, b, c) {
        if (a != null) {
            if ("number" == typeof a) this.fromNumber(a, b, c);
            else if (b == null && "string" != typeof a) this.fromString(a, 256);
            else this.fromString(a, b);
        }
    }
    // return new, unset BigInteger
    function nbi() {
        return new BigInteger(null);
    }
    // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.
    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
    function am1(i, x, w, j, c, n) {
        while(--n >= 0){
            var v = x * this[i++] + w[j] + c;
            c = Math.floor(v / 0x4000000);
            w[j++] = v & 0x3ffffff;
        }
        return c;
    }
    // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
    function am2(i, x, w, j, c, n) {
        var xl = x & 0x7fff, xh = x >> 15;
        while(--n >= 0){
            var l = this[i] & 0x7fff;
            var h = this[i++] >> 15;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
            w[j++] = l & 0x3fffffff;
        }
        return c;
    }
    // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.
    function am3(i, x, w, j, c, n) {
        var xl = x & 0x3fff, xh = x >> 14;
        while(--n >= 0){
            var l = this[i] & 0x3fff;
            var h = this[i++] >> 14;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
            c = (l >> 28) + (m >> 14) + xh * h;
            w[j++] = l & 0xfffffff;
        }
        return c;
    }
    var inBrowser = typeof navigator !== "undefined";
    if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
        BigInteger.prototype.am = am2;
        dbits = 30;
    } else if (inBrowser && j_lm && navigator.appName != "Netscape") {
        BigInteger.prototype.am = am1;
        dbits = 26;
    } else {
        BigInteger.prototype.am = am3;
        dbits = 28;
    }
    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = (1 << dbits) - 1;
    BigInteger.prototype.DV = 1 << dbits;
    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;
    // Digit conversions
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr, vv;
    rr = "0".charCodeAt(0);
    for(vv = 0; vv <= 9; ++vv)BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
    function int2char(n) {
        return BI_RM.charAt(n);
    }
    function intAt(s, i) {
        var c = BI_RC[s.charCodeAt(i)];
        return c == null ? -1 : c;
    }
    // (protected) copy this to r
    function bnpCopyTo(r) {
        for(var i = this.t - 1; i >= 0; --i)r[i] = this[i];
        r.t = this.t;
        r.s = this.s;
    }
    // (protected) set from integer value x, -DV <= x < DV
    function bnpFromInt(x) {
        this.t = 1;
        this.s = x < 0 ? -1 : 0;
        if (x > 0) this[0] = x;
        else if (x < -1) this[0] = x + this.DV;
        else this.t = 0;
    }
    // return bigint initialized to value
    function nbv(i) {
        var r = nbi();
        r.fromInt(i);
        return r;
    }
    // (protected) set from string and radix
    function bnpFromString(s, b) {
        var k;
        if (b == 16) k = 4;
        else if (b == 8) k = 3;
        else if (b == 256) k = 8; // byte array
        else if (b == 2) k = 1;
        else if (b == 32) k = 5;
        else if (b == 4) k = 2;
        else {
            this.fromRadix(s, b);
            return;
        }
        this.t = 0;
        this.s = 0;
        var i = s.length, mi = false, sh = 0;
        while(--i >= 0){
            var x = k == 8 ? s[i] & 0xff : intAt(s, i);
            if (x < 0) {
                if (s.charAt(i) == "-") mi = true;
                continue;
            }
            mi = false;
            if (sh == 0) this[this.t++] = x;
            else if (sh + k > this.DB) {
                this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
                this[this.t++] = x >> this.DB - sh;
            } else this[this.t - 1] |= x << sh;
            sh += k;
            if (sh >= this.DB) sh -= this.DB;
        }
        if (k == 8 && (s[0] & 0x80) != 0) {
            this.s = -1;
            if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
        }
        this.clamp();
        if (mi) BigInteger.ZERO.subTo(this, this);
    }
    // (protected) clamp off excess high words
    function bnpClamp() {
        var c = this.s & this.DM;
        while(this.t > 0 && this[this.t - 1] == c)--this.t;
    }
    // (public) return string representation in given radix
    function bnToString(b) {
        if (this.s < 0) return "-" + this.negate().toString(b);
        var k;
        if (b == 16) k = 4;
        else if (b == 8) k = 3;
        else if (b == 2) k = 1;
        else if (b == 32) k = 5;
        else if (b == 4) k = 2;
        else return this.toRadix(b);
        var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
        var p = this.DB - i * this.DB % k;
        if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) > 0) {
                m = true;
                r = int2char(d);
            }
            while(i >= 0){
                if (p < k) {
                    d = (this[i] & (1 << p) - 1) << k - p;
                    d |= this[--i] >> (p += this.DB - k);
                } else {
                    d = this[i] >> (p -= k) & km;
                    if (p <= 0) {
                        p += this.DB;
                        --i;
                    }
                }
                if (d > 0) m = true;
                if (m) r += int2char(d);
            }
        }
        return m ? r : "0";
    }
    // (public) -this
    function bnNegate() {
        var r = nbi();
        BigInteger.ZERO.subTo(this, r);
        return r;
    }
    // (public) |this|
    function bnAbs() {
        return this.s < 0 ? this.negate() : this;
    }
    // (public) return + if this > a, - if this < a, 0 if equal
    function bnCompareTo(a) {
        var r = this.s - a.s;
        if (r != 0) return r;
        var i = this.t;
        r = i - a.t;
        if (r != 0) return this.s < 0 ? -r : r;
        while(--i >= 0)if ((r = this[i] - a[i]) != 0) return r;
        return 0;
    }
    // returns bit length of the integer x
    function nbits(x) {
        var r = 1, t;
        if ((t = x >>> 16) != 0) {
            x = t;
            r += 16;
        }
        if ((t = x >> 8) != 0) {
            x = t;
            r += 8;
        }
        if ((t = x >> 4) != 0) {
            x = t;
            r += 4;
        }
        if ((t = x >> 2) != 0) {
            x = t;
            r += 2;
        }
        if ((t = x >> 1) != 0) {
            x = t;
            r += 1;
        }
        return r;
    }
    // (public) return the number of bits in "this"
    function bnBitLength() {
        if (this.t <= 0) return 0;
        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
    }
    // (protected) r = this << n*DB
    function bnpDLShiftTo(n, r) {
        var i;
        for(i = this.t - 1; i >= 0; --i)r[i + n] = this[i];
        for(i = n - 1; i >= 0; --i)r[i] = 0;
        r.t = this.t + n;
        r.s = this.s;
    }
    // (protected) r = this >> n*DB
    function bnpDRShiftTo(n, r) {
        for(var i = n; i < this.t; ++i)r[i - n] = this[i];
        r.t = Math.max(this.t - n, 0);
        r.s = this.s;
    }
    // (protected) r = this << n
    function bnpLShiftTo(n, r) {
        var bs = n % this.DB;
        var cbs = this.DB - bs;
        var bm = (1 << cbs) - 1;
        var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
        for(i = this.t - 1; i >= 0; --i){
            r[i + ds + 1] = this[i] >> cbs | c;
            c = (this[i] & bm) << bs;
        }
        for(i = ds - 1; i >= 0; --i)r[i] = 0;
        r[ds] = c;
        r.t = this.t + ds + 1;
        r.s = this.s;
        r.clamp();
    }
    // (protected) r = this >> n
    function bnpRShiftTo(n, r) {
        r.s = this.s;
        var ds = Math.floor(n / this.DB);
        if (ds >= this.t) {
            r.t = 0;
            return;
        }
        var bs = n % this.DB;
        var cbs = this.DB - bs;
        var bm = (1 << bs) - 1;
        r[0] = this[ds] >> bs;
        for(var i = ds + 1; i < this.t; ++i){
            r[i - ds - 1] |= (this[i] & bm) << cbs;
            r[i - ds] = this[i] >> bs;
        }
        if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
        r.t = this.t - ds;
        r.clamp();
    }
    // (protected) r = this - a
    function bnpSubTo(a, r) {
        var i = 0, c = 0, m = Math.min(a.t, this.t);
        while(i < m){
            c += this[i] - a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        if (a.t < this.t) {
            c -= a.s;
            while(i < this.t){
                c += this[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c += this.s;
        } else {
            c += this.s;
            while(i < a.t){
                c -= a[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c -= a.s;
        }
        r.s = c < 0 ? -1 : 0;
        if (c < -1) r[i++] = this.DV + c;
        else if (c > 0) r[i++] = c;
        r.t = i;
        r.clamp();
    }
    // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.
    function bnpMultiplyTo(a, r) {
        var x = this.abs(), y = a.abs();
        var i = x.t;
        r.t = i + y.t;
        while(--i >= 0)r[i] = 0;
        for(i = 0; i < y.t; ++i)r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
        r.s = 0;
        r.clamp();
        if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
    }
    // (protected) r = this^2, r != this (HAC 14.16)
    function bnpSquareTo(r) {
        var x = this.abs();
        var i = r.t = 2 * x.t;
        while(--i >= 0)r[i] = 0;
        for(i = 0; i < x.t - 1; ++i){
            var c = x.am(i, x[i], r, 2 * i, 0, 1);
            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
                r[i + x.t] -= x.DV;
                r[i + x.t + 1] = 1;
            }
        }
        if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
        r.s = 0;
        r.clamp();
    }
    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
    // r != q, this != m.  q or r may be null.
    function bnpDivRemTo(m, q, r) {
        var pm = m.abs();
        if (pm.t <= 0) return;
        var pt = this.abs();
        if (pt.t < pm.t) {
            if (q != null) q.fromInt(0);
            if (r != null) this.copyTo(r);
            return;
        }
        if (r == null) r = nbi();
        var y = nbi(), ts = this.s, ms = m.s;
        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
        if (nsh > 0) {
            pm.lShiftTo(nsh, y);
            pt.lShiftTo(nsh, r);
        } else {
            pm.copyTo(y);
            pt.copyTo(r);
        }
        var ys = y.t;
        var y0 = y[ys - 1];
        if (y0 == 0) return;
        var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
        var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
        var i = r.t, j = i - ys, t = q == null ? nbi() : q;
        y.dlShiftTo(j, t);
        if (r.compareTo(t) >= 0) {
            r[r.t++] = 1;
            r.subTo(t, r);
        }
        BigInteger.ONE.dlShiftTo(ys, t);
        t.subTo(y, y); // "negative" y so we can replace sub with am later
        while(y.t < ys)y[y.t++] = 0;
        while(--j >= 0){
            // Estimate quotient digit
            var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
                y.dlShiftTo(j, t);
                r.subTo(t, r);
                while(r[i] < --qd)r.subTo(t, r);
            }
        }
        if (q != null) {
            r.drShiftTo(ys, q);
            if (ts != ms) BigInteger.ZERO.subTo(q, q);
        }
        r.t = ys;
        r.clamp();
        if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
        if (ts < 0) BigInteger.ZERO.subTo(r, r);
    }
    // (public) this mod a
    function bnMod(a) {
        var r = nbi();
        this.abs().divRemTo(a, null, r);
        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
        return r;
    }
    // Modular reduction using "classic" algorithm
    function Classic(m) {
        this.m = m;
    }
    function cConvert(x) {
        if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
        else return x;
    }
    function cRevert(x) {
        return x;
    }
    function cReduce(x) {
        x.divRemTo(this.m, null, x);
    }
    function cMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r);
    }
    function cSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r);
    }
    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;
    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.
    function bnpInvDigit() {
        if (this.t < 1) return 0;
        var x = this[0];
        if ((x & 1) == 0) return 0;
        var y = x & 3; // y == 1/x mod 2^2
        y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4
        y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8
        y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
        // last step - calculate inverse mod DV directly;
        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
        y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
        // we really want the negative inverse, and -DV < y < DV
        return y > 0 ? this.DV - y : -y;
    }
    // Montgomery reduction
    function Montgomery(m) {
        this.m = m;
        this.mp = m.invDigit();
        this.mpl = this.mp & 0x7fff;
        this.mph = this.mp >> 15;
        this.um = (1 << m.DB - 15) - 1;
        this.mt2 = 2 * m.t;
    }
    // xR mod m
    function montConvert(x) {
        var r = nbi();
        x.abs().dlShiftTo(this.m.t, r);
        r.divRemTo(this.m, null, r);
        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
        return r;
    }
    // x/R mod m
    function montRevert(x) {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
    }
    // x = x/R mod m (HAC 14.32)
    function montReduce(x) {
        while(x.t <= this.mt2)x[x.t++] = 0;
        for(var i = 0; i < this.m.t; ++i){
            // faster way of calculating u0 = x[i]*mp mod DV
            var j = x[i] & 0x7fff;
            var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
            // use am to combine the multiply-shift-add into one call
            j = i + this.m.t;
            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
            // propagate carry
            while(x[j] >= x.DV){
                x[j] -= x.DV;
                x[++j]++;
            }
        }
        x.clamp();
        x.drShiftTo(this.m.t, x);
        if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    }
    // r = "x^2/R mod m"; x != r
    function montSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r);
    }
    // r = "xy/R mod m"; x,y != r
    function montMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r);
    }
    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;
    // (protected) true iff this is even
    function bnpIsEven() {
        return (this.t > 0 ? this[0] & 1 : this.s) == 0;
    }
    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
    function bnpExp(e, z) {
        if (e > 0xffffffff || e < 1) return BigInteger.ONE;
        var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
        g.copyTo(r);
        while(--i >= 0){
            z.sqrTo(r, r2);
            if ((e & 1 << i) > 0) z.mulTo(r2, g, r);
            else {
                var t = r;
                r = r2;
                r2 = t;
            }
        }
        return z.revert(r);
    }
    // (public) this^e % m, 0 <= e < 2^32
    function bnModPowInt(e, m) {
        var z;
        if (e < 256 || m.isEven()) z = new Classic(m);
        else z = new Montgomery(m);
        return this.exp(e, z);
    }
    // protected
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;
    // public
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;
    // "constants"
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);
    // Copyright (c) 2005-2009  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.
    // Extended JavaScript BN functions, required for RSA private ops.
    // Version 1.1: new BigInteger("0", 10) returns "proper" zero
    // Version 1.2: square() API, isProbablePrime fix
    // (public)
    function bnClone() {
        var r = nbi();
        this.copyTo(r);
        return r;
    }
    // (public) return value as integer
    function bnIntValue() {
        if (this.s < 0) {
            if (this.t == 1) return this[0] - this.DV;
            else if (this.t == 0) return -1;
        } else if (this.t == 1) return this[0];
        else if (this.t == 0) return 0;
        // assumes 16 < DB < 32
        return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
    }
    // (public) return value as byte
    function bnByteValue() {
        return this.t == 0 ? this.s : this[0] << 24 >> 24;
    }
    // (public) return value as short (assumes DB>=16)
    function bnShortValue() {
        return this.t == 0 ? this.s : this[0] << 16 >> 16;
    }
    // (protected) return x s.t. r^x < DV
    function bnpChunkSize(r) {
        return Math.floor(Math.LN2 * this.DB / Math.log(r));
    }
    // (public) 0 if this == 0, 1 if this > 0
    function bnSigNum() {
        if (this.s < 0) return -1;
        else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;
        else return 1;
    }
    // (protected) convert to radix string
    function bnpToRadix(b) {
        if (b == null) b = 10;
        if (this.signum() == 0 || b < 2 || b > 36) return "0";
        var cs = this.chunkSize(b);
        var a = Math.pow(b, cs);
        var d = nbv(a), y = nbi(), z = nbi(), r = "";
        this.divRemTo(d, y, z);
        while(y.signum() > 0){
            r = (a + z.intValue()).toString(b).substr(1) + r;
            y.divRemTo(d, y, z);
        }
        return z.intValue().toString(b) + r;
    }
    // (protected) convert from radix string
    function bnpFromRadix(s, b) {
        this.fromInt(0);
        if (b == null) b = 10;
        var cs = this.chunkSize(b);
        var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
        for(var i = 0; i < s.length; ++i){
            var x = intAt(s, i);
            if (x < 0) {
                if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
                continue;
            }
            w = b * w + x;
            if (++j >= cs) {
                this.dMultiply(d);
                this.dAddOffset(w, 0);
                j = 0;
                w = 0;
            }
        }
        if (j > 0) {
            this.dMultiply(Math.pow(b, j));
            this.dAddOffset(w, 0);
        }
        if (mi) BigInteger.ZERO.subTo(this, this);
    }
    // (protected) alternate constructor
    function bnpFromNumber(a, b, c) {
        if ("number" == typeof b) {
            // new BigInteger(int,int,RNG)
            if (a < 2) this.fromInt(1);
            else {
                this.fromNumber(a, c);
                if (!this.testBit(a - 1)) this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
                if (this.isEven()) this.dAddOffset(1, 0); // force odd
                while(!this.isProbablePrime(b)){
                    this.dAddOffset(2, 0);
                    if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
                }
            }
        } else {
            // new BigInteger(int,RNG)
            var x = new Array(), t = a & 7;
            x.length = (a >> 3) + 1;
            b.nextBytes(x);
            if (t > 0) x[0] &= (1 << t) - 1;
            else x[0] = 0;
            this.fromString(x, 256);
        }
    }
    // (public) convert to bigendian byte array
    function bnToByteArray() {
        var i = this.t, r = new Array();
        r[0] = this.s;
        var p = this.DB - i * this.DB % 8, d, k = 0;
        if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;
            while(i >= 0){
                if (p < 8) {
                    d = (this[i] & (1 << p) - 1) << 8 - p;
                    d |= this[--i] >> (p += this.DB - 8);
                } else {
                    d = this[i] >> (p -= 8) & 0xff;
                    if (p <= 0) {
                        p += this.DB;
                        --i;
                    }
                }
                if ((d & 0x80) != 0) d |= -256;
                if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
                if (k > 0 || d != this.s) r[k++] = d;
            }
        }
        return r;
    }
    function bnEquals(a) {
        return this.compareTo(a) == 0;
    }
    function bnMin(a) {
        return this.compareTo(a) < 0 ? this : a;
    }
    function bnMax(a) {
        return this.compareTo(a) > 0 ? this : a;
    }
    // (protected) r = this op a (bitwise)
    function bnpBitwiseTo(a, op, r) {
        var i, f, m = Math.min(a.t, this.t);
        for(i = 0; i < m; ++i)r[i] = op(this[i], a[i]);
        if (a.t < this.t) {
            f = a.s & this.DM;
            for(i = m; i < this.t; ++i)r[i] = op(this[i], f);
            r.t = this.t;
        } else {
            f = this.s & this.DM;
            for(i = m; i < a.t; ++i)r[i] = op(f, a[i]);
            r.t = a.t;
        }
        r.s = op(this.s, a.s);
        r.clamp();
    }
    // (public) this & a
    function op_and(x, y) {
        return x & y;
    }
    function bnAnd(a) {
        var r = nbi();
        this.bitwiseTo(a, op_and, r);
        return r;
    }
    // (public) this | a
    function op_or(x, y) {
        return x | y;
    }
    function bnOr(a) {
        var r = nbi();
        this.bitwiseTo(a, op_or, r);
        return r;
    }
    // (public) this ^ a
    function op_xor(x, y) {
        return x ^ y;
    }
    function bnXor(a) {
        var r = nbi();
        this.bitwiseTo(a, op_xor, r);
        return r;
    }
    // (public) this & ~a
    function op_andnot(x, y) {
        return x & ~y;
    }
    function bnAndNot(a) {
        var r = nbi();
        this.bitwiseTo(a, op_andnot, r);
        return r;
    }
    // (public) ~this
    function bnNot() {
        var r = nbi();
        for(var i = 0; i < this.t; ++i)r[i] = this.DM & ~this[i];
        r.t = this.t;
        r.s = ~this.s;
        return r;
    }
    // (public) this << n
    function bnShiftLeft(n) {
        var r = nbi();
        if (n < 0) this.rShiftTo(-n, r);
        else this.lShiftTo(n, r);
        return r;
    }
    // (public) this >> n
    function bnShiftRight(n) {
        var r = nbi();
        if (n < 0) this.lShiftTo(-n, r);
        else this.rShiftTo(n, r);
        return r;
    }
    // return index of lowest 1-bit in x, x < 2^31
    function lbit(x) {
        if (x == 0) return -1;
        var r = 0;
        if ((x & 0xffff) == 0) {
            x >>= 16;
            r += 16;
        }
        if ((x & 0xff) == 0) {
            x >>= 8;
            r += 8;
        }
        if ((x & 0xf) == 0) {
            x >>= 4;
            r += 4;
        }
        if ((x & 3) == 0) {
            x >>= 2;
            r += 2;
        }
        if ((x & 1) == 0) ++r;
        return r;
    }
    // (public) returns index of lowest 1-bit (or -1 if none)
    function bnGetLowestSetBit() {
        for(var i = 0; i < this.t; ++i)if (this[i] != 0) return i * this.DB + lbit(this[i]);
        if (this.s < 0) return this.t * this.DB;
        return -1;
    }
    // return number of 1 bits in x
    function cbit(x) {
        var r = 0;
        while(x != 0){
            x &= x - 1;
            ++r;
        }
        return r;
    }
    // (public) return number of set bits
    function bnBitCount() {
        var r = 0, x = this.s & this.DM;
        for(var i = 0; i < this.t; ++i)r += cbit(this[i] ^ x);
        return r;
    }
    // (public) true iff nth bit is set
    function bnTestBit(n) {
        var j = Math.floor(n / this.DB);
        if (j >= this.t) return this.s != 0;
        return (this[j] & 1 << n % this.DB) != 0;
    }
    // (protected) this op (1<<n)
    function bnpChangeBit(n, op) {
        var r = BigInteger.ONE.shiftLeft(n);
        this.bitwiseTo(r, op, r);
        return r;
    }
    // (public) this | (1<<n)
    function bnSetBit(n) {
        return this.changeBit(n, op_or);
    }
    // (public) this & ~(1<<n)
    function bnClearBit(n) {
        return this.changeBit(n, op_andnot);
    }
    // (public) this ^ (1<<n)
    function bnFlipBit(n) {
        return this.changeBit(n, op_xor);
    }
    // (protected) r = this + a
    function bnpAddTo(a, r) {
        var i = 0, c = 0, m = Math.min(a.t, this.t);
        while(i < m){
            c += this[i] + a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        if (a.t < this.t) {
            c += a.s;
            while(i < this.t){
                c += this[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c += this.s;
        } else {
            c += this.s;
            while(i < a.t){
                c += a[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c += a.s;
        }
        r.s = c < 0 ? -1 : 0;
        if (c > 0) r[i++] = c;
        else if (c < -1) r[i++] = this.DV + c;
        r.t = i;
        r.clamp();
    }
    // (public) this + a
    function bnAdd(a) {
        var r = nbi();
        this.addTo(a, r);
        return r;
    }
    // (public) this - a
    function bnSubtract(a) {
        var r = nbi();
        this.subTo(a, r);
        return r;
    }
    // (public) this * a
    function bnMultiply(a) {
        var r = nbi();
        this.multiplyTo(a, r);
        return r;
    }
    // (public) this^2
    function bnSquare() {
        var r = nbi();
        this.squareTo(r);
        return r;
    }
    // (public) this / a
    function bnDivide(a) {
        var r = nbi();
        this.divRemTo(a, r, null);
        return r;
    }
    // (public) this % a
    function bnRemainder(a) {
        var r = nbi();
        this.divRemTo(a, null, r);
        return r;
    }
    // (public) [this/a,this%a]
    function bnDivideAndRemainder(a) {
        var q = nbi(), r = nbi();
        this.divRemTo(a, q, r);
        return new Array(q, r);
    }
    // (protected) this *= n, this >= 0, 1 < n < DV
    function bnpDMultiply(n) {
        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
        ++this.t;
        this.clamp();
    }
    // (protected) this += n << w words, this >= 0
    function bnpDAddOffset(n, w) {
        if (n == 0) return;
        while(this.t <= w)this[this.t++] = 0;
        this[w] += n;
        while(this[w] >= this.DV){
            this[w] -= this.DV;
            if (++w >= this.t) this[this.t++] = 0;
            ++this[w];
        }
    }
    // A "null" reducer
    function NullExp() {}
    function nNop(x) {
        return x;
    }
    function nMulTo(x, y, r) {
        x.multiplyTo(y, r);
    }
    function nSqrTo(x, r) {
        x.squareTo(r);
    }
    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;
    // (public) this^e
    function bnPow(e) {
        return this.exp(e, new NullExp());
    }
    // (protected) r = lower n words of "this * a", a.t <= n
    // "this" should be the larger one if appropriate.
    function bnpMultiplyLowerTo(a, n, r) {
        var i = Math.min(this.t + a.t, n);
        r.s = 0; // assumes a,this >= 0
        r.t = i;
        while(i > 0)r[--i] = 0;
        var j;
        for(j = r.t - this.t; i < j; ++i)r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
        for(j = Math.min(a.t, n); i < j; ++i)this.am(0, a[i], r, i, 0, n - i);
        r.clamp();
    }
    // (protected) r = "this * a" without lower n words, n > 0
    // "this" should be the larger one if appropriate.
    function bnpMultiplyUpperTo(a, n, r) {
        --n;
        var i = r.t = this.t + a.t - n;
        r.s = 0; // assumes a,this >= 0
        while(--i >= 0)r[i] = 0;
        for(i = Math.max(n - this.t, 0); i < a.t; ++i)r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
        r.clamp();
        r.drShiftTo(1, r);
    }
    // Barrett modular reduction
    function Barrett(m) {
        // setup Barrett
        this.r2 = nbi();
        this.q3 = nbi();
        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
        this.mu = this.r2.divide(m);
        this.m = m;
    }
    function barrettConvert(x) {
        if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
        else if (x.compareTo(this.m) < 0) return x;
        else {
            var r = nbi();
            x.copyTo(r);
            this.reduce(r);
            return r;
        }
    }
    function barrettRevert(x) {
        return x;
    }
    // x = x mod m (HAC 14.42)
    function barrettReduce(x) {
        x.drShiftTo(this.m.t - 1, this.r2);
        if (x.t > this.m.t + 1) {
            x.t = this.m.t + 1;
            x.clamp();
        }
        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
        while(x.compareTo(this.r2) < 0)x.dAddOffset(1, this.m.t + 1);
        x.subTo(this.r2, x);
        while(x.compareTo(this.m) >= 0)x.subTo(this.m, x);
    }
    // r = x^2 mod m; x != r
    function barrettSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r);
    }
    // r = x*y mod m; x,y != r
    function barrettMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r);
    }
    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;
    // (public) this^e % m (HAC 14.85)
    function bnModPow(e, m) {
        var i = e.bitLength(), k, r = nbv(1), z;
        if (i <= 0) return r;
        else if (i < 18) k = 1;
        else if (i < 48) k = 3;
        else if (i < 144) k = 4;
        else if (i < 768) k = 5;
        else k = 6;
        if (i < 8) z = new Classic(m);
        else if (m.isEven()) z = new Barrett(m);
        else z = new Montgomery(m);
        // precomputation
        var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
        g[1] = z.convert(this);
        if (k > 1) {
            var g2 = nbi();
            z.sqrTo(g[1], g2);
            while(n <= km){
                g[n] = nbi();
                z.mulTo(g2, g[n - 2], g[n]);
                n += 2;
            }
        }
        var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
        i = nbits(e[j]) - 1;
        while(j >= 0){
            if (i >= k1) w = e[j] >> i - k1 & km;
            else {
                w = (e[j] & (1 << i + 1) - 1) << k1 - i;
                if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
            }
            n = k;
            while((w & 1) == 0){
                w >>= 1;
                --n;
            }
            if ((i -= n) < 0) {
                i += this.DB;
                --j;
            }
            if (is1) {
                g[w].copyTo(r);
                is1 = false;
            } else {
                while(n > 1){
                    z.sqrTo(r, r2);
                    z.sqrTo(r2, r);
                    n -= 2;
                }
                if (n > 0) z.sqrTo(r, r2);
                else {
                    t = r;
                    r = r2;
                    r2 = t;
                }
                z.mulTo(r2, g[w], r);
            }
            while(j >= 0 && (e[j] & 1 << i) == 0){
                z.sqrTo(r, r2);
                t = r;
                r = r2;
                r2 = t;
                if (--i < 0) {
                    i = this.DB - 1;
                    --j;
                }
            }
        }
        return z.revert(r);
    }
    // (public) gcd(this,a) (HAC 14.54)
    function bnGCD(a) {
        var x = this.s < 0 ? this.negate() : this.clone();
        var y = a.s < 0 ? a.negate() : a.clone();
        if (x.compareTo(y) < 0) {
            var t = x;
            x = y;
            y = t;
        }
        var i = x.getLowestSetBit(), g = y.getLowestSetBit();
        if (g < 0) return x;
        if (i < g) g = i;
        if (g > 0) {
            x.rShiftTo(g, x);
            y.rShiftTo(g, y);
        }
        while(x.signum() > 0){
            if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
            if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
            if (x.compareTo(y) >= 0) {
                x.subTo(y, x);
                x.rShiftTo(1, x);
            } else {
                y.subTo(x, y);
                y.rShiftTo(1, y);
            }
        }
        if (g > 0) y.lShiftTo(g, y);
        return y;
    }
    // (protected) this % n, n < 2^26
    function bnpModInt(n) {
        if (n <= 0) return 0;
        var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;
        if (this.t > 0) {
            if (d == 0) r = this[0] % n;
            else for(var i = this.t - 1; i >= 0; --i)r = (d * r + this[i]) % n;
        }
        return r;
    }
    // (public) 1/this % m (HAC 14.61)
    function bnModInverse(m) {
        var ac = m.isEven();
        if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
        var u = m.clone(), v = this.clone();
        var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
        while(u.signum() != 0){
            while(u.isEven()){
                u.rShiftTo(1, u);
                if (ac) {
                    if (!a.isEven() || !b.isEven()) {
                        a.addTo(this, a);
                        b.subTo(m, b);
                    }
                    a.rShiftTo(1, a);
                } else if (!b.isEven()) b.subTo(m, b);
                b.rShiftTo(1, b);
            }
            while(v.isEven()){
                v.rShiftTo(1, v);
                if (ac) {
                    if (!c.isEven() || !d.isEven()) {
                        c.addTo(this, c);
                        d.subTo(m, d);
                    }
                    c.rShiftTo(1, c);
                } else if (!d.isEven()) d.subTo(m, d);
                d.rShiftTo(1, d);
            }
            if (u.compareTo(v) >= 0) {
                u.subTo(v, u);
                if (ac) a.subTo(c, a);
                b.subTo(d, b);
            } else {
                v.subTo(u, v);
                if (ac) c.subTo(a, c);
                d.subTo(b, d);
            }
        }
        if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
        if (d.compareTo(m) >= 0) return d.subtract(m);
        if (d.signum() < 0) d.addTo(m, d);
        else return d;
        if (d.signum() < 0) return d.add(m);
        else return d;
    }
    var lowprimes = [
        2,
        3,
        5,
        7,
        11,
        13,
        17,
        19,
        23,
        29,
        31,
        37,
        41,
        43,
        47,
        53,
        59,
        61,
        67,
        71,
        73,
        79,
        83,
        89,
        97,
        101,
        103,
        107,
        109,
        113,
        127,
        131,
        137,
        139,
        149,
        151,
        157,
        163,
        167,
        173,
        179,
        181,
        191,
        193,
        197,
        199,
        211,
        223,
        227,
        229,
        233,
        239,
        241,
        251,
        257,
        263,
        269,
        271,
        277,
        281,
        283,
        293,
        307,
        311,
        313,
        317,
        331,
        337,
        347,
        349,
        353,
        359,
        367,
        373,
        379,
        383,
        389,
        397,
        401,
        409,
        419,
        421,
        431,
        433,
        439,
        443,
        449,
        457,
        461,
        463,
        467,
        479,
        487,
        491,
        499,
        503,
        509,
        521,
        523,
        541,
        547,
        557,
        563,
        569,
        571,
        577,
        587,
        593,
        599,
        601,
        607,
        613,
        617,
        619,
        631,
        641,
        643,
        647,
        653,
        659,
        661,
        673,
        677,
        683,
        691,
        701,
        709,
        719,
        727,
        733,
        739,
        743,
        751,
        757,
        761,
        769,
        773,
        787,
        797,
        809,
        811,
        821,
        823,
        827,
        829,
        839,
        853,
        857,
        859,
        863,
        877,
        881,
        883,
        887,
        907,
        911,
        919,
        929,
        937,
        941,
        947,
        953,
        967,
        971,
        977,
        983,
        991,
        997
    ];
    var lplim = 67108864 / lowprimes[lowprimes.length - 1];
    // (public) test primality with certainty >= 1-.5^t
    function bnIsProbablePrime(t) {
        var i, x = this.abs();
        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
            for(i = 0; i < lowprimes.length; ++i)if (x[0] == lowprimes[i]) return true;
            return false;
        }
        if (x.isEven()) return false;
        i = 1;
        while(i < lowprimes.length){
            var m = lowprimes[i], j = i + 1;
            while(j < lowprimes.length && m < lplim)m *= lowprimes[j++];
            m = x.modInt(m);
            while(i < j)if (m % lowprimes[i++] == 0) return false;
        }
        return x.millerRabin(t);
    }
    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
    function bnpMillerRabin(t) {
        var n1 = this.subtract(BigInteger.ONE);
        var k = n1.getLowestSetBit();
        if (k <= 0) return false;
        var r = n1.shiftRight(k);
        t = t + 1 >> 1;
        if (t > lowprimes.length) t = lowprimes.length;
        var a = nbi();
        for(var i = 0; i < t; ++i){
            //Pick bases at random, instead of starting at 2
            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
            var y = a.modPow(r, this);
            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
                var j = 1;
                while((j++) < k && y.compareTo(n1) != 0){
                    y = y.modPowInt(2, this);
                    if (y.compareTo(BigInteger.ONE) == 0) return false;
                }
                if (y.compareTo(n1) != 0) return false;
            }
        }
        return true;
    }
    // protected
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;
    // public
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
    // JSBN-specific extension
    BigInteger.prototype.square = bnSquare;
    // Expose the Barrett function
    BigInteger.prototype.Barrett = Barrett;
    // BigInteger interfaces not implemented in jsbn:
    // BigInteger(int signum, byte[] magnitude)
    // double doubleValue()
    // float floatValue()
    // int hashCode()
    // long longValue()
    // static BigInteger valueOf(long val)
    // Random number generator - requires a PRNG backend, e.g. prng4.js
    // For best results, put code like
    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
    // in your main HTML document.
    var rng_state;
    var rng_pool;
    var rng_pptr;
    // Mix in a 32-bit integer into the pool
    function rng_seed_int(x) {
        rng_pool[rng_pptr++] ^= x & 255;
        rng_pool[rng_pptr++] ^= x >> 8 & 255;
        rng_pool[rng_pptr++] ^= x >> 16 & 255;
        rng_pool[rng_pptr++] ^= x >> 24 & 255;
        if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;
    }
    // Mix in the current time (w/milliseconds) into the pool
    function rng_seed_time() {
        rng_seed_int(new Date().getTime());
    }
    // Initialize the pool with junk if needed.
    if (rng_pool == null) {
        rng_pool = new Array();
        rng_pptr = 0;
        var t1;
        if (typeof window !== "undefined" && window.crypto) {
            if (window.crypto.getRandomValues) {
                // Use webcrypto if available
                var ua = new Uint8Array(32);
                window.crypto.getRandomValues(ua);
                for(t1 = 0; t1 < 32; ++t1)rng_pool[rng_pptr++] = ua[t1];
            } else if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
                // Extract entropy (256 bits) from NS4 RNG if available
                var z1 = window.crypto.random(32);
                for(t1 = 0; t1 < z1.length; ++t1)rng_pool[rng_pptr++] = z1.charCodeAt(t1) & 255;
            }
        }
        while(rng_pptr < rng_psize){
            t1 = Math.floor(65536 * Math.random());
            rng_pool[rng_pptr++] = t1 >>> 8;
            rng_pool[rng_pptr++] = t1 & 255;
        }
        rng_pptr = 0;
        rng_seed_time();
    //rng_seed_int(window.screenX);
    //rng_seed_int(window.screenY);
    }
    function rng_get_byte() {
        if (rng_state == null) {
            rng_seed_time();
            rng_state = prng_newstate();
            rng_state.init(rng_pool);
            for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)rng_pool[rng_pptr] = 0;
            rng_pptr = 0;
        //rng_pool = null;
        }
        // TODO: allow reseeding after first request
        return rng_state.next();
    }
    function rng_get_bytes(ba) {
        var i;
        for(i = 0; i < ba.length; ++i)ba[i] = rng_get_byte();
    }
    function SecureRandom() {}
    SecureRandom.prototype.nextBytes = rng_get_bytes;
    // prng4.js - uses Arcfour as a PRNG
    function Arcfour() {
        this.i = 0;
        this.j = 0;
        this.S = new Array();
    }
    // Initialize arcfour context from key, an array of ints, each from [0..255]
    function ARC4init(key) {
        var i, j, t;
        for(i = 0; i < 256; ++i)this.S[i] = i;
        j = 0;
        for(i = 0; i < 256; ++i){
            j = j + this.S[i] + key[i % key.length] & 255;
            t = this.S[i];
            this.S[i] = this.S[j];
            this.S[j] = t;
        }
        this.i = 0;
        this.j = 0;
    }
    function ARC4next() {
        var t;
        this.i = this.i + 1 & 255;
        this.j = this.j + this.S[this.i] & 255;
        t = this.S[this.i];
        this.S[this.i] = this.S[this.j];
        this.S[this.j] = t;
        return this.S[t + this.S[this.i] & 255];
    }
    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;
    // Plug in your RNG constructor here
    function prng_newstate() {
        return new Arcfour();
    }
    // Pool size must be a multiple of 4 and greater than 32.
    // An array of bytes the size of the pool will be passed to init()
    var rng_psize = 256;
    exports = module.exports = {
        default: BigInteger,
        BigInteger: BigInteger,
        SecureRandom: SecureRandom
    };
}).call(this);

},{}],"9lMGt":[function(require,module,exports) {
/* global window, exports, define */ !function() {
    "use strict";
    var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[+-]/
    };
    function sprintf(key) {
        // `arguments` is not an array, but should be fine for this call
        return sprintf_format(sprintf_parse(key), arguments);
    }
    function vsprintf(fmt, argv) {
        return sprintf.apply(null, [
            fmt
        ].concat(argv || []));
    }
    function sprintf_format(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, arg, output = "", i, k, ph, pad, pad_character, pad_length, is_positive, sign;
        for(i = 0; i < tree_length; i++){
            if (typeof parse_tree[i] === "string") output += parse_tree[i];
            else if (typeof parse_tree[i] === "object") {
                ph = parse_tree[i] // convenience purposes only
                ;
                if (ph.keys) {
                    arg = argv[cursor];
                    for(k = 0; k < ph.keys.length; k++){
                        if (arg == undefined) throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k - 1]));
                        arg = arg[ph.keys[k]];
                    }
                } else if (ph.param_no) arg = argv[ph.param_no];
                else arg = argv[cursor++];
                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) arg = arg();
                if (re.numeric_arg.test(ph.type) && typeof arg !== "number" && isNaN(arg)) throw new TypeError(sprintf("[sprintf] expecting number but found %T", arg));
                if (re.number.test(ph.type)) is_positive = arg >= 0;
                switch(ph.type){
                    case "b":
                        arg = parseInt(arg, 10).toString(2);
                        break;
                    case "c":
                        arg = String.fromCharCode(parseInt(arg, 10));
                        break;
                    case "d":
                    case "i":
                        arg = parseInt(arg, 10);
                        break;
                    case "j":
                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
                        break;
                    case "e":
                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
                        break;
                    case "f":
                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
                        break;
                    case "g":
                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
                        break;
                    case "o":
                        arg = (parseInt(arg, 10) >>> 0).toString(8);
                        break;
                    case "s":
                        arg = String(arg);
                        arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                        break;
                    case "t":
                        arg = String(!!arg);
                        arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                        break;
                    case "T":
                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
                        arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                        break;
                    case "u":
                        arg = parseInt(arg, 10) >>> 0;
                        break;
                    case "v":
                        arg = arg.valueOf();
                        arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                        break;
                    case "x":
                        arg = (parseInt(arg, 10) >>> 0).toString(16);
                        break;
                    case "X":
                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
                        break;
                }
                if (re.json.test(ph.type)) output += arg;
                else {
                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                        sign = is_positive ? "+" : "-";
                        arg = arg.toString().replace(re.sign, "");
                    } else sign = "";
                    pad_character = ph.pad_char ? ph.pad_char === "0" ? "0" : ph.pad_char.charAt(1) : " ";
                    pad_length = ph.width - (sign + arg).length;
                    pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : "" : "";
                    output += ph.align ? sign + arg + pad : pad_character === "0" ? sign + pad + arg : pad + sign + arg;
                }
            }
        }
        return output;
    }
    var sprintf_cache = Object.create(null);
    function sprintf_parse(fmt) {
        if (sprintf_cache[fmt]) return sprintf_cache[fmt];
        var _fmt = fmt, match, parse_tree = [], arg_names = 0;
        while(_fmt){
            if ((match = re.text.exec(_fmt)) !== null) parse_tree.push(match[0]);
            else if ((match = re.modulo.exec(_fmt)) !== null) parse_tree.push("%");
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1;
                    var field_list = [], replacement_field = match[2], field_match = [];
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list.push(field_match[1]);
                        while((replacement_field = replacement_field.substring(field_match[0].length)) !== ""){
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) field_list.push(field_match[1]);
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) field_list.push(field_match[1]);
                            else throw new SyntaxError("[sprintf] failed to parse named argument key");
                        }
                    } else throw new SyntaxError("[sprintf] failed to parse named argument key");
                    match[2] = field_list;
                } else arg_names |= 2;
                if (arg_names === 3) throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
                parse_tree.push({
                    placeholder: match[0],
                    param_no: match[1],
                    keys: match[2],
                    sign: match[3],
                    pad_char: match[4],
                    align: match[5],
                    width: match[6],
                    precision: match[7],
                    type: match[8]
                });
            } else throw new SyntaxError("[sprintf] unexpected placeholder");
            _fmt = _fmt.substring(match[0].length);
        }
        return sprintf_cache[fmt] = parse_tree;
    }
    exports["sprintf"] = sprintf;
    exports["vsprintf"] = vsprintf;
    if (typeof window !== "undefined") {
        window["sprintf"] = sprintf;
        window["vsprintf"] = vsprintf;
        if (typeof define === "function" && define["amd"]) define(function() {
            return {
                "sprintf": sprintf,
                "vsprintf": vsprintf
            };
        });
    }
/* eslint-enable quote-props */ }(); // eslint-disable-line

},{}],"32xuO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Represents an IPv6 address
 * @class Address6
 * @param {string} address - An IPv6 address string
 * @param {number} [groups=8] - How many octets to parse
 * @example
 * var address = new Address6('2001::/32');
 */ parcelHelpers.export(exports, "Address6", ()=>Address6);
/* eslint-disable prefer-destructuring */ /* eslint-disable no-param-reassign */ var _common = require("./common");
var _constants = require("./v4/constants");
var _constants1 = require("./v6/constants");
var _helpers = require("./v6/helpers");
var _ipv4 = require("./ipv4");
var _regularExpressions = require("./v6/regular-expressions");
var _addressError = require("./address-error");
var _jsbn = require("jsbn");
var _sprintfJs = require("sprintf-js");
function assert(condition) {
    if (!condition) throw new Error("Assertion failed.");
}
function addCommas(number) {
    const r = /(\d+)(\d{3})/;
    while(r.test(number))number = number.replace(r, "$1,$2");
    return number;
}
function spanLeadingZeroes4(n) {
    n = n.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2');
    n = n.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2');
    return n;
}
/*
 * A helper function to compact an array
 */ function compact(address, slice) {
    const s1 = [];
    const s2 = [];
    let i;
    for(i = 0; i < address.length; i++){
        if (i < slice[0]) s1.push(address[i]);
        else if (i > slice[1]) s2.push(address[i]);
    }
    return s1.concat([
        "compact"
    ]).concat(s2);
}
function paddedHex(octet) {
    return (0, _sprintfJs.sprintf)("%04x", parseInt(octet, 16));
}
function unsignByte(b) {
    // eslint-disable-next-line no-bitwise
    return b & 0xff;
}
class Address6 {
    constructor(address, optionalGroups){
        this.addressMinusSuffix = "";
        this.parsedSubnet = "";
        this.subnet = "/128";
        this.subnetMask = 128;
        this.v4 = false;
        this.zone = "";
        // #region Attributes
        /**
         * Returns true if the given address is in the subnet of the current address
         * @memberof Address6
         * @instance
         * @returns {boolean}
         */ this.isInSubnet = _common.isInSubnet;
        /**
         * Returns true if the address is correct, false otherwise
         * @memberof Address6
         * @instance
         * @returns {boolean}
         */ this.isCorrect = _common.isCorrect(_constants1.BITS);
        if (optionalGroups === undefined) this.groups = _constants1.GROUPS;
        else this.groups = optionalGroups;
        this.address = address;
        const subnet = _constants1.RE_SUBNET_STRING.exec(address);
        if (subnet) {
            this.parsedSubnet = subnet[0].replace("/", "");
            this.subnetMask = parseInt(this.parsedSubnet, 10);
            this.subnet = `/${this.subnetMask}`;
            if (Number.isNaN(this.subnetMask) || this.subnetMask < 0 || this.subnetMask > _constants1.BITS) throw new (0, _addressError.AddressError)("Invalid subnet mask.");
            address = address.replace(_constants1.RE_SUBNET_STRING, "");
        } else if (/\//.test(address)) throw new (0, _addressError.AddressError)("Invalid subnet mask.");
        const zone = _constants1.RE_ZONE_STRING.exec(address);
        if (zone) {
            this.zone = zone[0];
            address = address.replace(_constants1.RE_ZONE_STRING, "");
        }
        this.addressMinusSuffix = address;
        this.parsedAddress = this.parse(this.addressMinusSuffix);
    }
    static isValid(address) {
        try {
            // eslint-disable-next-line no-new
            new Address6(address);
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
     * Convert a BigInteger to a v6 address object
     * @memberof Address6
     * @static
     * @param {BigInteger} bigInteger - a BigInteger to convert
     * @returns {Address6}
     * @example
     * var bigInteger = new BigInteger('1000000000000');
     * var address = Address6.fromBigInteger(bigInteger);
     * address.correctForm(); // '::e8:d4a5:1000'
     */ static fromBigInteger(bigInteger) {
        const hex = bigInteger.toString(16).padStart(32, "0");
        const groups = [];
        let i;
        for(i = 0; i < _constants1.GROUPS; i++)groups.push(hex.slice(i * 4, (i + 1) * 4));
        return new Address6(groups.join(":"));
    }
    /**
     * Convert a URL (with optional port number) to an address object
     * @memberof Address6
     * @static
     * @param {string} url - a URL with optional port number
     * @example
     * var addressAndPort = Address6.fromURL('http://[ffff::]:8080/foo/');
     * addressAndPort.address.correctForm(); // 'ffff::'
     * addressAndPort.port; // 8080
     */ static fromURL(url) {
        let host;
        let port = null;
        let result;
        // If we have brackets parse them and find a port
        if (url.indexOf("[") !== -1 && url.indexOf("]:") !== -1) {
            result = _constants1.RE_URL_WITH_PORT.exec(url);
            if (result === null) return {
                error: "failed to parse address with port",
                address: null,
                port: null
            };
            host = result[1];
            port = result[2];
        // If there's a URL extract the address
        } else if (url.indexOf("/") !== -1) {
            // Remove the protocol prefix
            url = url.replace(/^[a-z0-9]+:\/\//, "");
            // Parse the address
            result = _constants1.RE_URL.exec(url);
            if (result === null) return {
                error: "failed to parse address from URL",
                address: null,
                port: null
            };
            host = result[1];
        // Otherwise just assign the URL to the host and let the library parse it
        } else host = url;
        // If there's a port convert it to an integer
        if (port) {
            port = parseInt(port, 10);
            // squelch out of range ports
            if (port < 0 || port > 65536) port = null;
        } else // Standardize `undefined` to `null`
        port = null;
        return {
            address: new Address6(host),
            port
        };
    }
    /**
     * Create an IPv6-mapped address given an IPv4 address
     * @memberof Address6
     * @static
     * @param {string} address - An IPv4 address string
     * @returns {Address6}
     * @example
     * var address = Address6.fromAddress4('192.168.0.1');
     * address.correctForm(); // '::ffff:c0a8:1'
     * address.to4in6(); // '::ffff:192.168.0.1'
     */ static fromAddress4(address) {
        const address4 = new (0, _ipv4.Address4)(address);
        const mask6 = _constants1.BITS - (_constants.BITS - address4.subnetMask);
        return new Address6(`::ffff:${address4.correctForm()}/${mask6}`);
    }
    /**
     * Return an address from ip6.arpa form
     * @memberof Address6
     * @static
     * @param {string} arpaFormAddress - an 'ip6.arpa' form address
     * @returns {Adress6}
     * @example
     * var address = Address6.fromArpa(e.f.f.f.3.c.2.6.f.f.f.e.6.6.8.e.1.0.6.7.9.4.e.c.0.0.0.0.1.0.0.2.ip6.arpa.)
     * address.correctForm(); // '2001:0:ce49:7601:e866:efff:62c3:fffe'
     */ static fromArpa(arpaFormAddress) {
        // remove ending ".ip6.arpa." or just "."
        let address = arpaFormAddress.replace(/(\.ip6\.arpa)?\.$/, "");
        const semicolonAmount = 7;
        // correct ip6.arpa form with ending removed will be 63 characters
        if (address.length !== 63) throw new (0, _addressError.AddressError)("Invalid 'ip6.arpa' form.");
        const parts = address.split(".").reverse();
        for(let i = semicolonAmount; i > 0; i--){
            const insertIndex = i * 4;
            parts.splice(insertIndex, 0, ":");
        }
        address = parts.join("");
        return new Address6(address);
    }
    /**
     * Return the Microsoft UNC transcription of the address
     * @memberof Address6
     * @instance
     * @returns {String} the Microsoft UNC transcription of the address
     */ microsoftTranscription() {
        return (0, _sprintfJs.sprintf)("%s.ipv6-literal.net", this.correctForm().replace(/:/g, "-"));
    }
    /**
     * Return the first n bits of the address, defaulting to the subnet mask
     * @memberof Address6
     * @instance
     * @param {number} [mask=subnet] - the number of bits to mask
     * @returns {String} the first n bits of the address as a string
     */ mask(mask = this.subnetMask) {
        return this.getBitsBase2(0, mask);
    }
    /**
     * Return the number of possible subnets of a given size in the address
     * @memberof Address6
     * @instance
     * @param {number} [size=128] - the subnet size
     * @returns {String}
     */ // TODO: probably useful to have a numeric version of this too
    possibleSubnets(subnetSize = 128) {
        const availableBits = _constants1.BITS - this.subnetMask;
        const subnetBits = Math.abs(subnetSize - _constants1.BITS);
        const subnetPowers = availableBits - subnetBits;
        if (subnetPowers < 0) return "0";
        return addCommas(new (0, _jsbn.BigInteger)("2", 10).pow(subnetPowers).toString(10));
    }
    /**
     * Helper function getting start address.
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */ _startAddress() {
        return new (0, _jsbn.BigInteger)(this.mask() + "0".repeat(_constants1.BITS - this.subnetMask), 2);
    }
    /**
     * The first address in the range given by this address' subnet
     * Often referred to as the Network Address.
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */ startAddress() {
        return Address6.fromBigInteger(this._startAddress());
    }
    /**
     * The first host address in the range given by this address's subnet ie
     * the first address after the Network Address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */ startAddressExclusive() {
        const adjust = new (0, _jsbn.BigInteger)("1");
        return Address6.fromBigInteger(this._startAddress().add(adjust));
    }
    /**
     * Helper function getting end address.
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */ _endAddress() {
        return new (0, _jsbn.BigInteger)(this.mask() + "1".repeat(_constants1.BITS - this.subnetMask), 2);
    }
    /**
     * The last address in the range given by this address' subnet
     * Often referred to as the Broadcast
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */ endAddress() {
        return Address6.fromBigInteger(this._endAddress());
    }
    /**
     * The last host address in the range given by this address's subnet ie
     * the last address prior to the Broadcast Address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */ endAddressExclusive() {
        const adjust = new (0, _jsbn.BigInteger)("1");
        return Address6.fromBigInteger(this._endAddress().subtract(adjust));
    }
    /**
     * Return the scope of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */ getScope() {
        let scope = _constants1.SCOPES[this.getBits(12, 16).intValue()];
        if (this.getType() === "Global unicast" && scope !== "Link local") scope = "Global";
        return scope || "Unknown";
    }
    /**
     * Return the type of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */ getType() {
        for (const subnet of Object.keys(_constants1.TYPES)){
            if (this.isInSubnet(new Address6(subnet))) return _constants1.TYPES[subnet];
        }
        return "Global unicast";
    }
    /**
     * Return the bits in the given range as a BigInteger
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */ getBits(start, end) {
        return new (0, _jsbn.BigInteger)(this.getBitsBase2(start, end), 2);
    }
    /**
     * Return the bits in the given range as a base-2 string
     * @memberof Address6
     * @instance
     * @returns {String}
     */ getBitsBase2(start, end) {
        return this.binaryZeroPad().slice(start, end);
    }
    /**
     * Return the bits in the given range as a base-16 string
     * @memberof Address6
     * @instance
     * @returns {String}
     */ getBitsBase16(start, end) {
        const length = end - start;
        if (length % 4 !== 0) throw new Error("Length of bits to retrieve must be divisible by four");
        return this.getBits(start, end).toString(16).padStart(length / 4, "0");
    }
    /**
     * Return the bits that are set past the subnet mask length
     * @memberof Address6
     * @instance
     * @returns {String}
     */ getBitsPastSubnet() {
        return this.getBitsBase2(this.subnetMask, _constants1.BITS);
    }
    /**
     * Return the reversed ip6.arpa form of the address
     * @memberof Address6
     * @param {Object} options
     * @param {boolean} options.omitSuffix - omit the "ip6.arpa" suffix
     * @instance
     * @returns {String}
     */ reverseForm(options) {
        if (!options) options = {};
        const characters = Math.floor(this.subnetMask / 4);
        const reversed = this.canonicalForm().replace(/:/g, "").split("").slice(0, characters).reverse().join(".");
        if (characters > 0) {
            if (options.omitSuffix) return reversed;
            return (0, _sprintfJs.sprintf)("%s.ip6.arpa.", reversed);
        }
        if (options.omitSuffix) return "";
        return "ip6.arpa.";
    }
    /**
     * Return the correct form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */ correctForm() {
        let i;
        let groups = [];
        let zeroCounter = 0;
        const zeroes = [];
        for(i = 0; i < this.parsedAddress.length; i++){
            const value = parseInt(this.parsedAddress[i], 16);
            if (value === 0) zeroCounter++;
            if (value !== 0 && zeroCounter > 0) {
                if (zeroCounter > 1) zeroes.push([
                    i - zeroCounter,
                    i - 1
                ]);
                zeroCounter = 0;
            }
        }
        // Do we end with a string of zeroes?
        if (zeroCounter > 1) zeroes.push([
            this.parsedAddress.length - zeroCounter,
            this.parsedAddress.length - 1
        ]);
        const zeroLengths = zeroes.map((n)=>n[1] - n[0] + 1);
        if (zeroes.length > 0) {
            const index = zeroLengths.indexOf(Math.max(...zeroLengths));
            groups = compact(this.parsedAddress, zeroes[index]);
        } else groups = this.parsedAddress;
        for(i = 0; i < groups.length; i++)if (groups[i] !== "compact") groups[i] = parseInt(groups[i], 16).toString(16);
        let correct = groups.join(":");
        correct = correct.replace(/^compact$/, "::");
        correct = correct.replace(/^compact|compact$/, ":");
        correct = correct.replace(/compact/, "");
        return correct;
    }
    /**
     * Return a zero-padded base-2 string representation of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     * @example
     * var address = new Address6('2001:4860:4001:803::1011');
     * address.binaryZeroPad();
     * // '0010000000000001010010000110000001000000000000010000100000000011
     * //  0000000000000000000000000000000000000000000000000001000000010001'
     */ binaryZeroPad() {
        return this.bigInteger().toString(2).padStart(_constants1.BITS, "0");
    }
    // TODO: Improve the semantics of this helper function
    parse4in6(address) {
        const groups = address.split(":");
        const lastGroup = groups.slice(-1)[0];
        const address4 = lastGroup.match(_constants.RE_ADDRESS);
        if (address4) {
            this.parsedAddress4 = address4[0];
            this.address4 = new (0, _ipv4.Address4)(this.parsedAddress4);
            for(let i = 0; i < this.address4.groups; i++){
                if (/^0[0-9]+/.test(this.address4.parsedAddress[i])) throw new (0, _addressError.AddressError)("IPv4 addresses can't have leading zeroes.", address.replace(_constants.RE_ADDRESS, this.address4.parsedAddress.map(spanLeadingZeroes4).join(".")));
            }
            this.v4 = true;
            groups[groups.length - 1] = this.address4.toGroup6();
            address = groups.join(":");
        }
        return address;
    }
    // TODO: Make private?
    parse(address) {
        address = this.parse4in6(address);
        const badCharacters = address.match(_constants1.RE_BAD_CHARACTERS);
        if (badCharacters) throw new (0, _addressError.AddressError)((0, _sprintfJs.sprintf)("Bad character%s detected in address: %s", badCharacters.length > 1 ? "s" : "", badCharacters.join("")), address.replace(_constants1.RE_BAD_CHARACTERS, '<span class="parse-error">$1</span>'));
        const badAddress = address.match(_constants1.RE_BAD_ADDRESS);
        if (badAddress) throw new (0, _addressError.AddressError)((0, _sprintfJs.sprintf)("Address failed regex: %s", badAddress.join("")), address.replace(_constants1.RE_BAD_ADDRESS, '<span class="parse-error">$1</span>'));
        let groups = [];
        const halves = address.split("::");
        if (halves.length === 2) {
            let first = halves[0].split(":");
            let last = halves[1].split(":");
            if (first.length === 1 && first[0] === "") first = [];
            if (last.length === 1 && last[0] === "") last = [];
            const remaining = this.groups - (first.length + last.length);
            if (!remaining) throw new (0, _addressError.AddressError)("Error parsing groups");
            this.elidedGroups = remaining;
            this.elisionBegin = first.length;
            this.elisionEnd = first.length + this.elidedGroups;
            groups = groups.concat(first);
            for(let i = 0; i < remaining; i++)groups.push("0");
            groups = groups.concat(last);
        } else if (halves.length === 1) {
            groups = address.split(":");
            this.elidedGroups = 0;
        } else throw new (0, _addressError.AddressError)("Too many :: groups found");
        groups = groups.map((group)=>(0, _sprintfJs.sprintf)("%x", parseInt(group, 16)));
        if (groups.length !== this.groups) throw new (0, _addressError.AddressError)("Incorrect number of groups found");
        return groups;
    }
    /**
     * Return the canonical form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */ canonicalForm() {
        return this.parsedAddress.map(paddedHex).join(":");
    }
    /**
     * Return the decimal form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */ decimal() {
        return this.parsedAddress.map((n)=>(0, _sprintfJs.sprintf)("%05d", parseInt(n, 16))).join(":");
    }
    /**
     * Return the address as a BigInteger
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */ bigInteger() {
        return new (0, _jsbn.BigInteger)(this.parsedAddress.map(paddedHex).join(""), 16);
    }
    /**
     * Return the last two groups of this address as an IPv4 address string
     * @memberof Address6
     * @instance
     * @returns {Address4}
     * @example
     * var address = new Address6('2001:4860:4001::1825:bf11');
     * address.to4().correctForm(); // '24.37.191.17'
     */ to4() {
        const binary = this.binaryZeroPad().split("");
        return (0, _ipv4.Address4).fromHex(new (0, _jsbn.BigInteger)(binary.slice(96, 128).join(""), 2).toString(16));
    }
    /**
     * Return the v4-in-v6 form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */ to4in6() {
        const address4 = this.to4();
        const address6 = new Address6(this.parsedAddress.slice(0, 6).join(":"), 6);
        const correct = address6.correctForm();
        let infix = "";
        if (!/:$/.test(correct)) infix = ":";
        return correct + infix + address4.address;
    }
    /**
     * Return an object containing the Teredo properties of the address
     * @memberof Address6
     * @instance
     * @returns {Object}
     */ inspectTeredo() {
        /*
        - Bits 0 to 31 are set to the Teredo prefix (normally 2001:0000::/32).
        - Bits 32 to 63 embed the primary IPv4 address of the Teredo server that
          is used.
        - Bits 64 to 79 can be used to define some flags. Currently only the
          higher order bit is used; it is set to 1 if the Teredo client is
          located behind a cone NAT, 0 otherwise. For Microsoft's Windows Vista
          and Windows Server 2008 implementations, more bits are used. In those
          implementations, the format for these 16 bits is "CRAAAAUG AAAAAAAA",
          where "C" remains the "Cone" flag. The "R" bit is reserved for future
          use. The "U" bit is for the Universal/Local flag (set to 0). The "G" bit
          is Individual/Group flag (set to 0). The A bits are set to a 12-bit
          randomly generated number chosen by the Teredo client to introduce
          additional protection for the Teredo node against IPv6-based scanning
          attacks.
        - Bits 80 to 95 contains the obfuscated UDP port number. This is the
          port number that is mapped by the NAT to the Teredo client with all
          bits inverted.
        - Bits 96 to 127 contains the obfuscated IPv4 address. This is the
          public IPv4 address of the NAT with all bits inverted.
        */ const prefix = this.getBitsBase16(0, 32);
        const udpPort = this.getBits(80, 96).xor(new (0, _jsbn.BigInteger)("ffff", 16)).toString();
        const server4 = (0, _ipv4.Address4).fromHex(this.getBitsBase16(32, 64));
        const client4 = (0, _ipv4.Address4).fromHex(this.getBits(96, 128).xor(new (0, _jsbn.BigInteger)("ffffffff", 16)).toString(16));
        const flags = this.getBits(64, 80);
        const flagsBase2 = this.getBitsBase2(64, 80);
        const coneNat = flags.testBit(15);
        const reserved = flags.testBit(14);
        const groupIndividual = flags.testBit(8);
        const universalLocal = flags.testBit(9);
        const nonce = new (0, _jsbn.BigInteger)(flagsBase2.slice(2, 6) + flagsBase2.slice(8, 16), 2).toString(10);
        return {
            prefix: (0, _sprintfJs.sprintf)("%s:%s", prefix.slice(0, 4), prefix.slice(4, 8)),
            server4: server4.address,
            client4: client4.address,
            flags: flagsBase2,
            coneNat,
            microsoft: {
                reserved,
                universalLocal,
                groupIndividual,
                nonce
            },
            udpPort
        };
    }
    /**
     * Return an object containing the 6to4 properties of the address
     * @memberof Address6
     * @instance
     * @returns {Object}
     */ inspect6to4() {
        /*
        - Bits 0 to 15 are set to the 6to4 prefix (2002::/16).
        - Bits 16 to 48 embed the IPv4 address of the 6to4 gateway that is used.
        */ const prefix = this.getBitsBase16(0, 16);
        const gateway = (0, _ipv4.Address4).fromHex(this.getBitsBase16(16, 48));
        return {
            prefix: (0, _sprintfJs.sprintf)("%s", prefix.slice(0, 4)),
            gateway: gateway.address
        };
    }
    /**
     * Return a v6 6to4 address from a v6 v4inv6 address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */ to6to4() {
        if (!this.is4()) return null;
        const addr6to4 = [
            "2002",
            this.getBitsBase16(96, 112),
            this.getBitsBase16(112, 128),
            "",
            "/16", 
        ].join(":");
        return new Address6(addr6to4);
    }
    /**
     * Return a byte array
     * @memberof Address6
     * @instance
     * @returns {Array}
     */ toByteArray() {
        const byteArray = this.bigInteger().toByteArray();
        // work around issue where `toByteArray` returns a leading 0 element
        if (byteArray.length === 17 && byteArray[0] === 0) return byteArray.slice(1);
        return byteArray;
    }
    /**
     * Return an unsigned byte array
     * @memberof Address6
     * @instance
     * @returns {Array}
     */ toUnsignedByteArray() {
        return this.toByteArray().map(unsignByte);
    }
    /**
     * Convert a byte array to an Address6 object
     * @memberof Address6
     * @static
     * @returns {Address6}
     */ static fromByteArray(bytes) {
        return this.fromUnsignedByteArray(bytes.map(unsignByte));
    }
    /**
     * Convert an unsigned byte array to an Address6 object
     * @memberof Address6
     * @static
     * @returns {Address6}
     */ static fromUnsignedByteArray(bytes) {
        const BYTE_MAX = new (0, _jsbn.BigInteger)("256", 10);
        let result = new (0, _jsbn.BigInteger)("0", 10);
        let multiplier = new (0, _jsbn.BigInteger)("1", 10);
        for(let i = bytes.length - 1; i >= 0; i--){
            result = result.add(multiplier.multiply(new (0, _jsbn.BigInteger)(bytes[i].toString(10), 10)));
            multiplier = multiplier.multiply(BYTE_MAX);
        }
        return Address6.fromBigInteger(result);
    }
    /**
     * Returns true if the address is in the canonical form, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */ isCanonical() {
        return this.addressMinusSuffix === this.canonicalForm();
    }
    /**
     * Returns true if the address is a link local address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */ isLinkLocal() {
        // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'
        if (this.getBitsBase2(0, 64) === "1111111010000000000000000000000000000000000000000000000000000000") return true;
        return false;
    }
    /**
     * Returns true if the address is a multicast address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */ isMulticast() {
        return this.getType() === "Multicast";
    }
    /**
     * Returns true if the address is a v4-in-v6 address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */ is4() {
        return this.v4;
    }
    /**
     * Returns true if the address is a Teredo address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */ isTeredo() {
        return this.isInSubnet(new Address6("2001::/32"));
    }
    /**
     * Returns true if the address is a 6to4 address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */ is6to4() {
        return this.isInSubnet(new Address6("2002::/16"));
    }
    /**
     * Returns true if the address is a loopback address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */ isLoopback() {
        return this.getType() === "Loopback";
    }
    // #endregion
    // #region HTML
    /**
     * @returns {String} the address in link form with a default port of 80
     */ href(optionalPort) {
        if (optionalPort === undefined) optionalPort = "";
        else optionalPort = (0, _sprintfJs.sprintf)(":%s", optionalPort);
        return (0, _sprintfJs.sprintf)("http://[%s]%s/", this.correctForm(), optionalPort);
    }
    /**
     * @returns {String} a link suitable for conveying the address via a URL hash
     */ link(options) {
        if (!options) options = {};
        if (options.className === undefined) options.className = "";
        if (options.prefix === undefined) options.prefix = "/#address=";
        if (options.v4 === undefined) options.v4 = false;
        let formFunction = this.correctForm;
        if (options.v4) formFunction = this.to4in6;
        if (options.className) return (0, _sprintfJs.sprintf)('<a href="%1$s%2$s" class="%3$s">%2$s</a>', options.prefix, formFunction.call(this), options.className);
        return (0, _sprintfJs.sprintf)('<a href="%1$s%2$s">%2$s</a>', options.prefix, formFunction.call(this));
    }
    /**
     * Groups an address
     * @returns {String}
     */ group() {
        if (this.elidedGroups === 0) // The simple case
        return _helpers.simpleGroup(this.address).join(":");
        assert(typeof this.elidedGroups === "number");
        assert(typeof this.elisionBegin === "number");
        // The elided case
        const output = [];
        const [left, right] = this.address.split("::");
        if (left.length) output.push(..._helpers.simpleGroup(left));
        else output.push("");
        const classes = [
            "hover-group"
        ];
        for(let i = this.elisionBegin; i < this.elisionBegin + this.elidedGroups; i++)classes.push((0, _sprintfJs.sprintf)("group-%d", i));
        output.push((0, _sprintfJs.sprintf)('<span class="%s"></span>', classes.join(" ")));
        if (right.length) output.push(..._helpers.simpleGroup(right, this.elisionEnd));
        else output.push("");
        if (this.is4()) {
            assert(this.address4 instanceof (0, _ipv4.Address4));
            output.pop();
            output.push(this.address4.groupForV6());
        }
        return output.join(":");
    }
    // #endregion
    // #region Regular expressions
    /**
     * Generate a regular expression string that can be used to find or validate
     * all variations of this address
     * @memberof Address6
     * @instance
     * @param {boolean} substringSearch
     * @returns {string}
     */ regularExpressionString(substringSearch = false) {
        let output = [];
        // TODO: revisit why this is necessary
        const address6 = new Address6(this.correctForm());
        if (address6.elidedGroups === 0) // The simple case
        output.push((0, _regularExpressions.simpleRegularExpression)(address6.parsedAddress));
        else if (address6.elidedGroups === _constants1.GROUPS) // A completely elided address
        output.push((0, _regularExpressions.possibleElisions)(_constants1.GROUPS));
        else {
            // A partially elided address
            const halves = address6.address.split("::");
            if (halves[0].length) output.push((0, _regularExpressions.simpleRegularExpression)(halves[0].split(":")));
            assert(typeof address6.elidedGroups === "number");
            output.push((0, _regularExpressions.possibleElisions)(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));
            if (halves[1].length) output.push((0, _regularExpressions.simpleRegularExpression)(halves[1].split(":")));
            output = [
                output.join(":")
            ];
        }
        if (!substringSearch) output = [
            "(?=^|",
            (0, _regularExpressions.ADDRESS_BOUNDARY),
            "|[^\\w\\:])(",
            ...output,
            ")(?=[^\\w\\:]|",
            (0, _regularExpressions.ADDRESS_BOUNDARY),
            "|$)", 
        ];
        return output.join("");
    }
    /**
     * Generate a regular expression that can be used to find or validate all
     * variations of this address.
     * @memberof Address6
     * @instance
     * @param {boolean} substringSearch
     * @returns {RegExp}
     */ regularExpression(substringSearch = false) {
        return new RegExp(this.regularExpressionString(substringSearch), "i");
    }
}

},{"./common":"bSlzk","./v4/constants":"7y7Sq","./v6/constants":"lWTr6","./v6/helpers":"3C5VE","./ipv4":"9Yvvy","./v6/regular-expressions":"kgO1W","./address-error":"dAhIV","jsbn":"lbMNc","sprintf-js":"9lMGt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWTr6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BITS", ()=>BITS);
parcelHelpers.export(exports, "GROUPS", ()=>GROUPS);
parcelHelpers.export(exports, "SCOPES", ()=>SCOPES);
parcelHelpers.export(exports, "TYPES", ()=>TYPES);
parcelHelpers.export(exports, "RE_BAD_CHARACTERS", ()=>RE_BAD_CHARACTERS);
parcelHelpers.export(exports, "RE_BAD_ADDRESS", ()=>RE_BAD_ADDRESS);
parcelHelpers.export(exports, "RE_SUBNET_STRING", ()=>RE_SUBNET_STRING);
parcelHelpers.export(exports, "RE_ZONE_STRING", ()=>RE_ZONE_STRING);
parcelHelpers.export(exports, "RE_URL", ()=>RE_URL);
parcelHelpers.export(exports, "RE_URL_WITH_PORT", ()=>RE_URL_WITH_PORT);
const BITS = 128;
const GROUPS = 8;
const SCOPES = {
    0: "Reserved",
    1: "Interface local",
    2: "Link local",
    4: "Admin local",
    5: "Site local",
    8: "Organization local",
    14: "Global",
    15: "Reserved"
};
const TYPES = {
    "ff01::1/128": "Multicast (All nodes on this interface)",
    "ff01::2/128": "Multicast (All routers on this interface)",
    "ff02::1/128": "Multicast (All nodes on this link)",
    "ff02::2/128": "Multicast (All routers on this link)",
    "ff05::2/128": "Multicast (All routers in this site)",
    "ff02::5/128": "Multicast (OSPFv3 AllSPF routers)",
    "ff02::6/128": "Multicast (OSPFv3 AllDR routers)",
    "ff02::9/128": "Multicast (RIP routers)",
    "ff02::a/128": "Multicast (EIGRP routers)",
    "ff02::d/128": "Multicast (PIM routers)",
    "ff02::16/128": "Multicast (MLDv2 reports)",
    "ff01::fb/128": "Multicast (mDNSv6)",
    "ff02::fb/128": "Multicast (mDNSv6)",
    "ff05::fb/128": "Multicast (mDNSv6)",
    "ff02::1:2/128": "Multicast (All DHCP servers and relay agents on this link)",
    "ff05::1:2/128": "Multicast (All DHCP servers and relay agents in this site)",
    "ff02::1:3/128": "Multicast (All DHCP servers on this link)",
    "ff05::1:3/128": "Multicast (All DHCP servers in this site)",
    "::/128": "Unspecified",
    "::1/128": "Loopback",
    "ff00::/8": "Multicast",
    "fe80::/10": "Link-local unicast"
};
const RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi;
const RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi;
const RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/;
const RE_ZONE_STRING = /%.*$/;
const RE_URL = new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/);
const RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3C5VE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @returns {String} the string with all zeroes contained in a <span>
 */ parcelHelpers.export(exports, "spanAllZeroes", ()=>spanAllZeroes);
/**
 * @returns {String} the string with each character contained in a <span>
 */ parcelHelpers.export(exports, "spanAll", ()=>spanAll);
/**
 * @returns {String} the string with leading zeroes contained in a <span>
 */ parcelHelpers.export(exports, "spanLeadingZeroes", ()=>spanLeadingZeroes);
/**
 * Groups an address
 * @returns {String} a grouped address
 */ parcelHelpers.export(exports, "simpleGroup", ()=>simpleGroup);
var _sprintfJs = require("sprintf-js");
function spanAllZeroes(s) {
    return s.replace(/(0+)/g, '<span class="zero">$1</span>');
}
function spanAll(s, offset = 0) {
    const letters = s.split("");
    return letters.map((n, i)=>(0, _sprintfJs.sprintf)('<span class="digit value-%s position-%d">%s</span>', n, i + offset, spanAllZeroes(n)) // XXX Use #base-2 .value-0 instead?
    ).join("");
}
function spanLeadingZeroesSimple(group) {
    return group.replace(/^(0+)/, '<span class="zero">$1</span>');
}
function spanLeadingZeroes(address) {
    const groups = address.split(":");
    return groups.map((g)=>spanLeadingZeroesSimple(g)).join(":");
}
function simpleGroup(addressString, offset = 0) {
    const groups = addressString.split(":");
    return groups.map((g, i)=>{
        if (/group-v4/.test(g)) return g;
        return (0, _sprintfJs.sprintf)('<span class="hover-group group-%d">%s</span>', i + offset, spanLeadingZeroesSimple(g));
    });
}

},{"sprintf-js":"9lMGt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kgO1W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "groupPossibilities", ()=>groupPossibilities);
parcelHelpers.export(exports, "padGroup", ()=>padGroup);
parcelHelpers.export(exports, "ADDRESS_BOUNDARY", ()=>ADDRESS_BOUNDARY);
parcelHelpers.export(exports, "simpleRegularExpression", ()=>simpleRegularExpression);
parcelHelpers.export(exports, "possibleElisions", ()=>possibleElisions);
var _constants = require("./constants");
var _sprintfJs = require("sprintf-js");
function groupPossibilities(possibilities) {
    return (0, _sprintfJs.sprintf)("(%s)", possibilities.join("|"));
}
function padGroup(group) {
    if (group.length < 4) return (0, _sprintfJs.sprintf)("0{0,%d}%s", 4 - group.length, group);
    return group;
}
const ADDRESS_BOUNDARY = "[^A-Fa-f0-9:]";
function simpleRegularExpression(groups) {
    const zeroIndexes = [];
    groups.forEach((group, i)=>{
        const groupInteger = parseInt(group, 16);
        if (groupInteger === 0) zeroIndexes.push(i);
    });
    // You can technically elide a single 0, this creates the regular expressions
    // to match that eventuality
    const possibilities = zeroIndexes.map((zeroIndex)=>groups.map((group, i)=>{
            if (i === zeroIndex) {
                const elision = i === 0 || i === _constants.GROUPS - 1 ? ":" : "";
                return groupPossibilities([
                    padGroup(group),
                    elision
                ]);
            }
            return padGroup(group);
        }).join(":"));
    // The simplest case
    possibilities.push(groups.map(padGroup).join(":"));
    return groupPossibilities(possibilities);
}
function possibleElisions(elidedGroups, moreLeft, moreRight) {
    const left = moreLeft ? "" : ":";
    const right = moreRight ? "" : ":";
    const possibilities = [];
    // 1. elision of everything (::)
    if (!moreLeft && !moreRight) possibilities.push("::");
    // 2. complete elision of the middle
    if (moreLeft && moreRight) possibilities.push("");
    if (moreRight && !moreLeft || !moreRight && moreLeft) // 3. complete elision of one side
    possibilities.push(":");
    // 4. elision from the left side
    possibilities.push((0, _sprintfJs.sprintf)("%s(:0{1,4}){1,%d}", left, elidedGroups - 1));
    // 5. elision from the right side
    possibilities.push((0, _sprintfJs.sprintf)("(0{1,4}:){1,%d}%s", elidedGroups - 1, right));
    // 6. no elision
    possibilities.push((0, _sprintfJs.sprintf)("(0{1,4}:){%d}0{1,4}", elidedGroups - 1));
    // 7. elision (including sloppy elision) from the middle
    for(let groups = 1; groups < elidedGroups - 1; groups++)for(let position = 1; position < elidedGroups - groups; position++)possibilities.push((0, _sprintfJs.sprintf)("(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}", position, elidedGroups - position - groups - 1));
    return groupPossibilities(possibilities);
}

},{"./constants":"lWTr6","sprintf-js":"9lMGt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9sPb3":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
function cleanUrlSIO(ma) {
    const maStrSplit = ma.toString().split("/");
    const tcpProto = ma.protos()[1].name;
    const wsProto = ma.protos()[2].name;
    const tcpPort = ma.stringTuples()[1][1];
    if (tcpProto !== "tcp" || wsProto !== "ws" && wsProto !== "wss") throw new Error("invalid multiaddr: " + ma.toString());
    if (!Multiaddr.isName(ma)) return "http://" + maStrSplit[2] + ":" + maStrSplit[4];
    if (wsProto === "ws") return "http://" + maStrSplit[2] + (tcpPort === "80" ? "" : ":" + tcpPort);
    if (wsProto === "wss") return "https://" + maStrSplit[2] + (tcpPort === "443" ? "" : ":" + tcpPort);
}
function cleanMultiaddr(maStr) {
    const legacy = "/libp2p-webrtc-star";
    if (maStr.indexOf(legacy) !== -1) {
        maStr = maStr.substring(legacy.length, maStr.length);
        let ma = new Multiaddr(maStr);
        const tuppleIPFS = ma.stringTuples().filter((tupple)=>{
            return tupple[0] === 421 // ipfs code
            ;
        })[0];
        ma = ma.decapsulate("p2p");
        ma = ma.encapsulate("/p2p-webrtc-star");
        ma = ma.encapsulate(`/p2p/${tuppleIPFS[1]}`);
        maStr = ma.toString();
    }
    return maStr;
}
module.exports = {
    cleanUrlSIO,
    cleanMultiaddr
};

},{"multiaddr":"dOMJu"}],"ehlSk":[function(require,module,exports) {
"use strict";
const connect = require("it-ws/client");
const withIs = require("class-is");
const toUri = require("multiaddr-to-uri");
const { AbortError  } = require("abortable-iterator");
const pDefer = require("p-defer");
const debug = require("debug");
const log = debug("libp2p:websockets");
log.error = debug("libp2p:websockets:error");
const env = require("ipfs-utils/src/env");
const createListener = require("./listener");
const toConnection = require("./socket-to-conn");
const filters = require("./filters");
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 */ /**
 * @class WebSockets
 */ class WebSockets {
    /**
   * @class
   * @param {object} options
   * @param {Upgrader} options.upgrader
   * @param {(multiaddrs: Array<Multiaddr>) => Array<Multiaddr>} options.filter - override transport addresses filter
   */ constructor({ upgrader , filter  }){
        if (!upgrader) throw new Error("An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.");
        this._upgrader = upgrader;
        this._filter = filter;
    }
    /**
   * @async
   * @param {Multiaddr} ma
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] - Used to abort dial requests
   * @returns {Connection} An upgraded Connection
   */ async dial(ma, options = {}) {
        log("dialing %s", ma);
        const socket = await this._connect(ma, options);
        const maConn = toConnection(socket, {
            remoteAddr: ma,
            signal: options.signal
        });
        log("new outbound connection %s", maConn.remoteAddr);
        const conn = await this._upgrader.upgradeOutbound(maConn);
        log("outbound connection %s upgraded", maConn.remoteAddr);
        return conn;
    }
    /**
   * @private
   * @param {Multiaddr} ma
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] - Used to abort dial requests
   * @returns {Promise<WebSocket>} Resolves a extended duplex iterable on top of a WebSocket
   */ async _connect(ma, options = {}) {
        if (options.signal && options.signal.aborted) throw new AbortError();
        const cOpts = ma.toOptions();
        log("dialing %s:%s", cOpts.host, cOpts.port);
        const errorPromise = pDefer();
        const errfn = (err)=>{
            const msg = `connection error: ${err.message}`;
            log.error(msg);
            errorPromise.reject(err);
        };
        const rawSocket = connect(toUri(ma), Object.assign({
            binary: true
        }, options));
        if (rawSocket.socket.on) rawSocket.socket.on("error", errfn);
        else rawSocket.socket.onerror = errfn;
        if (!options.signal) {
            await Promise.race([
                rawSocket.connected(),
                errorPromise.promise
            ]);
            log("connected %s", ma);
            return rawSocket;
        }
        // Allow abort via signal during connect
        let onAbort;
        const abort = new Promise((resolve, reject)=>{
            onAbort = ()=>{
                reject(new AbortError());
                // FIXME: https://github.com/libp2p/js-libp2p-websockets/issues/121
                setTimeout(()=>{
                    rawSocket.close();
                });
            };
            // Already aborted?
            if (options.signal.aborted) return onAbort();
            options.signal.addEventListener("abort", onAbort);
        });
        try {
            await Promise.race([
                abort,
                errorPromise.promise,
                rawSocket.connected()
            ]);
        } finally{
            options.signal.removeEventListener("abort", onAbort);
        }
        log("connected %s", ma);
        return rawSocket;
    }
    /**
   * Creates a Websockets listener. The provided `handler` function will be called
   * anytime a new incoming Connection has been successfully upgraded via
   * `upgrader.upgradeInbound`.
   *
   * @param {object} [options]
   * @param {http.Server} [options.server] - A pre-created Node.js HTTP/S server.
   * @param {function (Connection)} handler
   * @returns {Listener} A Websockets listener
   */ createListener(options = {}, handler) {
        if (typeof options === "function") {
            handler = options;
            options = {};
        }
        return createListener({
            handler,
            upgrader: this._upgrader
        }, options);
    }
    /**
   * Takes a list of `Multiaddr`s and returns only valid Websockets addresses.
   * By default, in a browser environment only DNS+WSS multiaddr is accepted,
   * while in a Node.js environment DNS+{WS, WSS} multiaddrs are accepted.
   *
   * @param {Multiaddr[]} multiaddrs
   * @returns {Multiaddr[]} Valid Websockets multiaddrs
   */ filter(multiaddrs) {
        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [
            multiaddrs
        ];
        if (this._filter) return this._filter(multiaddrs);
        // Browser
        if (env.isBrowser || env.isWebWorker) return filters.dnsWss(multiaddrs);
        return filters.all(multiaddrs);
    }
}
module.exports = withIs(WebSockets, {
    className: "WebSockets",
    symbolName: "@libp2p/js-libp2p-websockets/websockets"
});

},{"it-ws/client":"bsrVL","class-is":"50lkq","multiaddr-to-uri":"kzrTO","abortable-iterator":"jIHDo","p-defer":"cWx93","debug":"l0oUb","ipfs-utils/src/env":"ceCIz","./listener":"8LFN9","./socket-to-conn":"1hjOK","./filters":"gHrIk"}],"bsrVL":[function(require,module,exports) {
"use strict";
// load websocket library if we are not in the browser
var WebSocket = require("./web-socket");
var duplex = require("./duplex");
var wsurl = require("./ws-url");
module.exports = function(addr, opts = {}) {
    const location = typeof window === "undefined" ? {} : window.location;
    const url = wsurl(addr, location);
    const socket = new WebSocket(url, opts.websocket);
    const stream = duplex(socket, opts);
    stream.remoteAddress = url;
    stream.close = ()=>new Promise((resolve, reject)=>{
            socket.addEventListener("close", resolve);
            socket.close();
        });
    stream.destroy = ()=>{
        if (socket.terminate) socket.terminate();
        else socket.close();
    };
    stream.socket = socket;
    return stream;
};
module.exports.connect = module.exports;

},{"./web-socket":"epVuI","./duplex":"evKME","./ws-url":"7mFRk"}],"epVuI":[function(require,module,exports) {
/* eslint-env browser */ module.exports = typeof WebSocket === "undefined" ? require("ws") : WebSocket;

},{"ws":"jhUEF"}],"evKME":[function(require,module,exports) {
const source = require("./source");
const sink = require("./sink");
module.exports = (socket, options)=>{
    options = options || {};
    if (options.binaryType) socket.binaryType = options.binaryType;
    else if (options.binary) socket.binaryType = "arraybuffer";
    const duplex = {
        sink: sink(socket, options),
        source: source(socket, options),
        connected: ()=>duplex.source.connected()
    };
    return duplex;
};

},{"./source":"ihOaL","./sink":"onUJ8"}],"ihOaL":[function(require,module,exports) {
const { Buffer  } = require("buffer");
const { EventIterator  } = require("event-iterator");
// copied from github.com/feross/buffer
// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(
function isArrayBuffer(obj) {
    return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === "ArrayBuffer" && typeof obj.byteLength === "number";
}
module.exports = (socket)=>{
    const removeListener = socket.removeEventListener || socket.removeListener;
    const source = async function*() {
        const messages = new EventIterator(({ push , stop , fail  })=>{
            socket.addEventListener("message", push);
            socket.addEventListener("error", fail);
            socket.addEventListener("close", stop);
            return ()=>{
                removeListener.call(socket, "message", push);
                removeListener.call(socket, "error", fail);
                removeListener.call(socket, "close", stop);
            };
        }, {
            highWaterMark: Infinity
        });
        for await (const { data  } of messages)yield isArrayBuffer(data) ? Buffer.from(data) : data;
    }();
    let connected = socket.readyState === 1;
    let connError;
    socket.addEventListener("open", ()=>{
        connected = true;
        connError = null;
    });
    socket.addEventListener("close", ()=>{
        connected = false;
        connError = null;
    });
    socket.addEventListener("error", (err)=>{
        if (!connected) connError = err;
    });
    source.connected = ()=>new Promise((resolve, reject)=>{
            if (connected) return resolve();
            if (connError) return reject(connError);
            const cleanUp = (cont)=>{
                removeListener.call(socket, "open", onOpen);
                removeListener.call(socket, "error", onError);
                cont();
            };
            const onOpen = ()=>cleanUp(resolve);
            const onError = (err)=>cleanUp(()=>reject(err));
            socket.addEventListener("open", onOpen);
            socket.addEventListener("error", onError);
        });
    return source;
};

},{"buffer":"fCgem","event-iterator":"fULWt"}],"fULWt":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const event_iterator_1 = require("./event-iterator");
exports.EventIterator = event_iterator_1.EventIterator;
function subscribe(event, options, evOptions) {
    return new event_iterator_1.EventIterator(({ push  })=>{
        this.addEventListener(event, push, options);
        return ()=>this.removeEventListener(event, push, options);
    }, evOptions);
}
exports.subscribe = subscribe;
exports.default = event_iterator_1.EventIterator;

},{"./event-iterator":"iIzBm"}],"iIzBm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
class EventQueue {
    constructor(){
        this.pullQueue = [];
        this.pushQueue = [];
        this.eventHandlers = {};
        this.isPaused = false;
        this.isStopped = false;
    }
    push(value) {
        if (this.isStopped) return;
        const resolution = {
            value,
            done: false
        };
        if (this.pullQueue.length) {
            const placeholder = this.pullQueue.shift();
            if (placeholder) placeholder.resolve(resolution);
        } else {
            this.pushQueue.push(Promise.resolve(resolution));
            if (this.highWaterMark !== undefined && this.pushQueue.length >= this.highWaterMark && !this.isPaused) {
                this.isPaused = true;
                if (this.eventHandlers.highWater) this.eventHandlers.highWater();
                else if (console) console.warn(`EventIterator queue reached ${this.pushQueue.length} items`);
            }
        }
    }
    stop() {
        if (this.isStopped) return;
        this.isStopped = true;
        this.remove();
        for (const placeholder of this.pullQueue)placeholder.resolve({
            value: undefined,
            done: true
        });
        this.pullQueue.length = 0;
    }
    fail(error) {
        if (this.isStopped) return;
        this.isStopped = true;
        this.remove();
        if (this.pullQueue.length) {
            for (const placeholder of this.pullQueue)placeholder.reject(error);
            this.pullQueue.length = 0;
        } else {
            const rejection = Promise.reject(error);
            /* Attach error handler to avoid leaking an unhandled promise rejection. */ rejection.catch(()=>{});
            this.pushQueue.push(rejection);
        }
    }
    remove() {
        Promise.resolve().then(()=>{
            if (this.removeCallback) this.removeCallback();
        });
    }
    [Symbol.asyncIterator]() {
        return {
            next: (value)=>{
                const result = this.pushQueue.shift();
                if (result) {
                    if (this.lowWaterMark !== undefined && this.pushQueue.length <= this.lowWaterMark && this.isPaused) {
                        this.isPaused = false;
                        if (this.eventHandlers.lowWater) this.eventHandlers.lowWater();
                    }
                    return result;
                } else if (this.isStopped) return Promise.resolve({
                    value: undefined,
                    done: true
                });
                else return new Promise((resolve, reject)=>{
                    this.pullQueue.push({
                        resolve,
                        reject
                    });
                });
            },
            return: ()=>{
                this.isStopped = true;
                this.pushQueue.length = 0;
                this.remove();
                return Promise.resolve({
                    value: undefined,
                    done: true
                });
            }
        };
    }
}
class EventIterator {
    constructor(listen, { highWaterMark =100 , lowWaterMark =1  } = {}){
        const queue = new EventQueue();
        queue.highWaterMark = highWaterMark;
        queue.lowWaterMark = lowWaterMark;
        queue.removeCallback = listen({
            push: (value)=>queue.push(value),
            stop: ()=>queue.stop(),
            fail: (error)=>queue.fail(error),
            on: (event, fn)=>{
                queue.eventHandlers[event] = fn;
            }
        }) || (()=>{});
        this[Symbol.asyncIterator] = ()=>queue[Symbol.asyncIterator]();
        Object.freeze(this);
    }
}
exports.EventIterator = EventIterator;
exports.default = EventIterator;

},{}],"onUJ8":[function(require,module,exports) {
const ready = require("./ready");
module.exports = (socket, options)=>{
    options = options || {};
    options.closeOnEnd = options.closeOnEnd !== false;
    return async (source)=>{
        for await (const data of source){
            try {
                await ready(socket);
            } catch (err) {
                if (err.message === "socket closed") break;
                throw err;
            }
            socket.send(data);
        }
        if (options.closeOnEnd && socket.readyState <= 1) return new Promise((resolve, reject)=>{
            socket.addEventListener("close", (event)=>{
                if (event.wasClean || event.code === 1006) resolve();
                else {
                    const err = Object.assign(new Error("ws error"), {
                        event
                    });
                    reject(err);
                }
            });
            setTimeout(()=>socket.close());
        });
    };
};

},{"./ready":"10gyc"}],"10gyc":[function(require,module,exports) {
module.exports = async (socket)=>{
    // if the socket is closing or closed, return end
    if (socket.readyState >= 2) throw new Error("socket closed");
    // if open, return
    if (socket.readyState === 1) return;
    return new Promise((resolve, reject)=>{
        const remove = socket && (socket.removeEventListener || socket.removeListener);
        function cleanup() {
            if (typeof remove === "function") {
                remove.call(socket, "open", handleOpen);
                remove.call(socket, "error", handleErr);
            }
        }
        function handleOpen() {
            cleanup();
            resolve();
        }
        function handleErr(evt) {
            cleanup();
            reject(evt);
        }
        socket.addEventListener("open", handleOpen);
        socket.addEventListener("error", handleErr);
    });
};

},{}],"7mFRk":[function(require,module,exports) {
const { relative  } = require("iso-url");
const map = {
    http: "ws",
    https: "wss"
};
const def = "ws";
module.exports = (url, location)=>relative(url, location, map, def);

},{"iso-url":"e9Sz0"}],"e9Sz0":[function(require,module,exports) {
"use strict";
const { URLWithLegacySupport , format , URLSearchParams , defaultBase  } = require("./src/url");
const relative = require("./src/relative");
module.exports = {
    URL: URLWithLegacySupport,
    URLSearchParams,
    format,
    relative,
    defaultBase
};

},{"./src/url":"jTIXj","./src/relative":"5yCit"}],"jTIXj":[function(require,module,exports) {
"use strict";
const isReactNative = typeof navigator !== "undefined" && navigator.product === "ReactNative";
function getDefaultBase() {
    if (isReactNative) return "http://localhost";
    // in some environments i.e. cloudflare workers location is not available
    if (!self.location) return "";
    return self.location.protocol + "//" + self.location.host;
}
const URL = self.URL;
const defaultBase = getDefaultBase();
class URLWithLegacySupport {
    constructor(url = "", base = defaultBase){
        this.super = new URL(url, base);
        this.path = this.pathname + this.search;
        this.auth = this.username && this.password ? this.username + ":" + this.password : null;
        this.query = this.search && this.search.startsWith("?") ? this.search.slice(1) : null;
    }
    get hash() {
        return this.super.hash;
    }
    get host() {
        return this.super.host;
    }
    get hostname() {
        return this.super.hostname;
    }
    get href() {
        return this.super.href;
    }
    get origin() {
        return this.super.origin;
    }
    get password() {
        return this.super.password;
    }
    get pathname() {
        return this.super.pathname;
    }
    get port() {
        return this.super.port;
    }
    get protocol() {
        return this.super.protocol;
    }
    get search() {
        return this.super.search;
    }
    get searchParams() {
        return this.super.searchParams;
    }
    get username() {
        return this.super.username;
    }
    set hash(hash) {
        this.super.hash = hash;
    }
    set host(host) {
        this.super.host = host;
    }
    set hostname(hostname) {
        this.super.hostname = hostname;
    }
    set href(href) {
        this.super.href = href;
    }
    set password(password) {
        this.super.password = password;
    }
    set pathname(pathname) {
        this.super.pathname = pathname;
    }
    set port(port) {
        this.super.port = port;
    }
    set protocol(protocol) {
        this.super.protocol = protocol;
    }
    set search(search) {
        this.super.search = search;
    }
    set username(username) {
        this.super.username = username;
    }
    /**
   * @param {any} o
   */ static createObjectURL(o) {
        return URL.createObjectURL(o);
    }
    /**
   * @param {string} o
   */ static revokeObjectURL(o) {
        URL.revokeObjectURL(o);
    }
    toJSON() {
        return this.super.toJSON();
    }
    toString() {
        return this.super.toString();
    }
    format() {
        return this.toString();
    }
}
/**
 * @param {string | import('url').UrlObject} obj
 */ function format(obj) {
    if (typeof obj === "string") {
        const url = new URL(obj);
        return url.toString();
    }
    if (!(obj instanceof URL)) {
        const userPass = // @ts-ignore its not supported in node but we normalise
        obj.username && obj.password ? `${obj.username}:${obj.password}@` : "";
        const auth = obj.auth ? obj.auth + "@" : "";
        const port = obj.port ? ":" + obj.port : "";
        const protocol = obj.protocol ? obj.protocol + "//" : "";
        const host = obj.host || "";
        const hostname = obj.hostname || "";
        const search = obj.search || (obj.query ? "?" + obj.query : "");
        const hash = obj.hash || "";
        const pathname = obj.pathname || "";
        // @ts-ignore - path is not supported in node but we normalise
        const path = obj.path || pathname + search;
        return `${protocol}${userPass || auth}${host || hostname + port}${path}${hash}`;
    }
}
module.exports = {
    URLWithLegacySupport,
    URLSearchParams: self.URLSearchParams,
    defaultBase,
    format
};

},{}],"5yCit":[function(require,module,exports) {
"use strict";
const { URLWithLegacySupport , format  } = require("./url");
/**
 * @param {string | undefined} url
 * @param {any} [location]
 * @param {any} [protocolMap]
 * @param {any} [defaultProtocol]
 */ module.exports = (url, location = {}, protocolMap = {}, defaultProtocol)=>{
    let protocol = location.protocol ? location.protocol.replace(":", "") : "http";
    // Check protocol map
    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ":";
    let urlParsed;
    try {
        urlParsed = new URLWithLegacySupport(url);
    } catch (err) {
        urlParsed = {};
    }
    const base = Object.assign({}, location, {
        protocol: protocol || urlParsed.protocol,
        host: location.host || urlParsed.host
    });
    return new URLWithLegacySupport(url, format(base)).toString();
};

},{"./url":"jTIXj"}],"kzrTO":[function(require,module,exports) {
const { Multiaddr  } = require("multiaddr");
const reduceValue = (_, v)=>v;
const tcpUri = (str, port, parts, opts)=>{
    // return tcp when explicitly requested
    if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`;
    // check if tcp is the last protocol in multiaddr
    let protocol = "tcp";
    let explicitPort = `:${port}`;
    const last = parts[parts.length - 1];
    if (last.protocol === "tcp") {
        // assume http and produce clean urls
        protocol = port === "443" ? "https" : "http";
        explicitPort = port === "443" || port === "80" ? "" : explicitPort;
    }
    return `${protocol}://${str}${explicitPort}`;
};
const Reducers = {
    ip4: reduceValue,
    ip6: (str, content, i, parts)=>parts.length === 1 && parts[0].protocol === "ip6" ? content : `[${content}]`,
    tcp: (str, content, i, parts, opts)=>parts.some((p)=>[
                "http",
                "https",
                "ws",
                "wss"
            ].includes(p.protocol)) ? `${str}:${content}` : tcpUri(str, content, parts, opts),
    udp: (str, content)=>`udp://${str}:${content}`,
    dnsaddr: reduceValue,
    dns4: reduceValue,
    dns6: reduceValue,
    ipfs: (str, content)=>`${str}/ipfs/${content}`,
    p2p: (str, content)=>`${str}/p2p/${content}`,
    http: (str)=>`http://${str}`,
    https: (str)=>`https://${str}`,
    ws: (str)=>`ws://${str}`,
    wss: (str)=>`wss://${str}`,
    "p2p-websocket-star": (str)=>`${str}/p2p-websocket-star`,
    "p2p-webrtc-star": (str)=>`${str}/p2p-webrtc-star`,
    "p2p-webrtc-direct": (str)=>`${str}/p2p-webrtc-direct`
};
module.exports = (multiaddr, opts)=>{
    const ma = new Multiaddr(multiaddr);
    const parts1 = multiaddr.toString().split("/").slice(1);
    return ma.tuples().map((tuple)=>({
            protocol: parts1.shift(),
            content: tuple[1] ? parts1.shift() : null
        })).reduce((str, part, i, parts)=>{
        const reduce = Reducers[part.protocol];
        if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`);
        return reduce(str, part.content, i, parts, opts);
    }, "");
};

},{"multiaddr":"dOMJu"}],"ceCIz":[function(require,module,exports) {
"use strict";
var process = require("process");
const isElectron = require("is-electron");
const IS_ENV_WITH_DOM = typeof window === "object" && typeof document === "object" && document.nodeType === 9;
// @ts-ignore
const IS_ELECTRON = isElectron();
const IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON;
const IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM;
const IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM;
const IS_NODE = typeof process !== "undefined" && typeof process.release !== "undefined" && process.release.name === "node" && !IS_ELECTRON;
// @ts-ignore - we either ignore worker scope or dom scope
const IS_WEBWORKER = typeof importScripts === "function" && typeof self !== "undefined" && typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
const IS_TEST = typeof process !== "undefined" && typeof process.env !== "undefined" && false;
const IS_REACT_NATIVE = typeof navigator !== "undefined" && navigator.product === "ReactNative";
module.exports = {
    isTest: IS_TEST,
    isElectron: IS_ELECTRON,
    isElectronMain: IS_ELECTRON_MAIN,
    isElectronRenderer: IS_ELECTRON_RENDERER,
    isNode: IS_NODE,
    /**
   * Detects browser main thread  **NOT** web worker or service worker
   */ isBrowser: IS_BROWSER,
    isWebWorker: IS_WEBWORKER,
    isEnvWithDom: IS_ENV_WITH_DOM,
    isReactNative: IS_REACT_NATIVE
};

},{"process":"d5jf4","is-electron":"bGmBa"}],"8LFN9":[function(require,module,exports) {
"use strict";
module.exports = function() {
    throw new Error("WebSocket Servers can not be created in the browser!");
};

},{}],"1hjOK":[function(require,module,exports) {
"use strict";
const abortable = require("abortable-iterator");
const { CLOSE_TIMEOUT  } = require("./constants");
const toMultiaddr = require("libp2p-utils/src/ip-port-to-multiaddr");
const pTimeout = require("p-timeout");
const debug = require("debug");
const log = debug("libp2p:websockets:socket");
log.error = debug("libp2p:websockets:socket:error");
// Convert a stream into a MultiaddrConnection
// https://github.com/libp2p/interface-transport#multiaddrconnection
module.exports = (stream, options = {})=>{
    const maConn = {
        async sink (source) {
            if (options.signal) source = abortable(source, options.signal);
            try {
                await stream.sink(async function*() {
                    for await (const chunk of source)// Convert BufferList to Buffer
                    yield chunk instanceof Uint8Array ? chunk : chunk.slice();
                }());
            } catch (err) {
                if (err.type !== "aborted") log.error(err);
            }
        },
        source: options.signal ? abortable(stream.source, options.signal) : stream.source,
        conn: stream,
        localAddr: options.localAddr || (stream.localAddress && stream.localPort ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),
        // If the remote address was passed, use it - it may have the peer ID encapsulated
        remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),
        timeline: {
            open: Date.now()
        },
        async close () {
            const start = Date.now();
            try {
                await pTimeout(stream.close(), CLOSE_TIMEOUT);
            } catch (err) {
                const { host , port  } = maConn.remoteAddr.toOptions();
                log("timeout closing stream to %s:%s after %dms, destroying it manually", host, port, Date.now() - start);
                stream.destroy();
            } finally{
                maConn.timeline.close = Date.now();
            }
        }
    };
    stream.socket.once && stream.socket.once("close", ()=>{
        // In instances where `close` was not explicitly called,
        // such as an iterable stream ending, ensure we have set the close
        // timeline
        if (!maConn.timeline.close) maConn.timeline.close = Date.now();
    });
    return maConn;
};

},{"abortable-iterator":"jIHDo","./constants":"kRteu","libp2p-utils/src/ip-port-to-multiaddr":"hbYki","p-timeout":"2j2Zi","debug":"l0oUb"}],"kRteu":[function(require,module,exports) {
"use strict";
// p2p multi-address code
exports.CODE_P2P = 421;
exports.CODE_CIRCUIT = 290;
exports.CODE_TCP = 6;
exports.CODE_WS = 477;
exports.CODE_WSS = 478;
// Time to wait for a connection to close gracefully before destroying it manually
exports.CLOSE_TIMEOUT = 2000;

},{}],"gHrIk":[function(require,module,exports) {
"use strict";
const mafmt = require("mafmt");
const { CODE_CIRCUIT , CODE_P2P , CODE_TCP , CODE_WS , CODE_WSS  } = require("./constants");
module.exports = {
    all: (multiaddrs)=>multiaddrs.filter((ma)=>{
            if (ma.protoCodes().includes(CODE_CIRCUIT)) return false;
            const testMa = ma.decapsulateCode(CODE_P2P);
            return mafmt.WebSockets.matches(testMa) || mafmt.WebSocketsSecure.matches(testMa);
        }),
    dnsWss: (multiaddrs)=>multiaddrs.filter((ma)=>{
            if (ma.protoCodes().includes(CODE_CIRCUIT)) return false;
            const testMa = ma.decapsulateCode(CODE_P2P);
            return mafmt.WebSocketsSecure.matches(testMa) && mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));
        }),
    dnsWsOrWss: (multiaddrs)=>multiaddrs.filter((ma)=>{
            if (ma.protoCodes().includes(CODE_CIRCUIT)) return false;
            const testMa = ma.decapsulateCode(CODE_P2P);
            // WS
            if (mafmt.WebSockets.matches(testMa)) return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS));
            // WSS
            return mafmt.WebSocketsSecure.matches(testMa) && mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));
        })
};

},{"mafmt":"04arZ","./constants":"kRteu"}],"kcIgt":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NOISE = void 0;
const noise_1 = require("./noise");
__exportStar(require("./noise"), exports);
/**
 * Default configuration, it will generate new noise static key and enable noise pipes (IK handshake).
 */ exports.NOISE = new noise_1.Noise();

},{"./noise":"1O6B1"}],"1O6B1":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Noise = void 0;
const x25519 = __importStar(require("@stablelib/x25519"));
const buffer_1 = require("buffer");
const it_pb_rpc_1 = __importDefault(require("it-pb-rpc"));
const duplex_1 = __importDefault(require("it-pair/duplex"));
const it_buffer_1 = __importDefault(require("it-buffer"));
const it_pipe_1 = __importDefault(require("it-pipe"));
const it_length_prefixed_1 = require("it-length-prefixed");
const handshake_xx_1 = require("./handshake-xx");
const handshake_ik_1 = require("./handshake-ik");
const handshake_xx_fallback_1 = require("./handshake-xx-fallback");
const utils_1 = require("./utils");
const encoder_1 = require("./encoder");
const crypto_1 = require("./crypto");
const keycache_1 = require("./keycache");
const logger_1 = require("./logger");
const constants_1 = require("./constants");
class Noise {
    /**
     *
     * @param {bytes} staticNoiseKey - x25519 private key, reuse for faster handshakes
     * @param {bytes} earlyData
     */ constructor(staticNoiseKey, earlyData){
        this.protocol = "/noise";
        this.prologue = buffer_1.Buffer.alloc(0);
        this.earlyData = earlyData !== null && earlyData !== void 0 ? earlyData : buffer_1.Buffer.alloc(0);
        // disabled until properly specked
        this.useNoisePipes = false;
        if (staticNoiseKey) {
            // accepts x25519 private key of length 32
            const keyPair = x25519.generateKeyPairFromSeed(staticNoiseKey);
            this.staticKeys = {
                privateKey: buffer_1.Buffer.from(keyPair.secretKey.buffer, keyPair.secretKey.byteOffset, keyPair.secretKey.length),
                publicKey: buffer_1.Buffer.from(keyPair.publicKey.buffer, keyPair.publicKey.byteOffset, keyPair.publicKey.length)
            };
        } else this.staticKeys = utils_1.generateKeypair();
    }
    /**
     * Encrypt outgoing data to the remote party (handshake as initiator)
     *
     * @param {PeerId} localPeer - PeerId of the receiving peer
     * @param {any} connection - streaming iterable duplex that will be encrypted
     * @param {PeerId} remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.
     * @returns {Promise<SecureOutbound>}
     */ async secureOutbound(localPeer, connection, remotePeer) {
        const wrappedConnection = it_pb_rpc_1.default(connection, {
            lengthEncoder: encoder_1.uint16BEEncode,
            lengthDecoder: encoder_1.uint16BEDecode,
            maxDataLength: constants_1.NOISE_MSG_MAX_LENGTH_BYTES
        });
        const handshake = await this.performHandshake({
            connection: wrappedConnection,
            isInitiator: true,
            localPeer,
            remotePeer
        });
        const conn = await this.createSecureConnection(wrappedConnection, handshake);
        return {
            conn,
            remoteEarlyData: handshake.remoteEarlyData,
            remotePeer: handshake.remotePeer
        };
    }
    /**
     * Decrypt incoming data (handshake as responder).
     *
     * @param {PeerId} localPeer - PeerId of the receiving peer.
     * @param {any} connection - streaming iterable duplex that will be encryption.
     * @param {PeerId} remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.
     * @returns {Promise<SecureOutbound>}
     */ async secureInbound(localPeer, connection, remotePeer) {
        const wrappedConnection = it_pb_rpc_1.default(connection, {
            lengthEncoder: encoder_1.uint16BEEncode,
            lengthDecoder: encoder_1.uint16BEDecode,
            maxDataLength: constants_1.NOISE_MSG_MAX_LENGTH_BYTES
        });
        const handshake = await this.performHandshake({
            connection: wrappedConnection,
            isInitiator: false,
            localPeer,
            remotePeer
        });
        const conn = await this.createSecureConnection(wrappedConnection, handshake);
        return {
            conn,
            remoteEarlyData: handshake.remoteEarlyData,
            remotePeer: handshake.remotePeer
        };
    }
    /**
     * If Noise pipes supported, tries IK handshake first with XX as fallback if it fails.
     * If noise pipes disabled or remote peer static key is unknown, use XX.
     *
     * @param {HandshakeParams} params
     */ async performHandshake(params) {
        var _a;
        const payload = await utils_1.getPayload(params.localPeer, this.staticKeys.publicKey, this.earlyData);
        let tryIK = this.useNoisePipes;
        if (params.isInitiator && keycache_1.KeyCache.load(params.remotePeer) === null) // if we are initiator and remote static key is unknown, don't try IK
        tryIK = false;
        // Try IK if acting as responder or initiator that has remote's static key.
        if (tryIK) {
            // Try IK first
            const { remotePeer , connection , isInitiator  } = params;
            const ikHandshake = new handshake_ik_1.IKHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, // safe to cast as we did checks
            (_a = keycache_1.KeyCache.load(params.remotePeer)) !== null && _a !== void 0 ? _a : buffer_1.Buffer.alloc(32), remotePeer);
            try {
                return await this.performIKHandshake(ikHandshake);
            } catch (e) {
                // IK failed, go to XX fallback
                let ephemeralKeys;
                if (params.isInitiator) ephemeralKeys = ikHandshake.getLocalEphemeralKeys();
                return await this.performXXFallbackHandshake(params, payload, e.initialMsg, ephemeralKeys);
            }
        } else // run XX handshake
        return await this.performXXHandshake(params, payload);
    }
    async performXXFallbackHandshake(params, payload, initialMsg, ephemeralKeys) {
        const { isInitiator , remotePeer , connection  } = params;
        const handshake = new handshake_xx_fallback_1.XXFallbackHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, initialMsg, remotePeer, ephemeralKeys);
        try {
            await handshake.propose();
            await handshake.exchange();
            await handshake.finish();
        } catch (e) {
            logger_1.logger(e);
            const err = e;
            throw new Error(`Error occurred during XX Fallback handshake: ${err.message}`);
        }
        return handshake;
    }
    async performXXHandshake(params, payload) {
        const { isInitiator , remotePeer , connection  } = params;
        const handshake = new handshake_xx_1.XXHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, remotePeer);
        try {
            await handshake.propose();
            await handshake.exchange();
            await handshake.finish();
            if (this.useNoisePipes && handshake.remotePeer) keycache_1.KeyCache.store(handshake.remotePeer, handshake.getRemoteStaticKey());
        } catch (e) {
            const err = e;
            throw new Error(`Error occurred during XX handshake: ${err.message}`);
        }
        return handshake;
    }
    async performIKHandshake(handshake) {
        await handshake.stage0();
        await handshake.stage1();
        return handshake;
    }
    async createSecureConnection(connection, handshake) {
        // Create encryption box/unbox wrapper
        const [secure, user] = duplex_1.default();
        const network = connection.unwrap();
        await it_pipe_1.default(secure, it_buffer_1.default, crypto_1.encryptStream(handshake), it_length_prefixed_1.encode({
            lengthEncoder: encoder_1.uint16BEEncode
        }), network, it_length_prefixed_1.decode({
            lengthDecoder: encoder_1.uint16BEDecode
        }), it_buffer_1.default, crypto_1.decryptStream(handshake), secure // pipe to the wrapper
        );
        return user;
    }
}
exports.Noise = Noise;

},{"@stablelib/x25519":"5xoxU","buffer":"fCgem","it-pb-rpc":"kWayi","it-pair/duplex":"jqOcO","it-buffer":"dHO1t","it-pipe":"jkWle","it-length-prefixed":"31lGp","./handshake-xx":"82hPM","./handshake-ik":"e5aYB","./handshake-xx-fallback":"7ICRn","./utils":"1bkCP","./encoder":"9nJEO","./crypto":"4xDvP","./keycache":"3iLXr","./logger":"2se0g","./constants":"hp99V"}],"5xoxU":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Package x25519 implements X25519 key agreement.
 */ var random_1 = require("@stablelib/random");
var wipe_1 = require("@stablelib/wipe");
exports.PUBLIC_KEY_LENGTH = 32;
exports.SECRET_KEY_LENGTH = 32;
exports.SHARED_KEY_LENGTH = 32;
// Returns new zero-filled 16-element GF (Float64Array).
// If passed an array of numbers, prefills the returned
// array with them.
//
// We use Float64Array, because we need 48-bit numbers
// for this implementation.
function gf(init) {
    var r = new Float64Array(16);
    if (init) for(var i = 0; i < init.length; i++)r[i] = init[i];
    return r;
}
// Base point.
var _9 = new Uint8Array(32);
_9[0] = 9;
var _121665 = gf([
    0xdb41,
    1
]);
function car25519(o) {
    var c = 1;
    for(var i = 0; i < 16; i++){
        var v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
    }
    o[0] += c - 1 + 37 * (c - 1);
}
function sel25519(p, q, b) {
    var c = ~(b - 1);
    for(var i = 0; i < 16; i++){
        var t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
    }
}
function pack25519(o, n) {
    var m = gf();
    var t = gf();
    for(var i = 0; i < 16; i++)t[i] = n[i];
    car25519(t);
    car25519(t);
    car25519(t);
    for(var j = 0; j < 2; j++){
        m[0] = t[0] - 0xffed;
        for(var i = 1; i < 15; i++){
            m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
            m[i - 1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
        var b = m[15] >> 16 & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1 - b);
    }
    for(var i = 0; i < 16; i++){
        o[2 * i] = t[i] & 0xff;
        o[2 * i + 1] = t[i] >> 8;
    }
}
function unpack25519(o, n) {
    for(var i = 0; i < 16; i++)o[i] = n[2 * i] + (n[2 * i + 1] << 8);
    o[15] &= 0x7fff;
}
function add(o, a, b) {
    for(var i = 0; i < 16; i++)o[i] = a[i] + b[i];
}
function sub(o, a, b) {
    for(var i = 0; i < 16; i++)o[i] = a[i] - b[i];
}
function mul(o, a, b) {
    var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
    v = a[0];
    t0 += v * b0;
    t1 += v * b1;
    t2 += v * b2;
    t3 += v * b3;
    t4 += v * b4;
    t5 += v * b5;
    t6 += v * b6;
    t7 += v * b7;
    t8 += v * b8;
    t9 += v * b9;
    t10 += v * b10;
    t11 += v * b11;
    t12 += v * b12;
    t13 += v * b13;
    t14 += v * b14;
    t15 += v * b15;
    v = a[1];
    t1 += v * b0;
    t2 += v * b1;
    t3 += v * b2;
    t4 += v * b3;
    t5 += v * b4;
    t6 += v * b5;
    t7 += v * b6;
    t8 += v * b7;
    t9 += v * b8;
    t10 += v * b9;
    t11 += v * b10;
    t12 += v * b11;
    t13 += v * b12;
    t14 += v * b13;
    t15 += v * b14;
    t16 += v * b15;
    v = a[2];
    t2 += v * b0;
    t3 += v * b1;
    t4 += v * b2;
    t5 += v * b3;
    t6 += v * b4;
    t7 += v * b5;
    t8 += v * b6;
    t9 += v * b7;
    t10 += v * b8;
    t11 += v * b9;
    t12 += v * b10;
    t13 += v * b11;
    t14 += v * b12;
    t15 += v * b13;
    t16 += v * b14;
    t17 += v * b15;
    v = a[3];
    t3 += v * b0;
    t4 += v * b1;
    t5 += v * b2;
    t6 += v * b3;
    t7 += v * b4;
    t8 += v * b5;
    t9 += v * b6;
    t10 += v * b7;
    t11 += v * b8;
    t12 += v * b9;
    t13 += v * b10;
    t14 += v * b11;
    t15 += v * b12;
    t16 += v * b13;
    t17 += v * b14;
    t18 += v * b15;
    v = a[4];
    t4 += v * b0;
    t5 += v * b1;
    t6 += v * b2;
    t7 += v * b3;
    t8 += v * b4;
    t9 += v * b5;
    t10 += v * b6;
    t11 += v * b7;
    t12 += v * b8;
    t13 += v * b9;
    t14 += v * b10;
    t15 += v * b11;
    t16 += v * b12;
    t17 += v * b13;
    t18 += v * b14;
    t19 += v * b15;
    v = a[5];
    t5 += v * b0;
    t6 += v * b1;
    t7 += v * b2;
    t8 += v * b3;
    t9 += v * b4;
    t10 += v * b5;
    t11 += v * b6;
    t12 += v * b7;
    t13 += v * b8;
    t14 += v * b9;
    t15 += v * b10;
    t16 += v * b11;
    t17 += v * b12;
    t18 += v * b13;
    t19 += v * b14;
    t20 += v * b15;
    v = a[6];
    t6 += v * b0;
    t7 += v * b1;
    t8 += v * b2;
    t9 += v * b3;
    t10 += v * b4;
    t11 += v * b5;
    t12 += v * b6;
    t13 += v * b7;
    t14 += v * b8;
    t15 += v * b9;
    t16 += v * b10;
    t17 += v * b11;
    t18 += v * b12;
    t19 += v * b13;
    t20 += v * b14;
    t21 += v * b15;
    v = a[7];
    t7 += v * b0;
    t8 += v * b1;
    t9 += v * b2;
    t10 += v * b3;
    t11 += v * b4;
    t12 += v * b5;
    t13 += v * b6;
    t14 += v * b7;
    t15 += v * b8;
    t16 += v * b9;
    t17 += v * b10;
    t18 += v * b11;
    t19 += v * b12;
    t20 += v * b13;
    t21 += v * b14;
    t22 += v * b15;
    v = a[8];
    t8 += v * b0;
    t9 += v * b1;
    t10 += v * b2;
    t11 += v * b3;
    t12 += v * b4;
    t13 += v * b5;
    t14 += v * b6;
    t15 += v * b7;
    t16 += v * b8;
    t17 += v * b9;
    t18 += v * b10;
    t19 += v * b11;
    t20 += v * b12;
    t21 += v * b13;
    t22 += v * b14;
    t23 += v * b15;
    v = a[9];
    t9 += v * b0;
    t10 += v * b1;
    t11 += v * b2;
    t12 += v * b3;
    t13 += v * b4;
    t14 += v * b5;
    t15 += v * b6;
    t16 += v * b7;
    t17 += v * b8;
    t18 += v * b9;
    t19 += v * b10;
    t20 += v * b11;
    t21 += v * b12;
    t22 += v * b13;
    t23 += v * b14;
    t24 += v * b15;
    v = a[10];
    t10 += v * b0;
    t11 += v * b1;
    t12 += v * b2;
    t13 += v * b3;
    t14 += v * b4;
    t15 += v * b5;
    t16 += v * b6;
    t17 += v * b7;
    t18 += v * b8;
    t19 += v * b9;
    t20 += v * b10;
    t21 += v * b11;
    t22 += v * b12;
    t23 += v * b13;
    t24 += v * b14;
    t25 += v * b15;
    v = a[11];
    t11 += v * b0;
    t12 += v * b1;
    t13 += v * b2;
    t14 += v * b3;
    t15 += v * b4;
    t16 += v * b5;
    t17 += v * b6;
    t18 += v * b7;
    t19 += v * b8;
    t20 += v * b9;
    t21 += v * b10;
    t22 += v * b11;
    t23 += v * b12;
    t24 += v * b13;
    t25 += v * b14;
    t26 += v * b15;
    v = a[12];
    t12 += v * b0;
    t13 += v * b1;
    t14 += v * b2;
    t15 += v * b3;
    t16 += v * b4;
    t17 += v * b5;
    t18 += v * b6;
    t19 += v * b7;
    t20 += v * b8;
    t21 += v * b9;
    t22 += v * b10;
    t23 += v * b11;
    t24 += v * b12;
    t25 += v * b13;
    t26 += v * b14;
    t27 += v * b15;
    v = a[13];
    t13 += v * b0;
    t14 += v * b1;
    t15 += v * b2;
    t16 += v * b3;
    t17 += v * b4;
    t18 += v * b5;
    t19 += v * b6;
    t20 += v * b7;
    t21 += v * b8;
    t22 += v * b9;
    t23 += v * b10;
    t24 += v * b11;
    t25 += v * b12;
    t26 += v * b13;
    t27 += v * b14;
    t28 += v * b15;
    v = a[14];
    t14 += v * b0;
    t15 += v * b1;
    t16 += v * b2;
    t17 += v * b3;
    t18 += v * b4;
    t19 += v * b5;
    t20 += v * b6;
    t21 += v * b7;
    t22 += v * b8;
    t23 += v * b9;
    t24 += v * b10;
    t25 += v * b11;
    t26 += v * b12;
    t27 += v * b13;
    t28 += v * b14;
    t29 += v * b15;
    v = a[15];
    t15 += v * b0;
    t16 += v * b1;
    t17 += v * b2;
    t18 += v * b3;
    t19 += v * b4;
    t20 += v * b5;
    t21 += v * b6;
    t22 += v * b7;
    t23 += v * b8;
    t24 += v * b9;
    t25 += v * b10;
    t26 += v * b11;
    t27 += v * b12;
    t28 += v * b13;
    t29 += v * b14;
    t30 += v * b15;
    t0 += 38 * t16;
    t1 += 38 * t17;
    t2 += 38 * t18;
    t3 += 38 * t19;
    t4 += 38 * t20;
    t5 += 38 * t21;
    t6 += 38 * t22;
    t7 += 38 * t23;
    t8 += 38 * t24;
    t9 += 38 * t25;
    t10 += 38 * t26;
    t11 += 38 * t27;
    t12 += 38 * t28;
    t13 += 38 * t29;
    t14 += 38 * t30;
    // t15 left as is
    // first car
    c = 1;
    v = t0 + c + 65535;
    c = Math.floor(v / 65536);
    t0 = v - c * 65536;
    v = t1 + c + 65535;
    c = Math.floor(v / 65536);
    t1 = v - c * 65536;
    v = t2 + c + 65535;
    c = Math.floor(v / 65536);
    t2 = v - c * 65536;
    v = t3 + c + 65535;
    c = Math.floor(v / 65536);
    t3 = v - c * 65536;
    v = t4 + c + 65535;
    c = Math.floor(v / 65536);
    t4 = v - c * 65536;
    v = t5 + c + 65535;
    c = Math.floor(v / 65536);
    t5 = v - c * 65536;
    v = t6 + c + 65535;
    c = Math.floor(v / 65536);
    t6 = v - c * 65536;
    v = t7 + c + 65535;
    c = Math.floor(v / 65536);
    t7 = v - c * 65536;
    v = t8 + c + 65535;
    c = Math.floor(v / 65536);
    t8 = v - c * 65536;
    v = t9 + c + 65535;
    c = Math.floor(v / 65536);
    t9 = v - c * 65536;
    v = t10 + c + 65535;
    c = Math.floor(v / 65536);
    t10 = v - c * 65536;
    v = t11 + c + 65535;
    c = Math.floor(v / 65536);
    t11 = v - c * 65536;
    v = t12 + c + 65535;
    c = Math.floor(v / 65536);
    t12 = v - c * 65536;
    v = t13 + c + 65535;
    c = Math.floor(v / 65536);
    t13 = v - c * 65536;
    v = t14 + c + 65535;
    c = Math.floor(v / 65536);
    t14 = v - c * 65536;
    v = t15 + c + 65535;
    c = Math.floor(v / 65536);
    t15 = v - c * 65536;
    t0 += c - 1 + 37 * (c - 1);
    // second car
    c = 1;
    v = t0 + c + 65535;
    c = Math.floor(v / 65536);
    t0 = v - c * 65536;
    v = t1 + c + 65535;
    c = Math.floor(v / 65536);
    t1 = v - c * 65536;
    v = t2 + c + 65535;
    c = Math.floor(v / 65536);
    t2 = v - c * 65536;
    v = t3 + c + 65535;
    c = Math.floor(v / 65536);
    t3 = v - c * 65536;
    v = t4 + c + 65535;
    c = Math.floor(v / 65536);
    t4 = v - c * 65536;
    v = t5 + c + 65535;
    c = Math.floor(v / 65536);
    t5 = v - c * 65536;
    v = t6 + c + 65535;
    c = Math.floor(v / 65536);
    t6 = v - c * 65536;
    v = t7 + c + 65535;
    c = Math.floor(v / 65536);
    t7 = v - c * 65536;
    v = t8 + c + 65535;
    c = Math.floor(v / 65536);
    t8 = v - c * 65536;
    v = t9 + c + 65535;
    c = Math.floor(v / 65536);
    t9 = v - c * 65536;
    v = t10 + c + 65535;
    c = Math.floor(v / 65536);
    t10 = v - c * 65536;
    v = t11 + c + 65535;
    c = Math.floor(v / 65536);
    t11 = v - c * 65536;
    v = t12 + c + 65535;
    c = Math.floor(v / 65536);
    t12 = v - c * 65536;
    v = t13 + c + 65535;
    c = Math.floor(v / 65536);
    t13 = v - c * 65536;
    v = t14 + c + 65535;
    c = Math.floor(v / 65536);
    t14 = v - c * 65536;
    v = t15 + c + 65535;
    c = Math.floor(v / 65536);
    t15 = v - c * 65536;
    t0 += c - 1 + 37 * (c - 1);
    o[0] = t0;
    o[1] = t1;
    o[2] = t2;
    o[3] = t3;
    o[4] = t4;
    o[5] = t5;
    o[6] = t6;
    o[7] = t7;
    o[8] = t8;
    o[9] = t9;
    o[10] = t10;
    o[11] = t11;
    o[12] = t12;
    o[13] = t13;
    o[14] = t14;
    o[15] = t15;
}
function square(o, a) {
    mul(o, a, a);
}
function inv25519(o, inp) {
    var c = gf();
    for(var i = 0; i < 16; i++)c[i] = inp[i];
    for(var i = 253; i >= 0; i--){
        square(c, c);
        if (i !== 2 && i !== 4) mul(c, c, inp);
    }
    for(var i = 0; i < 16; i++)o[i] = c[i];
}
function scalarMult(n, p) {
    var z = new Uint8Array(32);
    var x = new Float64Array(80);
    var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
    for(var i = 0; i < 31; i++)z[i] = n[i];
    z[31] = n[31] & 127 | 64;
    z[0] &= 248;
    unpack25519(x, p);
    for(var i = 0; i < 16; i++)b[i] = x[i];
    a[0] = d[0] = 1;
    for(var i = 254; i >= 0; --i){
        var r = z[i >>> 3] >>> (i & 7) & 1;
        sel25519(a, b, r);
        sel25519(c, d, r);
        add(e, a, c);
        sub(a, a, c);
        add(c, b, d);
        sub(b, b, d);
        square(d, e);
        square(f, a);
        mul(a, c, a);
        mul(c, b, e);
        add(e, a, c);
        sub(a, a, c);
        square(b, a);
        sub(c, d, f);
        mul(a, c, _121665);
        add(a, a, d);
        mul(c, c, a);
        mul(a, d, f);
        mul(d, b, x);
        square(b, e);
        sel25519(a, b, r);
        sel25519(c, d, r);
    }
    for(var i = 0; i < 16; i++){
        x[i + 16] = a[i];
        x[i + 32] = c[i];
        x[i + 48] = b[i];
        x[i + 64] = d[i];
    }
    var x32 = x.subarray(32);
    var x16 = x.subarray(16);
    inv25519(x32, x32);
    mul(x16, x16, x32);
    var q = new Uint8Array(32);
    pack25519(q, x16);
    return q;
}
exports.scalarMult = scalarMult;
function scalarMultBase(n) {
    return scalarMult(n, _9);
}
exports.scalarMultBase = scalarMultBase;
function generateKeyPairFromSeed(seed) {
    if (seed.length !== exports.SECRET_KEY_LENGTH) throw new Error("x25519: seed must be " + exports.SECRET_KEY_LENGTH + " bytes");
    var secretKey = new Uint8Array(seed);
    var publicKey = scalarMultBase(secretKey);
    return {
        publicKey: publicKey,
        secretKey: secretKey
    };
}
exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
function generateKeyPair(prng) {
    var seed = random_1.randomBytes(32, prng);
    var result = generateKeyPairFromSeed(seed);
    wipe_1.wipe(seed);
    return result;
}
exports.generateKeyPair = generateKeyPair;
/**
 * Returns a shared key between our secret key and a peer's public key.
 *
 * Throws an error if the given keys are of wrong length.
 *
 * If rejectZero is true throws if the calculated shared key is all-zero.
 * From RFC 7748:
 *
 * > Protocol designers using Diffie-Hellman over the curves defined in
 * > this document must not assume "contributory behavior".  Specially,
 * > contributory behavior means that both parties' private keys
 * > contribute to the resulting shared key.  Since curve25519 and
 * > curve448 have cofactors of 8 and 4 (respectively), an input point of
 * > small order will eliminate any contribution from the other party's
 * > private key.  This situation can be detected by checking for the all-
 * > zero output, which implementations MAY do, as specified in Section 6.
 * > However, a large number of existing implementations do not do this.
 *
 * IMPORTANT: the returned key is a raw result of scalar multiplication.
 * To use it as a key material, hash it with a cryptographic hash function.
 */ function sharedKey(mySecretKey, theirPublicKey, rejectZero) {
    if (rejectZero === void 0) rejectZero = false;
    if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) throw new Error("X25519: incorrect secret key length");
    if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) throw new Error("X25519: incorrect public key length");
    var result = scalarMult(mySecretKey, theirPublicKey);
    if (rejectZero) {
        var zeros = 0;
        for(var i = 0; i < result.length; i++)zeros |= result[i];
        if (zeros === 0) throw new Error("X25519: invalid shared key");
    }
    return result;
}
exports.sharedKey = sharedKey;

},{"@stablelib/random":"9Qs60","@stablelib/wipe":"8owN2"}],"9Qs60":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var system_1 = require("./source/system");
var binary_1 = require("@stablelib/binary");
var wipe_1 = require("@stablelib/wipe");
exports.defaultRandomSource = new system_1.SystemRandomSource();
function randomBytes(length, prng) {
    if (prng === void 0) prng = exports.defaultRandomSource;
    return prng.randomBytes(length);
}
exports.randomBytes = randomBytes;
/**
 * Returns a uniformly random unsigned 32-bit integer.
 */ function randomUint32(prng) {
    if (prng === void 0) prng = exports.defaultRandomSource;
    // Generate 4-byte random buffer.
    var buf = randomBytes(4, prng);
    // Convert bytes from buffer into a 32-bit integer.
    // It's not important which byte order to use, since
    // the result is random.
    var result = binary_1.readUint32LE(buf);
    // Clean the buffer.
    wipe_1.wipe(buf);
    return result;
}
exports.randomUint32 = randomUint32;
/** 62 alphanumeric characters for default charset of randomString() */ var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
/**
 * Returns a uniform random string of the given length
 * with characters from the given charset.
 *
 * Charset must not have more than 256 characters.
 *
 * Default charset generates case-sensitive alphanumeric
 * strings (0-9, A-Z, a-z).
 */ function randomString(length, charset, prng) {
    if (charset === void 0) charset = ALPHANUMERIC;
    if (prng === void 0) prng = exports.defaultRandomSource;
    if (charset.length < 2) throw new Error("randomString charset is too short");
    if (charset.length > 256) throw new Error("randomString charset is too long");
    var out = "";
    var charsLen = charset.length;
    var maxByte = 256 - 256 % charsLen;
    while(length > 0){
        var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);
        for(var i = 0; i < buf.length && length > 0; i++){
            var randomByte = buf[i];
            if (randomByte < maxByte) {
                out += charset.charAt(randomByte % charsLen);
                length--;
            }
        }
        wipe_1.wipe(buf);
    }
    return out;
}
exports.randomString = randomString;
/**
 * Returns uniform random string containing at least the given
 * number of bits of entropy.
 *
 * For example, randomStringForEntropy(128) will return a 22-character
 * alphanumeric string, while randomStringForEntropy(128, "0123456789")
 * will return a 39-character numeric string, both will contain at
 * least 128 bits of entropy.
 *
 * Default charset generates case-sensitive alphanumeric
 * strings (0-9, A-Z, a-z).
 */ function randomStringForEntropy(bits, charset, prng) {
    if (charset === void 0) charset = ALPHANUMERIC;
    if (prng === void 0) prng = exports.defaultRandomSource;
    var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
    return randomString(length, charset, prng);
}
exports.randomStringForEntropy = randomStringForEntropy;

},{"./source/system":"1mwaP","@stablelib/binary":"92RWm","@stablelib/wipe":"8owN2"}],"1mwaP":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var browser_1 = require("./browser");
var node_1 = require("./node");
var SystemRandomSource = /** @class */ function() {
    function SystemRandomSource1() {
        this.isAvailable = false;
        this.name = "";
        // Try browser.
        this._source = new browser_1.BrowserRandomSource();
        if (this._source.isAvailable) {
            this.isAvailable = true;
            this.name = "Browser";
            return;
        }
        // If no browser source, try Node.
        this._source = new node_1.NodeRandomSource();
        if (this._source.isAvailable) {
            this.isAvailable = true;
            this.name = "Node";
            return;
        }
    // No sources, we're out of options.
    }
    SystemRandomSource1.prototype.randomBytes = function(length) {
        if (!this.isAvailable) throw new Error("System random byte generator is not available.");
        return this._source.randomBytes(length);
    };
    return SystemRandomSource1;
}();
exports.SystemRandomSource = SystemRandomSource;

},{"./browser":"1HoUi","./node":"5rdHt"}],"1HoUi":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var QUOTA = 65536;
var BrowserRandomSource = /** @class */ function() {
    function BrowserRandomSource1() {
        this.isAvailable = false;
        this.isInstantiated = false;
        var browserCrypto = typeof self !== "undefined" ? self.crypto || self.msCrypto // IE11 has msCrypto
         : null;
        if (browserCrypto && browserCrypto.getRandomValues) {
            this._crypto = browserCrypto;
            this.isAvailable = true;
            this.isInstantiated = true;
        }
    }
    BrowserRandomSource1.prototype.randomBytes = function(length) {
        if (!this.isAvailable || !this._crypto) throw new Error("Browser random byte generator is not available.");
        var out = new Uint8Array(length);
        for(var i = 0; i < out.length; i += QUOTA)this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
        return out;
    };
    return BrowserRandomSource1;
}();
exports.BrowserRandomSource = BrowserRandomSource;

},{}],"5rdHt":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var wipe_1 = require("@stablelib/wipe");
var NodeRandomSource = /** @class */ function() {
    function NodeRandomSource1() {
        this.isAvailable = false;
        this.isInstantiated = false;
        var nodeCrypto = require("crypto");
        if (nodeCrypto && nodeCrypto.randomBytes) {
            this._crypto = nodeCrypto;
            this.isAvailable = true;
            this.isInstantiated = true;
        }
    }
    NodeRandomSource1.prototype.randomBytes = function(length) {
        if (!this.isAvailable || !this._crypto) throw new Error("Node.js random byte generator is not available.");
        // Get random bytes (result is Buffer).
        var buffer = this._crypto.randomBytes(length);
        // Make sure we got the length that we requested.
        if (buffer.length !== length) throw new Error("NodeRandomSource: got fewer bytes than requested");
        // Allocate output array.
        var out = new Uint8Array(length);
        // Copy bytes from buffer to output.
        for(var i = 0; i < out.length; i++)out[i] = buffer[i];
        // Cleanup.
        wipe_1.wipe(buffer);
        return out;
    };
    return NodeRandomSource1;
}();
exports.NodeRandomSource = NodeRandomSource;

},{"@stablelib/wipe":"8owN2","crypto":"jhUEF"}],"8owN2":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Sets all values in the given array to zero and returns it.
 *
 * The fact that it sets bytes to zero can be relied on.
 *
 * There is no guarantee that this function makes data disappear from memory,
 * as runtime implementation can, for example, have copying garbage collector
 * that will make copies of sensitive data before we wipe it. Or that an
 * operating system will write our data to swap or sleep image. Another thing
 * is that an optimizing compiler can remove calls to this function or make it
 * no-op. There's nothing we can do with it, so we just do our best and hope
 * that everything will be okay and good will triumph over evil.
 */ function wipe(array) {
    // Right now it's similar to array.fill(0). If it turns
    // out that runtimes optimize this call away, maybe
    // we can try something else.
    for(var i = 0; i < array.length; i++)array[i] = 0;
    return array;
}
exports.wipe = wipe;

},{}],"92RWm":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Package binary provides functions for encoding and decoding numbers in byte arrays.
 */ var int_1 = require("@stablelib/int");
// TODO(dchest): add asserts for correct value ranges and array offsets.
/**
 * Reads 2 bytes from array starting at offset as big-endian
 * signed 16-bit integer and returns it.
 */ function readInt16BE(array, offset) {
    if (offset === void 0) offset = 0;
    return (array[offset + 0] << 8 | array[offset + 1]) << 16 >> 16;
}
exports.readInt16BE = readInt16BE;
/**
 * Reads 2 bytes from array starting at offset as big-endian
 * unsigned 16-bit integer and returns it.
 */ function readUint16BE(array, offset) {
    if (offset === void 0) offset = 0;
    return (array[offset + 0] << 8 | array[offset + 1]) >>> 0;
}
exports.readUint16BE = readUint16BE;
/**
 * Reads 2 bytes from array starting at offset as little-endian
 * signed 16-bit integer and returns it.
 */ function readInt16LE(array, offset) {
    if (offset === void 0) offset = 0;
    return (array[offset + 1] << 8 | array[offset]) << 16 >> 16;
}
exports.readInt16LE = readInt16LE;
/**
 * Reads 2 bytes from array starting at offset as little-endian
 * unsigned 16-bit integer and returns it.
 */ function readUint16LE(array, offset) {
    if (offset === void 0) offset = 0;
    return (array[offset + 1] << 8 | array[offset]) >>> 0;
}
exports.readUint16LE = readUint16LE;
/**
 * Writes 2-byte big-endian representation of 16-bit unsigned
 * value to byte array starting at offset.
 *
 * If byte array is not given, creates a new 2-byte one.
 *
 * Returns the output byte array.
 */ function writeUint16BE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(2);
    if (offset === void 0) offset = 0;
    out[offset + 0] = value >>> 8;
    out[offset + 1] = value >>> 0;
    return out;
}
exports.writeUint16BE = writeUint16BE;
exports.writeInt16BE = writeUint16BE;
/**
 * Writes 2-byte little-endian representation of 16-bit unsigned
 * value to array starting at offset.
 *
 * If byte array is not given, creates a new 2-byte one.
 *
 * Returns the output byte array.
 */ function writeUint16LE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(2);
    if (offset === void 0) offset = 0;
    out[offset + 0] = value >>> 0;
    out[offset + 1] = value >>> 8;
    return out;
}
exports.writeUint16LE = writeUint16LE;
exports.writeInt16LE = writeUint16LE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * signed 32-bit integer and returns it.
 */ function readInt32BE(array, offset) {
    if (offset === void 0) offset = 0;
    return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];
}
exports.readInt32BE = readInt32BE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * unsigned 32-bit integer and returns it.
 */ function readUint32BE(array, offset) {
    if (offset === void 0) offset = 0;
    return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;
}
exports.readUint32BE = readUint32BE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * signed 32-bit integer and returns it.
 */ function readInt32LE(array, offset) {
    if (offset === void 0) offset = 0;
    return array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset];
}
exports.readInt32LE = readInt32LE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * unsigned 32-bit integer and returns it.
 */ function readUint32LE(array, offset) {
    if (offset === void 0) offset = 0;
    return (array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset]) >>> 0;
}
exports.readUint32LE = readUint32LE;
/**
 * Writes 4-byte big-endian representation of 32-bit unsigned
 * value to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */ function writeUint32BE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(4);
    if (offset === void 0) offset = 0;
    out[offset + 0] = value >>> 24;
    out[offset + 1] = value >>> 16;
    out[offset + 2] = value >>> 8;
    out[offset + 3] = value >>> 0;
    return out;
}
exports.writeUint32BE = writeUint32BE;
exports.writeInt32BE = writeUint32BE;
/**
 * Writes 4-byte little-endian representation of 32-bit unsigned
 * value to array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */ function writeUint32LE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(4);
    if (offset === void 0) offset = 0;
    out[offset + 0] = value >>> 0;
    out[offset + 1] = value >>> 8;
    out[offset + 2] = value >>> 16;
    out[offset + 3] = value >>> 24;
    return out;
}
exports.writeUint32LE = writeUint32LE;
exports.writeInt32LE = writeUint32LE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * signed 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports exact
 * numbers in range -9007199254740991 to 9007199254740991.
 * If the number stored in the byte array is outside this range,
 * the result is not exact.
 */ function readInt64BE(array, offset) {
    if (offset === void 0) offset = 0;
    var hi = readInt32BE(array, offset);
    var lo = readInt32BE(array, offset + 4);
    return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;
}
exports.readInt64BE = readInt64BE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * unsigned 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
 */ function readUint64BE(array, offset) {
    if (offset === void 0) offset = 0;
    var hi = readUint32BE(array, offset);
    var lo = readUint32BE(array, offset + 4);
    return hi * 0x100000000 + lo;
}
exports.readUint64BE = readUint64BE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * signed 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports exact
 * numbers in range -9007199254740991 to 9007199254740991.
 * If the number stored in the byte array is outside this range,
 * the result is not exact.
 */ function readInt64LE(array, offset) {
    if (offset === void 0) offset = 0;
    var lo = readInt32LE(array, offset);
    var hi = readInt32LE(array, offset + 4);
    return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;
}
exports.readInt64LE = readInt64LE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * unsigned 64-bit integer and returns it.
 *
 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
 */ function readUint64LE(array, offset) {
    if (offset === void 0) offset = 0;
    var lo = readUint32LE(array, offset);
    var hi = readUint32LE(array, offset + 4);
    return hi * 0x100000000 + lo;
}
exports.readUint64LE = readUint64LE;
/**
 * Writes 8-byte big-endian representation of 64-bit unsigned
 * value to byte array starting at offset.
 *
 * Due to JavaScript limitation, supports values up to 2^53-1.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */ function writeUint64BE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(8);
    if (offset === void 0) offset = 0;
    writeUint32BE(value / 0x100000000 >>> 0, out, offset);
    writeUint32BE(value >>> 0, out, offset + 4);
    return out;
}
exports.writeUint64BE = writeUint64BE;
exports.writeInt64BE = writeUint64BE;
/**
 * Writes 8-byte little-endian representation of 64-bit unsigned
 * value to byte array starting at offset.
 *
 * Due to JavaScript limitation, supports values up to 2^53-1.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */ function writeUint64LE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(8);
    if (offset === void 0) offset = 0;
    writeUint32LE(value >>> 0, out, offset);
    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);
    return out;
}
exports.writeUint64LE = writeUint64LE;
exports.writeInt64LE = writeUint64LE;
/**
 * Reads bytes from array starting at offset as big-endian
 * unsigned bitLen-bit integer and returns it.
 *
 * Supports bit lengths divisible by 8, up to 48.
 */ function readUintBE(bitLength, array, offset) {
    if (offset === void 0) offset = 0;
    // TODO(dchest): implement support for bitLengths non-divisible by 8
    if (bitLength % 8 !== 0) throw new Error("readUintBE supports only bitLengths divisible by 8");
    if (bitLength / 8 > array.length - offset) throw new Error("readUintBE: array is too short for the given bitLength");
    var result = 0;
    var mul = 1;
    for(var i = bitLength / 8 + offset - 1; i >= offset; i--){
        result += array[i] * mul;
        mul *= 256;
    }
    return result;
}
exports.readUintBE = readUintBE;
/**
 * Reads bytes from array starting at offset as little-endian
 * unsigned bitLen-bit integer and returns it.
 *
 * Supports bit lengths divisible by 8, up to 48.
 */ function readUintLE(bitLength, array, offset) {
    if (offset === void 0) offset = 0;
    // TODO(dchest): implement support for bitLengths non-divisible by 8
    if (bitLength % 8 !== 0) throw new Error("readUintLE supports only bitLengths divisible by 8");
    if (bitLength / 8 > array.length - offset) throw new Error("readUintLE: array is too short for the given bitLength");
    var result = 0;
    var mul = 1;
    for(var i = offset; i < offset + bitLength / 8; i++){
        result += array[i] * mul;
        mul *= 256;
    }
    return result;
}
exports.readUintLE = readUintLE;
/**
 * Writes a big-endian representation of bitLen-bit unsigned
 * value to array starting at offset.
 *
 * Supports bit lengths divisible by 8, up to 48.
 *
 * If byte array is not given, creates a new one.
 *
 * Returns the output byte array.
 */ function writeUintBE(bitLength, value, out, offset) {
    if (out === void 0) out = new Uint8Array(bitLength / 8);
    if (offset === void 0) offset = 0;
    // TODO(dchest): implement support for bitLengths non-divisible by 8
    if (bitLength % 8 !== 0) throw new Error("writeUintBE supports only bitLengths divisible by 8");
    if (!int_1.isSafeInteger(value)) throw new Error("writeUintBE value must be an integer");
    var div = 1;
    for(var i = bitLength / 8 + offset - 1; i >= offset; i--){
        out[i] = value / div & 0xff;
        div *= 256;
    }
    return out;
}
exports.writeUintBE = writeUintBE;
/**
 * Writes a little-endian representation of bitLen-bit unsigned
 * value to array starting at offset.
 *
 * Supports bit lengths divisible by 8, up to 48.
 *
 * If byte array is not given, creates a new one.
 *
 * Returns the output byte array.
 */ function writeUintLE(bitLength, value, out, offset) {
    if (out === void 0) out = new Uint8Array(bitLength / 8);
    if (offset === void 0) offset = 0;
    // TODO(dchest): implement support for bitLengths non-divisible by 8
    if (bitLength % 8 !== 0) throw new Error("writeUintLE supports only bitLengths divisible by 8");
    if (!int_1.isSafeInteger(value)) throw new Error("writeUintLE value must be an integer");
    var div = 1;
    for(var i = offset; i < offset + bitLength / 8; i++){
        out[i] = value / div & 0xff;
        div *= 256;
    }
    return out;
}
exports.writeUintLE = writeUintLE;
/**
 * Reads 4 bytes from array starting at offset as big-endian
 * 32-bit floating-point number and returns it.
 */ function readFloat32BE(array, offset) {
    if (offset === void 0) offset = 0;
    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    return view.getFloat32(offset);
}
exports.readFloat32BE = readFloat32BE;
/**
 * Reads 4 bytes from array starting at offset as little-endian
 * 32-bit floating-point number and returns it.
 */ function readFloat32LE(array, offset) {
    if (offset === void 0) offset = 0;
    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    return view.getFloat32(offset, true);
}
exports.readFloat32LE = readFloat32LE;
/**
 * Reads 8 bytes from array starting at offset as big-endian
 * 64-bit floating-point number ("double") and returns it.
 */ function readFloat64BE(array, offset) {
    if (offset === void 0) offset = 0;
    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    return view.getFloat64(offset);
}
exports.readFloat64BE = readFloat64BE;
/**
 * Reads 8 bytes from array starting at offset as little-endian
 * 64-bit floating-point number ("double") and returns it.
 */ function readFloat64LE(array, offset) {
    if (offset === void 0) offset = 0;
    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    return view.getFloat64(offset, true);
}
exports.readFloat64LE = readFloat64LE;
/**
 * Writes 4-byte big-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */ function writeFloat32BE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(4);
    if (offset === void 0) offset = 0;
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat32(offset, value);
    return out;
}
exports.writeFloat32BE = writeFloat32BE;
/**
 * Writes 4-byte little-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 4-byte one.
 *
 * Returns the output byte array.
 */ function writeFloat32LE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(4);
    if (offset === void 0) offset = 0;
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat32(offset, value, true);
    return out;
}
exports.writeFloat32LE = writeFloat32LE;
/**
 * Writes 8-byte big-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */ function writeFloat64BE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(8);
    if (offset === void 0) offset = 0;
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat64(offset, value);
    return out;
}
exports.writeFloat64BE = writeFloat64BE;
/**
 * Writes 8-byte little-endian floating-point representation of value
 * to byte array starting at offset.
 *
 * If byte array is not given, creates a new 8-byte one.
 *
 * Returns the output byte array.
 */ function writeFloat64LE(value, out, offset) {
    if (out === void 0) out = new Uint8Array(8);
    if (offset === void 0) offset = 0;
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat64(offset, value, true);
    return out;
}
exports.writeFloat64LE = writeFloat64LE;

},{"@stablelib/int":"dkrY2"}],"dkrY2":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Package int provides helper functions for integerss.
 */ // Shim using 16-bit pieces.
function imulShim(a, b) {
    var ah = a >>> 16 & 0xffff, al = a & 0xffff;
    var bh = b >>> 16 & 0xffff, bl = b & 0xffff;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
}
/** 32-bit integer multiplication.  */ // Use system Math.imul if available, otherwise use our shim.
exports.mul = Math.imul || imulShim;
/** 32-bit integer addition.  */ function add(a, b) {
    return a + b | 0;
}
exports.add = add;
/**  32-bit integer subtraction.  */ function sub(a, b) {
    return a - b | 0;
}
exports.sub = sub;
/** 32-bit integer left rotation */ function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
exports.rotl = rotl;
/** 32-bit integer left rotation */ function rotr(x, n) {
    return x << 32 - n | x >>> n;
}
exports.rotr = rotr;
function isIntegerShim(n) {
    return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
}
/**
 * Returns true if the argument is an integer number.
 *
 * In ES2015, Number.isInteger.
 */ exports.isInteger = Number.isInteger || isIntegerShim;
/**
 *  Math.pow(2, 53) - 1
 *
 *  In ES2015 Number.MAX_SAFE_INTEGER.
 */ exports.MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Returns true if the argument is a safe integer number
 * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)
 *
 * In ES2015, Number.isSafeInteger.
 */ exports.isSafeInteger = function(n) {
    return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;
};

},{}],"kWayi":[function(require,module,exports) {
"use strict";
const isBuffer = require("is-buffer");
const Shake = require("it-handshake");
const lp = require("it-length-prefixed");
module.exports = (duplex, opts = {})=>{
    const shake = Shake(duplex);
    const lpReader = lp.decode.fromReader(shake.reader, opts);
    let isDone = false;
    const W = {
        read: async (bytes)=>{
            // just read
            const { value , done  } = await shake.reader.next(bytes);
            if (done && value.length < bytes) throw new Error("Couldn't read enough bytes");
            isDone = done;
            if (!value) throw new Error("Value is null");
            return value;
        },
        readLP: async ()=>{
            // read, decode
            const { value , done  } = await lpReader.next();
            isDone = done;
            if (!value) throw new Error("Value is null");
            return value;
        },
        readPB: async (proto)=>{
            // readLP, decode
            const value = await W.readLP();
            if (!value) throw new Error("Value is null");
            // Is this a buffer?
            const buf = isBuffer(value) ? value : value.slice();
            return proto.decode(buf);
        },
        write: (data)=>{
            // just write
            shake.writer.push(data);
        },
        writeLP: (data)=>{
            // encode, write
            W.write(lp.encode.single(data, opts));
        },
        writePB: (data, proto)=>{
            // encode, writeLP
            W.writeLP(proto.encode(data));
        },
        pb: (proto)=>{
            return {
                read: ()=>W.readPB(proto),
                write: (d)=>W.writePB(d, proto)
            };
        },
        unwrap: ()=>{
            // returns vanilla duplex again, terminates all reads/writes from this object
            shake.rest();
            return shake.stream;
        }
    };
    return W;
};

},{"is-buffer":"9JmUB","it-handshake":"kpk2i","it-length-prefixed":"31lGp"}],"9JmUB":[function(require,module,exports) {
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ module.exports = function isBuffer(obj) {
    return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
};

},{}],"jqOcO":[function(require,module,exports) {
var Pair = require("./");
module.exports = function() {
    var a = Pair();
    var b = Pair();
    return [
        {
            source: a.source,
            sink: b.sink
        },
        {
            source: b.source,
            sink: a.sink
        }
    ];
};

},{"./":"5fBKQ"}],"5fBKQ":[function(require,module,exports) {
"use strict";
const getIterator = require("get-iterator");
// a pair of streams where one drains from the other
module.exports = function pair() {
    let _source, onSource;
    const sink = async (source)=>{
        if (_source) throw new Error("already piped");
        _source = getIterator(source);
        if (onSource) onSource(_source);
    };
    const source1 = {
        [Symbol.asyncIterator] () {
            return this;
        },
        next () {
            if (_source) return _source.next();
            return new Promise((resolve)=>{
                onSource = (source)=>{
                    onSource = null;
                    resolve(source.next());
                };
            });
        }
    };
    return {
        sink,
        source: source1
    };
};

},{"get-iterator":"bU9aM"}],"82hPM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.XXHandshake = void 0;
const buffer_1 = require("buffer");
const xx_1 = require("./handshakes/xx");
const utils_1 = require("./utils");
const logger_1 = require("./logger");
const encoder_1 = require("./encoder");
class XXHandshake {
    constructor(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake){
        this.isInitiator = isInitiator;
        this.payload = payload;
        this.prologue = prologue;
        this.staticKeypair = staticKeypair;
        this.connection = connection;
        if (remotePeer) this.remotePeer = remotePeer;
        this.xx = handshake !== null && handshake !== void 0 ? handshake : new xx_1.XX();
        this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);
        this.remoteEarlyData = buffer_1.Buffer.alloc(0);
    }
    // stage 0
    async propose() {
        logger_1.logLocalStaticKeys(this.session.hs.s);
        if (this.isInitiator) {
            logger_1.logger("Stage 0 - Initiator starting to send first message.");
            const messageBuffer = this.xx.sendMessage(this.session, buffer_1.Buffer.alloc(0));
            this.connection.writeLP(encoder_1.encode0(messageBuffer));
            logger_1.logger("Stage 0 - Initiator finished sending first message.");
            logger_1.logLocalEphemeralKeys(this.session.hs.e);
        } else {
            logger_1.logger("Stage 0 - Responder waiting to receive first message...");
            const receivedMessageBuffer = encoder_1.decode0((await this.connection.readLP()).slice());
            const { valid  } = this.xx.recvMessage(this.session, receivedMessageBuffer);
            if (!valid) throw new Error("xx handshake stage 0 validation fail");
            logger_1.logger("Stage 0 - Responder received first message.");
            logger_1.logRemoteEphemeralKey(this.session.hs.re);
        }
    }
    // stage 1
    async exchange() {
        if (this.isInitiator) {
            logger_1.logger("Stage 1 - Initiator waiting to receive first message from responder...");
            const receivedMessageBuffer = encoder_1.decode1((await this.connection.readLP()).slice());
            const { plaintext , valid  } = this.xx.recvMessage(this.session, receivedMessageBuffer);
            if (!valid) throw new Error("xx handshake stage 1 validation fail");
            logger_1.logger("Stage 1 - Initiator received the message.");
            logger_1.logRemoteEphemeralKey(this.session.hs.re);
            logger_1.logRemoteStaticKey(this.session.hs.rs);
            logger_1.logger("Initiator going to check remote's signature...");
            try {
                const decodedPayload = await utils_1.decodePayload(plaintext);
                this.remotePeer = this.remotePeer || await utils_1.getPeerIdFromPayload(decodedPayload);
                this.remotePeer = await utils_1.verifySignedPayload(receivedMessageBuffer.ns, decodedPayload, this.remotePeer);
                this.setRemoteEarlyData(decodedPayload.data);
            } catch (e) {
                const err = e;
                throw new Error(`Error occurred while verifying signed payload: ${err.message}`);
            }
            logger_1.logger("All good with the signature!");
        } else {
            logger_1.logger("Stage 1 - Responder sending out first message with signed payload and static key.");
            const messageBuffer = this.xx.sendMessage(this.session, this.payload);
            this.connection.writeLP(encoder_1.encode1(messageBuffer));
            logger_1.logger("Stage 1 - Responder sent the second handshake message with signed payload.");
            logger_1.logLocalEphemeralKeys(this.session.hs.e);
        }
    }
    // stage 2
    async finish() {
        if (this.isInitiator) {
            logger_1.logger("Stage 2 - Initiator sending third handshake message.");
            const messageBuffer = this.xx.sendMessage(this.session, this.payload);
            this.connection.writeLP(encoder_1.encode2(messageBuffer));
            logger_1.logger("Stage 2 - Initiator sent message with signed payload.");
        } else {
            logger_1.logger("Stage 2 - Responder waiting for third handshake message...");
            const receivedMessageBuffer = encoder_1.decode2((await this.connection.readLP()).slice());
            const { plaintext , valid  } = this.xx.recvMessage(this.session, receivedMessageBuffer);
            if (!valid) throw new Error("xx handshake stage 2 validation fail");
            logger_1.logger("Stage 2 - Responder received the message, finished handshake.");
            try {
                const decodedPayload = await utils_1.decodePayload(plaintext);
                this.remotePeer = this.remotePeer || await utils_1.getPeerIdFromPayload(decodedPayload);
                await utils_1.verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);
                this.setRemoteEarlyData(decodedPayload.data);
            } catch (e) {
                const err = e;
                throw new Error(`Error occurred while verifying signed payload: ${err.message}`);
            }
        }
        logger_1.logCipherState(this.session);
    }
    encrypt(plaintext, session) {
        const cs = this.getCS(session);
        return this.xx.encryptWithAd(cs, buffer_1.Buffer.alloc(0), plaintext);
    }
    decrypt(ciphertext, session) {
        const cs = this.getCS(session, false);
        return this.xx.decryptWithAd(cs, buffer_1.Buffer.alloc(0), ciphertext);
    }
    getRemoteStaticKey() {
        return this.session.hs.rs;
    }
    getCS(session, encryption = true) {
        if (!session.cs1 || !session.cs2) throw new Error("Handshake not completed properly, cipher state does not exist.");
        if (this.isInitiator) return encryption ? session.cs1 : session.cs2;
        else return encryption ? session.cs2 : session.cs1;
    }
    setRemoteEarlyData(data) {
        if (data) this.remoteEarlyData = buffer_1.Buffer.from(data.buffer, data.byteOffset, data.length);
    }
}
exports.XXHandshake = XXHandshake;

},{"buffer":"fCgem","./handshakes/xx":"ks4jo","./utils":"1bkCP","./logger":"2se0g","./encoder":"9nJEO"}],"ks4jo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.XX = void 0;
const buffer_1 = require("buffer");
const utils_1 = require("../utils");
const abstract_handshake_1 = require("./abstract-handshake");
class XX extends abstract_handshake_1.AbstractHandshake {
    initializeInitiator(prologue, s, rs, psk) {
        const name = "Noise_XX_25519_ChaChaPoly_SHA256";
        const ss = this.initializeSymmetric(name);
        this.mixHash(ss, prologue);
        const re = buffer_1.Buffer.alloc(32);
        return {
            ss,
            s,
            rs,
            psk,
            re
        };
    }
    initializeResponder(prologue, s, rs, psk) {
        const name = "Noise_XX_25519_ChaChaPoly_SHA256";
        const ss = this.initializeSymmetric(name);
        this.mixHash(ss, prologue);
        const re = buffer_1.Buffer.alloc(32);
        return {
            ss,
            s,
            rs,
            psk,
            re
        };
    }
    writeMessageA(hs, payload, e) {
        const ns = buffer_1.Buffer.alloc(0);
        if (e !== undefined) hs.e = e;
        else hs.e = utils_1.generateKeypair();
        const ne = hs.e.publicKey;
        this.mixHash(hs.ss, ne);
        const ciphertext = this.encryptAndHash(hs.ss, payload);
        return {
            ne,
            ns,
            ciphertext
        };
    }
    writeMessageB(hs, payload) {
        hs.e = utils_1.generateKeypair();
        const ne = hs.e.publicKey;
        this.mixHash(hs.ss, ne);
        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));
        const spk = buffer_1.Buffer.from(hs.s.publicKey);
        const ns = this.encryptAndHash(hs.ss, spk);
        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));
        const ciphertext = this.encryptAndHash(hs.ss, payload);
        return {
            ne,
            ns,
            ciphertext
        };
    }
    writeMessageC(hs, payload) {
        const spk = buffer_1.Buffer.from(hs.s.publicKey);
        const ns = this.encryptAndHash(hs.ss, spk);
        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));
        const ciphertext = this.encryptAndHash(hs.ss, payload);
        const ne = this.createEmptyKey();
        const messageBuffer = {
            ne,
            ns,
            ciphertext
        };
        const { cs1 , cs2  } = this.split(hs.ss);
        return {
            h: hs.ss.h,
            messageBuffer,
            cs1,
            cs2
        };
    }
    readMessageA(hs, message) {
        if (utils_1.isValidPublicKey(message.ne)) hs.re = message.ne;
        this.mixHash(hs.ss, hs.re);
        return this.decryptAndHash(hs.ss, message.ciphertext);
    }
    readMessageB(hs, message) {
        if (utils_1.isValidPublicKey(message.ne)) hs.re = message.ne;
        this.mixHash(hs.ss, hs.re);
        if (!hs.e) throw new Error("Handshake state `e` param is missing.");
        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));
        const { plaintext: ns , valid: valid1  } = this.decryptAndHash(hs.ss, message.ns);
        if (valid1 && ns.length === 32 && utils_1.isValidPublicKey(ns)) hs.rs = ns;
        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));
        const { plaintext , valid: valid2  } = this.decryptAndHash(hs.ss, message.ciphertext);
        return {
            plaintext,
            valid: valid1 && valid2
        };
    }
    readMessageC(hs, message) {
        const { plaintext: ns , valid: valid1  } = this.decryptAndHash(hs.ss, message.ns);
        if (valid1 && ns.length === 32 && utils_1.isValidPublicKey(ns)) hs.rs = ns;
        if (!hs.e) throw new Error("Handshake state `e` param is missing.");
        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));
        const { plaintext , valid: valid2  } = this.decryptAndHash(hs.ss, message.ciphertext);
        const { cs1 , cs2  } = this.split(hs.ss);
        return {
            h: hs.ss.h,
            plaintext,
            valid: valid1 && valid2,
            cs1,
            cs2
        };
    }
    initSession(initiator, prologue, s) {
        const psk = this.createEmptyKey();
        const rs = buffer_1.Buffer.alloc(32); // no static key yet
        let hs;
        if (initiator) hs = this.initializeInitiator(prologue, s, rs, psk);
        else hs = this.initializeResponder(prologue, s, rs, psk);
        return {
            hs,
            i: initiator,
            mc: 0
        };
    }
    sendMessage(session, message, ephemeral) {
        let messageBuffer;
        if (session.mc === 0) messageBuffer = this.writeMessageA(session.hs, message, ephemeral);
        else if (session.mc === 1) messageBuffer = this.writeMessageB(session.hs, message);
        else if (session.mc === 2) {
            const { h , messageBuffer: resultingBuffer , cs1 , cs2  } = this.writeMessageC(session.hs, message);
            messageBuffer = resultingBuffer;
            session.h = h;
            session.cs1 = cs1;
            session.cs2 = cs2;
        } else if (session.mc > 2) {
            if (session.i) {
                if (!session.cs1) throw new Error("CS1 (cipher state) is not defined");
                messageBuffer = this.writeMessageRegular(session.cs1, message);
            } else {
                if (!session.cs2) throw new Error("CS2 (cipher state) is not defined");
                messageBuffer = this.writeMessageRegular(session.cs2, message);
            }
        } else throw new Error("Session invalid.");
        session.mc++;
        return messageBuffer;
    }
    recvMessage(session, message) {
        let plaintext = buffer_1.Buffer.alloc(0);
        let valid = false;
        if (session.mc === 0) ({ plaintext , valid  } = this.readMessageA(session.hs, message));
        else if (session.mc === 1) ({ plaintext , valid  } = this.readMessageB(session.hs, message));
        else if (session.mc === 2) {
            const { h , plaintext: resultingPlaintext , valid: resultingValid , cs1 , cs2  } = this.readMessageC(session.hs, message);
            plaintext = resultingPlaintext;
            valid = resultingValid;
            session.h = h;
            session.cs1 = cs1;
            session.cs2 = cs2;
        }
        session.mc++;
        return {
            plaintext,
            valid
        };
    }
}
exports.XX = XX;

},{"buffer":"fCgem","../utils":"1bkCP","./abstract-handshake":"665MT"}],"1bkCP":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isValidPublicKey = exports.getHkdf = exports.verifySignedPayload = exports.getHandshakePayload = exports.decodePayload = exports.getPeerIdFromPayload = exports.signPayload = exports.createHandshakePayload = exports.getPayload = exports.generateKeypair = void 0;
const hkdf_1 = require("@stablelib/hkdf");
const sha256_1 = require("@stablelib/sha256");
const x25519 = __importStar(require("@stablelib/x25519"));
const buffer_1 = require("buffer");
const peer_id_1 = __importDefault(require("peer-id"));
const libp2p_crypto_1 = require("libp2p-crypto");
const payload_1 = require("./proto/payload");
const equals_1 = __importDefault(require("uint8arrays/equals"));
const NoiseHandshakePayloadProto = payload_1.pb.NoiseHandshakePayload;
function generateKeypair() {
    const keypair = x25519.generateKeyPair();
    return {
        publicKey: buffer_1.Buffer.from(keypair.publicKey.buffer, keypair.publicKey.byteOffset, keypair.publicKey.length),
        privateKey: buffer_1.Buffer.from(keypair.secretKey.buffer, keypair.secretKey.byteOffset, keypair.secretKey.length)
    };
}
exports.generateKeypair = generateKeypair;
async function getPayload(localPeer, staticPublicKey, earlyData) {
    const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));
    const earlyDataPayload = earlyData !== null && earlyData !== void 0 ? earlyData : buffer_1.Buffer.alloc(0);
    return createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);
}
exports.getPayload = getPayload;
function createHandshakePayload(libp2pPublicKey, signedPayload, earlyData) {
    const payloadInit = NoiseHandshakePayloadProto.create({
        identityKey: buffer_1.Buffer.from(libp2pPublicKey),
        identitySig: signedPayload,
        data: earlyData !== null && earlyData !== void 0 ? earlyData : null
    });
    return buffer_1.Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish());
}
exports.createHandshakePayload = createHandshakePayload;
async function signPayload(peerId, payload) {
    return buffer_1.Buffer.from(await peerId.privKey.sign(payload));
}
exports.signPayload = signPayload;
async function getPeerIdFromPayload(payload) {
    return await peer_id_1.default.createFromPubKey(buffer_1.Buffer.from(payload.identityKey));
}
exports.getPeerIdFromPayload = getPeerIdFromPayload;
function decodePayload(payload) {
    return NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(buffer_1.Buffer.from(payload)));
}
exports.decodePayload = decodePayload;
function getHandshakePayload(publicKey) {
    return buffer_1.Buffer.concat([
        buffer_1.Buffer.from("noise-libp2p-static-key:"),
        publicKey
    ]);
}
exports.getHandshakePayload = getHandshakePayload;
async function isValidPeerId(peerId, publicKeyProtobuf) {
    const generatedPeerId = await peer_id_1.default.createFromPubKey(publicKeyProtobuf);
    return equals_1.default(generatedPeerId.id, peerId);
}
/**
 * Verifies signed payload, throws on any irregularities.
 *
 * @param {bytes} noiseStaticKey - owner's noise static key
 * @param {bytes} payload - decoded payload
 * @param {PeerId} remotePeer - owner's libp2p peer ID
 * @returns {Promise<PeerId>} - peer ID of payload owner
 */ async function verifySignedPayload(noiseStaticKey, payload, remotePeer) {
    const identityKey = buffer_1.Buffer.from(payload.identityKey);
    if (!await isValidPeerId(remotePeer.id, identityKey)) throw new Error("Peer ID doesn't match libp2p public key.");
    const generatedPayload = getHandshakePayload(noiseStaticKey);
    // Unmarshaling from PublicKey protobuf
    const publicKey = libp2p_crypto_1.keys.unmarshalPublicKey(identityKey);
    // TODO remove this after libp2p-crypto ships proper types
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    if (!payload.identitySig || !publicKey.verify(generatedPayload, buffer_1.Buffer.from(payload.identitySig))) throw new Error("Static key doesn't match to peer that signed payload!");
    return await peer_id_1.default.createFromPubKey(identityKey);
}
exports.verifySignedPayload = verifySignedPayload;
function getHkdf(ck, ikm) {
    const hkdf = new hkdf_1.HKDF(sha256_1.SHA256, ikm, ck);
    const okmU8Array = hkdf.expand(96);
    const okm = buffer_1.Buffer.from(okmU8Array.buffer, okmU8Array.byteOffset, okmU8Array.length);
    const k1 = okm.slice(0, 32);
    const k2 = okm.slice(32, 64);
    const k3 = okm.slice(64, 96);
    return [
        k1,
        k2,
        k3
    ];
}
exports.getHkdf = getHkdf;
function isValidPublicKey(pk) {
    if (!buffer_1.Buffer.isBuffer(pk)) return false;
    if (pk.length !== 32) return false;
    return true;
}
exports.isValidPublicKey = isValidPublicKey;

},{"@stablelib/hkdf":"6r0oT","@stablelib/sha256":"fPm7j","@stablelib/x25519":"5xoxU","buffer":"fCgem","peer-id":"etBKN","libp2p-crypto":"djNY1","./proto/payload":"1Op7O","uint8arrays/equals":"1cuyX"}],"6r0oT":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var hmac_1 = require("@stablelib/hmac");
var wipe_1 = require("@stablelib/wipe");
/**
 * HMAC-based Extract-and-Expand Key Derivation Function.
 *
 * Implements HKDF from RFC5869.
 *
 * Expands the given master key with salt and info into
 * a limited stream of key material.
 */ var HKDF = /** @class */ function() {
    /**
     * Create a new HKDF instance for the given hash function
     * with the master key, optional salt, and info.
     *
     * - Master key is a high-entropy secret key (not a password).
     * - Salt is a non-secret random value.
     * - Info is application- and/or context-specific information.
     */ function HKDF1(hash, key, salt, info) {
        if (salt === void 0) salt = new Uint8Array(0);
        this._counter = new Uint8Array(1); // starts with zero
        this._hash = hash;
        this._info = info;
        // HKDF-Extract uses salt as HMAC key, and key as data.
        var okm = hmac_1.hmac(this._hash, salt, key);
        // Initialize HMAC for expanding with extracted key.
        this._hmac = new hmac_1.HMAC(hash, okm);
        // Allocate buffer.
        this._buffer = new Uint8Array(this._hmac.digestLength);
        this._bufpos = this._buffer.length;
    }
    // Fill buffer with new block of HKDF-Extract output.
    HKDF1.prototype._fillBuffer = function() {
        // Increment counter.
        this._counter[0]++;
        var ctr = this._counter[0];
        // Check if counter overflowed.
        if (ctr === 0) throw new Error("hkdf: cannot expand more");
        // Prepare HMAC instance for new data with old key.
        this._hmac.reset();
        // Hash in previous output if it was generated
        // (i.e. counter is greater than 1).
        if (ctr > 1) this._hmac.update(this._buffer);
        // Hash in info if it exists.
        if (this._info) this._hmac.update(this._info);
        // Hash in the counter.
        this._hmac.update(this._counter);
        // Output result to buffer and clean HMAC instance.
        this._hmac.finish(this._buffer);
        // Reset buffer position.
        this._bufpos = 0;
    };
    /**
     * Expand returns next key material of the given length.
     *
     * It throws if expansion limit is reached (which is
     * 254 digests of the underlying HMAC function).
     */ HKDF1.prototype.expand = function(length) {
        var out = new Uint8Array(length);
        for(var i = 0; i < out.length; i++){
            if (this._bufpos === this._buffer.length) this._fillBuffer();
            out[i] = this._buffer[this._bufpos++];
        }
        return out;
    };
    HKDF1.prototype.clean = function() {
        this._hmac.clean();
        wipe_1.wipe(this._buffer);
        wipe_1.wipe(this._counter);
        this._bufpos = 0;
    };
    return HKDF1;
}();
exports.HKDF = HKDF; // TODO(dchest): maybe implement deriveKey?

},{"@stablelib/hmac":"hAdnx","@stablelib/wipe":"8owN2"}],"hAdnx":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Package hmac implements HMAC algorithm.
 */ var hash_1 = require("@stablelib/hash");
var constant_time_1 = require("@stablelib/constant-time");
var wipe_1 = require("@stablelib/wipe");
/**
 *  HMAC implements hash-based message authentication algorithm.
 */ var HMAC = /** @class */ function() {
    /**
     * Constructs a new HMAC with the given Hash and secret key.
     */ function HMAC1(hash, key) {
        this._finished = false; // true if HMAC was finalized
        // Initialize inner and outer hashes.
        this._inner = new hash();
        this._outer = new hash();
        // Set block and digest sizes for this HMAC
        // instance to values from the hash.
        this.blockSize = this._outer.blockSize;
        this.digestLength = this._outer.digestLength;
        // Pad temporary stores a key (or its hash) padded with zeroes.
        var pad = new Uint8Array(this.blockSize);
        if (key.length > this.blockSize) // If key is bigger than hash block size, it must be
        // hashed and this hash is used as a key instead.
        this._inner.update(key).finish(pad).clean();
        else // Otherwise, copy the key into pad.
        pad.set(key);
        // Now two different keys are derived from padded key
        // by xoring a different byte value to each.
        // To make inner hash key, xor byte 0x36 into pad.
        for(var i = 0; i < pad.length; i++)pad[i] ^= 0x36;
        // Update inner hash with the result.
        this._inner.update(pad);
        // To make outer hash key, xor byte 0x5c into pad.
        // But since we already xored 0x36 there, we must
        // first undo this by xoring it again.
        for(var i = 0; i < pad.length; i++)pad[i] ^= 106;
        // Update outer hash with the result.
        this._outer.update(pad);
        // Save states of both hashes, so that we can quickly restore
        // them later in reset() without the need to remember the actual
        // key and perform this initialization again.
        if (hash_1.isSerializableHash(this._inner) && hash_1.isSerializableHash(this._outer)) {
            this._innerKeyedState = this._inner.saveState();
            this._outerKeyedState = this._outer.saveState();
        }
        // Clean pad.
        wipe_1.wipe(pad);
    }
    /**
     * Returns HMAC state to the state initialized with key
     * to make it possible to run HMAC over the other data with the same
     * key without creating a new instance.
     */ HMAC1.prototype.reset = function() {
        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");
        // Restore keyed states of inner and outer hashes.
        this._inner.restoreState(this._innerKeyedState);
        this._outer.restoreState(this._outerKeyedState);
        this._finished = false;
        return this;
    };
    /**
     * Cleans HMAC state.
     */ HMAC1.prototype.clean = function() {
        if (hash_1.isSerializableHash(this._inner)) this._inner.cleanSavedState(this._innerKeyedState);
        if (hash_1.isSerializableHash(this._outer)) this._outer.cleanSavedState(this._outerKeyedState);
        this._inner.clean();
        this._outer.clean();
    };
    /**
     * Updates state with provided data.
     */ HMAC1.prototype.update = function(data) {
        this._inner.update(data);
        return this;
    };
    /**
     * Finalizes HMAC and puts the result in out.
     */ HMAC1.prototype.finish = function(out) {
        if (this._finished) {
            // If HMAC was finalized, outer hash is also finalized,
            // so it produces the same digest it produced when it
            // was finalized.
            this._outer.finish(out);
            return this;
        }
        // Finalize inner hash and store the result temporarily.
        this._inner.finish(out);
        // Update outer hash with digest of inner hash and and finalize it.
        this._outer.update(out.subarray(0, this.digestLength)).finish(out);
        this._finished = true;
        return this;
    };
    /**
     * Returns the computed message authentication code.
     */ HMAC1.prototype.digest = function() {
        var out = new Uint8Array(this.digestLength);
        this.finish(out);
        return out;
    };
    /**
     * Saves HMAC state.
     * This function is needed for PBKDF2 optimization.
     */ HMAC1.prototype.saveState = function() {
        if (!hash_1.isSerializableHash(this._inner)) throw new Error("hmac: can't saveState() because hash doesn't implement it");
        return this._inner.saveState();
    };
    HMAC1.prototype.restoreState = function(savedState) {
        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) throw new Error("hmac: can't restoreState() because hash doesn't implement it");
        this._inner.restoreState(savedState);
        this._outer.restoreState(this._outerKeyedState);
        this._finished = false;
        return this;
    };
    HMAC1.prototype.cleanSavedState = function(savedState) {
        if (!hash_1.isSerializableHash(this._inner)) throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");
        this._inner.cleanSavedState(savedState);
    };
    return HMAC1;
}();
exports.HMAC = HMAC;
/**
 * Returns HMAC using the given hash constructor for the key over data.
 */ function hmac(hash, key, data) {
    var h = new HMAC(hash, key);
    h.update(data);
    var digest = h.digest();
    h.clean();
    return digest;
}
exports.hmac = hmac;
/**
 * Returns true if two HMAC digests are equal.
 * Uses constant-time comparison to avoid leaking timing information.
 *
 * Example:
 *
 *    const receivedDigest = ...
 *    const realDigest = hmac(SHA256, key, data);
 *    if (!equal(receivedDigest, realDigest)) {
 *        throw new Error("Authentication error");
 *    }
 */ exports.equal = constant_time_1.equal;

},{"@stablelib/hash":"5mYqj","@stablelib/constant-time":"ccTzW","@stablelib/wipe":"8owN2"}],"5mYqj":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
function isSerializableHash(h) {
    return typeof h.saveState !== "undefined" && typeof h.restoreState !== "undefined" && typeof h.cleanSavedState !== "undefined";
}
exports.isSerializableHash = isSerializableHash; // TODO(dchest): figure out the standardized interface for XOF such as
 // SHAKE and BLAKE2X.

},{}],"ccTzW":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Package constant-time provides functions for performing algorithmically constant-time operations.
 */ /**
 * NOTE! Due to the inability to guarantee real constant time evaluation of
 * anything in JavaScript VM, this is module is the best effort.
 */ /**
 * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.
 *
 * Supports only 32-bit integers, so resultIfOne or resultIfZero are not
 * integers, they'll be converted to them with bitwise operations.
 */ function select(subject, resultIfOne, resultIfZero) {
    return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;
}
exports.select = select;
/**
 * Returns 1 if a <= b, or 0 if not.
 * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.
 */ function lessOrEqual(a, b) {
    return (a | 0) - (b | 0) - 1 >>> 31 & 1;
}
exports.lessOrEqual = lessOrEqual;
/**
 * Returns 1 if a and b are of equal length and their contents
 * are equal, or 0 otherwise.
 *
 * Note that unlike in equal(), zero-length inputs are considered
 * the same, so this function will return 1.
 */ function compare(a, b) {
    if (a.length !== b.length) return 0;
    var result = 0;
    for(var i = 0; i < a.length; i++)result |= a[i] ^ b[i];
    return 1 & result - 1 >>> 8;
}
exports.compare = compare;
/**
 * Returns true if a and b are of equal non-zero length,
 * and their contents are equal, or false otherwise.
 *
 * Note that unlike in compare() zero-length inputs are considered
 * _not_ equal, so this function will return false.
 */ function equal(a, b) {
    if (a.length === 0 || b.length === 0) return false;
    return compare(a, b) !== 0;
}
exports.equal = equal;

},{}],"fPm7j":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var binary_1 = require("@stablelib/binary");
var wipe_1 = require("@stablelib/wipe");
exports.DIGEST_LENGTH = 32;
exports.BLOCK_SIZE = 64;
/**
 * SHA2-256 cryptographic hash algorithm.
 */ var SHA256 = /** @class */ function() {
    function SHA2561() {
        /** Length of hash output */ this.digestLength = exports.DIGEST_LENGTH;
        /** Block size */ this.blockSize = exports.BLOCK_SIZE;
        // Note: Int32Array is used instead of Uint32Array for performance reasons.
        this._state = new Int32Array(8); // hash state
        this._temp = new Int32Array(64); // temporary state
        this._buffer = new Uint8Array(128); // buffer for data to hash
        this._bufferLength = 0; // number of bytes in buffer
        this._bytesHashed = 0; // number of total bytes hashed
        this._finished = false; // indicates whether the hash was finalized
        this.reset();
    }
    SHA2561.prototype._initState = function() {
        this._state[0] = 0x6a09e667;
        this._state[1] = 0xbb67ae85;
        this._state[2] = 0x3c6ef372;
        this._state[3] = 0xa54ff53a;
        this._state[4] = 0x510e527f;
        this._state[5] = 0x9b05688c;
        this._state[6] = 0x1f83d9ab;
        this._state[7] = 0x5be0cd19;
    };
    /**
     * Resets hash state making it possible
     * to re-use this instance to hash other data.
     */ SHA2561.prototype.reset = function() {
        this._initState();
        this._bufferLength = 0;
        this._bytesHashed = 0;
        this._finished = false;
        return this;
    };
    /**
     * Cleans internal buffers and resets hash state.
     */ SHA2561.prototype.clean = function() {
        wipe_1.wipe(this._buffer);
        wipe_1.wipe(this._temp);
        this.reset();
    };
    /**
     * Updates hash state with the given data.
     *
     * Throws error when trying to update already finalized hash:
     * instance must be reset to update it again.
     */ SHA2561.prototype.update = function(data, dataLength) {
        if (dataLength === void 0) dataLength = data.length;
        if (this._finished) throw new Error("SHA256: can't update because hash was finished.");
        var dataPos = 0;
        this._bytesHashed += dataLength;
        if (this._bufferLength > 0) {
            while(this._bufferLength < this.blockSize && dataLength > 0){
                this._buffer[this._bufferLength++] = data[dataPos++];
                dataLength--;
            }
            if (this._bufferLength === this.blockSize) {
                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
                this._bufferLength = 0;
            }
        }
        if (dataLength >= this.blockSize) {
            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
            dataLength %= this.blockSize;
        }
        while(dataLength > 0){
            this._buffer[this._bufferLength++] = data[dataPos++];
            dataLength--;
        }
        return this;
    };
    /**
     * Finalizes hash state and puts hash into out.
     * If hash was already finalized, puts the same value.
     */ SHA2561.prototype.finish = function(out) {
        if (!this._finished) {
            var bytesHashed = this._bytesHashed;
            var left = this._bufferLength;
            var bitLenHi = bytesHashed / 0x20000000 | 0;
            var bitLenLo = bytesHashed << 3;
            var padLength = bytesHashed % 64 < 56 ? 64 : 128;
            this._buffer[left] = 0x80;
            for(var i = left + 1; i < padLength - 8; i++)this._buffer[i] = 0;
            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
            this._finished = true;
        }
        for(var i = 0; i < this.digestLength / 4; i++)binary_1.writeUint32BE(this._state[i], out, i * 4);
        return this;
    };
    /**
     * Returns the final hash digest.
     */ SHA2561.prototype.digest = function() {
        var out = new Uint8Array(this.digestLength);
        this.finish(out);
        return out;
    };
    /**
     * Function useful for HMAC/PBKDF2 optimization.
     * Returns hash state to be used with restoreState().
     * Only chain value is saved, not buffers or other
     * state variables.
     */ SHA2561.prototype.saveState = function() {
        if (this._finished) throw new Error("SHA256: cannot save finished state");
        return {
            state: new Int32Array(this._state),
            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,
            bufferLength: this._bufferLength,
            bytesHashed: this._bytesHashed
        };
    };
    /**
     * Function useful for HMAC/PBKDF2 optimization.
     * Restores state saved by saveState() and sets bytesHashed
     * to the given value.
     */ SHA2561.prototype.restoreState = function(savedState) {
        this._state.set(savedState.state);
        this._bufferLength = savedState.bufferLength;
        if (savedState.buffer) this._buffer.set(savedState.buffer);
        this._bytesHashed = savedState.bytesHashed;
        this._finished = false;
        return this;
    };
    /**
     * Cleans state returned by saveState().
     */ SHA2561.prototype.cleanSavedState = function(savedState) {
        wipe_1.wipe(savedState.state);
        if (savedState.buffer) wipe_1.wipe(savedState.buffer);
        savedState.bufferLength = 0;
        savedState.bytesHashed = 0;
    };
    return SHA2561;
}();
exports.SHA256 = SHA256;
// Constants
var K = new Int32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
function hashBlocks(w, v, p, pos, len) {
    while(len >= 64){
        var a = v[0];
        var b = v[1];
        var c = v[2];
        var d = v[3];
        var e = v[4];
        var f = v[5];
        var g = v[6];
        var h = v[7];
        for(var i = 0; i < 16; i++){
            var j = pos + i * 4;
            w[i] = binary_1.readUint32BE(p, j);
        }
        for(var i = 16; i < 64; i++){
            var u = w[i - 2];
            var t1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = w[i - 15];
            var t2 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
        }
        for(var i = 0; i < 64; i++){
            var t1 = (((e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;
            var t2 = ((a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10)) + (a & b ^ a & c ^ b & c) | 0;
            h = g;
            g = f;
            f = e;
            e = d + t1 | 0;
            d = c;
            c = b;
            b = a;
            a = t1 + t2 | 0;
        }
        v[0] += a;
        v[1] += b;
        v[2] += c;
        v[3] += d;
        v[4] += e;
        v[5] += f;
        v[6] += g;
        v[7] += h;
        pos += 64;
        len -= 64;
    }
    return pos;
}
function hash(data) {
    var h = new SHA256();
    h.update(data);
    var digest = h.digest();
    h.clean();
    return digest;
}
exports.hash = hash;

},{"@stablelib/binary":"92RWm","@stablelib/wipe":"8owN2"}],"1Op7O":[function(require,module,exports) {
"use strict";
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/ (function(global, factory) {
    /* AMD */ if (typeof define === "function" && define.amd) define([
        "protobufjs/minimal"
    ], factory);
    else if (module && module.exports) module.exports = factory(require("protobufjs/minimal"));
})(this, function($protobuf) {
    "use strict";
    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    // Exported root namespace
    var $root = $protobuf.roots["libp2p-noise"] || ($protobuf.roots["libp2p-noise"] = {});
    $root.pb = function() {
        /**
         * Namespace pb.
         * @exports pb
         * @namespace
         */ var pb = {};
        pb.NoiseHandshakePayload = function() {
            /**
             * Properties of a NoiseHandshakePayload.
             * @memberof pb
             * @interface INoiseHandshakePayload
             * @property {Uint8Array|null} [identityKey] NoiseHandshakePayload identityKey
             * @property {Uint8Array|null} [identitySig] NoiseHandshakePayload identitySig
             * @property {Uint8Array|null} [data] NoiseHandshakePayload data
             */ /**
             * Constructs a new NoiseHandshakePayload.
             * @memberof pb
             * @classdesc Represents a NoiseHandshakePayload.
             * @implements INoiseHandshakePayload
             * @constructor
             * @param {pb.INoiseHandshakePayload=} [properties] Properties to set
             */ function NoiseHandshakePayload(properties) {
                if (properties) {
                    for(var keys = Object.keys(properties), i = 0; i < keys.length; ++i)if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
                }
            }
            /**
             * NoiseHandshakePayload identityKey.
             * @member {Uint8Array} identityKey
             * @memberof pb.NoiseHandshakePayload
             * @instance
             */ NoiseHandshakePayload.prototype.identityKey = $util.newBuffer([]);
            /**
             * NoiseHandshakePayload identitySig.
             * @member {Uint8Array} identitySig
             * @memberof pb.NoiseHandshakePayload
             * @instance
             */ NoiseHandshakePayload.prototype.identitySig = $util.newBuffer([]);
            /**
             * NoiseHandshakePayload data.
             * @member {Uint8Array} data
             * @memberof pb.NoiseHandshakePayload
             * @instance
             */ NoiseHandshakePayload.prototype.data = $util.newBuffer([]);
            /**
             * Creates a new NoiseHandshakePayload instance using the specified properties.
             * @function create
             * @memberof pb.NoiseHandshakePayload
             * @static
             * @param {pb.INoiseHandshakePayload=} [properties] Properties to set
             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload instance
             */ NoiseHandshakePayload.create = function create(properties) {
                return new NoiseHandshakePayload(properties);
            };
            /**
             * Encodes the specified NoiseHandshakePayload message. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.
             * @function encode
             * @memberof pb.NoiseHandshakePayload
             * @static
             * @param {pb.INoiseHandshakePayload} message NoiseHandshakePayload message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */ NoiseHandshakePayload.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.identityKey != null && Object.hasOwnProperty.call(message, "identityKey")) writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.identityKey);
                if (message.identitySig != null && Object.hasOwnProperty.call(message, "identitySig")) writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.identitySig);
                if (message.data != null && Object.hasOwnProperty.call(message, "data")) writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.data);
                return writer;
            };
            /**
             * Encodes the specified NoiseHandshakePayload message, length delimited. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.NoiseHandshakePayload
             * @static
             * @param {pb.INoiseHandshakePayload} message NoiseHandshakePayload message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */ NoiseHandshakePayload.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
            /**
             * Decodes a NoiseHandshakePayload message from the specified reader or buffer.
             * @function decode
             * @memberof pb.NoiseHandshakePayload
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */ NoiseHandshakePayload.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.NoiseHandshakePayload();
                while(reader.pos < end){
                    var tag = reader.uint32();
                    switch(tag >>> 3){
                        case 1:
                            message.identityKey = reader.bytes();
                            break;
                        case 2:
                            message.identitySig = reader.bytes();
                            break;
                        case 3:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return message;
            };
            /**
             * Decodes a NoiseHandshakePayload message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.NoiseHandshakePayload
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */ NoiseHandshakePayload.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
            /**
             * Verifies a NoiseHandshakePayload message.
             * @function verify
             * @memberof pb.NoiseHandshakePayload
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */ NoiseHandshakePayload.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.identityKey != null && message.hasOwnProperty("identityKey")) {
                    if (!(message.identityKey && typeof message.identityKey.length === "number" || $util.isString(message.identityKey))) return "identityKey: buffer expected";
                }
                if (message.identitySig != null && message.hasOwnProperty("identitySig")) {
                    if (!(message.identitySig && typeof message.identitySig.length === "number" || $util.isString(message.identitySig))) return "identitySig: buffer expected";
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data))) return "data: buffer expected";
                }
                return null;
            };
            /**
             * Creates a NoiseHandshakePayload message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.NoiseHandshakePayload
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload
             */ NoiseHandshakePayload.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.NoiseHandshakePayload) return object;
                var message = new $root.pb.NoiseHandshakePayload();
                if (object.identityKey != null) {
                    if (typeof object.identityKey === "string") $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);
                    else if (object.identityKey.length) message.identityKey = object.identityKey;
                }
                if (object.identitySig != null) {
                    if (typeof object.identitySig === "string") $util.base64.decode(object.identitySig, message.identitySig = $util.newBuffer($util.base64.length(object.identitySig)), 0);
                    else if (object.identitySig.length) message.identitySig = object.identitySig;
                }
                if (object.data != null) {
                    if (typeof object.data === "string") $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length) message.data = object.data;
                }
                return message;
            };
            /**
             * Creates a plain object from a NoiseHandshakePayload message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.NoiseHandshakePayload
             * @static
             * @param {pb.NoiseHandshakePayload} message NoiseHandshakePayload
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */ NoiseHandshakePayload.toObject = function toObject(message, options) {
                if (!options) options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String) object.identityKey = "";
                    else {
                        object.identityKey = [];
                        if (options.bytes !== Array) object.identityKey = $util.newBuffer(object.identityKey);
                    }
                    if (options.bytes === String) object.identitySig = "";
                    else {
                        object.identitySig = [];
                        if (options.bytes !== Array) object.identitySig = $util.newBuffer(object.identitySig);
                    }
                    if (options.bytes === String) object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array) object.data = $util.newBuffer(object.data);
                    }
                }
                if (message.identityKey != null && message.hasOwnProperty("identityKey")) object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;
                if (message.identitySig != null && message.hasOwnProperty("identitySig")) object.identitySig = options.bytes === String ? $util.base64.encode(message.identitySig, 0, message.identitySig.length) : options.bytes === Array ? Array.prototype.slice.call(message.identitySig) : message.identitySig;
                if (message.data != null && message.hasOwnProperty("data")) object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                return object;
            };
            /**
             * Converts this NoiseHandshakePayload to JSON.
             * @function toJSON
             * @memberof pb.NoiseHandshakePayload
             * @instance
             * @returns {Object.<string,*>} JSON object
             */ NoiseHandshakePayload.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return NoiseHandshakePayload;
        }();
        return pb;
    }();
    return $root;
});

},{"protobufjs/minimal":"kgguT"}],"1cuyX":[function(require,module,exports) {
"use strict";
/**
 * Returns true if the two passed Uint8Arrays have the same content
 *
 * @param {Uint8Array} a
 * @param {Uint8Array} b
 */ function equals(a, b) {
    if (a === b) return true;
    if (a.byteLength !== b.byteLength) return false;
    for(let i = 0; i < a.byteLength; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
module.exports = equals;

},{}],"665MT":[function(require,module,exports) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AbstractHandshake = exports.MIN_NONCE = void 0;
const buffer_1 = require("buffer");
const x25519 = __importStar(require("@stablelib/x25519"));
const SHA256 = __importStar(require("@stablelib/sha256"));
const chacha20poly1305_1 = require("@stablelib/chacha20poly1305");
const utils_1 = require("../utils");
const logger_1 = require("../logger");
exports.MIN_NONCE = 0;
class AbstractHandshake {
    encryptWithAd(cs, ad, plaintext) {
        const e = this.encrypt(cs.k, cs.n, ad, plaintext);
        this.setNonce(cs, this.incrementNonce(cs.n));
        return e;
    }
    decryptWithAd(cs, ad, ciphertext) {
        const { plaintext , valid  } = this.decrypt(cs.k, cs.n, ad, ciphertext);
        this.setNonce(cs, this.incrementNonce(cs.n));
        return {
            plaintext,
            valid
        };
    }
    // Cipher state related
    hasKey(cs) {
        return !this.isEmptyKey(cs.k);
    }
    setNonce(cs, nonce) {
        cs.n = nonce;
    }
    createEmptyKey() {
        return buffer_1.Buffer.alloc(32);
    }
    isEmptyKey(k) {
        const emptyKey = this.createEmptyKey();
        return emptyKey.equals(k);
    }
    incrementNonce(n) {
        return n + 1;
    }
    nonceToBytes(n) {
        const nonce = buffer_1.Buffer.alloc(12);
        nonce.writeUInt32LE(n, 4);
        return nonce;
    }
    encrypt(k, n, ad, plaintext) {
        const nonce = this.nonceToBytes(n);
        const ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);
        const encryptedMessage = ctx.seal(nonce, plaintext, ad);
        return buffer_1.Buffer.from(encryptedMessage.buffer, encryptedMessage.byteOffset, encryptedMessage.length);
    }
    encryptAndHash(ss, plaintext) {
        let ciphertext;
        if (this.hasKey(ss.cs)) ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);
        else ciphertext = plaintext;
        this.mixHash(ss, ciphertext);
        return ciphertext;
    }
    decrypt(k, n, ad, ciphertext) {
        const nonce = this.nonceToBytes(n);
        const ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);
        const encryptedMessage = ctx.open(nonce, ciphertext, ad);
        if (encryptedMessage) return {
            plaintext: buffer_1.Buffer.from(encryptedMessage.buffer, encryptedMessage.byteOffset, encryptedMessage.length),
            valid: true
        };
        else return {
            plaintext: buffer_1.Buffer.from(""),
            valid: false
        };
    }
    decryptAndHash(ss, ciphertext) {
        let plaintext;
        let valid = true;
        if (this.hasKey(ss.cs)) ({ plaintext , valid  } = this.decryptWithAd(ss.cs, ss.h, ciphertext));
        else plaintext = ciphertext;
        this.mixHash(ss, ciphertext);
        return {
            plaintext,
            valid
        };
    }
    dh(privateKey, publicKey) {
        try {
            const derivedU8 = x25519.sharedKey(privateKey, publicKey);
            const derived = buffer_1.Buffer.from(derivedU8.buffer, derivedU8.byteOffset, derivedU8.length);
            const result = buffer_1.Buffer.alloc(32);
            derived.copy(result);
            return result;
        } catch (e) {
            logger_1.logger(e.message);
            return buffer_1.Buffer.alloc(32);
        }
    }
    mixHash(ss, data) {
        ss.h = this.getHash(ss.h, data);
    }
    getHash(a, b) {
        const hash = SHA256.hash(buffer_1.Buffer.from([
            ...a,
            ...b
        ]));
        return buffer_1.Buffer.from(hash.buffer, hash.byteOffset, hash.length);
    }
    mixKey(ss, ikm) {
        const [ck, tempK] = utils_1.getHkdf(ss.ck, ikm);
        ss.cs = this.initializeKey(tempK);
        ss.ck = ck;
    }
    initializeKey(k) {
        const n = exports.MIN_NONCE;
        return {
            k,
            n
        };
    }
    // Symmetric state related
    initializeSymmetric(protocolName) {
        const protocolNameBytes = buffer_1.Buffer.from(protocolName, "utf-8");
        const h = this.hashProtocolName(protocolNameBytes);
        const ck = h;
        const key = this.createEmptyKey();
        const cs = this.initializeKey(key);
        return {
            cs,
            ck,
            h
        };
    }
    hashProtocolName(protocolName) {
        if (protocolName.length <= 32) {
            const h = buffer_1.Buffer.alloc(32);
            protocolName.copy(h);
            return h;
        } else return this.getHash(protocolName, buffer_1.Buffer.alloc(0));
    }
    split(ss) {
        const [tempk1, tempk2] = utils_1.getHkdf(ss.ck, buffer_1.Buffer.alloc(0));
        const cs1 = this.initializeKey(tempk1);
        const cs2 = this.initializeKey(tempk2);
        return {
            cs1,
            cs2
        };
    }
    writeMessageRegular(cs, payload) {
        const ciphertext = this.encryptWithAd(cs, buffer_1.Buffer.alloc(0), payload);
        const ne = this.createEmptyKey();
        const ns = buffer_1.Buffer.alloc(0);
        return {
            ne,
            ns,
            ciphertext
        };
    }
    readMessageRegular(cs, message) {
        return this.decryptWithAd(cs, buffer_1.Buffer.alloc(0), message.ciphertext);
    }
}
exports.AbstractHandshake = AbstractHandshake;

},{"buffer":"fCgem","@stablelib/x25519":"5xoxU","@stablelib/sha256":"fPm7j","@stablelib/chacha20poly1305":"lU2zl","../utils":"1bkCP","../logger":"2se0g"}],"lU2zl":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
var chacha_1 = require("@stablelib/chacha");
var poly1305_1 = require("@stablelib/poly1305");
var wipe_1 = require("@stablelib/wipe");
var binary_1 = require("@stablelib/binary");
var constant_time_1 = require("@stablelib/constant-time");
exports.KEY_LENGTH = 32;
exports.NONCE_LENGTH = 12;
exports.TAG_LENGTH = 16;
var ZEROS = new Uint8Array(16);
/**
 * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.
 *
 * Defined in RFC7539.
 */ var ChaCha20Poly1305 = /** @class */ function() {
    /**
     * Creates a new instance with the given 32-byte key.
     */ function ChaCha20Poly13051(key) {
        this.nonceLength = exports.NONCE_LENGTH;
        this.tagLength = exports.TAG_LENGTH;
        if (key.length !== exports.KEY_LENGTH) throw new Error("ChaCha20Poly1305 needs 32-byte key");
        // Copy key.
        this._key = new Uint8Array(key);
    }
    /**
     * Encrypts and authenticates plaintext, authenticates associated data,
     * and returns sealed ciphertext, which includes authentication tag.
     *
     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
     * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
     * and nonce.
     *
     * If dst is given (it must be the size of plaintext + the size of tag
     * length) the result will be put into it. Dst and plaintext must not
     * overlap.
     */ ChaCha20Poly13051.prototype.seal = function(nonce, plaintext, associatedData, dst) {
        if (nonce.length > 16) throw new Error("ChaCha20Poly1305: incorrect nonce length");
        // Allocate space for counter, and set nonce as last bytes of it.
        var counter = new Uint8Array(16);
        counter.set(nonce, counter.length - nonce.length);
        // Generate authentication key by taking first 32-bytes of stream.
        // We pass full counter, which has 12-byte nonce and 4-byte block counter,
        // and it will get incremented after generating the block, which is
        // exactly what we need: we only use the first 32 bytes of 64-byte
        // ChaCha block and discard the next 32 bytes.
        var authKey = new Uint8Array(32);
        chacha_1.stream(this._key, counter, authKey, 4);
        // Allocate space for sealed ciphertext.
        var resultLength = plaintext.length + this.tagLength;
        var result;
        if (dst) {
            if (dst.length !== resultLength) throw new Error("ChaCha20Poly1305: incorrect destination length");
            result = dst;
        } else result = new Uint8Array(resultLength);
        // Encrypt plaintext.
        chacha_1.streamXOR(this._key, counter, plaintext, result, 4);
        // Authenticate.
        // XXX: can "simplify" here: pass full result (which is already padded
        // due to zeroes prepared for tag), and ciphertext length instead of
        // subarray of result.
        this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);
        // Cleanup.
        wipe_1.wipe(counter);
        return result;
    };
    /**
     * Authenticates sealed ciphertext (which includes authentication tag) and
     * associated data, decrypts ciphertext and returns decrypted plaintext.
     *
     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
     * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
     * and nonce.
     *
     * If authentication fails, it returns null.
     *
     * If dst is given (it must be of ciphertext length minus tag length),
     * the result will be put into it. Dst and plaintext must not overlap.
     */ ChaCha20Poly13051.prototype.open = function(nonce, sealed, associatedData, dst) {
        if (nonce.length > 16) throw new Error("ChaCha20Poly1305: incorrect nonce length");
        // Sealed ciphertext should at least contain tag.
        if (sealed.length < this.tagLength) // TODO(dchest): should we throw here instead?
        return null;
        // Allocate space for counter, and set nonce as last bytes of it.
        var counter = new Uint8Array(16);
        counter.set(nonce, counter.length - nonce.length);
        // Generate authentication key by taking first 32-bytes of stream.
        var authKey = new Uint8Array(32);
        chacha_1.stream(this._key, counter, authKey, 4);
        // Authenticate.
        // XXX: can simplify and avoid allocation: since authenticate()
        // already allocates tag (from Poly1305.digest(), it can return)
        // it instead of copying to calculatedTag. But then in seal()
        // we'll need to copy it.
        var calculatedTag = new Uint8Array(this.tagLength);
        this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);
        // Constant-time compare tags and return null if they differ.
        if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) return null;
        // Allocate space for decrypted plaintext.
        var resultLength = sealed.length - this.tagLength;
        var result;
        if (dst) {
            if (dst.length !== resultLength) throw new Error("ChaCha20Poly1305: incorrect destination length");
            result = dst;
        } else result = new Uint8Array(resultLength);
        // Decrypt.
        chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);
        // Cleanup.
        wipe_1.wipe(counter);
        return result;
    };
    ChaCha20Poly13051.prototype.clean = function() {
        wipe_1.wipe(this._key);
        return this;
    };
    ChaCha20Poly13051.prototype._authenticate = function(tagOut, authKey, ciphertext, associatedData) {
        // Initialize Poly1305 with authKey.
        var h = new poly1305_1.Poly1305(authKey);
        // Authenticate padded associated data.
        if (associatedData) {
            h.update(associatedData);
            if (associatedData.length % 16 > 0) h.update(ZEROS.subarray(associatedData.length % 16));
        }
        // Authenticate padded ciphertext.
        h.update(ciphertext);
        if (ciphertext.length % 16 > 0) h.update(ZEROS.subarray(ciphertext.length % 16));
        // Authenticate length of associated data.
        // XXX: can avoid allocation here?
        var length = new Uint8Array(8);
        if (associatedData) binary_1.writeUint64LE(associatedData.length, length);
        h.update(length);
        // Authenticate length of ciphertext.
        binary_1.writeUint64LE(ciphertext.length, length);
        h.update(length);
        // Get tag and copy it into tagOut.
        var tag = h.digest();
        for(var i = 0; i < tag.length; i++)tagOut[i] = tag[i];
        // Cleanup.
        h.clean();
        wipe_1.wipe(tag);
        wipe_1.wipe(length);
    };
    return ChaCha20Poly13051;
}();
exports.ChaCha20Poly1305 = ChaCha20Poly1305;

},{"@stablelib/chacha":"kgOXq","@stablelib/poly1305":"hOj7F","@stablelib/wipe":"8owN2","@stablelib/binary":"92RWm","@stablelib/constant-time":"ccTzW"}],"kgOXq":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Package chacha implements ChaCha stream cipher.
 */ var binary_1 = require("@stablelib/binary");
var wipe_1 = require("@stablelib/wipe");
// Number of ChaCha rounds (ChaCha20).
var ROUNDS = 20;
// Applies the ChaCha core function to 16-byte input,
// 32-byte key key, and puts the result into 64-byte array out.
function core(out, input, key) {
    var j0 = 0x61707865; // "expa"  -- ChaCha's "sigma" constant
    var j1 = 0x3320646E; // "nd 3"     for 32-byte keys
    var j2 = 0x79622D32; // "2-by"
    var j3 = 0x6B206574; // "te k"
    var j4 = key[3] << 24 | key[2] << 16 | key[1] << 8 | key[0];
    var j5 = key[7] << 24 | key[6] << 16 | key[5] << 8 | key[4];
    var j6 = key[11] << 24 | key[10] << 16 | key[9] << 8 | key[8];
    var j7 = key[15] << 24 | key[14] << 16 | key[13] << 8 | key[12];
    var j8 = key[19] << 24 | key[18] << 16 | key[17] << 8 | key[16];
    var j9 = key[23] << 24 | key[22] << 16 | key[21] << 8 | key[20];
    var j10 = key[27] << 24 | key[26] << 16 | key[25] << 8 | key[24];
    var j11 = key[31] << 24 | key[30] << 16 | key[29] << 8 | key[28];
    var j12 = input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0];
    var j13 = input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4];
    var j14 = input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8];
    var j15 = input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12];
    var x0 = j0;
    var x1 = j1;
    var x2 = j2;
    var x3 = j3;
    var x4 = j4;
    var x5 = j5;
    var x6 = j6;
    var x7 = j7;
    var x8 = j8;
    var x9 = j9;
    var x10 = j10;
    var x11 = j11;
    var x12 = j12;
    var x13 = j13;
    var x14 = j14;
    var x15 = j15;
    for(var i = 0; i < ROUNDS; i += 2){
        x0 = x0 + x4 | 0;
        x12 ^= x0;
        x12 = x12 >>> 16 | x12 << 16;
        x8 = x8 + x12 | 0;
        x4 ^= x8;
        x4 = x4 >>> 20 | x4 << 12;
        x1 = x1 + x5 | 0;
        x13 ^= x1;
        x13 = x13 >>> 16 | x13 << 16;
        x9 = x9 + x13 | 0;
        x5 ^= x9;
        x5 = x5 >>> 20 | x5 << 12;
        x2 = x2 + x6 | 0;
        x14 ^= x2;
        x14 = x14 >>> 16 | x14 << 16;
        x10 = x10 + x14 | 0;
        x6 ^= x10;
        x6 = x6 >>> 20 | x6 << 12;
        x3 = x3 + x7 | 0;
        x15 ^= x3;
        x15 = x15 >>> 16 | x15 << 16;
        x11 = x11 + x15 | 0;
        x7 ^= x11;
        x7 = x7 >>> 20 | x7 << 12;
        x2 = x2 + x6 | 0;
        x14 ^= x2;
        x14 = x14 >>> 24 | x14 << 8;
        x10 = x10 + x14 | 0;
        x6 ^= x10;
        x6 = x6 >>> 25 | x6 << 7;
        x3 = x3 + x7 | 0;
        x15 ^= x3;
        x15 = x15 >>> 24 | x15 << 8;
        x11 = x11 + x15 | 0;
        x7 ^= x11;
        x7 = x7 >>> 25 | x7 << 7;
        x1 = x1 + x5 | 0;
        x13 ^= x1;
        x13 = x13 >>> 24 | x13 << 8;
        x9 = x9 + x13 | 0;
        x5 ^= x9;
        x5 = x5 >>> 25 | x5 << 7;
        x0 = x0 + x4 | 0;
        x12 ^= x0;
        x12 = x12 >>> 24 | x12 << 8;
        x8 = x8 + x12 | 0;
        x4 ^= x8;
        x4 = x4 >>> 25 | x4 << 7;
        x0 = x0 + x5 | 0;
        x15 ^= x0;
        x15 = x15 >>> 16 | x15 << 16;
        x10 = x10 + x15 | 0;
        x5 ^= x10;
        x5 = x5 >>> 20 | x5 << 12;
        x1 = x1 + x6 | 0;
        x12 ^= x1;
        x12 = x12 >>> 16 | x12 << 16;
        x11 = x11 + x12 | 0;
        x6 ^= x11;
        x6 = x6 >>> 20 | x6 << 12;
        x2 = x2 + x7 | 0;
        x13 ^= x2;
        x13 = x13 >>> 16 | x13 << 16;
        x8 = x8 + x13 | 0;
        x7 ^= x8;
        x7 = x7 >>> 20 | x7 << 12;
        x3 = x3 + x4 | 0;
        x14 ^= x3;
        x14 = x14 >>> 16 | x14 << 16;
        x9 = x9 + x14 | 0;
        x4 ^= x9;
        x4 = x4 >>> 20 | x4 << 12;
        x2 = x2 + x7 | 0;
        x13 ^= x2;
        x13 = x13 >>> 24 | x13 << 8;
        x8 = x8 + x13 | 0;
        x7 ^= x8;
        x7 = x7 >>> 25 | x7 << 7;
        x3 = x3 + x4 | 0;
        x14 ^= x3;
        x14 = x14 >>> 24 | x14 << 8;
        x9 = x9 + x14 | 0;
        x4 ^= x9;
        x4 = x4 >>> 25 | x4 << 7;
        x1 = x1 + x6 | 0;
        x12 ^= x1;
        x12 = x12 >>> 24 | x12 << 8;
        x11 = x11 + x12 | 0;
        x6 ^= x11;
        x6 = x6 >>> 25 | x6 << 7;
        x0 = x0 + x5 | 0;
        x15 ^= x0;
        x15 = x15 >>> 24 | x15 << 8;
        x10 = x10 + x15 | 0;
        x5 ^= x10;
        x5 = x5 >>> 25 | x5 << 7;
    }
    binary_1.writeUint32LE(x0 + j0 | 0, out, 0);
    binary_1.writeUint32LE(x1 + j1 | 0, out, 4);
    binary_1.writeUint32LE(x2 + j2 | 0, out, 8);
    binary_1.writeUint32LE(x3 + j3 | 0, out, 12);
    binary_1.writeUint32LE(x4 + j4 | 0, out, 16);
    binary_1.writeUint32LE(x5 + j5 | 0, out, 20);
    binary_1.writeUint32LE(x6 + j6 | 0, out, 24);
    binary_1.writeUint32LE(x7 + j7 | 0, out, 28);
    binary_1.writeUint32LE(x8 + j8 | 0, out, 32);
    binary_1.writeUint32LE(x9 + j9 | 0, out, 36);
    binary_1.writeUint32LE(x10 + j10 | 0, out, 40);
    binary_1.writeUint32LE(x11 + j11 | 0, out, 44);
    binary_1.writeUint32LE(x12 + j12 | 0, out, 48);
    binary_1.writeUint32LE(x13 + j13 | 0, out, 52);
    binary_1.writeUint32LE(x14 + j14 | 0, out, 56);
    binary_1.writeUint32LE(x15 + j15 | 0, out, 60);
}
/**
 * Encrypt src with ChaCha20 stream generated for the given 32-byte key and
 * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and
 * write the result into dst and return it.
 *
 * dst and src may be the same, but otherwise must not overlap.
 *
 * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the
 * same key and nonce, otherwise the stream will repeat. The function will
 * throw error if counter overflows to prevent this.
 *
 * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which
 * is more than a million petabytes). However, it is not recommended to
 * generate 8-byte nonces randomly, as the chance of collision is high.
 *
 * Never use the same key and nonce to encrypt more than one message.
 *
 * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte
 * array with stream counter in first nonceInplaceCounterLength bytes and nonce
 * in the last remaining bytes. The counter will be incremented inplace for
 * each ChaCha block. This is useful if you need to encrypt one stream of data
 * in chunks.
 */ function streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {
    if (nonceInplaceCounterLength === void 0) nonceInplaceCounterLength = 0;
    // We only support 256-bit keys.
    if (key.length !== 32) throw new Error("ChaCha: key size must be 32 bytes");
    if (dst.length < src.length) throw new Error("ChaCha: destination is shorter than source");
    var nc;
    var counterLength;
    if (nonceInplaceCounterLength === 0) {
        if (nonce.length !== 8 && nonce.length !== 12) throw new Error("ChaCha nonce must be 8 or 12 bytes");
        nc = new Uint8Array(16);
        // First counterLength bytes of nc are counter, starting with zero.
        counterLength = nc.length - nonce.length;
        // Last bytes of nc after counterLength are nonce, set them.
        nc.set(nonce, counterLength);
    } else {
        if (nonce.length !== 16) throw new Error("ChaCha nonce with counter must be 16 bytes");
        // This will update passed nonce with counter inplace.
        nc = nonce;
        counterLength = nonceInplaceCounterLength;
    }
    // Allocate temporary space for ChaCha block.
    var block = new Uint8Array(64);
    for(var i = 0; i < src.length; i += 64){
        // Generate a block.
        core(block, nc, key);
        // XOR block bytes with src into dst.
        for(var j = i; j < i + 64 && j < src.length; j++)dst[j] = src[j] ^ block[j - i];
        // Increment counter.
        incrementCounter(nc, 0, counterLength);
    }
    // Cleanup temporary space.
    wipe_1.wipe(block);
    if (nonceInplaceCounterLength === 0) // Cleanup counter.
    wipe_1.wipe(nc);
    return dst;
}
exports.streamXOR = streamXOR;
/**
 * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte
 * nonce and write it into dst and return it.
 *
 * Never use the same key and nonce to generate more than one stream.
 *
 * If nonceInplaceCounterLength is not 0, it behaves the same with respect to
 * the nonce as described in the streamXOR documentation.
 *
 * stream is like streamXOR with all-zero src.
 */ function stream(key, nonce, dst, nonceInplaceCounterLength) {
    if (nonceInplaceCounterLength === void 0) nonceInplaceCounterLength = 0;
    wipe_1.wipe(dst);
    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);
}
exports.stream = stream;
function incrementCounter(counter, pos, len) {
    var carry = 1;
    while(len--){
        carry = carry + (counter[pos] & 0xff) | 0;
        counter[pos] = carry & 0xff;
        carry >>>= 8;
        pos++;
    }
    if (carry > 0) throw new Error("ChaCha: counter overflow");
}

},{"@stablelib/binary":"92RWm","@stablelib/wipe":"8owN2"}],"hOj7F":[function(require,module,exports) {
"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Package poly1305 implements Poly1305 one-time message authentication algorithm.
 */ var constant_time_1 = require("@stablelib/constant-time");
var wipe_1 = require("@stablelib/wipe");
exports.DIGEST_LENGTH = 16;
// Port of Andrew Moon's Poly1305-donna-16. Public domain.
// https://github.com/floodyberry/poly1305-donna
/**
 * Poly1305 computes 16-byte authenticator of message using
 * a one-time 32-byte key.
 *
 * Important: key should be used for only one message,
 * it should never repeat.
 */ var Poly1305 = /** @class */ function() {
    function Poly13051(key) {
        this.digestLength = exports.DIGEST_LENGTH;
        this._buffer = new Uint8Array(16);
        this._r = new Uint16Array(10);
        this._h = new Uint16Array(10);
        this._pad = new Uint16Array(8);
        this._leftover = 0;
        this._fin = 0;
        this._finished = false;
        var t0 = key[0] | key[1] << 8;
        this._r[0] = t0 & 0x1fff;
        var t1 = key[2] | key[3] << 8;
        this._r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
        var t2 = key[4] | key[5] << 8;
        this._r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
        var t3 = key[6] | key[7] << 8;
        this._r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
        var t4 = key[8] | key[9] << 8;
        this._r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
        this._r[5] = t4 >>> 1 & 0x1ffe;
        var t5 = key[10] | key[11] << 8;
        this._r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
        var t6 = key[12] | key[13] << 8;
        this._r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
        var t7 = key[14] | key[15] << 8;
        this._r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
        this._r[9] = t7 >>> 5 & 0x007f;
        this._pad[0] = key[16] | key[17] << 8;
        this._pad[1] = key[18] | key[19] << 8;
        this._pad[2] = key[20] | key[21] << 8;
        this._pad[3] = key[22] | key[23] << 8;
        this._pad[4] = key[24] | key[25] << 8;
        this._pad[5] = key[26] | key[27] << 8;
        this._pad[6] = key[28] | key[29] << 8;
        this._pad[7] = key[30] | key[31] << 8;
    }
    Poly13051.prototype._blocks = function(m, mpos, bytes) {
        var hibit = this._fin ? 0 : 2048;
        var h0 = this._h[0], h1 = this._h[1], h2 = this._h[2], h3 = this._h[3], h4 = this._h[4], h5 = this._h[5], h6 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];
        var r0 = this._r[0], r1 = this._r[1], r2 = this._r[2], r3 = this._r[3], r4 = this._r[4], r5 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];
        while(bytes >= 16){
            var t0 = m[mpos + 0] | m[mpos + 1] << 8;
            h0 += t0 & 0x1fff;
            var t1 = m[mpos + 2] | m[mpos + 3] << 8;
            h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;
            var t2 = m[mpos + 4] | m[mpos + 5] << 8;
            h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;
            var t3 = m[mpos + 6] | m[mpos + 7] << 8;
            h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;
            var t4 = m[mpos + 8] | m[mpos + 9] << 8;
            h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;
            h5 += t4 >>> 1 & 0x1fff;
            var t5 = m[mpos + 10] | m[mpos + 11] << 8;
            h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;
            var t6 = m[mpos + 12] | m[mpos + 13] << 8;
            h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;
            var t7 = m[mpos + 14] | m[mpos + 15] << 8;
            h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;
            h9 += t7 >>> 5 | hibit;
            var c = 0;
            var d0 = c;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h2 * (5 * r8);
            d0 += h3 * (5 * r7);
            d0 += h4 * (5 * r6);
            c = d0 >>> 13;
            d0 &= 0x1fff;
            d0 += h5 * (5 * r5);
            d0 += h6 * (5 * r4);
            d0 += h7 * (5 * r3);
            d0 += h8 * (5 * r2);
            d0 += h9 * (5 * r1);
            c += d0 >>> 13;
            d0 &= 0x1fff;
            var d1 = c;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h2 * (5 * r9);
            d1 += h3 * (5 * r8);
            d1 += h4 * (5 * r7);
            c = d1 >>> 13;
            d1 &= 0x1fff;
            d1 += h5 * (5 * r6);
            d1 += h6 * (5 * r5);
            d1 += h7 * (5 * r4);
            d1 += h8 * (5 * r3);
            d1 += h9 * (5 * r2);
            c += d1 >>> 13;
            d1 &= 0x1fff;
            var d2 = c;
            d2 += h0 * r2;
            d2 += h1 * r1;
            d2 += h2 * r0;
            d2 += h3 * (5 * r9);
            d2 += h4 * (5 * r8);
            c = d2 >>> 13;
            d2 &= 0x1fff;
            d2 += h5 * (5 * r7);
            d2 += h6 * (5 * r6);
            d2 += h7 * (5 * r5);
            d2 += h8 * (5 * r4);
            d2 += h9 * (5 * r3);
            c += d2 >>> 13;
            d2 &= 0x1fff;
            var d3 = c;
            d3 += h0 * r3;
            d3 += h1 * r2;
            d3 += h2 * r1;
            d3 += h3 * r0;
            d3 += h4 * (5 * r9);
            c = d3 >>> 13;
            d3 &= 0x1fff;
            d3 += h5 * (5 * r8);
            d3 += h6 * (5 * r7);
            d3 += h7 * (5 * r6);
            d3 += h8 * (5 * r5);
            d3 += h9 * (5 * r4);
            c += d3 >>> 13;
            d3 &= 0x1fff;
            var d4 = c;
            d4 += h0 * r4;
            d4 += h1 * r3;
            d4 += h2 * r2;
            d4 += h3 * r1;
            d4 += h4 * r0;
            c = d4 >>> 13;
            d4 &= 0x1fff;
            d4 += h5 * (5 * r9);
            d4 += h6 * (5 * r8);
            d4 += h7 * (5 * r7);
            d4 += h8 * (5 * r6);
            d4 += h9 * (5 * r5);
            c += d4 >>> 13;
            d4 &= 0x1fff;
            var d5 = c;
            d5 += h0 * r5;
            d5 += h1 * r4;
            d5 += h2 * r3;
            d5 += h3 * r2;
            d5 += h4 * r1;
            c = d5 >>> 13;
            d5 &= 0x1fff;
            d5 += h5 * r0;
            d5 += h6 * (5 * r9);
            d5 += h7 * (5 * r8);
            d5 += h8 * (5 * r7);
            d5 += h9 * (5 * r6);
            c += d5 >>> 13;
            d5 &= 0x1fff;
            var d6 = c;
            d6 += h0 * r6;
            d6 += h1 * r5;
            d6 += h2 * r4;
            d6 += h3 * r3;
            d6 += h4 * r2;
            c = d6 >>> 13;
            d6 &= 0x1fff;
            d6 += h5 * r1;
            d6 += h6 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c += d6 >>> 13;
            d6 &= 0x1fff;
            var d7 = c;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h2 * r5;
            d7 += h3 * r4;
            d7 += h4 * r3;
            c = d7 >>> 13;
            d7 &= 0x1fff;
            d7 += h5 * r2;
            d7 += h6 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c += d7 >>> 13;
            d7 &= 0x1fff;
            var d8 = c;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h2 * r6;
            d8 += h3 * r5;
            d8 += h4 * r4;
            c = d8 >>> 13;
            d8 &= 0x1fff;
            d8 += h5 * r3;
            d8 += h6 * r2;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c += d8 >>> 13;
            d8 &= 0x1fff;
            var d9 = c;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h2 * r7;
            d9 += h3 * r6;
            d9 += h4 * r5;
            c = d9 >>> 13;
            d9 &= 0x1fff;
            d9 += h5 * r4;
            d9 += h6 * r3;
            d9 += h7 * r2;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c += d9 >>> 13;
            d9 &= 0x1fff;
            c = (c << 2) + c | 0;
            c = c + d0 | 0;
            d0 = c & 0x1fff;
            c = c >>> 13;
            d1 += c;
            h0 = d0;
            h1 = d1;
            h2 = d2;
            h3 = d3;
            h4 = d4;
            h5 = d5;
            h6 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
        }
        this._h[0] = h0;
        this._h[1] = h1;
        this._h[2] = h2;
        this._h[3] = h3;
        this._h[4] = h4;
        this._h[5] = h5;
        this._h[6] = h6;
        this._h[7] = h7;
        this._h[8] = h8;
        this._h[9] = h9;
    };
    Poly13051.prototype.finish = function(mac, macpos) {
        if (macpos === void 0) macpos = 0;
        var g = new Uint16Array(10);
        var c;
        var mask;
        var f;
        var i;
        if (this._leftover) {
            i = this._leftover;
            this._buffer[i++] = 1;
            for(; i < 16; i++)this._buffer[i] = 0;
            this._fin = 1;
            this._blocks(this._buffer, 0, 16);
        }
        c = this._h[1] >>> 13;
        this._h[1] &= 0x1fff;
        for(i = 2; i < 10; i++){
            this._h[i] += c;
            c = this._h[i] >>> 13;
            this._h[i] &= 0x1fff;
        }
        this._h[0] += c * 5;
        c = this._h[0] >>> 13;
        this._h[0] &= 0x1fff;
        this._h[1] += c;
        c = this._h[1] >>> 13;
        this._h[1] &= 0x1fff;
        this._h[2] += c;
        g[0] = this._h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 0x1fff;
        for(i = 1; i < 10; i++){
            g[i] = this._h[i] + c;
            c = g[i] >>> 13;
            g[i] &= 0x1fff;
        }
        g[9] -= 8192;
        mask = (c ^ 1) - 1;
        for(i = 0; i < 10; i++)g[i] &= mask;
        mask = ~mask;
        for(i = 0; i < 10; i++)this._h[i] = this._h[i] & mask | g[i];
        this._h[0] = (this._h[0] | this._h[1] << 13) & 0xffff;
        this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 0xffff;
        this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 0xffff;
        this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 0xffff;
        this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 0xffff;
        this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 0xffff;
        this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 0xffff;
        this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 0xffff;
        f = this._h[0] + this._pad[0];
        this._h[0] = f & 0xffff;
        for(i = 1; i < 8; i++){
            f = (this._h[i] + this._pad[i] | 0) + (f >>> 16) | 0;
            this._h[i] = f & 0xffff;
        }
        mac[macpos + 0] = this._h[0] >>> 0;
        mac[macpos + 1] = this._h[0] >>> 8;
        mac[macpos + 2] = this._h[1] >>> 0;
        mac[macpos + 3] = this._h[1] >>> 8;
        mac[macpos + 4] = this._h[2] >>> 0;
        mac[macpos + 5] = this._h[2] >>> 8;
        mac[macpos + 6] = this._h[3] >>> 0;
        mac[macpos + 7] = this._h[3] >>> 8;
        mac[macpos + 8] = this._h[4] >>> 0;
        mac[macpos + 9] = this._h[4] >>> 8;
        mac[macpos + 10] = this._h[5] >>> 0;
        mac[macpos + 11] = this._h[5] >>> 8;
        mac[macpos + 12] = this._h[6] >>> 0;
        mac[macpos + 13] = this._h[6] >>> 8;
        mac[macpos + 14] = this._h[7] >>> 0;
        mac[macpos + 15] = this._h[7] >>> 8;
        this._finished = true;
        return this;
    };
    Poly13051.prototype.update = function(m) {
        var mpos = 0;
        var bytes = m.length;
        var want;
        if (this._leftover) {
            want = 16 - this._leftover;
            if (want > bytes) want = bytes;
            for(var i = 0; i < want; i++)this._buffer[this._leftover + i] = m[mpos + i];
            bytes -= want;
            mpos += want;
            this._leftover += want;
            if (this._leftover < 16) return this;
            this._blocks(this._buffer, 0, 16);
            this._leftover = 0;
        }
        if (bytes >= 16) {
            want = bytes - bytes % 16;
            this._blocks(m, mpos, want);
            mpos += want;
            bytes -= want;
        }
        if (bytes) {
            for(var i = 0; i < bytes; i++)this._buffer[this._leftover + i] = m[mpos + i];
            this._leftover += bytes;
        }
        return this;
    };
    Poly13051.prototype.digest = function() {
        // TODO(dchest): it behaves differently than other hashes/HMAC,
        // because it throws when finished — others just return saved result.
        if (this._finished) throw new Error("Poly1305 was finished");
        var mac = new Uint8Array(16);
        this.finish(mac);
        return mac;
    };
    Poly13051.prototype.clean = function() {
        wipe_1.wipe(this._buffer);
        wipe_1.wipe(this._r);
        wipe_1.wipe(this._h);
        wipe_1.wipe(this._pad);
        this._leftover = 0;
        this._fin = 0;
        this._finished = true; // mark as finished even if not
        return this;
    };
    return Poly13051;
}();
exports.Poly1305 = Poly1305;
/**
 * Returns 16-byte authenticator of data using a one-time 32-byte key.
 *
 * Important: key should be used for only one message, it should never repeat.
 */ function oneTimeAuth(key, data) {
    var h = new Poly1305(key);
    h.update(data);
    var digest = h.digest();
    h.clean();
    return digest;
}
exports.oneTimeAuth = oneTimeAuth;
/**
 * Returns true if two authenticators are 16-byte long and equal.
 * Uses contant-time comparison to avoid leaking timing information.
 */ function equal(a, b) {
    if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) return false;
    return constant_time_1.equal(a, b);
}
exports.equal = equal;

},{"@stablelib/constant-time":"ccTzW","@stablelib/wipe":"8owN2"}],"2se0g":[function(require,module,exports) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.logCipherState = exports.logRemoteEphemeralKey = exports.logRemoteStaticKey = exports.logLocalEphemeralKeys = exports.logLocalStaticKeys = exports.logger = void 0;
const debug_1 = __importDefault(require("debug"));
const constants_1 = require("./constants");
exports.logger = debug_1.default("libp2p:noise");
let keyLogger;
if (constants_1.DUMP_SESSION_KEYS) keyLogger = exports.logger;
else keyLogger = ()=>{};
function logLocalStaticKeys(s) {
    keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${s.publicKey.toString("hex")}`);
    keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${s.privateKey.toString("hex")}`);
}
exports.logLocalStaticKeys = logLocalStaticKeys;
function logLocalEphemeralKeys(e) {
    if (e) {
        keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${e.publicKey.toString("hex")}`);
        keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${e.privateKey.toString("hex")}`);
    } else keyLogger("Missing local ephemeral keys.");
}
exports.logLocalEphemeralKeys = logLocalEphemeralKeys;
function logRemoteStaticKey(rs) {
    keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${rs.toString("hex")}`);
}
exports.logRemoteStaticKey = logRemoteStaticKey;
function logRemoteEphemeralKey(re) {
    keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${re.toString("hex")}`);
}
exports.logRemoteEphemeralKey = logRemoteEphemeralKey;
function logCipherState(session) {
    if (session.cs1 && session.cs2) {
        keyLogger(`CIPHER_STATE_1 ${session.cs1.n} ${session.cs1.k.toString("hex")}`);
        keyLogger(`CIPHER_STATE_2 ${session.cs2.n} ${session.cs2.k.toString("hex")}`);
    } else keyLogger("Missing cipher state.");
}
exports.logCipherState = logCipherState;

},{"debug":"l0oUb","./constants":"hp99V"}],"hp99V":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DUMP_SESSION_KEYS = exports.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = exports.NOISE_MSG_MAX_LENGTH_BYTES = void 0;
exports.NOISE_MSG_MAX_LENGTH_BYTES = 65535;
exports.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = exports.NOISE_MSG_MAX_LENGTH_BYTES - 16;
exports.DUMP_SESSION_KEYS = undefined;

},{}],"9nJEO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decode2 = exports.decode1 = exports.decode0 = exports.encode2 = exports.encode1 = exports.encode0 = exports.uint16BEDecode = exports.uint16BEEncode = void 0;
const buffer_1 = require("buffer");
const uint16BEEncode = (value, target, offset)=>{
    target = target || buffer_1.Buffer.allocUnsafe(2);
    target.writeUInt16BE(value, offset);
    return target;
};
exports.uint16BEEncode = uint16BEEncode;
exports.uint16BEEncode.bytes = 2;
const uint16BEDecode = (data)=>{
    if (data.length < 2) throw RangeError("Could not decode int16BE");
    return data.readUInt16BE(0);
};
exports.uint16BEDecode = uint16BEDecode;
exports.uint16BEDecode.bytes = 2;
// Note: IK and XX encoder usage is opposite (XX uses in stages encode0 where IK uses encode1)
function encode0(message) {
    return buffer_1.Buffer.concat([
        message.ne,
        message.ciphertext
    ]);
}
exports.encode0 = encode0;
function encode1(message) {
    return buffer_1.Buffer.concat([
        message.ne,
        message.ns,
        message.ciphertext
    ]);
}
exports.encode1 = encode1;
function encode2(message) {
    return buffer_1.Buffer.concat([
        message.ns,
        message.ciphertext
    ]);
}
exports.encode2 = encode2;
function decode0(input) {
    if (input.length < 32) throw new Error("Cannot decode stage 0 MessageBuffer: length less than 32 bytes.");
    return {
        ne: input.slice(0, 32),
        ciphertext: input.slice(32, input.length),
        ns: buffer_1.Buffer.alloc(0)
    };
}
exports.decode0 = decode0;
function decode1(input) {
    if (input.length < 80) throw new Error("Cannot decode stage 1 MessageBuffer: length less than 80 bytes.");
    return {
        ne: input.slice(0, 32),
        ns: input.slice(32, 80),
        ciphertext: input.slice(80, input.length)
    };
}
exports.decode1 = decode1;
function decode2(input) {
    if (input.length < 48) throw new Error("Cannot decode stage 2 MessageBuffer: length less than 48 bytes.");
    return {
        ne: buffer_1.Buffer.alloc(0),
        ns: input.slice(0, 48),
        ciphertext: input.slice(48, input.length)
    };
}
exports.decode2 = decode2;

},{"buffer":"fCgem"}],"e5aYB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IKHandshake = void 0;
const ik_1 = require("./handshakes/ik");
const buffer_1 = require("buffer");
const encoder_1 = require("./encoder");
const utils_1 = require("./utils");
const errors_1 = require("./errors");
const logger_1 = require("./logger");
class IKHandshake {
    constructor(isInitiator, payload, prologue, staticKeypair, connection, remoteStaticKey, remotePeer, handshake){
        this.isInitiator = isInitiator;
        this.payload = buffer_1.Buffer.from(payload);
        this.prologue = prologue;
        this.staticKeypair = staticKeypair;
        this.connection = connection;
        if (remotePeer) this.remotePeer = remotePeer;
        this.ik = handshake !== null && handshake !== void 0 ? handshake : new ik_1.IK();
        this.session = this.ik.initSession(this.isInitiator, this.prologue, this.staticKeypair, remoteStaticKey);
        this.remoteEarlyData = buffer_1.Buffer.alloc(0);
    }
    async stage0() {
        logger_1.logLocalStaticKeys(this.session.hs.s);
        logger_1.logRemoteStaticKey(this.session.hs.rs);
        if (this.isInitiator) {
            logger_1.logger("IK Stage 0 - Initiator sending message...");
            const messageBuffer = this.ik.sendMessage(this.session, this.payload);
            this.connection.writeLP(encoder_1.encode1(messageBuffer));
            logger_1.logger("IK Stage 0 - Initiator sent message.");
            logger_1.logLocalEphemeralKeys(this.session.hs.e);
        } else {
            logger_1.logger("IK Stage 0 - Responder receiving message...");
            const receivedMsg = await this.connection.readLP();
            try {
                const receivedMessageBuffer = encoder_1.decode1(receivedMsg.slice());
                const { plaintext , valid  } = this.ik.recvMessage(this.session, receivedMessageBuffer);
                if (!valid) throw new Error("ik handshake stage 0 decryption validation fail");
                logger_1.logger("IK Stage 0 - Responder got message, going to verify payload.");
                const decodedPayload = await utils_1.decodePayload(plaintext);
                this.remotePeer = this.remotePeer || await utils_1.getPeerIdFromPayload(decodedPayload);
                await utils_1.verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);
                this.setRemoteEarlyData(decodedPayload.data);
                logger_1.logger("IK Stage 0 - Responder successfully verified payload!");
                logger_1.logRemoteEphemeralKey(this.session.hs.re);
            } catch (e) {
                const err = e;
                logger_1.logger("Responder breaking up with IK handshake in stage 0.");
                throw new errors_1.FailedIKError(receivedMsg, `Error occurred while verifying initiator's signed payload: ${err.message}`);
            }
        }
    }
    async stage1() {
        if (this.isInitiator) {
            logger_1.logger("IK Stage 1 - Initiator receiving message...");
            const receivedMsg = (await this.connection.readLP()).slice();
            const receivedMessageBuffer = encoder_1.decode0(buffer_1.Buffer.from(receivedMsg));
            const { plaintext , valid  } = this.ik.recvMessage(this.session, receivedMessageBuffer);
            logger_1.logger("IK Stage 1 - Initiator got message, going to verify payload.");
            try {
                if (!valid) throw new Error("ik stage 1 decryption validation fail");
                const decodedPayload = await utils_1.decodePayload(plaintext);
                this.remotePeer = this.remotePeer || await utils_1.getPeerIdFromPayload(decodedPayload);
                await utils_1.verifySignedPayload(receivedMessageBuffer.ns.slice(0, 32), decodedPayload, this.remotePeer);
                this.setRemoteEarlyData(decodedPayload.data);
                logger_1.logger("IK Stage 1 - Initiator successfully verified payload!");
                logger_1.logRemoteEphemeralKey(this.session.hs.re);
            } catch (e) {
                const err = e;
                logger_1.logger("Initiator breaking up with IK handshake in stage 1.");
                throw new errors_1.FailedIKError(receivedMsg, `Error occurred while verifying responder's signed payload: ${err.message}`);
            }
        } else {
            logger_1.logger("IK Stage 1 - Responder sending message...");
            const messageBuffer = this.ik.sendMessage(this.session, this.payload);
            this.connection.writeLP(encoder_1.encode0(messageBuffer));
            logger_1.logger("IK Stage 1 - Responder sent message...");
            logger_1.logLocalEphemeralKeys(this.session.hs.e);
        }
        logger_1.logCipherState(this.session);
    }
    decrypt(ciphertext, session) {
        const cs = this.getCS(session, false);
        return this.ik.decryptWithAd(cs, buffer_1.Buffer.alloc(0), ciphertext);
    }
    encrypt(plaintext, session) {
        const cs = this.getCS(session);
        return this.ik.encryptWithAd(cs, buffer_1.Buffer.alloc(0), plaintext);
    }
    getLocalEphemeralKeys() {
        if (!this.session.hs.e) throw new Error("Ephemeral keys do not exist.");
        return this.session.hs.e;
    }
    getCS(session, encryption = true) {
        if (!session.cs1 || !session.cs2) throw new Error("Handshake not completed properly, cipher state does not exist.");
        if (this.isInitiator) return encryption ? session.cs1 : session.cs2;
        else return encryption ? session.cs2 : session.cs1;
    }
    setRemoteEarlyData(data) {
        if (data) this.remoteEarlyData = buffer_1.Buffer.from(data.buffer, data.byteOffset, data.length);
    }
}
exports.IKHandshake = IKHandshake;

},{"./handshakes/ik":"cclle","buffer":"fCgem","./encoder":"9nJEO","./utils":"1bkCP","./errors":"hTF7l","./logger":"2se0g"}],"cclle":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IK = void 0;
const buffer_1 = require("buffer");
const utils_1 = require("../utils");
const abstract_handshake_1 = require("./abstract-handshake");
class IK extends abstract_handshake_1.AbstractHandshake {
    initSession(initiator, prologue, s, rs) {
        const psk = this.createEmptyKey();
        let hs;
        if (initiator) hs = this.initializeInitiator(prologue, s, rs, psk);
        else hs = this.initializeResponder(prologue, s, rs, psk);
        return {
            hs,
            i: initiator,
            mc: 0
        };
    }
    sendMessage(session, message) {
        let messageBuffer;
        if (session.mc === 0) messageBuffer = this.writeMessageA(session.hs, message);
        else if (session.mc === 1) {
            const { messageBuffer: mb , h , cs1 , cs2  } = this.writeMessageB(session.hs, message);
            messageBuffer = mb;
            session.h = h;
            session.cs1 = cs1;
            session.cs2 = cs2;
        } else if (session.mc > 1) {
            if (session.i) {
                if (!session.cs1) throw new Error("CS1 (cipher state) is not defined");
                messageBuffer = this.writeMessageRegular(session.cs1, message);
            } else {
                if (!session.cs2) throw new Error("CS2 (cipher state) is not defined");
                messageBuffer = this.writeMessageRegular(session.cs2, message);
            }
        } else throw new Error("Session invalid.");
        session.mc++;
        return messageBuffer;
    }
    recvMessage(session, message) {
        let plaintext = buffer_1.Buffer.alloc(0);
        let valid = false;
        if (session.mc === 0) ({ plaintext , valid  } = this.readMessageA(session.hs, message));
        if (session.mc === 1) {
            const { plaintext: pt , valid: v , h , cs1 , cs2  } = this.readMessageB(session.hs, message);
            plaintext = pt;
            valid = v;
            session.h = h;
            session.cs1 = cs1;
            session.cs2 = cs2;
        }
        session.mc++;
        return {
            plaintext,
            valid
        };
    }
    writeMessageA(hs, payload) {
        hs.e = utils_1.generateKeypair();
        const ne = hs.e.publicKey;
        this.mixHash(hs.ss, ne);
        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));
        const spk = buffer_1.Buffer.from(hs.s.publicKey);
        const ns = this.encryptAndHash(hs.ss, spk);
        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));
        const ciphertext = this.encryptAndHash(hs.ss, payload);
        return {
            ne,
            ns,
            ciphertext
        };
    }
    writeMessageB(hs, payload) {
        hs.e = utils_1.generateKeypair();
        const ne = hs.e.publicKey;
        this.mixHash(hs.ss, ne);
        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));
        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));
        const ciphertext = this.encryptAndHash(hs.ss, payload);
        const ns = this.createEmptyKey();
        const messageBuffer = {
            ne,
            ns,
            ciphertext
        };
        const { cs1 , cs2  } = this.split(hs.ss);
        return {
            messageBuffer,
            cs1,
            cs2,
            h: hs.ss.h
        };
    }
    readMessageA(hs, message) {
        if (utils_1.isValidPublicKey(message.ne)) hs.re = message.ne;
        this.mixHash(hs.ss, hs.re);
        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));
        const { plaintext: ns , valid: valid1  } = this.decryptAndHash(hs.ss, message.ns);
        if (valid1 && ns.length === 32 && utils_1.isValidPublicKey(ns)) hs.rs = ns;
        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));
        const { plaintext , valid: valid2  } = this.decryptAndHash(hs.ss, message.ciphertext);
        return {
            plaintext,
            valid: valid1 && valid2
        };
    }
    readMessageB(hs, message) {
        if (utils_1.isValidPublicKey(message.ne)) hs.re = message.ne;
        this.mixHash(hs.ss, hs.re);
        if (!hs.e) throw new Error("Handshake state should contain ephemeral key by now.");
        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));
        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));
        const { plaintext , valid  } = this.decryptAndHash(hs.ss, message.ciphertext);
        const { cs1 , cs2  } = this.split(hs.ss);
        return {
            h: hs.ss.h,
            valid,
            plaintext,
            cs1,
            cs2
        };
    }
    initializeInitiator(prologue, s, rs, psk) {
        const name = "Noise_IK_25519_ChaChaPoly_SHA256";
        const ss = this.initializeSymmetric(name);
        this.mixHash(ss, prologue);
        this.mixHash(ss, rs);
        const re = buffer_1.Buffer.alloc(32);
        return {
            ss,
            s,
            rs,
            re,
            psk
        };
    }
    initializeResponder(prologue, s, rs, psk) {
        const name = "Noise_IK_25519_ChaChaPoly_SHA256";
        const ss = this.initializeSymmetric(name);
        this.mixHash(ss, prologue);
        this.mixHash(ss, s.publicKey);
        const re = buffer_1.Buffer.alloc(32);
        return {
            ss,
            s,
            rs,
            re,
            psk
        };
    }
}
exports.IK = IK;

},{"buffer":"fCgem","../utils":"1bkCP","./abstract-handshake":"665MT"}],"hTF7l":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FailedIKError = void 0;
class FailedIKError extends Error {
    constructor(initialMsg, message){
        super(message);
        this.initialMsg = initialMsg;
        this.name = "FailedIKhandshake";
    }
}
exports.FailedIKError = FailedIKError;

},{}],"7ICRn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.XXFallbackHandshake = void 0;
const buffer_1 = require("buffer");
const handshake_xx_1 = require("./handshake-xx");
const utils_1 = require("./utils");
const logger_1 = require("./logger");
const encoder_1 = require("./encoder");
class XXFallbackHandshake extends handshake_xx_1.XXHandshake {
    constructor(isInitiator, payload, prologue, staticKeypair, connection, initialMsg, remotePeer, ephemeralKeys, handshake){
        super(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake);
        if (ephemeralKeys) this.ephemeralKeys = ephemeralKeys;
        this.initialMsg = initialMsg;
    }
    // stage 0
    // eslint-disable-next-line require-await
    async propose() {
        if (this.isInitiator) {
            this.xx.sendMessage(this.session, buffer_1.Buffer.alloc(0), this.ephemeralKeys);
            logger_1.logger("XX Fallback Stage 0 - Initialized state as the first message was sent by initiator.");
            logger_1.logLocalEphemeralKeys(this.session.hs.e);
        } else {
            logger_1.logger("XX Fallback Stage 0 - Responder decoding initial msg from IK.");
            const receivedMessageBuffer = encoder_1.decode0(this.initialMsg);
            const { valid  } = this.xx.recvMessage(this.session, {
                ne: receivedMessageBuffer.ne,
                ns: buffer_1.Buffer.alloc(0),
                ciphertext: buffer_1.Buffer.alloc(0)
            });
            if (!valid) throw new Error("xx fallback stage 0 decryption validation fail");
            logger_1.logger("XX Fallback Stage 0 - Responder used received message from IK.");
            logger_1.logRemoteEphemeralKey(this.session.hs.re);
        }
    }
    // stage 1
    async exchange() {
        if (this.isInitiator) {
            const receivedMessageBuffer = encoder_1.decode1(this.initialMsg);
            const { plaintext , valid  } = this.xx.recvMessage(this.session, receivedMessageBuffer);
            if (!valid) throw new Error("xx fallback stage 1 decryption validation fail");
            logger_1.logger("XX Fallback Stage 1 - Initiator used received message from IK.");
            logger_1.logRemoteEphemeralKey(this.session.hs.re);
            logger_1.logRemoteStaticKey(this.session.hs.rs);
            logger_1.logger("Initiator going to check remote's signature...");
            try {
                const decodedPayload = await utils_1.decodePayload(plaintext);
                this.remotePeer = this.remotePeer || await utils_1.getPeerIdFromPayload(decodedPayload);
                await utils_1.verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);
                this.setRemoteEarlyData(decodedPayload.data);
            } catch (e) {
                const err = e;
                throw new Error(`Error occurred while verifying signed payload from responder: ${err.message}`);
            }
            logger_1.logger("All good with the signature!");
        } else {
            logger_1.logger("XX Fallback Stage 1 - Responder start");
            await super.exchange();
            logger_1.logger("XX Fallback Stage 1 - Responder end");
        }
    }
}
exports.XXFallbackHandshake = XXFallbackHandshake;

},{"buffer":"fCgem","./handshake-xx":"82hPM","./utils":"1bkCP","./logger":"2se0g","./encoder":"9nJEO"}],"4xDvP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decryptStream = exports.encryptStream = void 0;
const buffer_1 = require("buffer");
const constants_1 = require("./constants");
// Returns generator that encrypts payload from the user
function encryptStream(handshake) {
    return async function*(source) {
        for await (const chunk of source){
            const chunkBuffer = buffer_1.Buffer.from(chunk.buffer, chunk.byteOffset, chunk.length);
            for(let i = 0; i < chunkBuffer.length; i += constants_1.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG){
                let end = i + constants_1.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;
                if (end > chunkBuffer.length) end = chunkBuffer.length;
                const data = handshake.encrypt(chunkBuffer.slice(i, end), handshake.session);
                yield data;
            }
        }
    };
}
exports.encryptStream = encryptStream;
// Decrypt received payload to the user
function decryptStream(handshake) {
    return async function*(source) {
        for await (const chunk of source){
            const chunkBuffer = buffer_1.Buffer.from(chunk.buffer, chunk.byteOffset, chunk.length);
            for(let i = 0; i < chunkBuffer.length; i += constants_1.NOISE_MSG_MAX_LENGTH_BYTES){
                let end = i + constants_1.NOISE_MSG_MAX_LENGTH_BYTES;
                if (end > chunkBuffer.length) end = chunkBuffer.length;
                const chunk = chunkBuffer.slice(i, end);
                const { plaintext: decrypted , valid  } = await handshake.decrypt(chunk, handshake.session);
                if (!valid) throw new Error("Failed to validate decrypted chunk");
                yield decrypted;
            }
        }
    };
}
exports.decryptStream = decryptStream;

},{"buffer":"fCgem","./constants":"hp99V"}],"3iLXr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KeyCache = void 0;
/**
 * Storage for static keys of previously connected peers.
 */ class Keycache {
    constructor(){
        this.storage = new Map();
    }
    store(peerId, key) {
        this.storage.set(peerId.id, key);
    }
    load(peerId) {
        var _a;
        if (!peerId) return null;
        return (_a = this.storage.get(peerId.id)) !== null && _a !== void 0 ? _a : null;
    }
    resetStorage() {
        this.storage.clear();
    }
}
const KeyCache = new Keycache();
exports.KeyCache = KeyCache;

},{}],"en4he":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// From https://gist.github.com/skratchdot/e095036fad80597f1c1a
parcelHelpers.export(exports, "array2str", ()=>array2str);
parcelHelpers.export(exports, "str2array", ()=>str2array);
function array2str(uint8buf) {
    let buf = new ArrayBuffer(uint8buf.length);
    let bufView = new Uint16Array(buf);
    let count = 0;
    for(let i = 0; i < bufView.length; i++)bufView[i] = uint8buf[count++] + (uint8buf[count++] << 8);
    return String.fromCharCode.apply(null, bufView);
}
function str2array(str) {
    let buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char
    let bufView = new Uint16Array(buf);
    for(var i = 0, strLen = str.length; i < strLen; i++)bufView[i] = str.charCodeAt(i);
    return new Uint8Array(bufView.buffer, bufView.byteOffset, bufView.byteLength);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"laSf9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Vue = exports.Base = exports.VModel = exports.Emit = exports.Inject = exports.Prop = exports.Watch = exports.Ref = exports.ComponentBase = exports.Component = void 0;
var component_1 = require("./component");
Object.defineProperty(exports, "Component", {
    enumerable: true,
    get: function() {
        return component_1.Component;
    }
});
Object.defineProperty(exports, "ComponentBase", {
    enumerable: true,
    get: function() {
        return component_1.ComponentBase;
    }
});
var ref_1 = require("./option/ref");
Object.defineProperty(exports, "Ref", {
    enumerable: true,
    get: function() {
        return ref_1.decorator;
    }
});
var watch_1 = require("./option/watch");
Object.defineProperty(exports, "Watch", {
    enumerable: true,
    get: function() {
        return watch_1.decorator;
    }
});
var props_1 = require("./option/props");
Object.defineProperty(exports, "Prop", {
    enumerable: true,
    get: function() {
        return props_1.decorator;
    }
});
var inject_1 = require("./option/inject");
Object.defineProperty(exports, "Inject", {
    enumerable: true,
    get: function() {
        return inject_1.decorator;
    }
});
var emit_1 = require("./option/emit");
Object.defineProperty(exports, "Emit", {
    enumerable: true,
    get: function() {
        return emit_1.decorator;
    }
});
var vmodel_1 = require("./option/vmodel");
Object.defineProperty(exports, "VModel", {
    enumerable: true,
    get: function() {
        return vmodel_1.decorator;
    }
});
const IdentifySymbol = Symbol("vue-facing-decorator-identify");
exports.Base = class {
};
exports.Vue = exports.Base;

},{"./component":"72Kb6","./option/ref":"1VWwX","./option/watch":"oQ1Pm","./option/props":"ibkFs","./option/inject":"5sPFg","./option/emit":"j4GDa","./option/vmodel":"3yJ0v"}],"72Kb6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Component = exports.ComponentBase = void 0;
const vue_1 = require("vue");
const utils_1 = require("./utils");
const computed_1 = require("./option/computed");
const data_1 = require("./option/data");
const methodsAndLifecycle_1 = require("./option/methodsAndLifecycle");
const ref_1 = require("./option/ref");
const watch_1 = require("./option/watch");
const props_1 = require("./option/props");
const inject_1 = require("./option/inject");
const emit_1 = require("./option/emit");
const vmodel_1 = require("./option/vmodel");
function ComponentOption(cons, extend) {
    const optionBuilder1 = {};
    (0, vmodel_1.build)(cons, optionBuilder1);
    (0, computed_1.build)(cons, optionBuilder1);
    (0, watch_1.build)(cons, optionBuilder1);
    (0, props_1.build)(cons, optionBuilder1);
    (0, inject_1.build)(cons, optionBuilder1);
    (0, emit_1.build)(cons, optionBuilder1);
    (0, methodsAndLifecycle_1.build)(cons, optionBuilder1);
    (0, ref_1.build)(cons, optionBuilder1);
    const raw = Object.assign(Object.assign({
        data () {
            var _a;
            const optionBuilder = {};
            (0, data_1.build)(cons, optionBuilder);
            return (_a = optionBuilder.data) !== null && _a !== void 0 ? _a : {};
        },
        methods: optionBuilder1.methods,
        computed: optionBuilder1.computed,
        watch: optionBuilder1.watch,
        props: optionBuilder1.props,
        inject: optionBuilder1.inject
    }, optionBuilder1.lifecycle), {
        extends: extend
    });
    return raw;
}
function buildComponent(cons, arg, extend) {
    let option1 = ComponentOption(cons, extend);
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    Object.keys(arg).reduce((option, name)=>{
        if ([
            "options",
            "modifier",
            "emits"
        ].includes(name)) return option;
        option[name] = arg[name];
        return option;
    }, option1);
    let emits = Array.from(slot.obtainMap("emits").keys());
    if (Array.isArray(arg.emits)) emits = Array.from(new Set([
        ...emits,
        ...arg.emits
    ]));
    option1.emits = emits;
    if (arg.options) Object.assign(option1, arg.options);
    if (arg.modifier) arg.modifier(option1);
    return (0, vue_1.defineComponent)(option1);
}
function build(cons, option) {
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    slot.inComponent = true;
    const superSlot = (0, utils_1.getSuperSlot)(cons.prototype);
    if (superSlot) {
        if (!superSlot.inComponent) throw "Class should be decorated by Component or ComponentBase: " + slot.master;
        if (superSlot.cachedVueComponent === null) throw "Component decorator 1";
    }
    const component = buildComponent(cons, option, superSlot === null ? undefined : superSlot.cachedVueComponent);
    slot.cachedVueComponent = component;
}
function _Component(arg, cb) {
    if (typeof arg === "function") return cb(arg, {});
    return function(cons) {
        return cb(cons, arg);
    };
}
function ComponentBase(arg) {
    return _Component(arg, function(cons, option) {
        build(cons, option);
        return cons;
    });
}
exports.ComponentBase = ComponentBase;
function Component(arg) {
    return _Component(arg, function(cons, option) {
        build(cons, option);
        // const slot = getSlot(cons.prototype)!
        // Object.defineProperty(cons, '__vccOpts', {
        //     value: slot.cachedVueComponent
        // })
        // console.log('kkkk', '__vccOpts' in cons, cons)
        // return cons
        return (0, utils_1.obtainSlot)(cons.prototype).cachedVueComponent;
    });
}
exports.Component = Component;

},{"vue":"gzxs9","./utils":"7doQI","./option/computed":"6eFo6","./option/data":"eeB0t","./option/methodsAndLifecycle":"6sVn9","./option/ref":"1VWwX","./option/watch":"oQ1Pm","./option/props":"ibkFs","./option/inject":"5sPFg","./option/emit":"j4GDa","./option/vmodel":"3yJ0v"}],"7doQI":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.optoinNullableMemberDecorator = exports.getValidNames = exports.excludeNames = exports.getSuperSlot = exports.toComponentReverse = exports.makeObject = exports.obtainSlot = exports.getSlot = exports.makeSlot = void 0;
const index_1 = require("./index");
const SlotSymbol = Symbol("vue-facing-decorator-slot");
class Slot {
    constructor(master){
        this.names = new Map;
        this.inComponent = false;
        this.cachedVueComponent = null;
        this.master = master;
    }
    obtainMap(name) {
        let map = this.names.get(name);
        if (!map) {
            map = new Map;
            this.names.set(name, map);
        }
        return map;
    }
}
function makeSlot(obj) {
    if (getSlot(obj)) throw "";
    const slot = new Slot(obj);
    Object.defineProperty(obj, SlotSymbol, {
        enumerable: false,
        value: slot
    });
    return slot;
}
exports.makeSlot = makeSlot;
function getSlot(obj) {
    var _a;
    return (_a = Object.getOwnPropertyDescriptor(obj, SlotSymbol)) === null || _a === void 0 ? void 0 : _a.value;
}
exports.getSlot = getSlot;
function obtainSlot(obj) {
    const slot = getSlot(obj);
    if (slot) return slot;
    return makeSlot(obj);
}
exports.obtainSlot = obtainSlot;
function makeObject(names, obj) {
    return names.reduce((pv, cv)=>{
        pv[cv] = obj[cv];
        return pv;
    }, {});
}
exports.makeObject = makeObject;
// export function toBaseReverse(obj: any) {
//     const arr: any[] = []
//     let curr = obj
//     while (curr.constructor !== Base) {
//         arr.unshift(curr)
//         curr = Object.getPrototypeOf(curr)
//     }
//     return arr
// }
function toComponentReverse(obj) {
    const arr = [];
    let curr = obj;
    do {
        arr.unshift(curr);
        curr = Object.getPrototypeOf(curr);
    }while (curr.constructor !== index_1.Base && !getSlot(curr));
    return arr;
}
exports.toComponentReverse = toComponentReverse;
function getSuperSlot(obj) {
    let curr = Object.getPrototypeOf(obj);
    while(curr.constructor !== index_1.Base){
        const slot = getSlot(curr);
        if (slot) return slot;
        curr = Object.getPrototypeOf(curr);
    }
    return null;
}
exports.getSuperSlot = getSuperSlot;
// export function extendSlotPath(obj: any): {
//     constructor: any
// }[] {
//     const arr: any[] = []
//     let curr = obj
//     while (curr.constructor !== Base) {
//         if (getSlot(curr)) {
//             arr.push(curr)
//         }
//         curr = Object.getPrototypeOf(curr)
//     }
//     return arr
// }
function excludeNames(names, slot) {
    return names.filter((name)=>{
        for (const mapName of slot.names.keys()){
            if (mapName === "watch") continue;
            const map = slot.names.get(mapName);
            if (map.has(name)) return false;
        }
        return true;
    });
}
exports.excludeNames = excludeNames;
function getValidNames(obj, filter) {
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    return Object.keys(descriptors).filter((name)=>filter(descriptors[name], name));
}
exports.getValidNames = getValidNames;
function optoinNullableMemberDecorator(handler) {
    function decorator(optionOrProto, name1) {
        if (name1) handler(optionOrProto, name1);
        else return function(proto, name) {
            handler(proto, name, optionOrProto);
        };
    }
    return decorator;
}
exports.optoinNullableMemberDecorator = optoinNullableMemberDecorator;

},{"./index":"laSf9"}],"6eFo6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = void 0;
const utils_1 = require("../utils");
function build(cons, optionBuilder) {
    var _a;
    (_a = optionBuilder.computed) !== null && _a !== void 0 ? _a : optionBuilder.computed = {};
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    let map = slot.obtainMap("computed");
    const protoArr = (0, utils_1.toComponentReverse)(cons.prototype);
    protoArr.forEach((proto)=>{
        (0, utils_1.getValidNames)(proto, (des)=>{
            return typeof des.get === "function";
        }).forEach((name)=>{
            map.set(name, true);
            optionBuilder.computed[name] = Object.getOwnPropertyDescriptor(proto, name).get;
        });
    });
}
exports.build = build;

},{"../utils":"7doQI"}],"eeB0t":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = void 0;
const utils_1 = require("../utils");
const utils_2 = require("../utils");
function build(cons, optionBuilder) {
    var _a;
    (_a = optionBuilder.data) !== null && _a !== void 0 ? _a : optionBuilder.data = {};
    const sample = new cons;
    let names = (0, utils_2.getValidNames)(sample, (des)=>{
        return !!des.enumerable;
    });
    const slot = (0, utils_2.obtainSlot)(cons.prototype);
    names = (0, utils_2.excludeNames)(names, slot);
    Object.assign(optionBuilder.data, (0, utils_1.makeObject)(names, sample));
}
exports.build = build;

},{"../utils":"7doQI"}],"6sVn9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = exports.LifecycleNames = void 0;
const utils_1 = require("../utils");
const utils_2 = require("../utils");
exports.LifecycleNames = [
    "beforeCreate",
    "created",
    "beforeMount",
    "mounted",
    "beforeUpdate",
    "updated",
    "activated",
    "deactivated",
    "beforeDestroy",
    "beforeUnmount",
    "destroyed",
    "unmounted",
    "renderTracked",
    "renderTriggered",
    "errorCaptured",
    "serverPrefetch"
];
function build(cons, optionBuilder) {
    var _a, _b;
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    const protoArr = (0, utils_2.toComponentReverse)(cons.prototype);
    (_a = optionBuilder.lifecycle) !== null && _a !== void 0 ? _a : optionBuilder.lifecycle = {};
    (_b = optionBuilder.methods) !== null && _b !== void 0 ? _b : optionBuilder.methods = {};
    const LifecycleFunctions = {};
    const MethodFunctions = {};
    protoArr.forEach((proto)=>{
        (0, utils_2.excludeNames)((0, utils_2.getValidNames)(proto, (des, name)=>{
            if (name === "constructor") return false;
            if (typeof des.value === "function") return true;
            return false;
        }), slot).forEach((name)=>{
            if (exports.LifecycleNames.includes(name)) LifecycleFunctions[name] = proto[name];
            else MethodFunctions[name] = proto[name];
        });
    });
    Object.assign(optionBuilder.methods, MethodFunctions);
    const bccbs = optionBuilder.beforeCreateCallbacks;
    if (bccbs && bccbs.length > 0) {
        const oldBc = LifecycleFunctions["beforeCreate"];
        LifecycleFunctions["beforeCreate"] = function() {
            bccbs.forEach((bccb)=>bccb.apply(this, arguments));
            if (oldBc) oldBc.apply(this, arguments);
        };
    }
    Object.assign(optionBuilder.lifecycle, LifecycleFunctions);
}
exports.build = build;

},{"../utils":"7doQI"}],"1VWwX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = exports.decorator = void 0;
const utils_1 = require("../utils");
exports.decorator = (0, utils_1.optoinNullableMemberDecorator)(function(proto, name, option) {
    const slot = (0, utils_1.obtainSlot)(proto);
    let map = slot.obtainMap("ref");
    map.set(name, true);
});
function build(cons, optionBuilder) {
    var _a;
    (_a = optionBuilder.computed) !== null && _a !== void 0 ? _a : optionBuilder.computed = {};
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    const names = slot.obtainMap("ref");
    if (names) names.forEach((value, name)=>{
        optionBuilder.computed[name] = function() {
            return this.$refs[name];
        };
    });
}
exports.build = build;

},{"../utils":"7doQI"}],"oQ1Pm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = exports.decorator = void 0;
const utils_1 = require("../utils");
function decorator(key, option) {
    return function(proto, name) {
        const slot = (0, utils_1.obtainSlot)(proto);
        let map = slot.obtainMap("watch");
        const opt = Object.assign({}, option !== null && option !== void 0 ? option : {}, {
            key: key,
            handler: proto[name]
        });
        map.set(name, opt);
    };
}
exports.decorator = decorator;
function build(cons, optionBuilder) {
    var _a;
    (_a = optionBuilder.watch) !== null && _a !== void 0 ? _a : optionBuilder.watch = {};
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    const names = slot.obtainMap("watch");
    if (names) names.forEach((value)=>{
        optionBuilder.watch[value.key] = value;
    });
}
exports.build = build;

},{"../utils":"7doQI"}],"ibkFs":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = exports.decorator = void 0;
const utils_1 = require("../utils");
exports.decorator = (0, utils_1.optoinNullableMemberDecorator)(function(proto, name, option) {
    const slot = (0, utils_1.obtainSlot)(proto);
    let map = slot.obtainMap("props");
    const opt = Object.assign({}, option !== null && option !== void 0 ? option : {});
    map.set(name, opt);
});
function build(cons, optionBuilder) {
    var _a;
    (_a = optionBuilder.props) !== null && _a !== void 0 ? _a : optionBuilder.props = {};
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    const names = slot.obtainMap("props");
    if (names) names.forEach((value, name)=>{
        optionBuilder.props[name] = value;
    });
}
exports.build = build;

},{"../utils":"7doQI"}],"5sPFg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = exports.decorator = void 0;
const utils_1 = require("../utils");
exports.decorator = (0, utils_1.optoinNullableMemberDecorator)(function(proto, name, option) {
    const slot = (0, utils_1.obtainSlot)(proto);
    let map = slot.obtainMap("inject");
    const opt = Object.assign({}, option !== null && option !== void 0 ? option : {});
    map.set(name, opt);
});
function build(cons, optionBuilder) {
    var _a;
    (_a = optionBuilder.inject) !== null && _a !== void 0 ? _a : optionBuilder.inject = {};
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    const names = slot.obtainMap("inject");
    if (names) names.forEach((value, name)=>{
        optionBuilder.inject[name] = value;
    });
}
exports.build = build;

},{"../utils":"7doQI"}],"j4GDa":[function(require,module,exports) {
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = exports.decorator = void 0;
const utils_1 = require("../utils");
exports.decorator = (0, utils_1.optoinNullableMemberDecorator)(function(proto, name, key) {
    const slot = (0, utils_1.obtainSlot)(proto);
    let map = slot.obtainMap("emit");
    map.set(name, typeof key === "undefined" ? null : key);
});
function build(cons, optionBuilder) {
    var _a;
    (_a = optionBuilder.methods) !== null && _a !== void 0 ? _a : optionBuilder.methods = {};
    const proto = cons.prototype;
    const slot = (0, utils_1.obtainSlot)(proto);
    const names = slot.obtainMap("emit");
    const emits = slot.obtainMap("emits");
    if (names) names.forEach((value, key)=>{
        const eventName = value === null ? key : value;
        emits.set(eventName, true);
        optionBuilder.methods[key] = function() {
            return __awaiter(this, arguments, void 0, function*() {
                const ret = proto[key].apply(this, arguments);
                if (ret instanceof Promise) {
                    const proRet = yield ret;
                    this.$emit(eventName, proRet);
                } else this.$emit(eventName, ret);
            });
        };
    });
}
exports.build = build;

},{"../utils":"7doQI"}],"3yJ0v":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = exports.decorator = void 0;
const utils_1 = require("../utils");
const props_1 = require("./props");
exports.decorator = (0, utils_1.optoinNullableMemberDecorator)(function(proto, name, option) {
    var _a;
    option !== null && option !== void 0 ? option : option = {};
    const slot = (0, utils_1.obtainSlot)(proto);
    let vmodelName = "modelValue";
    const propsConfig = Object.assign({}, option);
    if (propsConfig) {
        vmodelName = (_a = propsConfig.name) !== null && _a !== void 0 ? _a : vmodelName;
        delete propsConfig.name;
    }
    (0, props_1.decorator)(propsConfig)(proto, vmodelName);
    let map = slot.obtainMap("v-model");
    map.set(name, option);
});
function build(cons, optionBuilder) {
    var _a1;
    (_a1 = optionBuilder.computed) !== null && _a1 !== void 0 ? _a1 : optionBuilder.computed = {};
    const slot = (0, utils_1.obtainSlot)(cons.prototype);
    const names = slot.obtainMap("v-model");
    if (names && names.size > 0) names.forEach((value, name)=>{
        var _a;
        let vmodelName = (_a = value && value.name) !== null && _a !== void 0 ? _a : "modelValue";
        optionBuilder.computed[name] = {
            get: function() {
                return this[vmodelName];
            },
            set: function(val) {
                this.$emit(`update:${vmodelName}`, val);
            }
        };
    });
}
exports.build = build;

},{"../utils":"7doQI","./props":"ibkFs"}],"evi43":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = /*#__PURE__*/ (0, _vue.createTextVNode)(" Other peer ID: ");
const _hoisted_2 = {
    key: 0
};
const _hoisted_3 = {
    key: 1
};
const _hoisted_4 = {
    key: 2
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", null, [
        (0, _vue.createElementVNode)("p", null, " Your peer ID: " + (0, _vue.toDisplayString)(_ctx.myPeerId), 1 /* TEXT */ ),
        (0, _vue.createElementVNode)("p", null, [
            _hoisted_1,
            (0, _vue.withDirectives)((0, _vue.createElementVNode)("input", {
                type: "text",
                style: {
                    "width": "420px"
                },
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event)=>_ctx.otherPeerId = $event)
            }, null, 512 /* NEED_PATCH */ ), [
                [
                    (0, _vue.vModelText),
                    _ctx.otherPeerId
                ]
            ]),
            (0, _vue.createElementVNode)("button", {
                onClick: _cache[1] || (_cache[1] = (...args)=>_ctx.findOtherPeer && _ctx.findOtherPeer(...args))
            }, " Find ")
        ]),
        (0, _vue.createCommentVNode)('\n    <p v-for="(multiaddr, idx) in otherPeerMultiaddrs" :key="\'ma_\' + idx">\n      Other peer multiaddr: {{ multiaddr.toString() }}\n    </p>\n    <p v-for="(protocol, idx) in otherPeerProtocols" :key="\'p_\' + idx">\n      Other peer protocol: {{ protocol }}\n    </p>\n    '),
        _ctx.otherPeerMultiaddrs.length > 0 && _ctx.otherPeerProtocols.length > 0 ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_2, [
            (0, _vue.createCommentVNode)("\n      <p>\n       Other peer multiaddr: {{ otherPeerMultiaddr }}\n      </p> "),
            (0, _vue.createElementVNode)("p", null, [
                (0, _vue.createTextVNode)(" Other peer protocol: " + (0, _vue.toDisplayString)(_ctx.otherPeerProtocol) + " ", 1 /* TEXT */ ),
                (0, _vue.createElementVNode)("button", {
                    onClick: _cache[2] || (_cache[2] = (...args)=>_ctx.dialProtocol && _ctx.dialProtocol(...args))
                }, " Dial ")
            ])
        ])) : (0, _vue.createCommentVNode)("v-if", true),
        _ctx.remotePeerId ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("p", _hoisted_3, " Remote peer connected: " + (0, _vue.toDisplayString)(_ctx.remotePeerId.toString()), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true),
        ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(_ctx.messages, (msg, idx)=>{
            return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("p", {
                key: "msg_" + idx
            }, (0, _vue.toDisplayString)(msg), 1 /* TEXT */ );
        }), 128 /* KEYED_FRAGMENT */ )),
        _ctx.chatQueue ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_4, [
            (0, _vue.withDirectives)((0, _vue.createElementVNode)("input", {
                type: "text",
                style: {
                    "width": "600px"
                },
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event)=>_ctx.chatMessage = $event)
            }, null, 512 /* NEED_PATCH */ ), [
                [
                    (0, _vue.vModelText),
                    _ctx.chatMessage
                ]
            ]),
            (0, _vue.createElementVNode)("button", {
                onClick: _cache[4] || (_cache[4] = (...args)=>_ctx.sendMessage && _ctx.sendMessage(...args))
            }, " Send message ")
        ])) : (0, _vue.createCommentVNode)("v-if", true)
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("db26cd-hmr", render);
});

},{"vue":"gzxs9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h0MjM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["ShInH","8lqZg"], "8lqZg", "parcelRequire8d8d")

//# sourceMappingURL=index.975ef6c8.js.map
